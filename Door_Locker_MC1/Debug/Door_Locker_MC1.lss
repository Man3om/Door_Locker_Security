
Door_Locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  000041c4  00004258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800108  00800108  00004300  2**0
                  ALLOC
  3 .stab         000034bc  00000000  00000000  00004300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000111e  00000000  00000000  000077bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000088da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ac0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bd0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cc94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ce14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d0d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <__vector_7>
      20:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__vector_8>
      24:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 31       	cpi	r26, 0x19	; 25
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 0a 	call	0x1564	; 0x1564 <main>
      8a:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 20 	jmp	0x40d8	; 0x40d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ef       	ldi	r22, 0xF2	; 242
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer>:

/*********************************************************************************
 *                            Users Function                                  *
 ********************************************************************************/
void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     ca6:	80 91 08 01 	lds	r24, 0x0108
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 08 01 	sts	0x0108, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <delay>:
 * Description: Delay Function using Timer 1
 * Input: Number of Seconds
 * Return: Void
 */
void delay(uint8 second)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	2c 97       	sbiw	r28, 0x0c	; 12
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	8f 83       	std	Y+7, r24	; 0x07
	/* Configure Timer With Desired Specifications */
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	99 87       	std	Y+9, r25	; 0x09
     cd2:	88 87       	std	Y+8, r24	; 0x08
     cd4:	ea ef       	ldi	r30, 0xFA	; 250
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	fb 87       	std	Y+11, r31	; 0x0b
     cda:	ea 87       	std	Y+10, r30	; 0x0a
     cdc:	f6 e0       	ldi	r31, 0x06	; 6
     cde:	fc 87       	std	Y+12, r31	; 0x0c
     ce0:	ea 85       	ldd	r30, Y+10	; 0x0a
     ce2:	fb 85       	ldd	r31, Y+11	; 0x0b
     ce4:	00 80       	ld	r0, Z
     ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	9b 87       	std	Y+11, r25	; 0x0b
     cee:	8a 87       	std	Y+10, r24	; 0x0a
     cf0:	e8 85       	ldd	r30, Y+8	; 0x08
     cf2:	f9 85       	ldd	r31, Y+9	; 0x09
     cf4:	00 82       	st	Z, r0
     cf6:	88 85       	ldd	r24, Y+8	; 0x08
     cf8:	99 85       	ldd	r25, Y+9	; 0x09
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	99 87       	std	Y+9, r25	; 0x09
     cfe:	88 87       	std	Y+8, r24	; 0x08
     d00:	9c 85       	ldd	r25, Y+12	; 0x0c
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	9c 87       	std	Y+12, r25	; 0x0c
     d06:	ec 85       	ldd	r30, Y+12	; 0x0c
     d08:	ee 23       	and	r30, r30
     d0a:	51 f7       	brne	.-44     	; 0xce0 <delay+0x2a>
	Timer1_init(&t_configure); /* Start Timer */
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <Timer1_init>
	while(g_count != second); /* Waiting */
     d14:	90 91 08 01 	lds	r25, 0x0108
     d18:	8f 81       	ldd	r24, Y+7	; 0x07
     d1a:	98 17       	cp	r25, r24
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <delay+0x5e>
	Timer1_deInit(); /* Stop Timer */
     d1e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <Timer1_deInit>
	g_count = 0 ;
     d22:	10 92 08 01 	sts	0x0108, r1
}
     d26:	2c 96       	adiw	r28, 0x0c	; 12
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <St_Error>:
 * Description: Function To handle Wrong Password
 * Input: Void
 * Return: Void
 */
void St_Error(void)
{
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	cc 54       	subi	r28, 0x4C	; 76
     d46:	d0 40       	sbci	r29, 0x00	; 0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
	count = 0 ;
     d52:	10 92 14 01 	sts	0x0114, r1

	do
	{
		count++;
     d56:	80 91 14 01 	lds	r24, 0x0114
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	80 93 14 01 	sts	0x0114, r24

		LCD_clearScreen();
     d60:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
		LCD_displayString("PLZ Enter Pass:");
     d64:	80 e6       	ldi	r24, 0x60	; 96
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
		LCD_moveCursor(1, 0);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <LCD_moveCursor>

		/* Enter The Password */
		for(i = 0 ; i < 5 ; i++)
     d74:	10 92 16 01 	sts	0x0116, r1
     d78:	c6 c0       	rjmp	.+396    	; 0xf06 <St_Error+0x1ce>
		{
			key = KEYPAD_getPressedKey() ;
     d7a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
     d7e:	80 93 15 01 	sts	0x0115, r24
			pass1[i] = key ;
     d82:	80 91 16 01 	lds	r24, 0x0116
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	20 91 15 01 	lds	r18, 0x0115
     d8e:	fc 01       	movw	r30, r24
     d90:	e7 5f       	subi	r30, 0xF7	; 247
     d92:	fe 4f       	sbci	r31, 0xFE	; 254
     d94:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
     d96:	8a e2       	ldi	r24, 0x2A	; 42
     d98:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_displayCharacter>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e7 5b       	subi	r30, 0xB7	; 183
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	aa ef       	ldi	r26, 0xFA	; 250
     da8:	b3 e4       	ldi	r27, 0x43	; 67
     daa:	80 83       	st	Z, r24
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	a2 83       	std	Z+2, r26	; 0x02
     db0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db2:	8e 01       	movw	r16, r28
     db4:	0b 5b       	subi	r16, 0xBB	; 187
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	fe 01       	movw	r30, r28
     dba:	e7 5b       	subi	r30, 0xB7	; 183
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a ef       	ldi	r20, 0xFA	; 250
     dcc:	54 e4       	ldi	r21, 0x44	; 68
     dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	f8 01       	movw	r30, r16
     dd8:	80 83       	st	Z, r24
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	a2 83       	std	Z+2, r26	; 0x02
     dde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     de0:	fe 01       	movw	r30, r28
     de2:	eb 5b       	subi	r30, 0xBB	; 187
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	44 f4       	brge	.+16     	; 0xe0e <St_Error+0xd6>
		__ticks = 1;
     dfe:	fe 01       	movw	r30, r28
     e00:	ed 5b       	subi	r30, 0xBD	; 189
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
     e0c:	64 c0       	rjmp	.+200    	; 0xed6 <St_Error+0x19e>
	else if (__tmp > 65535)
     e0e:	fe 01       	movw	r30, r28
     e10:	eb 5b       	subi	r30, 0xBB	; 187
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	60 81       	ld	r22, Z
     e16:	71 81       	ldd	r23, Z+1	; 0x01
     e18:	82 81       	ldd	r24, Z+2	; 0x02
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	3f ef       	ldi	r19, 0xFF	; 255
     e20:	4f e7       	ldi	r20, 0x7F	; 127
     e22:	57 e4       	ldi	r21, 0x47	; 71
     e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e28:	18 16       	cp	r1, r24
     e2a:	0c f0       	brlt	.+2      	; 0xe2e <St_Error+0xf6>
     e2c:	43 c0       	rjmp	.+134    	; 0xeb4 <St_Error+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2e:	fe 01       	movw	r30, r28
     e30:	e7 5b       	subi	r30, 0xB7	; 183
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e2       	ldi	r20, 0x20	; 32
     e42:	51 e4       	ldi	r21, 0x41	; 65
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8e 01       	movw	r16, r28
     e4e:	0d 5b       	subi	r16, 0xBD	; 189
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	f8 01       	movw	r30, r16
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
     e64:	1f c0       	rjmp	.+62     	; 0xea4 <St_Error+0x16c>
     e66:	fe 01       	movw	r30, r28
     e68:	ef 5b       	subi	r30, 0xBF	; 191
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	88 ec       	ldi	r24, 0xC8	; 200
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e74:	fe 01       	movw	r30, r28
     e76:	ef 5b       	subi	r30, 0xBF	; 191
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <St_Error+0x146>
     e82:	fe 01       	movw	r30, r28
     e84:	ef 5b       	subi	r30, 0xBF	; 191
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8c:	de 01       	movw	r26, r28
     e8e:	ad 5b       	subi	r26, 0xBD	; 189
     e90:	bf 4f       	sbci	r27, 0xFF	; 255
     e92:	fe 01       	movw	r30, r28
     e94:	ed 5b       	subi	r30, 0xBD	; 189
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	9c 93       	st	X, r25
     ea2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	fe 01       	movw	r30, r28
     ea6:	ed 5b       	subi	r30, 0xBD	; 189
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	d1 f6       	brne	.-76     	; 0xe66 <St_Error+0x12e>
     eb2:	24 c0       	rjmp	.+72     	; 0xefc <St_Error+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb4:	8e 01       	movw	r16, r28
     eb6:	0d 5b       	subi	r16, 0xBD	; 189
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	fe 01       	movw	r30, r28
     ebc:	eb 5b       	subi	r30, 0xBB	; 187
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	f8 01       	movw	r30, r16
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
     ed6:	fe 01       	movw	r30, r28
     ed8:	ed 5b       	subi	r30, 0xBD	; 189
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 81       	ld	r24, Z
     ede:	91 81       	ldd	r25, Z+1	; 0x01
     ee0:	fe 01       	movw	r30, r28
     ee2:	ff 96       	adiw	r30, 0x3f	; 63
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
     ee8:	fe 01       	movw	r30, r28
     eea:	ff 96       	adiw	r30, 0x3f	; 63
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <St_Error+0x1b8>
     ef4:	fe 01       	movw	r30, r28
     ef6:	ff 96       	adiw	r30, 0x3f	; 63
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24
		LCD_clearScreen();
		LCD_displayString("PLZ Enter Pass:");
		LCD_moveCursor(1, 0);

		/* Enter The Password */
		for(i = 0 ; i < 5 ; i++)
     efc:	80 91 16 01 	lds	r24, 0x0116
     f00:	8f 5f       	subi	r24, 0xFF	; 255
     f02:	80 93 16 01 	sts	0x0116, r24
     f06:	80 91 16 01 	lds	r24, 0x0116
     f0a:	85 30       	cpi	r24, 0x05	; 5
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <St_Error+0x1d8>
     f0e:	35 cf       	rjmp	.-406    	; 0xd7a <St_Error+0x42>
		}

		/* Waiting User to press The Enter Button */
		do
		{
			key = KEYPAD_getPressedKey() ;
     f10:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
     f14:	80 93 15 01 	sts	0x0115, r24
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	aa ef       	ldi	r26, 0xFA	; 250
     f1e:	b3 e4       	ldi	r27, 0x43	; 67
     f20:	8b af       	std	Y+59, r24	; 0x3b
     f22:	9c af       	std	Y+60, r25	; 0x3c
     f24:	ad af       	std	Y+61, r26	; 0x3d
     f26:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6b ad       	ldd	r22, Y+59	; 0x3b
     f2a:	7c ad       	ldd	r23, Y+60	; 0x3c
     f2c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f2e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a ef       	ldi	r20, 0xFA	; 250
     f36:	54 e4       	ldi	r21, 0x44	; 68
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8f ab       	std	Y+55, r24	; 0x37
     f42:	98 af       	std	Y+56, r25	; 0x38
     f44:	a9 af       	std	Y+57, r26	; 0x39
     f46:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     f48:	6f a9       	ldd	r22, Y+55	; 0x37
     f4a:	78 ad       	ldd	r23, Y+56	; 0x38
     f4c:	89 ad       	ldd	r24, Y+57	; 0x39
     f4e:	9a ad       	ldd	r25, Y+58	; 0x3a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <St_Error+0x232>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9e ab       	std	Y+54, r25	; 0x36
     f66:	8d ab       	std	Y+53, r24	; 0x35
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <St_Error+0x2b0>
	else if (__tmp > 65535)
     f6a:	6f a9       	ldd	r22, Y+55	; 0x37
     f6c:	78 ad       	ldd	r23, Y+56	; 0x38
     f6e:	89 ad       	ldd	r24, Y+57	; 0x39
     f70:	9a ad       	ldd	r25, Y+58	; 0x3a
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <St_Error+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6b ad       	ldd	r22, Y+59	; 0x3b
     f84:	7c ad       	ldd	r23, Y+60	; 0x3c
     f86:	8d ad       	ldd	r24, Y+61	; 0x3d
     f88:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9e ab       	std	Y+54, r25	; 0x36
     fa8:	8d ab       	std	Y+53, r24	; 0x35
     faa:	0f c0       	rjmp	.+30     	; 0xfca <St_Error+0x292>
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c ab       	std	Y+52, r25	; 0x34
     fb2:	8b ab       	std	Y+51, r24	; 0x33
     fb4:	8b a9       	ldd	r24, Y+51	; 0x33
     fb6:	9c a9       	ldd	r25, Y+52	; 0x34
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <St_Error+0x280>
     fbc:	9c ab       	std	Y+52, r25	; 0x34
     fbe:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8d a9       	ldd	r24, Y+53	; 0x35
     fc2:	9e a9       	ldd	r25, Y+54	; 0x36
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9e ab       	std	Y+54, r25	; 0x36
     fc8:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8d a9       	ldd	r24, Y+53	; 0x35
     fcc:	9e a9       	ldd	r25, Y+54	; 0x36
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <St_Error+0x274>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <St_Error+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	6f a9       	ldd	r22, Y+55	; 0x37
     fd6:	78 ad       	ldd	r23, Y+56	; 0x38
     fd8:	89 ad       	ldd	r24, Y+57	; 0x39
     fda:	9a ad       	ldd	r25, Y+58	; 0x3a
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9e ab       	std	Y+54, r25	; 0x36
     fe6:	8d ab       	std	Y+53, r24	; 0x35
     fe8:	8d a9       	ldd	r24, Y+53	; 0x35
     fea:	9e a9       	ldd	r25, Y+54	; 0x36
     fec:	9a ab       	std	Y+50, r25	; 0x32
     fee:	89 ab       	std	Y+49, r24	; 0x31
     ff0:	89 a9       	ldd	r24, Y+49	; 0x31
     ff2:	9a a9       	ldd	r25, Y+50	; 0x32
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <St_Error+0x2bc>
     ff8:	9a ab       	std	Y+50, r25	; 0x32
     ffa:	89 ab       	std	Y+49, r24	; 0x31
			_delay_ms(500);
		} while(key != 13);
     ffc:	80 91 15 01 	lds	r24, 0x0115
    1000:	8d 30       	cpi	r24, 0x0D	; 13
    1002:	09 f0       	breq	.+2      	; 0x1006 <St_Error+0x2ce>
    1004:	85 cf       	rjmp	.-246    	; 0xf10 <St_Error+0x1d8>

		UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */
    1006:	81 e1       	ldi	r24, 0x11	; 17
    1008:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a0 ea       	ldi	r26, 0xA0	; 160
    1012:	b1 e4       	ldi	r27, 0x41	; 65
    1014:	8d a7       	std	Y+45, r24	; 0x2d
    1016:	9e a7       	std	Y+46, r25	; 0x2e
    1018:	af a7       	std	Y+47, r26	; 0x2f
    101a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    101c:	6d a5       	ldd	r22, Y+45	; 0x2d
    101e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1020:	8f a5       	ldd	r24, Y+47	; 0x2f
    1022:	98 a9       	ldd	r25, Y+48	; 0x30
    1024:	2b ea       	ldi	r18, 0xAB	; 171
    1026:	3a ea       	ldi	r19, 0xAA	; 170
    1028:	4a e2       	ldi	r20, 0x2A	; 42
    102a:	50 e4       	ldi	r21, 0x40	; 64
    102c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	89 a7       	std	Y+41, r24	; 0x29
    1036:	9a a7       	std	Y+42, r25	; 0x2a
    1038:	ab a7       	std	Y+43, r26	; 0x2b
    103a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    103c:	69 a5       	ldd	r22, Y+41	; 0x29
    103e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1040:	8b a5       	ldd	r24, Y+43	; 0x2b
    1042:	9c a5       	ldd	r25, Y+44	; 0x2c
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e8       	ldi	r20, 0x80	; 128
    104a:	5f e3       	ldi	r21, 0x3F	; 63
    104c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1050:	88 23       	and	r24, r24
    1052:	1c f4       	brge	.+6      	; 0x105a <St_Error+0x322>
		__ticks = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	88 a7       	std	Y+40, r24	; 0x28
    1058:	91 c0       	rjmp	.+290    	; 0x117c <St_Error+0x444>
	else if (__tmp > 255)
    105a:	69 a5       	ldd	r22, Y+41	; 0x29
    105c:	7a a5       	ldd	r23, Y+42	; 0x2a
    105e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1060:	9c a5       	ldd	r25, Y+44	; 0x2c
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4f e7       	ldi	r20, 0x7F	; 127
    1068:	53 e4       	ldi	r21, 0x43	; 67
    106a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    106e:	18 16       	cp	r1, r24
    1070:	0c f0       	brlt	.+2      	; 0x1074 <St_Error+0x33c>
    1072:	7b c0       	rjmp	.+246    	; 0x116a <St_Error+0x432>
	{
		_delay_ms(__us / 1000.0);
    1074:	6d a5       	ldd	r22, Y+45	; 0x2d
    1076:	7e a5       	ldd	r23, Y+46	; 0x2e
    1078:	8f a5       	ldd	r24, Y+47	; 0x2f
    107a:	98 a9       	ldd	r25, Y+48	; 0x30
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a e7       	ldi	r20, 0x7A	; 122
    1082:	54 e4       	ldi	r21, 0x44	; 68
    1084:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	8c a3       	std	Y+36, r24	; 0x24
    108e:	9d a3       	std	Y+37, r25	; 0x25
    1090:	ae a3       	std	Y+38, r26	; 0x26
    1092:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	6c a1       	ldd	r22, Y+36	; 0x24
    1096:	7d a1       	ldd	r23, Y+37	; 0x25
    1098:	8e a1       	ldd	r24, Y+38	; 0x26
    109a:	9f a1       	ldd	r25, Y+39	; 0x27
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a ef       	ldi	r20, 0xFA	; 250
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	88 a3       	std	Y+32, r24	; 0x20
    10ae:	99 a3       	std	Y+33, r25	; 0x21
    10b0:	aa a3       	std	Y+34, r26	; 0x22
    10b2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    10b4:	68 a1       	ldd	r22, Y+32	; 0x20
    10b6:	79 a1       	ldd	r23, Y+33	; 0x21
    10b8:	8a a1       	ldd	r24, Y+34	; 0x22
    10ba:	9b a1       	ldd	r25, Y+35	; 0x23
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <St_Error+0x39e>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9f 8f       	std	Y+31, r25	; 0x1f
    10d2:	8e 8f       	std	Y+30, r24	; 0x1e
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <St_Error+0x41c>
	else if (__tmp > 65535)
    10d6:	68 a1       	ldd	r22, Y+32	; 0x20
    10d8:	79 a1       	ldd	r23, Y+33	; 0x21
    10da:	8a a1       	ldd	r24, Y+34	; 0x22
    10dc:	9b a1       	ldd	r25, Y+35	; 0x23
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <St_Error+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	6c a1       	ldd	r22, Y+36	; 0x24
    10f0:	7d a1       	ldd	r23, Y+37	; 0x25
    10f2:	8e a1       	ldd	r24, Y+38	; 0x26
    10f4:	9f a1       	ldd	r25, Y+39	; 0x27
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9f 8f       	std	Y+31, r25	; 0x1f
    1114:	8e 8f       	std	Y+30, r24	; 0x1e
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <St_Error+0x3fe>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9d 8f       	std	Y+29, r25	; 0x1d
    111e:	8c 8f       	std	Y+28, r24	; 0x1c
    1120:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1122:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <St_Error+0x3ec>
    1128:	9d 8f       	std	Y+29, r25	; 0x1d
    112a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    112e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9f 8f       	std	Y+31, r25	; 0x1f
    1134:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1138:	9f 8d       	ldd	r25, Y+31	; 0x1f
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <St_Error+0x3e0>
    113e:	24 c0       	rjmp	.+72     	; 0x1188 <St_Error+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	68 a1       	ldd	r22, Y+32	; 0x20
    1142:	79 a1       	ldd	r23, Y+33	; 0x21
    1144:	8a a1       	ldd	r24, Y+34	; 0x22
    1146:	9b a1       	ldd	r25, Y+35	; 0x23
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9f 8f       	std	Y+31, r25	; 0x1f
    1152:	8e 8f       	std	Y+30, r24	; 0x1e
    1154:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1156:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1158:	9b 8f       	std	Y+27, r25	; 0x1b
    115a:	8a 8f       	std	Y+26, r24	; 0x1a
    115c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    115e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <St_Error+0x428>
    1164:	9b 8f       	std	Y+27, r25	; 0x1b
    1166:	8a 8f       	std	Y+26, r24	; 0x1a
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <St_Error+0x450>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    116a:	69 a5       	ldd	r22, Y+41	; 0x29
    116c:	7a a5       	ldd	r23, Y+42	; 0x2a
    116e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1170:	9c a5       	ldd	r25, Y+44	; 0x2c
    1172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	88 a7       	std	Y+40, r24	; 0x28
    117c:	88 a5       	ldd	r24, Y+40	; 0x28
    117e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1180:	89 8d       	ldd	r24, Y+25	; 0x19
    1182:	8a 95       	dec	r24
    1184:	f1 f7       	brne	.-4      	; 0x1182 <St_Error+0x44a>
    1186:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(20);

		/* Send Password To 2nd MCU */
		for(i = 0 ; i < 5 ; i++)
    1188:	10 92 16 01 	sts	0x0116, r1
    118c:	cd c0       	rjmp	.+410    	; 0x1328 <St_Error+0x5f0>
		{
			UART_sendByte(pass1[i]);
    118e:	80 91 16 01 	lds	r24, 0x0116
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	fc 01       	movw	r30, r24
    1198:	e7 5f       	subi	r30, 0xF7	; 247
    119a:	fe 4f       	sbci	r31, 0xFE	; 254
    119c:	80 81       	ld	r24, Z
    119e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 ea       	ldi	r26, 0xA0	; 160
    11a8:	b1 e4       	ldi	r27, 0x41	; 65
    11aa:	8d 8b       	std	Y+21, r24	; 0x15
    11ac:	9e 8b       	std	Y+22, r25	; 0x16
    11ae:	af 8b       	std	Y+23, r26	; 0x17
    11b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11b2:	6d 89       	ldd	r22, Y+21	; 0x15
    11b4:	7e 89       	ldd	r23, Y+22	; 0x16
    11b6:	8f 89       	ldd	r24, Y+23	; 0x17
    11b8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ba:	2b ea       	ldi	r18, 0xAB	; 171
    11bc:	3a ea       	ldi	r19, 0xAA	; 170
    11be:	4a e2       	ldi	r20, 0x2A	; 42
    11c0:	50 e4       	ldi	r21, 0x40	; 64
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 8b       	std	Y+17, r24	; 0x11
    11cc:	9a 8b       	std	Y+18, r25	; 0x12
    11ce:	ab 8b       	std	Y+19, r26	; 0x13
    11d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    11d2:	69 89       	ldd	r22, Y+17	; 0x11
    11d4:	7a 89       	ldd	r23, Y+18	; 0x12
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	1c f4       	brge	.+6      	; 0x11f0 <St_Error+0x4b8>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	88 8b       	std	Y+16, r24	; 0x10
    11ee:	91 c0       	rjmp	.+290    	; 0x1312 <St_Error+0x5da>
	else if (__tmp > 255)
    11f0:	69 89       	ldd	r22, Y+17	; 0x11
    11f2:	7a 89       	ldd	r23, Y+18	; 0x12
    11f4:	8b 89       	ldd	r24, Y+19	; 0x13
    11f6:	9c 89       	ldd	r25, Y+20	; 0x14
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4f e7       	ldi	r20, 0x7F	; 127
    11fe:	53 e4       	ldi	r21, 0x43	; 67
    1200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1204:	18 16       	cp	r1, r24
    1206:	0c f0       	brlt	.+2      	; 0x120a <St_Error+0x4d2>
    1208:	7b c0       	rjmp	.+246    	; 0x1300 <St_Error+0x5c8>
	{
		_delay_ms(__us / 1000.0);
    120a:	6d 89       	ldd	r22, Y+21	; 0x15
    120c:	7e 89       	ldd	r23, Y+22	; 0x16
    120e:	8f 89       	ldd	r24, Y+23	; 0x17
    1210:	98 8d       	ldd	r25, Y+24	; 0x18
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	4a e7       	ldi	r20, 0x7A	; 122
    1218:	54 e4       	ldi	r21, 0x44	; 68
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	8c 87       	std	Y+12, r24	; 0x0c
    1224:	9d 87       	std	Y+13, r25	; 0x0d
    1226:	ae 87       	std	Y+14, r26	; 0x0e
    1228:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122a:	6c 85       	ldd	r22, Y+12	; 0x0c
    122c:	7d 85       	ldd	r23, Y+13	; 0x0d
    122e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1230:	9f 85       	ldd	r25, Y+15	; 0x0f
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	4a ef       	ldi	r20, 0xFA	; 250
    1238:	54 e4       	ldi	r21, 0x44	; 68
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	88 87       	std	Y+8, r24	; 0x08
    1244:	99 87       	std	Y+9, r25	; 0x09
    1246:	aa 87       	std	Y+10, r26	; 0x0a
    1248:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    124a:	68 85       	ldd	r22, Y+8	; 0x08
    124c:	79 85       	ldd	r23, Y+9	; 0x09
    124e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1250:	9b 85       	ldd	r25, Y+11	; 0x0b
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    125e:	88 23       	and	r24, r24
    1260:	2c f4       	brge	.+10     	; 0x126c <St_Error+0x534>
		__ticks = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9f 83       	std	Y+7, r25	; 0x07
    1268:	8e 83       	std	Y+6, r24	; 0x06
    126a:	3f c0       	rjmp	.+126    	; 0x12ea <St_Error+0x5b2>
	else if (__tmp > 65535)
    126c:	68 85       	ldd	r22, Y+8	; 0x08
    126e:	79 85       	ldd	r23, Y+9	; 0x09
    1270:	8a 85       	ldd	r24, Y+10	; 0x0a
    1272:	9b 85       	ldd	r25, Y+11	; 0x0b
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1280:	18 16       	cp	r1, r24
    1282:	4c f5       	brge	.+82     	; 0x12d6 <St_Error+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1284:	6c 85       	ldd	r22, Y+12	; 0x0c
    1286:	7d 85       	ldd	r23, Y+13	; 0x0d
    1288:	8e 85       	ldd	r24, Y+14	; 0x0e
    128a:	9f 85       	ldd	r25, Y+15	; 0x0f
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e2       	ldi	r20, 0x20	; 32
    1292:	51 e4       	ldi	r21, 0x41	; 65
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	bc 01       	movw	r22, r24
    129e:	cd 01       	movw	r24, r26
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9f 83       	std	Y+7, r25	; 0x07
    12aa:	8e 83       	std	Y+6, r24	; 0x06
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <St_Error+0x594>
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9d 83       	std	Y+5, r25	; 0x05
    12b4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <St_Error+0x582>
    12be:	9d 83       	std	Y+5, r25	; 0x05
    12c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	9f 81       	ldd	r25, Y+7	; 0x07
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9f 83       	std	Y+7, r25	; 0x07
    12ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12cc:	8e 81       	ldd	r24, Y+6	; 0x06
    12ce:	9f 81       	ldd	r25, Y+7	; 0x07
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	69 f7       	brne	.-38     	; 0x12ae <St_Error+0x576>
    12d4:	24 c0       	rjmp	.+72     	; 0x131e <St_Error+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d6:	68 85       	ldd	r22, Y+8	; 0x08
    12d8:	79 85       	ldd	r23, Y+9	; 0x09
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    12de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	9f 83       	std	Y+7, r25	; 0x07
    12e8:	8e 83       	std	Y+6, r24	; 0x06
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	9b 83       	std	Y+3, r25	; 0x03
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <St_Error+0x5be>
    12fa:	9b 83       	std	Y+3, r25	; 0x03
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <St_Error+0x5e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1300:	69 89       	ldd	r22, Y+17	; 0x11
    1302:	7a 89       	ldd	r23, Y+18	; 0x12
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	88 8b       	std	Y+16, r24	; 0x10
    1312:	88 89       	ldd	r24, Y+16	; 0x10
    1314:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	8a 95       	dec	r24
    131a:	f1 f7       	brne	.-4      	; 0x1318 <St_Error+0x5e0>
    131c:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */

		_delay_us(20);

		/* Send Password To 2nd MCU */
		for(i = 0 ; i < 5 ; i++)
    131e:	80 91 16 01 	lds	r24, 0x0116
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	80 93 16 01 	sts	0x0116, r24
    1328:	80 91 16 01 	lds	r24, 0x0116
    132c:	85 30       	cpi	r24, 0x05	; 5
    132e:	08 f4       	brcc	.+2      	; 0x1332 <St_Error+0x5fa>
    1330:	2e cf       	rjmp	.-420    	; 0x118e <St_Error+0x456>
			UART_sendByte(pass1[i]);

			_delay_us(20);
		}

		status = UART_recieveByte(); /* Waiting Checking Result From 2nd MCU */
    1332:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>
    1336:	80 93 13 01 	sts	0x0113, r24

	}while((count != 2) && (status == ERROR));
    133a:	80 91 14 01 	lds	r24, 0x0114
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	29 f0       	breq	.+10     	; 0x134c <St_Error+0x614>
    1342:	80 91 13 01 	lds	r24, 0x0113
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <St_Error+0x614>
    134a:	05 cd       	rjmp	.-1526   	; 0xd56 <St_Error+0x1e>

	if((count == 2) && (status == ERROR))
    134c:	80 91 14 01 	lds	r24, 0x0114
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	81 f4       	brne	.+32     	; 0x1374 <St_Error+0x63c>
    1354:	80 91 13 01 	lds	r24, 0x0113
    1358:	88 23       	and	r24, r24
    135a:	61 f4       	brne	.+24     	; 0x1374 <St_Error+0x63c>
	{
		UART_sendByte(BUZZER);
    135c:	84 e1       	ldi	r24, 0x14	; 20
    135e:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
		LCD_clearScreen();
    1362:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
		LCD_displayString("System Locked");
    1366:	80 e7       	ldi	r24, 0x70	; 112
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
		delay(60); /* Waiting For 60 Seconds */
    136e:	8c e3       	ldi	r24, 0x3C	; 60
    1370:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>
	}
}
    1374:	c4 5b       	subi	r28, 0xB4	; 180
    1376:	df 4f       	sbci	r29, 0xFF	; 255
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <SendPass>:
 * Input: Array
 * Return: Void
 *
 */
void SendPass(uint8 *pass)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	6a 97       	sbiw	r28, 0x1a	; 26
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	9a 8f       	std	Y+26, r25	; 0x1a
    13a2:	89 8f       	std	Y+25, r24	; 0x19
	for(i = 0 ; i < 5 ; i++)
    13a4:	10 92 16 01 	sts	0x0116, r1
    13a8:	cf c0       	rjmp	.+414    	; 0x1548 <SendPass+0x1bc>
	{
		UART_sendByte(pass[i]);
    13aa:	80 91 16 01 	lds	r24, 0x0116
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	89 8d       	ldd	r24, Y+25	; 0x19
    13b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13b6:	fc 01       	movw	r30, r24
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	80 81       	ld	r24, Z
    13be:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 ea       	ldi	r26, 0xA0	; 160
    13c8:	b1 e4       	ldi	r27, 0x41	; 65
    13ca:	8d 8b       	std	Y+21, r24	; 0x15
    13cc:	9e 8b       	std	Y+22, r25	; 0x16
    13ce:	af 8b       	std	Y+23, r26	; 0x17
    13d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13d2:	6d 89       	ldd	r22, Y+21	; 0x15
    13d4:	7e 89       	ldd	r23, Y+22	; 0x16
    13d6:	8f 89       	ldd	r24, Y+23	; 0x17
    13d8:	98 8d       	ldd	r25, Y+24	; 0x18
    13da:	2b ea       	ldi	r18, 0xAB	; 171
    13dc:	3a ea       	ldi	r19, 0xAA	; 170
    13de:	4a e2       	ldi	r20, 0x2A	; 42
    13e0:	50 e4       	ldi	r21, 0x40	; 64
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	89 8b       	std	Y+17, r24	; 0x11
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	ab 8b       	std	Y+19, r26	; 0x13
    13f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    13f2:	69 89       	ldd	r22, Y+17	; 0x11
    13f4:	7a 89       	ldd	r23, Y+18	; 0x12
    13f6:	8b 89       	ldd	r24, Y+19	; 0x13
    13f8:	9c 89       	ldd	r25, Y+20	; 0x14
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	1c f4       	brge	.+6      	; 0x1410 <SendPass+0x84>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	88 8b       	std	Y+16, r24	; 0x10
    140e:	91 c0       	rjmp	.+290    	; 0x1532 <SendPass+0x1a6>
	else if (__tmp > 255)
    1410:	69 89       	ldd	r22, Y+17	; 0x11
    1412:	7a 89       	ldd	r23, Y+18	; 0x12
    1414:	8b 89       	ldd	r24, Y+19	; 0x13
    1416:	9c 89       	ldd	r25, Y+20	; 0x14
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	4f e7       	ldi	r20, 0x7F	; 127
    141e:	53 e4       	ldi	r21, 0x43	; 67
    1420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1424:	18 16       	cp	r1, r24
    1426:	0c f0       	brlt	.+2      	; 0x142a <SendPass+0x9e>
    1428:	7b c0       	rjmp	.+246    	; 0x1520 <SendPass+0x194>
	{
		_delay_ms(__us / 1000.0);
    142a:	6d 89       	ldd	r22, Y+21	; 0x15
    142c:	7e 89       	ldd	r23, Y+22	; 0x16
    142e:	8f 89       	ldd	r24, Y+23	; 0x17
    1430:	98 8d       	ldd	r25, Y+24	; 0x18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	4a e7       	ldi	r20, 0x7A	; 122
    1438:	54 e4       	ldi	r21, 0x44	; 68
    143a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8c 87       	std	Y+12, r24	; 0x0c
    1444:	9d 87       	std	Y+13, r25	; 0x0d
    1446:	ae 87       	std	Y+14, r26	; 0x0e
    1448:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144a:	6c 85       	ldd	r22, Y+12	; 0x0c
    144c:	7d 85       	ldd	r23, Y+13	; 0x0d
    144e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1450:	9f 85       	ldd	r25, Y+15	; 0x0f
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a ef       	ldi	r20, 0xFA	; 250
    1458:	54 e4       	ldi	r21, 0x44	; 68
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	88 87       	std	Y+8, r24	; 0x08
    1464:	99 87       	std	Y+9, r25	; 0x09
    1466:	aa 87       	std	Y+10, r26	; 0x0a
    1468:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    146a:	68 85       	ldd	r22, Y+8	; 0x08
    146c:	79 85       	ldd	r23, Y+9	; 0x09
    146e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1470:	9b 85       	ldd	r25, Y+11	; 0x0b
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e8       	ldi	r20, 0x80	; 128
    1478:	5f e3       	ldi	r21, 0x3F	; 63
    147a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147e:	88 23       	and	r24, r24
    1480:	2c f4       	brge	.+10     	; 0x148c <SendPass+0x100>
		__ticks = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9f 83       	std	Y+7, r25	; 0x07
    1488:	8e 83       	std	Y+6, r24	; 0x06
    148a:	3f c0       	rjmp	.+126    	; 0x150a <SendPass+0x17e>
	else if (__tmp > 65535)
    148c:	68 85       	ldd	r22, Y+8	; 0x08
    148e:	79 85       	ldd	r23, Y+9	; 0x09
    1490:	8a 85       	ldd	r24, Y+10	; 0x0a
    1492:	9b 85       	ldd	r25, Y+11	; 0x0b
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	3f ef       	ldi	r19, 0xFF	; 255
    1498:	4f e7       	ldi	r20, 0x7F	; 127
    149a:	57 e4       	ldi	r21, 0x47	; 71
    149c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14a0:	18 16       	cp	r1, r24
    14a2:	4c f5       	brge	.+82     	; 0x14f6 <SendPass+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    14a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    14a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    14aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e2       	ldi	r20, 0x20	; 32
    14b2:	51 e4       	ldi	r21, 0x41	; 65
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9f 83       	std	Y+7, r25	; 0x07
    14ca:	8e 83       	std	Y+6, r24	; 0x06
    14cc:	0f c0       	rjmp	.+30     	; 0x14ec <SendPass+0x160>
    14ce:	88 ec       	ldi	r24, 0xC8	; 200
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9d 83       	std	Y+5, r25	; 0x05
    14d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <SendPass+0x14e>
    14de:	9d 83       	std	Y+5, r25	; 0x05
    14e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	9f 81       	ldd	r25, Y+7	; 0x07
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9f 83       	std	Y+7, r25	; 0x07
    14ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ec:	8e 81       	ldd	r24, Y+6	; 0x06
    14ee:	9f 81       	ldd	r25, Y+7	; 0x07
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	69 f7       	brne	.-38     	; 0x14ce <SendPass+0x142>
    14f4:	24 c0       	rjmp	.+72     	; 0x153e <SendPass+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	68 85       	ldd	r22, Y+8	; 0x08
    14f8:	79 85       	ldd	r23, Y+9	; 0x09
    14fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    14fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9f 83       	std	Y+7, r25	; 0x07
    1508:	8e 83       	std	Y+6, r24	; 0x06
    150a:	8e 81       	ldd	r24, Y+6	; 0x06
    150c:	9f 81       	ldd	r25, Y+7	; 0x07
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	9b 81       	ldd	r25, Y+3	; 0x03
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <SendPass+0x18a>
    151a:	9b 83       	std	Y+3, r25	; 0x03
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	0f c0       	rjmp	.+30     	; 0x153e <SendPass+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1520:	69 89       	ldd	r22, Y+17	; 0x11
    1522:	7a 89       	ldd	r23, Y+18	; 0x12
    1524:	8b 89       	ldd	r24, Y+19	; 0x13
    1526:	9c 89       	ldd	r25, Y+20	; 0x14
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	88 8b       	std	Y+16, r24	; 0x10
    1532:	88 89       	ldd	r24, Y+16	; 0x10
    1534:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	8a 95       	dec	r24
    153a:	f1 f7       	brne	.-4      	; 0x1538 <SendPass+0x1ac>
    153c:	89 83       	std	Y+1, r24	; 0x01
 * Return: Void
 *
 */
void SendPass(uint8 *pass)
{
	for(i = 0 ; i < 5 ; i++)
    153e:	80 91 16 01 	lds	r24, 0x0116
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	80 93 16 01 	sts	0x0116, r24
    1548:	80 91 16 01 	lds	r24, 0x0116
    154c:	85 30       	cpi	r24, 0x05	; 5
    154e:	08 f4       	brcc	.+2      	; 0x1552 <SendPass+0x1c6>
    1550:	2c cf       	rjmp	.-424    	; 0x13aa <SendPass+0x1e>
	{
		UART_sendByte(pass[i]);

		_delay_us(20);
	}
}
    1552:	6a 96       	adiw	r28, 0x1a	; 26
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <main>:

/*********************************************************************************
 *                            Application Code                                   *
 ********************************************************************************/
int main(void)
{
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	cb 5b       	subi	r28, 0xBB	; 187
    1572:	d0 40       	sbci	r29, 0x00	; 0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
	uint8 flag = 0 ;
    157e:	fe 01       	movw	r30, r28
    1580:	e1 55       	subi	r30, 0x51	; 81
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	10 82       	st	Z, r1

	SREG |= (1<<7); /* Enable Global Interrupt */
    1586:	af e5       	ldi	r26, 0x5F	; 95
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e5       	ldi	r30, 0x5F	; 95
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24

	/* Configure The UART & Timer1 With Desired Specifications */
	UART_ConfigType u_configure = {BIT8 , Disable , ONE_Stop , 9600};
    1594:	ce 01       	movw	r24, r28
    1596:	80 55       	subi	r24, 0x50	; 80
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	c9 54       	subi	r28, 0x49	; 73
    159c:	df 4f       	sbci	r29, 0xFF	; 255
    159e:	99 83       	std	Y+1, r25	; 0x01
    15a0:	88 83       	st	Y, r24
    15a2:	c7 5b       	subi	r28, 0xB7	; 183
    15a4:	d0 40       	sbci	r29, 0x00	; 0
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	c7 54       	subi	r28, 0x47	; 71
    15ac:	df 4f       	sbci	r29, 0xFF	; 255
    15ae:	99 83       	std	Y+1, r25	; 0x01
    15b0:	88 83       	st	Y, r24
    15b2:	c9 5b       	subi	r28, 0xB9	; 185
    15b4:	d0 40       	sbci	r29, 0x00	; 0
    15b6:	97 e0       	ldi	r25, 0x07	; 7
    15b8:	c5 54       	subi	r28, 0x45	; 69
    15ba:	df 4f       	sbci	r29, 0xFF	; 255
    15bc:	98 83       	st	Y, r25
    15be:	cb 5b       	subi	r28, 0xBB	; 187
    15c0:	d0 40       	sbci	r29, 0x00	; 0
    15c2:	c7 54       	subi	r28, 0x47	; 71
    15c4:	df 4f       	sbci	r29, 0xFF	; 255
    15c6:	e8 81       	ld	r30, Y
    15c8:	f9 81       	ldd	r31, Y+1	; 0x01
    15ca:	c9 5b       	subi	r28, 0xB9	; 185
    15cc:	d0 40       	sbci	r29, 0x00	; 0
    15ce:	00 80       	ld	r0, Z
    15d0:	c7 54       	subi	r28, 0x47	; 71
    15d2:	df 4f       	sbci	r29, 0xFF	; 255
    15d4:	88 81       	ld	r24, Y
    15d6:	99 81       	ldd	r25, Y+1	; 0x01
    15d8:	c9 5b       	subi	r28, 0xB9	; 185
    15da:	d0 40       	sbci	r29, 0x00	; 0
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	c7 54       	subi	r28, 0x47	; 71
    15e0:	df 4f       	sbci	r29, 0xFF	; 255
    15e2:	99 83       	std	Y+1, r25	; 0x01
    15e4:	88 83       	st	Y, r24
    15e6:	c9 5b       	subi	r28, 0xB9	; 185
    15e8:	d0 40       	sbci	r29, 0x00	; 0
    15ea:	c9 54       	subi	r28, 0x49	; 73
    15ec:	df 4f       	sbci	r29, 0xFF	; 255
    15ee:	e8 81       	ld	r30, Y
    15f0:	f9 81       	ldd	r31, Y+1	; 0x01
    15f2:	c7 5b       	subi	r28, 0xB7	; 183
    15f4:	d0 40       	sbci	r29, 0x00	; 0
    15f6:	00 82       	st	Z, r0
    15f8:	c9 54       	subi	r28, 0x49	; 73
    15fa:	df 4f       	sbci	r29, 0xFF	; 255
    15fc:	88 81       	ld	r24, Y
    15fe:	99 81       	ldd	r25, Y+1	; 0x01
    1600:	c7 5b       	subi	r28, 0xB7	; 183
    1602:	d0 40       	sbci	r29, 0x00	; 0
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	c9 54       	subi	r28, 0x49	; 73
    1608:	df 4f       	sbci	r29, 0xFF	; 255
    160a:	99 83       	std	Y+1, r25	; 0x01
    160c:	88 83       	st	Y, r24
    160e:	c7 5b       	subi	r28, 0xB7	; 183
    1610:	d0 40       	sbci	r29, 0x00	; 0
    1612:	c5 54       	subi	r28, 0x45	; 69
    1614:	df 4f       	sbci	r29, 0xFF	; 255
    1616:	98 81       	ld	r25, Y
    1618:	cb 5b       	subi	r28, 0xBB	; 187
    161a:	d0 40       	sbci	r29, 0x00	; 0
    161c:	91 50       	subi	r25, 0x01	; 1
    161e:	c5 54       	subi	r28, 0x45	; 69
    1620:	df 4f       	sbci	r29, 0xFF	; 255
    1622:	98 83       	st	Y, r25
    1624:	cb 5b       	subi	r28, 0xBB	; 187
    1626:	d0 40       	sbci	r29, 0x00	; 0
    1628:	c5 54       	subi	r28, 0x45	; 69
    162a:	df 4f       	sbci	r29, 0xFF	; 255
    162c:	e8 81       	ld	r30, Y
    162e:	cb 5b       	subi	r28, 0xBB	; 187
    1630:	d0 40       	sbci	r29, 0x00	; 0
    1632:	ee 23       	and	r30, r30
    1634:	31 f6       	brne	.-116    	; 0x15c2 <main+0x5e>

	/* Initialization Drivers */
	UART_init(&u_configure);
    1636:	ce 01       	movw	r24, r28
    1638:	80 55       	subi	r24, 0x50	; 80
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <UART_init>
	LCD_init();
    1640:	0e 94 da 18 	call	0x31b4	; 0x31b4 <LCD_init>

	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
    1644:	8f e4       	ldi	r24, 0x4F	; 79
    1646:	96 e0       	ldi	r25, 0x06	; 6
    1648:	0e 94 75 1e 	call	0x3cea	; 0x3cea <Timer1_setCallBack>

	UART_recieveByte(); /* Waiting For MCU2 To be Ready */
    164c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>

	while(1)
	{
		/* Create Password to The System */
		if(flag == 0)
    1650:	fe 01       	movw	r30, r28
    1652:	e1 55       	subi	r30, 0x51	; 81
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	88 23       	and	r24, r24
    165a:	09 f0       	breq	.+2      	; 0x165e <main+0xfa>
    165c:	4c c3       	rjmp	.+1688   	; 0x1cf6 <main+0x792>
		{
			LCD_clearScreen();
    165e:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
			LCD_displayString("PLZ Enter Pass:");
    1662:	80 e6       	ldi	r24, 0x60	; 96
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
			LCD_moveCursor(1, 0);
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <LCD_moveCursor>

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
    1672:	10 92 16 01 	sts	0x0116, r1
    1676:	ca c0       	rjmp	.+404    	; 0x180c <main+0x2a8>
			{
				key = KEYPAD_getPressedKey() ;
    1678:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    167c:	80 93 15 01 	sts	0x0115, r24
				pass1[i] = key ;
    1680:	80 91 16 01 	lds	r24, 0x0116
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	20 91 15 01 	lds	r18, 0x0115
    168c:	fc 01       	movw	r30, r24
    168e:	e7 5f       	subi	r30, 0xF7	; 247
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    1694:	8a e2       	ldi	r24, 0x2A	; 42
    1696:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_displayCharacter>
    169a:	fe 01       	movw	r30, r28
    169c:	e5 55       	subi	r30, 0x55	; 85
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	aa ef       	ldi	r26, 0xFA	; 250
    16a6:	b3 e4       	ldi	r27, 0x43	; 67
    16a8:	80 83       	st	Z, r24
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	a2 83       	std	Z+2, r26	; 0x02
    16ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	8e 01       	movw	r16, r28
    16b2:	09 55       	subi	r16, 0x59	; 89
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	fe 01       	movw	r30, r28
    16b8:	e5 55       	subi	r30, 0x55	; 85
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a ef       	ldi	r20, 0xFA	; 250
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16de:	fe 01       	movw	r30, r28
    16e0:	e9 55       	subi	r30, 0x59	; 89
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	44 f4       	brge	.+16     	; 0x170c <main+0x1a8>
		__ticks = 1;
    16fc:	fe 01       	movw	r30, r28
    16fe:	eb 55       	subi	r30, 0x5B	; 91
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	64 c0       	rjmp	.+200    	; 0x17d4 <main+0x270>
	else if (__tmp > 65535)
    170c:	fe 01       	movw	r30, r28
    170e:	e9 55       	subi	r30, 0x59	; 89
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	0c f0       	brlt	.+2      	; 0x172c <main+0x1c8>
    172a:	43 c0       	rjmp	.+134    	; 0x17b2 <main+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172c:	fe 01       	movw	r30, r28
    172e:	e5 55       	subi	r30, 0x55	; 85
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8e 01       	movw	r16, r28
    174c:	0b 55       	subi	r16, 0x5B	; 91
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	bc 01       	movw	r22, r24
    1752:	cd 01       	movw	r24, r26
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	f8 01       	movw	r30, r16
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <main+0x23e>
    1764:	fe 01       	movw	r30, r28
    1766:	ed 55       	subi	r30, 0x5D	; 93
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1772:	fe 01       	movw	r30, r28
    1774:	ed 55       	subi	r30, 0x5D	; 93
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <main+0x218>
    1780:	fe 01       	movw	r30, r28
    1782:	ed 55       	subi	r30, 0x5D	; 93
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	de 01       	movw	r26, r28
    178c:	ab 55       	subi	r26, 0x5B	; 91
    178e:	bf 4f       	sbci	r27, 0xFF	; 255
    1790:	fe 01       	movw	r30, r28
    1792:	eb 55       	subi	r30, 0x5B	; 91
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	9c 93       	st	X, r25
    17a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	fe 01       	movw	r30, r28
    17a4:	eb 55       	subi	r30, 0x5B	; 91
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	d1 f6       	brne	.-76     	; 0x1764 <main+0x200>
    17b0:	28 c0       	rjmp	.+80     	; 0x1802 <main+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	8e 01       	movw	r16, r28
    17b4:	0b 55       	subi	r16, 0x5B	; 91
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	fe 01       	movw	r30, r28
    17ba:	e9 55       	subi	r30, 0x59	; 89
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	60 81       	ld	r22, Z
    17c0:	71 81       	ldd	r23, Z+1	; 0x01
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	f8 01       	movw	r30, r16
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	80 83       	st	Z, r24
    17d4:	de 01       	movw	r26, r28
    17d6:	af 55       	subi	r26, 0x5F	; 95
    17d8:	bf 4f       	sbci	r27, 0xFF	; 255
    17da:	fe 01       	movw	r30, r28
    17dc:	eb 55       	subi	r30, 0x5B	; 91
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	9c 93       	st	X, r25
    17e8:	8e 93       	st	-X, r24
    17ea:	fe 01       	movw	r30, r28
    17ec:	ef 55       	subi	r30, 0x5F	; 95
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <main+0x290>
    17f8:	fe 01       	movw	r30, r28
    17fa:	ef 55       	subi	r30, 0x5F	; 95
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("PLZ Enter Pass:");
			LCD_moveCursor(1, 0);

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
    1802:	80 91 16 01 	lds	r24, 0x0116
    1806:	8f 5f       	subi	r24, 0xFF	; 255
    1808:	80 93 16 01 	sts	0x0116, r24
    180c:	80 91 16 01 	lds	r24, 0x0116
    1810:	85 30       	cpi	r24, 0x05	; 5
    1812:	08 f4       	brcc	.+2      	; 0x1816 <main+0x2b2>
    1814:	31 cf       	rjmp	.-414    	; 0x1678 <main+0x114>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1816:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    181a:	80 93 15 01 	sts	0x0115, r24
    181e:	fe 01       	movw	r30, r28
    1820:	e3 56       	subi	r30, 0x63	; 99
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	aa ef       	ldi	r26, 0xFA	; 250
    182a:	b3 e4       	ldi	r27, 0x43	; 67
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1834:	8e 01       	movw	r16, r28
    1836:	07 56       	subi	r16, 0x67	; 103
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	fe 01       	movw	r30, r28
    183c:	e3 56       	subi	r30, 0x63	; 99
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	4a ef       	ldi	r20, 0xFA	; 250
    184e:	54 e4       	ldi	r21, 0x44	; 68
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	f8 01       	movw	r30, r16
    185a:	80 83       	st	Z, r24
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	a2 83       	std	Z+2, r26	; 0x02
    1860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1862:	fe 01       	movw	r30, r28
    1864:	e7 56       	subi	r30, 0x67	; 103
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e8       	ldi	r20, 0x80	; 128
    1876:	5f e3       	ldi	r21, 0x3F	; 63
    1878:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    187c:	88 23       	and	r24, r24
    187e:	44 f4       	brge	.+16     	; 0x1890 <main+0x32c>
		__ticks = 1;
    1880:	fe 01       	movw	r30, r28
    1882:	e9 56       	subi	r30, 0x69	; 105
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	64 c0       	rjmp	.+200    	; 0x1958 <main+0x3f4>
	else if (__tmp > 65535)
    1890:	fe 01       	movw	r30, r28
    1892:	e7 56       	subi	r30, 0x67	; 103
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	0c f0       	brlt	.+2      	; 0x18b0 <main+0x34c>
    18ae:	43 c0       	rjmp	.+134    	; 0x1936 <main+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 56       	subi	r30, 0x63	; 99
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	60 81       	ld	r22, Z
    18b8:	71 81       	ldd	r23, Z+1	; 0x01
    18ba:	82 81       	ldd	r24, Z+2	; 0x02
    18bc:	93 81       	ldd	r25, Z+3	; 0x03
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e2       	ldi	r20, 0x20	; 32
    18c4:	51 e4       	ldi	r21, 0x41	; 65
    18c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8e 01       	movw	r16, r28
    18d0:	09 56       	subi	r16, 0x69	; 105
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	f8 01       	movw	r30, r16
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    18e6:	1f c0       	rjmp	.+62     	; 0x1926 <main+0x3c2>
    18e8:	fe 01       	movw	r30, r28
    18ea:	eb 56       	subi	r30, 0x6B	; 107
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	88 ec       	ldi	r24, 0xC8	; 200
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	fe 01       	movw	r30, r28
    18f8:	eb 56       	subi	r30, 0x6B	; 107
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <main+0x39c>
    1904:	fe 01       	movw	r30, r28
    1906:	eb 56       	subi	r30, 0x6B	; 107
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	de 01       	movw	r26, r28
    1910:	a9 56       	subi	r26, 0x69	; 105
    1912:	bf 4f       	sbci	r27, 0xFF	; 255
    1914:	fe 01       	movw	r30, r28
    1916:	e9 56       	subi	r30, 0x69	; 105
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	11 96       	adiw	r26, 0x01	; 1
    1922:	9c 93       	st	X, r25
    1924:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	fe 01       	movw	r30, r28
    1928:	e9 56       	subi	r30, 0x69	; 105
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	d1 f6       	brne	.-76     	; 0x18e8 <main+0x384>
    1934:	28 c0       	rjmp	.+80     	; 0x1986 <main+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	8e 01       	movw	r16, r28
    1938:	09 56       	subi	r16, 0x69	; 105
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	fe 01       	movw	r30, r28
    193e:	e7 56       	subi	r30, 0x67	; 103
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	f8 01       	movw	r30, r16
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    1958:	de 01       	movw	r26, r28
    195a:	ad 56       	subi	r26, 0x6D	; 109
    195c:	bf 4f       	sbci	r27, 0xFF	; 255
    195e:	fe 01       	movw	r30, r28
    1960:	e9 56       	subi	r30, 0x69	; 105
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	11 96       	adiw	r26, 0x01	; 1
    196a:	9c 93       	st	X, r25
    196c:	8e 93       	st	-X, r24
    196e:	fe 01       	movw	r30, r28
    1970:	ed 56       	subi	r30, 0x6D	; 109
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	80 81       	ld	r24, Z
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <main+0x414>
    197c:	fe 01       	movw	r30, r28
    197e:	ed 56       	subi	r30, 0x6D	; 109
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    1986:	80 91 15 01 	lds	r24, 0x0115
    198a:	8d 30       	cpi	r24, 0x0D	; 13
    198c:	09 f0       	breq	.+2      	; 0x1990 <main+0x42c>
    198e:	43 cf       	rjmp	.-378    	; 0x1816 <main+0x2b2>

			LCD_clearScreen();
    1990:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    1994:	8e e7       	ldi	r24, 0x7E	; 126
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same Pass: ");
    199c:	2f e8       	ldi	r18, 0x8F	; 143
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	a9 01       	movw	r20, r18
    19a6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_displayStringRowColumn>

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    19aa:	10 92 16 01 	sts	0x0116, r1
    19ae:	ca c0       	rjmp	.+404    	; 0x1b44 <main+0x5e0>
			{
				key = KEYPAD_getPressedKey() ;
    19b0:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    19b4:	80 93 15 01 	sts	0x0115, r24
				pass2[i] = key ;
    19b8:	80 91 16 01 	lds	r24, 0x0116
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	20 91 15 01 	lds	r18, 0x0115
    19c4:	fc 01       	movw	r30, r24
    19c6:	e2 5f       	subi	r30, 0xF2	; 242
    19c8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ca:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    19cc:	8a e2       	ldi	r24, 0x2A	; 42
    19ce:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_displayCharacter>
    19d2:	fe 01       	movw	r30, r28
    19d4:	e1 57       	subi	r30, 0x71	; 113
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	aa ef       	ldi	r26, 0xFA	; 250
    19de:	b3 e4       	ldi	r27, 0x43	; 67
    19e0:	80 83       	st	Z, r24
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	a2 83       	std	Z+2, r26	; 0x02
    19e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	8e 01       	movw	r16, r28
    19ea:	05 57       	subi	r16, 0x75	; 117
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	e1 57       	subi	r30, 0x71	; 113
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4a ef       	ldi	r20, 0xFA	; 250
    1a02:	54 e4       	ldi	r21, 0x44	; 68
    1a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	80 83       	st	Z, r24
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	a2 83       	std	Z+2, r26	; 0x02
    1a14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a16:	fe 01       	movw	r30, r28
    1a18:	e5 57       	subi	r30, 0x75	; 117
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	44 f4       	brge	.+16     	; 0x1a44 <main+0x4e0>
		__ticks = 1;
    1a34:	fe 01       	movw	r30, r28
    1a36:	e7 57       	subi	r30, 0x77	; 119
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
    1a42:	64 c0       	rjmp	.+200    	; 0x1b0c <main+0x5a8>
	else if (__tmp > 65535)
    1a44:	fe 01       	movw	r30, r28
    1a46:	e5 57       	subi	r30, 0x75	; 117
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	0c f0       	brlt	.+2      	; 0x1a64 <main+0x500>
    1a62:	43 c0       	rjmp	.+134    	; 0x1aea <main+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	fe 01       	movw	r30, r28
    1a66:	e1 57       	subi	r30, 0x71	; 113
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	8e 01       	movw	r16, r28
    1a84:	07 57       	subi	r16, 0x77	; 119
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	f8 01       	movw	r30, r16
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	80 83       	st	Z, r24
    1a9a:	1f c0       	rjmp	.+62     	; 0x1ada <main+0x576>
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e9 57       	subi	r30, 0x79	; 121
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	80 83       	st	Z, r24
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e9 57       	subi	r30, 0x79	; 121
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	80 81       	ld	r24, Z
    1ab2:	91 81       	ldd	r25, Z+1	; 0x01
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <main+0x550>
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e9 57       	subi	r30, 0x79	; 121
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	de 01       	movw	r26, r28
    1ac4:	a7 57       	subi	r26, 0x77	; 119
    1ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e7 57       	subi	r30, 0x77	; 119
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	9c 93       	st	X, r25
    1ad8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	fe 01       	movw	r30, r28
    1adc:	e7 57       	subi	r30, 0x77	; 119
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	d1 f6       	brne	.-76     	; 0x1a9c <main+0x538>
    1ae8:	28 c0       	rjmp	.+80     	; 0x1b3a <main+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	8e 01       	movw	r16, r28
    1aec:	07 57       	subi	r16, 0x77	; 119
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	e5 57       	subi	r30, 0x75	; 117
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	f8 01       	movw	r30, r16
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    1b0c:	de 01       	movw	r26, r28
    1b0e:	ab 57       	subi	r26, 0x7B	; 123
    1b10:	bf 4f       	sbci	r27, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	e7 57       	subi	r30, 0x77	; 119
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	11 96       	adiw	r26, 0x01	; 1
    1b1e:	9c 93       	st	X, r25
    1b20:	8e 93       	st	-X, r24
    1b22:	fe 01       	movw	r30, r28
    1b24:	eb 57       	subi	r30, 0x7B	; 123
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <main+0x5c8>
    1b30:	fe 01       	movw	r30, r28
    1b32:	eb 57       	subi	r30, 0x7B	; 123
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("Plz re-enter the");
			LCD_displayStringRowColumn(1, 0, "same Pass: ");

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    1b3a:	80 91 16 01 	lds	r24, 0x0116
    1b3e:	8f 5f       	subi	r24, 0xFF	; 255
    1b40:	80 93 16 01 	sts	0x0116, r24
    1b44:	80 91 16 01 	lds	r24, 0x0116
    1b48:	85 30       	cpi	r24, 0x05	; 5
    1b4a:	08 f4       	brcc	.+2      	; 0x1b4e <main+0x5ea>
    1b4c:	31 cf       	rjmp	.-414    	; 0x19b0 <main+0x44c>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1b4e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    1b52:	80 93 15 01 	sts	0x0115, r24
    1b56:	fe 01       	movw	r30, r28
    1b58:	ef 57       	subi	r30, 0x7F	; 127
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	aa ef       	ldi	r26, 0xFA	; 250
    1b62:	b3 e4       	ldi	r27, 0x43	; 67
    1b64:	80 83       	st	Z, r24
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	a2 83       	std	Z+2, r26	; 0x02
    1b6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	03 58       	subi	r16, 0x83	; 131
    1b70:	1f 4f       	sbci	r17, 0xFF	; 255
    1b72:	fe 01       	movw	r30, r28
    1b74:	ef 57       	subi	r30, 0x7F	; 127
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	82 81       	ldd	r24, Z+2	; 0x02
    1b7e:	93 81       	ldd	r25, Z+3	; 0x03
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	f8 01       	movw	r30, r16
    1b92:	80 83       	st	Z, r24
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	a2 83       	std	Z+2, r26	; 0x02
    1b98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e3 58       	subi	r30, 0x83	; 131
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	44 f4       	brge	.+16     	; 0x1bc8 <main+0x664>
		__ticks = 1;
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e5 58       	subi	r30, 0x85	; 133
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
    1bc6:	64 c0       	rjmp	.+200    	; 0x1c90 <main+0x72c>
	else if (__tmp > 65535)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e3 58       	subi	r30, 0x83	; 131
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <main+0x684>
    1be6:	43 c0       	rjmp	.+134    	; 0x1c6e <main+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	fe 01       	movw	r30, r28
    1bea:	ef 57       	subi	r30, 0x7F	; 127
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8e 01       	movw	r16, r28
    1c08:	05 58       	subi	r16, 0x85	; 133
    1c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	f8 01       	movw	r30, r16
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    1c1e:	1f c0       	rjmp	.+62     	; 0x1c5e <main+0x6fa>
    1c20:	fe 01       	movw	r30, r28
    1c22:	e7 58       	subi	r30, 0x87	; 135
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	88 ec       	ldi	r24, 0xC8	; 200
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e7 58       	subi	r30, 0x87	; 135
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <main+0x6d4>
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e7 58       	subi	r30, 0x87	; 135
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	de 01       	movw	r26, r28
    1c48:	a5 58       	subi	r26, 0x85	; 133
    1c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e5 58       	subi	r30, 0x85	; 133
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	11 96       	adiw	r26, 0x01	; 1
    1c5a:	9c 93       	st	X, r25
    1c5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e5 58       	subi	r30, 0x85	; 133
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	d1 f6       	brne	.-76     	; 0x1c20 <main+0x6bc>
    1c6c:	28 c0       	rjmp	.+80     	; 0x1cbe <main+0x75a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	8e 01       	movw	r16, r28
    1c70:	05 58       	subi	r16, 0x85	; 133
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	fe 01       	movw	r30, r28
    1c76:	e3 58       	subi	r30, 0x83	; 131
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	de 01       	movw	r26, r28
    1c92:	a9 58       	subi	r26, 0x89	; 137
    1c94:	bf 4f       	sbci	r27, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	e5 58       	subi	r30, 0x85	; 133
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	11 96       	adiw	r26, 0x01	; 1
    1ca2:	9c 93       	st	X, r25
    1ca4:	8e 93       	st	-X, r24
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e9 58       	subi	r30, 0x89	; 137
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <main+0x74c>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e9 58       	subi	r30, 0x89	; 137
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    1cbe:	80 91 15 01 	lds	r24, 0x0115
    1cc2:	8d 30       	cpi	r24, 0x0D	; 13
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <main+0x764>
    1cc6:	43 cf       	rjmp	.-378    	; 0x1b4e <main+0x5ea>

			/* Send 2 Passwords To 2nd MCU */
			SendPass(pass1);
    1cc8:	89 e0       	ldi	r24, 0x09	; 9
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	0e 94 c6 09 	call	0x138c	; 0x138c <SendPass>
			SendPass(pass2);
    1cd0:	8e e0       	ldi	r24, 0x0E	; 14
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	0e 94 c6 09 	call	0x138c	; 0x138c <SendPass>

			status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    1cd8:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>
    1cdc:	80 93 13 01 	sts	0x0113, r24

			/* if 2 Passwords matched each other move to next phase */
			if(status == OK)
    1ce0:	80 91 13 01 	lds	r24, 0x0113
    1ce4:	80 31       	cpi	r24, 0x10	; 16
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <main+0x786>
    1ce8:	b3 cc       	rjmp	.-1690   	; 0x1650 <main+0xec>
			{
				flag = 1;
    1cea:	fe 01       	movw	r30, r28
    1cec:	e1 55       	subi	r30, 0x51	; 81
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	80 83       	st	Z, r24
    1cf4:	ad cc       	rjmp	.-1702   	; 0x1650 <main+0xec>
			}
		}
		else if(flag == 1) /* Normal Phase Of System */
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e1 55       	subi	r30, 0x51	; 81
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	09 f0       	breq	.+2      	; 0x1d04 <main+0x7a0>
    1d02:	a6 cc       	rjmp	.-1716   	; 0x1650 <main+0xec>
		{
			LCD_clearScreen();
    1d04:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    1d08:	8b e9       	ldi	r24, 0x9B	; 155
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1d10:	29 ea       	ldi	r18, 0xA9	; 169
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	a9 01       	movw	r20, r18
    1d1a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_displayStringRowColumn>

			/* Waiting User to press (+ or -) Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1d1e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    1d22:	80 93 15 01 	sts	0x0115, r24
    1d26:	fe 01       	movw	r30, r28
    1d28:	ed 58       	subi	r30, 0x8D	; 141
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	aa ef       	ldi	r26, 0xFA	; 250
    1d32:	b3 e4       	ldi	r27, 0x43	; 67
    1d34:	80 83       	st	Z, r24
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	a2 83       	std	Z+2, r26	; 0x02
    1d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	01 59       	subi	r16, 0x91	; 145
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	fe 01       	movw	r30, r28
    1d44:	ed 58       	subi	r30, 0x8D	; 141
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a ef       	ldi	r20, 0xFA	; 250
    1d56:	54 e4       	ldi	r21, 0x44	; 68
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	a2 83       	std	Z+2, r26	; 0x02
    1d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	e1 59       	subi	r30, 0x91	; 145
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	60 81       	ld	r22, Z
    1d72:	71 81       	ldd	r23, Z+1	; 0x01
    1d74:	82 81       	ldd	r24, Z+2	; 0x02
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	44 f4       	brge	.+16     	; 0x1d98 <main+0x834>
		__ticks = 1;
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e3 59       	subi	r30, 0x93	; 147
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	80 83       	st	Z, r24
    1d96:	64 c0       	rjmp	.+200    	; 0x1e60 <main+0x8fc>
	else if (__tmp > 65535)
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e1 59       	subi	r30, 0x91	; 145
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	0c f0       	brlt	.+2      	; 0x1db8 <main+0x854>
    1db6:	43 c0       	rjmp	.+134    	; 0x1e3e <main+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	fe 01       	movw	r30, r28
    1dba:	ed 58       	subi	r30, 0x8D	; 141
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	03 59       	subi	r16, 0x93	; 147
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	f8 01       	movw	r30, r16
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	1f c0       	rjmp	.+62     	; 0x1e2e <main+0x8ca>
    1df0:	fe 01       	movw	r30, r28
    1df2:	e5 59       	subi	r30, 0x95	; 149
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e5 59       	subi	r30, 0x95	; 149
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <main+0x8a4>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e5 59       	subi	r30, 0x95	; 149
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	de 01       	movw	r26, r28
    1e18:	a3 59       	subi	r26, 0x93	; 147
    1e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e3 59       	subi	r30, 0x93	; 147
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	11 96       	adiw	r26, 0x01	; 1
    1e2a:	9c 93       	st	X, r25
    1e2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e3 59       	subi	r30, 0x93	; 147
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	d1 f6       	brne	.-76     	; 0x1df0 <main+0x88c>
    1e3c:	28 c0       	rjmp	.+80     	; 0x1e8e <main+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	8e 01       	movw	r16, r28
    1e40:	03 59       	subi	r16, 0x93	; 147
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e1 59       	subi	r30, 0x91	; 145
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    1e60:	de 01       	movw	r26, r28
    1e62:	a7 59       	subi	r26, 0x97	; 151
    1e64:	bf 4f       	sbci	r27, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	e3 59       	subi	r30, 0x93	; 147
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
    1e76:	fe 01       	movw	r30, r28
    1e78:	e7 59       	subi	r30, 0x97	; 151
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <main+0x91c>
    1e84:	fe 01       	movw	r30, r28
    1e86:	e7 59       	subi	r30, 0x97	; 151
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
				_delay_ms(500);
			} while((key != '+') && (key != '-'));
    1e8e:	80 91 15 01 	lds	r24, 0x0115
    1e92:	8b 32       	cpi	r24, 0x2B	; 43
    1e94:	29 f0       	breq	.+10     	; 0x1ea0 <main+0x93c>
    1e96:	80 91 15 01 	lds	r24, 0x0115
    1e9a:	8d 32       	cpi	r24, 0x2D	; 45
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <main+0x93c>
    1e9e:	3f cf       	rjmp	.-386    	; 0x1d1e <main+0x7ba>

			if(key == '+') /* User Choose Open The Door */
    1ea0:	80 91 15 01 	lds	r24, 0x0115
    1ea4:	8b 32       	cpi	r24, 0x2B	; 43
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <main+0x946>
    1ea8:	c3 c2       	rjmp	.+1414   	; 0x2430 <main+0xecc>
			{
				LCD_clearScreen();
    1eaa:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    1eae:	89 eb       	ldi	r24, 0xB9	; 185
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1ebe:	10 92 16 01 	sts	0x0116, r1
    1ec2:	ca c0       	rjmp	.+404    	; 0x2058 <main+0xaf4>
				{
					key = KEYPAD_getPressedKey() ;
    1ec4:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    1ec8:	80 93 15 01 	sts	0x0115, r24
					pass1[i] = key ;
    1ecc:	80 91 16 01 	lds	r24, 0x0116
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	20 91 15 01 	lds	r18, 0x0115
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e7 5f       	subi	r30, 0xF7	; 247
    1edc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ede:	20 83       	st	Z, r18
					LCD_displayCharacter('*');
    1ee0:	8a e2       	ldi	r24, 0x2A	; 42
    1ee2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_displayCharacter>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	eb 59       	subi	r30, 0x9B	; 155
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	aa ef       	ldi	r26, 0xFA	; 250
    1ef2:	b3 e4       	ldi	r27, 0x43	; 67
    1ef4:	80 83       	st	Z, r24
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	a2 83       	std	Z+2, r26	; 0x02
    1efa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	8e 01       	movw	r16, r28
    1efe:	0f 59       	subi	r16, 0x9F	; 159
    1f00:	1f 4f       	sbci	r17, 0xFF	; 255
    1f02:	fe 01       	movw	r30, r28
    1f04:	eb 59       	subi	r30, 0x9B	; 155
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	60 81       	ld	r22, Z
    1f0a:	71 81       	ldd	r23, Z+1	; 0x01
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a ef       	ldi	r20, 0xFA	; 250
    1f16:	54 e4       	ldi	r21, 0x44	; 68
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	f8 01       	movw	r30, r16
    1f22:	80 83       	st	Z, r24
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	a2 83       	std	Z+2, r26	; 0x02
    1f28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ef 59       	subi	r30, 0x9F	; 159
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	44 f4       	brge	.+16     	; 0x1f58 <main+0x9f4>
		__ticks = 1;
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e1 5a       	subi	r30, 0xA1	; 161
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
    1f56:	64 c0       	rjmp	.+200    	; 0x2020 <main+0xabc>
	else if (__tmp > 65535)
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ef 59       	subi	r30, 0x9F	; 159
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	60 81       	ld	r22, Z
    1f60:	71 81       	ldd	r23, Z+1	; 0x01
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	3f ef       	ldi	r19, 0xFF	; 255
    1f6a:	4f e7       	ldi	r20, 0x7F	; 127
    1f6c:	57 e4       	ldi	r21, 0x47	; 71
    1f6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	0c f0       	brlt	.+2      	; 0x1f78 <main+0xa14>
    1f76:	43 c0       	rjmp	.+134    	; 0x1ffe <main+0xa9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	fe 01       	movw	r30, r28
    1f7a:	eb 59       	subi	r30, 0x9B	; 155
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8e 01       	movw	r16, r28
    1f98:	01 5a       	subi	r16, 0xA1	; 161
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	f8 01       	movw	r30, r16
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	1f c0       	rjmp	.+62     	; 0x1fee <main+0xa8a>
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e3 5a       	subi	r30, 0xA3	; 163
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	88 ec       	ldi	r24, 0xC8	; 200
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e3 5a       	subi	r30, 0xA3	; 163
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	91 81       	ldd	r25, Z+1	; 0x01
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <main+0xa64>
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e3 5a       	subi	r30, 0xA3	; 163
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	de 01       	movw	r26, r28
    1fd8:	a1 5a       	subi	r26, 0xA1	; 161
    1fda:	bf 4f       	sbci	r27, 0xFF	; 255
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e1 5a       	subi	r30, 0xA1	; 161
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	11 96       	adiw	r26, 0x01	; 1
    1fea:	9c 93       	st	X, r25
    1fec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e1 5a       	subi	r30, 0xA1	; 161
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	d1 f6       	brne	.-76     	; 0x1fb0 <main+0xa4c>
    1ffc:	28 c0       	rjmp	.+80     	; 0x204e <main+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	8e 01       	movw	r16, r28
    2000:	01 5a       	subi	r16, 0xA1	; 161
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	fe 01       	movw	r30, r28
    2006:	ef 59       	subi	r30, 0x9F	; 159
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	60 81       	ld	r22, Z
    200c:	71 81       	ldd	r23, Z+1	; 0x01
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	93 81       	ldd	r25, Z+3	; 0x03
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	f8 01       	movw	r30, r16
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
    2020:	de 01       	movw	r26, r28
    2022:	a5 5a       	subi	r26, 0xA5	; 165
    2024:	bf 4f       	sbci	r27, 0xFF	; 255
    2026:	fe 01       	movw	r30, r28
    2028:	e1 5a       	subi	r30, 0xA1	; 161
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	9c 93       	st	X, r25
    2034:	8e 93       	st	-X, r24
    2036:	fe 01       	movw	r30, r28
    2038:	e5 5a       	subi	r30, 0xA5	; 165
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <main+0xadc>
    2044:	fe 01       	movw	r30, r28
    2046:	e5 5a       	subi	r30, 0xA5	; 165
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    204e:	80 91 16 01 	lds	r24, 0x0116
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	80 93 16 01 	sts	0x0116, r24
    2058:	80 91 16 01 	lds	r24, 0x0116
    205c:	85 30       	cpi	r24, 0x05	; 5
    205e:	08 f4       	brcc	.+2      	; 0x2062 <main+0xafe>
    2060:	31 cf       	rjmp	.-414    	; 0x1ec4 <main+0x960>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    2062:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    2066:	80 93 15 01 	sts	0x0115, r24
    206a:	fe 01       	movw	r30, r28
    206c:	e9 5a       	subi	r30, 0xA9	; 169
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	aa ef       	ldi	r26, 0xFA	; 250
    2076:	b3 e4       	ldi	r27, 0x43	; 67
    2078:	80 83       	st	Z, r24
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	a2 83       	std	Z+2, r26	; 0x02
    207e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	8e 01       	movw	r16, r28
    2082:	0d 5a       	subi	r16, 0xAD	; 173
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	fe 01       	movw	r30, r28
    2088:	e9 5a       	subi	r30, 0xA9	; 169
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	a2 83       	std	Z+2, r26	; 0x02
    20ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ae:	fe 01       	movw	r30, r28
    20b0:	ed 5a       	subi	r30, 0xAD	; 173
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	44 f4       	brge	.+16     	; 0x20dc <main+0xb78>
		__ticks = 1;
    20cc:	fe 01       	movw	r30, r28
    20ce:	ef 5a       	subi	r30, 0xAF	; 175
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
    20da:	64 c0       	rjmp	.+200    	; 0x21a4 <main+0xc40>
	else if (__tmp > 65535)
    20dc:	fe 01       	movw	r30, r28
    20de:	ed 5a       	subi	r30, 0xAD	; 173
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	0c f0       	brlt	.+2      	; 0x20fc <main+0xb98>
    20fa:	43 c0       	rjmp	.+134    	; 0x2182 <main+0xc1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	fe 01       	movw	r30, r28
    20fe:	e9 5a       	subi	r30, 0xA9	; 169
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e2       	ldi	r20, 0x20	; 32
    2110:	51 e4       	ldi	r21, 0x41	; 65
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8e 01       	movw	r16, r28
    211c:	0f 5a       	subi	r16, 0xAF	; 175
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	f8 01       	movw	r30, r16
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	1f c0       	rjmp	.+62     	; 0x2172 <main+0xc0e>
    2134:	fe 01       	movw	r30, r28
    2136:	e1 5b       	subi	r30, 0xB1	; 177
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	88 ec       	ldi	r24, 0xC8	; 200
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
    2142:	fe 01       	movw	r30, r28
    2144:	e1 5b       	subi	r30, 0xB1	; 177
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <main+0xbe8>
    2150:	fe 01       	movw	r30, r28
    2152:	e1 5b       	subi	r30, 0xB1	; 177
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	de 01       	movw	r26, r28
    215c:	af 5a       	subi	r26, 0xAF	; 175
    215e:	bf 4f       	sbci	r27, 0xFF	; 255
    2160:	fe 01       	movw	r30, r28
    2162:	ef 5a       	subi	r30, 0xAF	; 175
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	11 96       	adiw	r26, 0x01	; 1
    216e:	9c 93       	st	X, r25
    2170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	fe 01       	movw	r30, r28
    2174:	ef 5a       	subi	r30, 0xAF	; 175
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	d1 f6       	brne	.-76     	; 0x2134 <main+0xbd0>
    2180:	28 c0       	rjmp	.+80     	; 0x21d2 <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	8e 01       	movw	r16, r28
    2184:	0f 5a       	subi	r16, 0xAF	; 175
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	ed 5a       	subi	r30, 0xAD	; 173
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	60 81       	ld	r22, Z
    2190:	71 81       	ldd	r23, Z+1	; 0x01
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	f8 01       	movw	r30, r16
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	de 01       	movw	r26, r28
    21a6:	a3 5b       	subi	r26, 0xB3	; 179
    21a8:	bf 4f       	sbci	r27, 0xFF	; 255
    21aa:	fe 01       	movw	r30, r28
    21ac:	ef 5a       	subi	r30, 0xAF	; 175
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	9c 93       	st	X, r25
    21b8:	8e 93       	st	-X, r24
    21ba:	fe 01       	movw	r30, r28
    21bc:	e3 5b       	subi	r30, 0xB3	; 179
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <main+0xc60>
    21c8:	fe 01       	movw	r30, r28
    21ca:	e3 5b       	subi	r30, 0xB3	; 179
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    21d2:	80 91 15 01 	lds	r24, 0x0115
    21d6:	8d 30       	cpi	r24, 0x0D	; 13
    21d8:	09 f0       	breq	.+2      	; 0x21dc <main+0xc78>
    21da:	43 cf       	rjmp	.-378    	; 0x2062 <main+0xafe>

				UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */
    21dc:	81 e1       	ldi	r24, 0x11	; 17
    21de:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
    21e2:	fe 01       	movw	r30, r28
    21e4:	e7 5b       	subi	r30, 0xB7	; 183
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 ea       	ldi	r26, 0xA0	; 160
    21ee:	b1 e4       	ldi	r27, 0x41	; 65
    21f0:	80 83       	st	Z, r24
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	a2 83       	std	Z+2, r26	; 0x02
    21f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21f8:	8e 01       	movw	r16, r28
    21fa:	0b 5b       	subi	r16, 0xBB	; 187
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	fe 01       	movw	r30, r28
    2200:	e7 5b       	subi	r30, 0xB7	; 183
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	2b ea       	ldi	r18, 0xAB	; 171
    220e:	3a ea       	ldi	r19, 0xAA	; 170
    2210:	4a e2       	ldi	r20, 0x2A	; 42
    2212:	50 e4       	ldi	r21, 0x40	; 64
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	f8 01       	movw	r30, r16
    221e:	80 83       	st	Z, r24
    2220:	91 83       	std	Z+1, r25	; 0x01
    2222:	a2 83       	std	Z+2, r26	; 0x02
    2224:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2226:	fe 01       	movw	r30, r28
    2228:	eb 5b       	subi	r30, 0xBB	; 187
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	34 f4       	brge	.+12     	; 0x2250 <main+0xcec>
		__ticks = 1;
    2244:	fe 01       	movw	r30, r28
    2246:	ec 5b       	subi	r30, 0xBC	; 188
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 83       	st	Z, r24
    224e:	a7 c0       	rjmp	.+334    	; 0x239e <main+0xe3a>
	else if (__tmp > 255)
    2250:	fe 01       	movw	r30, r28
    2252:	eb 5b       	subi	r30, 0xBB	; 187
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	53 e4       	ldi	r21, 0x43	; 67
    2266:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226a:	18 16       	cp	r1, r24
    226c:	0c f0       	brlt	.+2      	; 0x2270 <main+0xd0c>
    226e:	87 c0       	rjmp	.+270    	; 0x237e <main+0xe1a>
	{
		_delay_ms(__us / 1000.0);
    2270:	fe 01       	movw	r30, r28
    2272:	e7 5b       	subi	r30, 0xB7	; 183
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	93 81       	ldd	r25, Z+3	; 0x03
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	fe 01       	movw	r30, r28
    2290:	e0 5c       	subi	r30, 0xC0	; 192
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 83       	st	Z, r24
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	a2 83       	std	Z+2, r26	; 0x02
    229a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	fe 01       	movw	r30, r28
    229e:	e0 5c       	subi	r30, 0xC0	; 192
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a ef       	ldi	r20, 0xFA	; 250
    22b0:	54 e4       	ldi	r21, 0x44	; 68
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8c af       	std	Y+60, r24	; 0x3c
    22bc:	9d af       	std	Y+61, r25	; 0x3d
    22be:	ae af       	std	Y+62, r26	; 0x3e
    22c0:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    22c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    22c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    22c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    22c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <main+0xd80>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9b af       	std	Y+59, r25	; 0x3b
    22e0:	8a af       	std	Y+58, r24	; 0x3a
    22e2:	42 c0       	rjmp	.+132    	; 0x2368 <main+0xe04>
	else if (__tmp > 65535)
    22e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    22e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    22e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    22ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	64 f5       	brge	.+88     	; 0x2354 <main+0xdf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	fe 01       	movw	r30, r28
    22fe:	e0 5c       	subi	r30, 0xC0	; 192
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9b af       	std	Y+59, r25	; 0x3b
    2328:	8a af       	std	Y+58, r24	; 0x3a
    232a:	0f c0       	rjmp	.+30     	; 0x234a <main+0xde6>
    232c:	88 ec       	ldi	r24, 0xC8	; 200
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	99 af       	std	Y+57, r25	; 0x39
    2332:	88 af       	std	Y+56, r24	; 0x38
    2334:	88 ad       	ldd	r24, Y+56	; 0x38
    2336:	99 ad       	ldd	r25, Y+57	; 0x39
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <main+0xdd4>
    233c:	99 af       	std	Y+57, r25	; 0x39
    233e:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	8a ad       	ldd	r24, Y+58	; 0x3a
    2342:	9b ad       	ldd	r25, Y+59	; 0x3b
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9b af       	std	Y+59, r25	; 0x3b
    2348:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	8a ad       	ldd	r24, Y+58	; 0x3a
    234c:	9b ad       	ldd	r25, Y+59	; 0x3b
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <main+0xdc8>
    2352:	2e c0       	rjmp	.+92     	; 0x23b0 <main+0xe4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6c ad       	ldd	r22, Y+60	; 0x3c
    2356:	7d ad       	ldd	r23, Y+61	; 0x3d
    2358:	8e ad       	ldd	r24, Y+62	; 0x3e
    235a:	9f ad       	ldd	r25, Y+63	; 0x3f
    235c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9b af       	std	Y+59, r25	; 0x3b
    2366:	8a af       	std	Y+58, r24	; 0x3a
    2368:	8a ad       	ldd	r24, Y+58	; 0x3a
    236a:	9b ad       	ldd	r25, Y+59	; 0x3b
    236c:	9f ab       	std	Y+55, r25	; 0x37
    236e:	8e ab       	std	Y+54, r24	; 0x36
    2370:	8e a9       	ldd	r24, Y+54	; 0x36
    2372:	9f a9       	ldd	r25, Y+55	; 0x37
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <main+0xe10>
    2378:	9f ab       	std	Y+55, r25	; 0x37
    237a:	8e ab       	std	Y+54, r24	; 0x36
    237c:	19 c0       	rjmp	.+50     	; 0x23b0 <main+0xe4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    237e:	8e 01       	movw	r16, r28
    2380:	0c 5b       	subi	r16, 0xBC	; 188
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	fe 01       	movw	r30, r28
    2386:	eb 5b       	subi	r30, 0xBB	; 187
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	f8 01       	movw	r30, r16
    239c:	80 83       	st	Z, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	ec 5b       	subi	r30, 0xBC	; 188
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23a8:	8d a9       	ldd	r24, Y+53	; 0x35
    23aa:	8a 95       	dec	r24
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <main+0xe46>
    23ae:	8d ab       	std	Y+53, r24	; 0x35

				_delay_us(20);

				/* Send Password To 2nd MCU */
				SendPass(pass1);
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	0e 94 c6 09 	call	0x138c	; 0x138c <SendPass>

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    23b8:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>
    23bc:	80 93 13 01 	sts	0x0113, r24

				while(1)
				{
					if (status == OK) /* Right Password */
    23c0:	80 91 13 01 	lds	r24, 0x0113
    23c4:	80 31       	cpi	r24, 0x10	; 16
    23c6:	41 f5       	brne	.+80     	; 0x2418 <main+0xeb4>
					{
						/* Door Unlocking */
						UART_sendByte(MOTOR);
    23c8:	82 e1       	ldi	r24, 0x12	; 18
    23ca:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
						LCD_clearScreen();
    23ce:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    23d2:	29 ec       	ldi	r18, 0xC9	; 201
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	a9 01       	movw	r20, r18
    23dc:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_displayStringRowColumn>
						delay(15); /* Waiting For 15 Seconds */
    23e0:	8f e0       	ldi	r24, 0x0F	; 15
    23e2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>

						/* Door Holding */
						LCD_clearScreen();
    23e6:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Holding");
    23ea:	28 ed       	ldi	r18, 0xD8	; 216
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	61 e0       	ldi	r22, 0x01	; 1
    23f2:	a9 01       	movw	r20, r18
    23f4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_displayStringRowColumn>
						delay(3); /* Waiting For 3 Seconds */
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>

						/* Door locking */
						LCD_clearScreen();
    23fe:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Locking");
    2402:	25 ee       	ldi	r18, 0xE5	; 229
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	a9 01       	movw	r20, r18
    240c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <LCD_displayStringRowColumn>
						delay(15); /* Waiting For 15 Seconds */
    2410:	8f e0       	ldi	r24, 0x0F	; 15
    2412:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>
    2416:	1c c9       	rjmp	.-3528   	; 0x1650 <main+0xec>

						break;
					}
					else if(status == ERROR) /* Wrong Password */
    2418:	80 91 13 01 	lds	r24, 0x0113
    241c:	88 23       	and	r24, r24
    241e:	81 f6       	brne	.-96     	; 0x23c0 <main+0xe5c>
					{
						St_Error(); /* Call ERROR Function */
    2420:	0e 94 9c 06 	call	0xd38	; 0xd38 <St_Error>

						if(status == ERROR)
    2424:	80 91 13 01 	lds	r24, 0x0113
    2428:	88 23       	and	r24, r24
    242a:	09 f4       	brne	.+2      	; 0x242e <main+0xeca>
    242c:	11 c9       	rjmp	.-3550   	; 0x1650 <main+0xec>
    242e:	c8 cf       	rjmp	.-112    	; 0x23c0 <main+0xe5c>
							break ;
						}
					}
				}
			}
			else if(key == '-') /* User Choose Change The Password */
    2430:	80 91 15 01 	lds	r24, 0x0115
    2434:	8d 32       	cpi	r24, 0x2D	; 45
    2436:	09 f0       	breq	.+2      	; 0x243a <main+0xed6>
    2438:	0b c9       	rjmp	.-3562   	; 0x1650 <main+0xec>
			{
				LCD_clearScreen();
    243a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    243e:	89 eb       	ldi	r24, 0xB9	; 185
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
				LCD_moveCursor(1, 0);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    244e:	10 92 16 01 	sts	0x0116, r1
    2452:	88 c0       	rjmp	.+272    	; 0x2564 <main+0x1000>
				{
					key = KEYPAD_getPressedKey() ;
    2454:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    2458:	80 93 15 01 	sts	0x0115, r24
					pass1[i] = key ;
    245c:	80 91 16 01 	lds	r24, 0x0116
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	20 91 15 01 	lds	r18, 0x0115
    2468:	fc 01       	movw	r30, r24
    246a:	e7 5f       	subi	r30, 0xF7	; 247
    246c:	fe 4f       	sbci	r31, 0xFE	; 254
    246e:	20 83       	st	Z, r18
					LCD_displayCharacter('*');
    2470:	8a e2       	ldi	r24, 0x2A	; 42
    2472:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_displayCharacter>
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	aa ef       	ldi	r26, 0xFA	; 250
    247c:	b3 e4       	ldi	r27, 0x43	; 67
    247e:	89 ab       	std	Y+49, r24	; 0x31
    2480:	9a ab       	std	Y+50, r25	; 0x32
    2482:	ab ab       	std	Y+51, r26	; 0x33
    2484:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	69 a9       	ldd	r22, Y+49	; 0x31
    2488:	7a a9       	ldd	r23, Y+50	; 0x32
    248a:	8b a9       	ldd	r24, Y+51	; 0x33
    248c:	9c a9       	ldd	r25, Y+52	; 0x34
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a ef       	ldi	r20, 0xFA	; 250
    2494:	54 e4       	ldi	r21, 0x44	; 68
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8d a7       	std	Y+45, r24	; 0x2d
    24a0:	9e a7       	std	Y+46, r25	; 0x2e
    24a2:	af a7       	std	Y+47, r26	; 0x2f
    24a4:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    24a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    24a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    24aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ac:	98 a9       	ldd	r25, Y+48	; 0x30
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <main+0xf64>
		__ticks = 1;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	9c a7       	std	Y+44, r25	; 0x2c
    24c4:	8b a7       	std	Y+43, r24	; 0x2b
    24c6:	3f c0       	rjmp	.+126    	; 0x2546 <main+0xfe2>
	else if (__tmp > 65535)
    24c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    24ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	4c f5       	brge	.+82     	; 0x2532 <main+0xfce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	69 a9       	ldd	r22, Y+49	; 0x31
    24e2:	7a a9       	ldd	r23, Y+50	; 0x32
    24e4:	8b a9       	ldd	r24, Y+51	; 0x33
    24e6:	9c a9       	ldd	r25, Y+52	; 0x34
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e2       	ldi	r20, 0x20	; 32
    24ee:	51 e4       	ldi	r21, 0x41	; 65
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9c a7       	std	Y+44, r25	; 0x2c
    2506:	8b a7       	std	Y+43, r24	; 0x2b
    2508:	0f c0       	rjmp	.+30     	; 0x2528 <main+0xfc4>
    250a:	88 ec       	ldi	r24, 0xC8	; 200
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9a a7       	std	Y+42, r25	; 0x2a
    2510:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2512:	89 a5       	ldd	r24, Y+41	; 0x29
    2514:	9a a5       	ldd	r25, Y+42	; 0x2a
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <main+0xfb2>
    251a:	9a a7       	std	Y+42, r25	; 0x2a
    251c:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2520:	9c a5       	ldd	r25, Y+44	; 0x2c
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	9c a7       	std	Y+44, r25	; 0x2c
    2526:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	8b a5       	ldd	r24, Y+43	; 0x2b
    252a:	9c a5       	ldd	r25, Y+44	; 0x2c
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	69 f7       	brne	.-38     	; 0x250a <main+0xfa6>
    2530:	14 c0       	rjmp	.+40     	; 0x255a <main+0xff6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2532:	6d a5       	ldd	r22, Y+45	; 0x2d
    2534:	7e a5       	ldd	r23, Y+46	; 0x2e
    2536:	8f a5       	ldd	r24, Y+47	; 0x2f
    2538:	98 a9       	ldd	r25, Y+48	; 0x30
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9c a7       	std	Y+44, r25	; 0x2c
    2544:	8b a7       	std	Y+43, r24	; 0x2b
    2546:	8b a5       	ldd	r24, Y+43	; 0x2b
    2548:	9c a5       	ldd	r25, Y+44	; 0x2c
    254a:	98 a7       	std	Y+40, r25	; 0x28
    254c:	8f a3       	std	Y+39, r24	; 0x27
    254e:	8f a1       	ldd	r24, Y+39	; 0x27
    2550:	98 a5       	ldd	r25, Y+40	; 0x28
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <main+0xfee>
    2556:	98 a7       	std	Y+40, r25	; 0x28
    2558:	8f a3       	std	Y+39, r24	; 0x27
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    255a:	80 91 16 01 	lds	r24, 0x0116
    255e:	8f 5f       	subi	r24, 0xFF	; 255
    2560:	80 93 16 01 	sts	0x0116, r24
    2564:	80 91 16 01 	lds	r24, 0x0116
    2568:	85 30       	cpi	r24, 0x05	; 5
    256a:	08 f4       	brcc	.+2      	; 0x256e <main+0x100a>
    256c:	73 cf       	rjmp	.-282    	; 0x2454 <main+0xef0>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    256e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <KEYPAD_getPressedKey>
    2572:	80 93 15 01 	sts	0x0115, r24
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	aa ef       	ldi	r26, 0xFA	; 250
    257c:	b3 e4       	ldi	r27, 0x43	; 67
    257e:	8b a3       	std	Y+35, r24	; 0x23
    2580:	9c a3       	std	Y+36, r25	; 0x24
    2582:	ad a3       	std	Y+37, r26	; 0x25
    2584:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	6b a1       	ldd	r22, Y+35	; 0x23
    2588:	7c a1       	ldd	r23, Y+36	; 0x24
    258a:	8d a1       	ldd	r24, Y+37	; 0x25
    258c:	9e a1       	ldd	r25, Y+38	; 0x26
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	4a ef       	ldi	r20, 0xFA	; 250
    2594:	54 e4       	ldi	r21, 0x44	; 68
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8f 8f       	std	Y+31, r24	; 0x1f
    25a0:	98 a3       	std	Y+32, r25	; 0x20
    25a2:	a9 a3       	std	Y+33, r26	; 0x21
    25a4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    25a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25a8:	78 a1       	ldd	r23, Y+32	; 0x20
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <main+0x1064>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9e 8f       	std	Y+30, r25	; 0x1e
    25c4:	8d 8f       	std	Y+29, r24	; 0x1d
    25c6:	3f c0       	rjmp	.+126    	; 0x2646 <main+0x10e2>
	else if (__tmp > 65535)
    25c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25ca:	78 a1       	ldd	r23, Y+32	; 0x20
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	57 e4       	ldi	r21, 0x47	; 71
    25d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25dc:	18 16       	cp	r1, r24
    25de:	4c f5       	brge	.+82     	; 0x2632 <main+0x10ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	6b a1       	ldd	r22, Y+35	; 0x23
    25e2:	7c a1       	ldd	r23, Y+36	; 0x24
    25e4:	8d a1       	ldd	r24, Y+37	; 0x25
    25e6:	9e a1       	ldd	r25, Y+38	; 0x26
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9e 8f       	std	Y+30, r25	; 0x1e
    2606:	8d 8f       	std	Y+29, r24	; 0x1d
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <main+0x10c4>
    260a:	88 ec       	ldi	r24, 0xC8	; 200
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9c 8f       	std	Y+28, r25	; 0x1c
    2610:	8b 8f       	std	Y+27, r24	; 0x1b
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <main+0x10b2>
    261a:	9c 8f       	std	Y+28, r25	; 0x1c
    261c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	9e 8f       	std	Y+30, r25	; 0x1e
    2626:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    262a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	69 f7       	brne	.-38     	; 0x260a <main+0x10a6>
    2630:	14 c0       	rjmp	.+40     	; 0x265a <main+0x10f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2634:	78 a1       	ldd	r23, Y+32	; 0x20
    2636:	89 a1       	ldd	r24, Y+33	; 0x21
    2638:	9a a1       	ldd	r25, Y+34	; 0x22
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9e 8f       	std	Y+30, r25	; 0x1e
    2644:	8d 8f       	std	Y+29, r24	; 0x1d
    2646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2648:	9e 8d       	ldd	r25, Y+30	; 0x1e
    264a:	9a 8f       	std	Y+26, r25	; 0x1a
    264c:	89 8f       	std	Y+25, r24	; 0x19
    264e:	89 8d       	ldd	r24, Y+25	; 0x19
    2650:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <main+0x10ee>
    2656:	9a 8f       	std	Y+26, r25	; 0x1a
    2658:	89 8f       	std	Y+25, r24	; 0x19
					_delay_ms(500);
				} while(key != 13);
    265a:	80 91 15 01 	lds	r24, 0x0115
    265e:	8d 30       	cpi	r24, 0x0D	; 13
    2660:	09 f0       	breq	.+2      	; 0x2664 <main+0x1100>
    2662:	85 cf       	rjmp	.-246    	; 0x256e <main+0x100a>

				UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */
    2664:	81 e1       	ldi	r24, 0x11	; 17
    2666:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 ea       	ldi	r26, 0xA0	; 160
    2670:	b1 e4       	ldi	r27, 0x41	; 65
    2672:	8d 8b       	std	Y+21, r24	; 0x15
    2674:	9e 8b       	std	Y+22, r25	; 0x16
    2676:	af 8b       	std	Y+23, r26	; 0x17
    2678:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    267a:	6d 89       	ldd	r22, Y+21	; 0x15
    267c:	7e 89       	ldd	r23, Y+22	; 0x16
    267e:	8f 89       	ldd	r24, Y+23	; 0x17
    2680:	98 8d       	ldd	r25, Y+24	; 0x18
    2682:	2b ea       	ldi	r18, 0xAB	; 171
    2684:	3a ea       	ldi	r19, 0xAA	; 170
    2686:	4a e2       	ldi	r20, 0x2A	; 42
    2688:	50 e4       	ldi	r21, 0x40	; 64
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	89 8b       	std	Y+17, r24	; 0x11
    2694:	9a 8b       	std	Y+18, r25	; 0x12
    2696:	ab 8b       	std	Y+19, r26	; 0x13
    2698:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    269a:	69 89       	ldd	r22, Y+17	; 0x11
    269c:	7a 89       	ldd	r23, Y+18	; 0x12
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	1c f4       	brge	.+6      	; 0x26b8 <main+0x1154>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	88 8b       	std	Y+16, r24	; 0x10
    26b6:	91 c0       	rjmp	.+290    	; 0x27da <main+0x1276>
	else if (__tmp > 255)
    26b8:	69 89       	ldd	r22, Y+17	; 0x11
    26ba:	7a 89       	ldd	r23, Y+18	; 0x12
    26bc:	8b 89       	ldd	r24, Y+19	; 0x13
    26be:	9c 89       	ldd	r25, Y+20	; 0x14
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	53 e4       	ldi	r21, 0x43	; 67
    26c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <main+0x116e>
    26d0:	7b c0       	rjmp	.+246    	; 0x27c8 <main+0x1264>
	{
		_delay_ms(__us / 1000.0);
    26d2:	6d 89       	ldd	r22, Y+21	; 0x15
    26d4:	7e 89       	ldd	r23, Y+22	; 0x16
    26d6:	8f 89       	ldd	r24, Y+23	; 0x17
    26d8:	98 8d       	ldd	r25, Y+24	; 0x18
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4a e7       	ldi	r20, 0x7A	; 122
    26e0:	54 e4       	ldi	r21, 0x44	; 68
    26e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8c 87       	std	Y+12, r24	; 0x0c
    26ec:	9d 87       	std	Y+13, r25	; 0x0d
    26ee:	ae 87       	std	Y+14, r26	; 0x0e
    26f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a ef       	ldi	r20, 0xFA	; 250
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	88 87       	std	Y+8, r24	; 0x08
    270c:	99 87       	std	Y+9, r25	; 0x09
    270e:	aa 87       	std	Y+10, r26	; 0x0a
    2710:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2712:	68 85       	ldd	r22, Y+8	; 0x08
    2714:	79 85       	ldd	r23, Y+9	; 0x09
    2716:	8a 85       	ldd	r24, Y+10	; 0x0a
    2718:	9b 85       	ldd	r25, Y+11	; 0x0b
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <main+0x11d0>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9f 83       	std	Y+7, r25	; 0x07
    2730:	8e 83       	std	Y+6, r24	; 0x06
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <main+0x124e>
	else if (__tmp > 65535)
    2734:	68 85       	ldd	r22, Y+8	; 0x08
    2736:	79 85       	ldd	r23, Y+9	; 0x09
    2738:	8a 85       	ldd	r24, Y+10	; 0x0a
    273a:	9b 85       	ldd	r25, Y+11	; 0x0b
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <main+0x123a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6c 85       	ldd	r22, Y+12	; 0x0c
    274e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2750:	8e 85       	ldd	r24, Y+14	; 0x0e
    2752:	9f 85       	ldd	r25, Y+15	; 0x0f
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9f 83       	std	Y+7, r25	; 0x07
    2772:	8e 83       	std	Y+6, r24	; 0x06
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <main+0x1230>
    2776:	88 ec       	ldi	r24, 0xC8	; 200
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9d 83       	std	Y+5, r25	; 0x05
    277c:	8c 83       	std	Y+4, r24	; 0x04
    277e:	8c 81       	ldd	r24, Y+4	; 0x04
    2780:	9d 81       	ldd	r25, Y+5	; 0x05
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <main+0x121e>
    2786:	9d 83       	std	Y+5, r25	; 0x05
    2788:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	8e 81       	ldd	r24, Y+6	; 0x06
    278c:	9f 81       	ldd	r25, Y+7	; 0x07
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9f 83       	std	Y+7, r25	; 0x07
    2792:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	8e 81       	ldd	r24, Y+6	; 0x06
    2796:	9f 81       	ldd	r25, Y+7	; 0x07
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <main+0x1212>
    279c:	24 c0       	rjmp	.+72     	; 0x27e6 <main+0x1282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	68 85       	ldd	r22, Y+8	; 0x08
    27a0:	79 85       	ldd	r23, Y+9	; 0x09
    27a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9f 83       	std	Y+7, r25	; 0x07
    27b0:	8e 83       	std	Y+6, r24	; 0x06
    27b2:	8e 81       	ldd	r24, Y+6	; 0x06
    27b4:	9f 81       	ldd	r25, Y+7	; 0x07
    27b6:	9b 83       	std	Y+3, r25	; 0x03
    27b8:	8a 83       	std	Y+2, r24	; 0x02
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	9b 81       	ldd	r25, Y+3	; 0x03
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <main+0x125a>
    27c2:	9b 83       	std	Y+3, r25	; 0x03
    27c4:	8a 83       	std	Y+2, r24	; 0x02
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <main+0x1282>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27c8:	69 89       	ldd	r22, Y+17	; 0x11
    27ca:	7a 89       	ldd	r23, Y+18	; 0x12
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	88 8b       	std	Y+16, r24	; 0x10
    27da:	88 89       	ldd	r24, Y+16	; 0x10
    27dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	8a 95       	dec	r24
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <main+0x127c>
    27e4:	89 83       	std	Y+1, r24	; 0x01

				_delay_us(20);

				/* Send Password To 2nd MCU */
				SendPass(pass1);
    27e6:	89 e0       	ldi	r24, 0x09	; 9
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	0e 94 c6 09 	call	0x138c	; 0x138c <SendPass>

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    27ee:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>
    27f2:	80 93 13 01 	sts	0x0113, r24

				while(1)
				{
					if(status == OK) /* Right Password */
    27f6:	80 91 13 01 	lds	r24, 0x0113
    27fa:	80 31       	cpi	r24, 0x10	; 16
    27fc:	49 f4       	brne	.+18     	; 0x2810 <main+0x12ac>
					{
						flag = 0 ;
    27fe:	fe 01       	movw	r30, r28
    2800:	e1 55       	subi	r30, 0x51	; 81
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	10 82       	st	Z, r1
						UART_sendByte(CR_PASS); /* Inform other MCU Current Phase Create Pass */
    2806:	85 e1       	ldi	r24, 0x15	; 21
    2808:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
    280c:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <main+0xec>
						break;
					}
					else /* Wrong Password */
					{
						St_Error(); /* Call ERROR Function */
    2810:	0e 94 9c 06 	call	0xd38	; 0xd38 <St_Error>

						if(status == ERROR)
    2814:	80 91 13 01 	lds	r24, 0x0113
    2818:	88 23       	and	r24, r24
    281a:	11 f4       	brne	.+4      	; 0x2820 <main+0x12bc>
    281c:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <main+0xec>
    2820:	ea cf       	rjmp	.-44     	; 0x27f6 <main+0x1292>

00002822 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	00 d0       	rcall	.+0      	; 0x2828 <GPIO_setupPinDirection+0x6>
    2828:	00 d0       	rcall	.+0      	; 0x282a <GPIO_setupPinDirection+0x8>
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	6a 83       	std	Y+2, r22	; 0x02
    2834:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	88 30       	cpi	r24, 0x08	; 8
    283a:	08 f0       	brcs	.+2      	; 0x283e <GPIO_setupPinDirection+0x1c>
    283c:	d5 c0       	rjmp	.+426    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	84 30       	cpi	r24, 0x04	; 4
    2842:	08 f0       	brcs	.+2      	; 0x2846 <GPIO_setupPinDirection+0x24>
    2844:	d1 c0       	rjmp	.+418    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3d 83       	std	Y+5, r19	; 0x05
    284e:	2c 83       	std	Y+4, r18	; 0x04
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	9d 81       	ldd	r25, Y+5	; 0x05
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <GPIO_setupPinDirection+0x3a>
    285a:	43 c0       	rjmp	.+134    	; 0x28e2 <GPIO_setupPinDirection+0xc0>
    285c:	2c 81       	ldd	r18, Y+4	; 0x04
    285e:	3d 81       	ldd	r19, Y+5	; 0x05
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	2c f4       	brge	.+10     	; 0x2870 <GPIO_setupPinDirection+0x4e>
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	9d 81       	ldd	r25, Y+5	; 0x05
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	71 f0       	breq	.+28     	; 0x288a <GPIO_setupPinDirection+0x68>
    286e:	bc c0       	rjmp	.+376    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
    2870:	2c 81       	ldd	r18, Y+4	; 0x04
    2872:	3d 81       	ldd	r19, Y+5	; 0x05
    2874:	22 30       	cpi	r18, 0x02	; 2
    2876:	31 05       	cpc	r19, r1
    2878:	09 f4       	brne	.+2      	; 0x287c <GPIO_setupPinDirection+0x5a>
    287a:	5f c0       	rjmp	.+190    	; 0x293a <GPIO_setupPinDirection+0x118>
    287c:	8c 81       	ldd	r24, Y+4	; 0x04
    287e:	9d 81       	ldd	r25, Y+5	; 0x05
    2880:	83 30       	cpi	r24, 0x03	; 3
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <GPIO_setupPinDirection+0x66>
    2886:	85 c0       	rjmp	.+266    	; 0x2992 <GPIO_setupPinDirection+0x170>
    2888:	af c0       	rjmp	.+350    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	a1 f4       	brne	.+40     	; 0x28b8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2890:	aa e3       	ldi	r26, 0x3A	; 58
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ea e3       	ldi	r30, 0x3A	; 58
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	48 2f       	mov	r20, r24
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	28 2f       	mov	r18, r24
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	02 2e       	mov	r0, r18
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <GPIO_setupPinDirection+0x8c>
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	0a 94       	dec	r0
    28b0:	e2 f7       	brpl	.-8      	; 0x28aa <GPIO_setupPinDirection+0x88>
    28b2:	84 2b       	or	r24, r20
    28b4:	8c 93       	st	X, r24
    28b6:	98 c0       	rjmp	.+304    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    28b8:	aa e3       	ldi	r26, 0x3A	; 58
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ea e3       	ldi	r30, 0x3A	; 58
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	48 2f       	mov	r20, r24
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	02 2e       	mov	r0, r18
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <GPIO_setupPinDirection+0xb4>
    28d2:	88 0f       	add	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	0a 94       	dec	r0
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <GPIO_setupPinDirection+0xb0>
    28da:	80 95       	com	r24
    28dc:	84 23       	and	r24, r20
    28de:	8c 93       	st	X, r24
    28e0:	83 c0       	rjmp	.+262    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	81 30       	cpi	r24, 0x01	; 1
    28e6:	a1 f4       	brne	.+40     	; 0x2910 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    28e8:	a7 e3       	ldi	r26, 0x37	; 55
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e7 e3       	ldi	r30, 0x37	; 55
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <GPIO_setupPinDirection+0xe4>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <GPIO_setupPinDirection+0xe0>
    290a:	84 2b       	or	r24, r20
    290c:	8c 93       	st	X, r24
    290e:	6c c0       	rjmp	.+216    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2910:	a7 e3       	ldi	r26, 0x37	; 55
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e7 e3       	ldi	r30, 0x37	; 55
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	48 2f       	mov	r20, r24
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	02 2e       	mov	r0, r18
    2928:	02 c0       	rjmp	.+4      	; 0x292e <GPIO_setupPinDirection+0x10c>
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	0a 94       	dec	r0
    2930:	e2 f7       	brpl	.-8      	; 0x292a <GPIO_setupPinDirection+0x108>
    2932:	80 95       	com	r24
    2934:	84 23       	and	r24, r20
    2936:	8c 93       	st	X, r24
    2938:	57 c0       	rjmp	.+174    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	a1 f4       	brne	.+40     	; 0x2968 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2940:	a4 e3       	ldi	r26, 0x34	; 52
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e4 e3       	ldi	r30, 0x34	; 52
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <GPIO_setupPinDirection+0x13c>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <GPIO_setupPinDirection+0x138>
    2962:	84 2b       	or	r24, r20
    2964:	8c 93       	st	X, r24
    2966:	40 c0       	rjmp	.+128    	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2968:	a4 e3       	ldi	r26, 0x34	; 52
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e4 e3       	ldi	r30, 0x34	; 52
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	48 2f       	mov	r20, r24
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <GPIO_setupPinDirection+0x164>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <GPIO_setupPinDirection+0x160>
    298a:	80 95       	com	r24
    298c:	84 23       	and	r24, r20
    298e:	8c 93       	st	X, r24
    2990:	2b c0       	rjmp	.+86     	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	81 30       	cpi	r24, 0x01	; 1
    2996:	a1 f4       	brne	.+40     	; 0x29c0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2998:	a1 e3       	ldi	r26, 0x31	; 49
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e1 e3       	ldi	r30, 0x31	; 49
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	48 2f       	mov	r20, r24
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	02 2e       	mov	r0, r18
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <GPIO_setupPinDirection+0x194>
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	0a 94       	dec	r0
    29b8:	e2 f7       	brpl	.-8      	; 0x29b2 <GPIO_setupPinDirection+0x190>
    29ba:	84 2b       	or	r24, r20
    29bc:	8c 93       	st	X, r24
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    29c0:	a1 e3       	ldi	r26, 0x31	; 49
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e1 e3       	ldi	r30, 0x31	; 49
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	48 2f       	mov	r20, r24
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	02 2e       	mov	r0, r18
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <GPIO_setupPinDirection+0x1bc>
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	0a 94       	dec	r0
    29e0:	e2 f7       	brpl	.-8      	; 0x29da <GPIO_setupPinDirection+0x1b8>
    29e2:	80 95       	com	r24
    29e4:	84 23       	and	r24, r20
    29e6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <GPIO_writePin+0x6>
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <GPIO_writePin+0x8>
    2a00:	0f 92       	push	r0
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	6a 83       	std	Y+2, r22	; 0x02
    2a0a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	88 30       	cpi	r24, 0x08	; 8
    2a10:	08 f0       	brcs	.+2      	; 0x2a14 <GPIO_writePin+0x1c>
    2a12:	d5 c0       	rjmp	.+426    	; 0x2bbe <GPIO_writePin+0x1c6>
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	84 30       	cpi	r24, 0x04	; 4
    2a18:	08 f0       	brcs	.+2      	; 0x2a1c <GPIO_writePin+0x24>
    2a1a:	d1 c0       	rjmp	.+418    	; 0x2bbe <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	3d 83       	std	Y+5, r19	; 0x05
    2a24:	2c 83       	std	Y+4, r18	; 0x04
    2a26:	8c 81       	ldd	r24, Y+4	; 0x04
    2a28:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <GPIO_writePin+0x3a>
    2a30:	43 c0       	rjmp	.+134    	; 0x2ab8 <GPIO_writePin+0xc0>
    2a32:	2c 81       	ldd	r18, Y+4	; 0x04
    2a34:	3d 81       	ldd	r19, Y+5	; 0x05
    2a36:	22 30       	cpi	r18, 0x02	; 2
    2a38:	31 05       	cpc	r19, r1
    2a3a:	2c f4       	brge	.+10     	; 0x2a46 <GPIO_writePin+0x4e>
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	71 f0       	breq	.+28     	; 0x2a60 <GPIO_writePin+0x68>
    2a44:	bc c0       	rjmp	.+376    	; 0x2bbe <GPIO_writePin+0x1c6>
    2a46:	2c 81       	ldd	r18, Y+4	; 0x04
    2a48:	3d 81       	ldd	r19, Y+5	; 0x05
    2a4a:	22 30       	cpi	r18, 0x02	; 2
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <GPIO_writePin+0x5a>
    2a50:	5f c0       	rjmp	.+190    	; 0x2b10 <GPIO_writePin+0x118>
    2a52:	8c 81       	ldd	r24, Y+4	; 0x04
    2a54:	9d 81       	ldd	r25, Y+5	; 0x05
    2a56:	83 30       	cpi	r24, 0x03	; 3
    2a58:	91 05       	cpc	r25, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <GPIO_writePin+0x66>
    2a5c:	85 c0       	rjmp	.+266    	; 0x2b68 <GPIO_writePin+0x170>
    2a5e:	af c0       	rjmp	.+350    	; 0x2bbe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	a1 f4       	brne	.+40     	; 0x2a8e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2a66:	ab e3       	ldi	r26, 0x3B	; 59
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	eb e3       	ldi	r30, 0x3B	; 59
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	48 2f       	mov	r20, r24
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <GPIO_writePin+0x8c>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <GPIO_writePin+0x88>
    2a88:	84 2b       	or	r24, r20
    2a8a:	8c 93       	st	X, r24
    2a8c:	98 c0       	rjmp	.+304    	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2a8e:	ab e3       	ldi	r26, 0x3B	; 59
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	eb e3       	ldi	r30, 0x3B	; 59
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	48 2f       	mov	r20, r24
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	02 2e       	mov	r0, r18
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <GPIO_writePin+0xb4>
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	0a 94       	dec	r0
    2aae:	e2 f7       	brpl	.-8      	; 0x2aa8 <GPIO_writePin+0xb0>
    2ab0:	80 95       	com	r24
    2ab2:	84 23       	and	r24, r20
    2ab4:	8c 93       	st	X, r24
    2ab6:	83 c0       	rjmp	.+262    	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	a1 f4       	brne	.+40     	; 0x2ae6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2abe:	a8 e3       	ldi	r26, 0x38	; 56
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e8 e3       	ldi	r30, 0x38	; 56
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	48 2f       	mov	r20, r24
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 2e       	mov	r0, r18
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <GPIO_writePin+0xe4>
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	0a 94       	dec	r0
    2ade:	e2 f7       	brpl	.-8      	; 0x2ad8 <GPIO_writePin+0xe0>
    2ae0:	84 2b       	or	r24, r20
    2ae2:	8c 93       	st	X, r24
    2ae4:	6c c0       	rjmp	.+216    	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2ae6:	a8 e3       	ldi	r26, 0x38	; 56
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e8 e3       	ldi	r30, 0x38	; 56
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	48 2f       	mov	r20, r24
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	02 2e       	mov	r0, r18
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <GPIO_writePin+0x10c>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	0a 94       	dec	r0
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <GPIO_writePin+0x108>
    2b08:	80 95       	com	r24
    2b0a:	84 23       	and	r24, r20
    2b0c:	8c 93       	st	X, r24
    2b0e:	57 c0       	rjmp	.+174    	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	a1 f4       	brne	.+40     	; 0x2b3e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2b16:	a5 e3       	ldi	r26, 0x35	; 53
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e5 e3       	ldi	r30, 0x35	; 53
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	48 2f       	mov	r20, r24
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	02 2e       	mov	r0, r18
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <GPIO_writePin+0x13c>
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	0a 94       	dec	r0
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <GPIO_writePin+0x138>
    2b38:	84 2b       	or	r24, r20
    2b3a:	8c 93       	st	X, r24
    2b3c:	40 c0       	rjmp	.+128    	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2b3e:	a5 e3       	ldi	r26, 0x35	; 53
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e5 e3       	ldi	r30, 0x35	; 53
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	48 2f       	mov	r20, r24
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	02 2e       	mov	r0, r18
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <GPIO_writePin+0x164>
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	0a 94       	dec	r0
    2b5e:	e2 f7       	brpl	.-8      	; 0x2b58 <GPIO_writePin+0x160>
    2b60:	80 95       	com	r24
    2b62:	84 23       	and	r24, r20
    2b64:	8c 93       	st	X, r24
    2b66:	2b c0       	rjmp	.+86     	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	a1 f4       	brne	.+40     	; 0x2b96 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2b6e:	a2 e3       	ldi	r26, 0x32	; 50
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e2 e3       	ldi	r30, 0x32	; 50
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	48 2f       	mov	r20, r24
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	02 2e       	mov	r0, r18
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <GPIO_writePin+0x194>
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	0a 94       	dec	r0
    2b8e:	e2 f7       	brpl	.-8      	; 0x2b88 <GPIO_writePin+0x190>
    2b90:	84 2b       	or	r24, r20
    2b92:	8c 93       	st	X, r24
    2b94:	14 c0       	rjmp	.+40     	; 0x2bbe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2b96:	a2 e3       	ldi	r26, 0x32	; 50
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e2 e3       	ldi	r30, 0x32	; 50
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	48 2f       	mov	r20, r24
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	02 2e       	mov	r0, r18
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <GPIO_writePin+0x1bc>
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	0a 94       	dec	r0
    2bb6:	e2 f7       	brpl	.-8      	; 0x2bb0 <GPIO_writePin+0x1b8>
    2bb8:	80 95       	com	r24
    2bba:	84 23       	and	r24, r20
    2bbc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <GPIO_readPin+0x6>
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <GPIO_readPin+0x8>
    2bd6:	0f 92       	push	r0
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	8a 83       	std	Y+2, r24	; 0x02
    2bde:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2be0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	88 30       	cpi	r24, 0x08	; 8
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <GPIO_readPin+0x1c>
    2be8:	84 c0       	rjmp	.+264    	; 0x2cf2 <GPIO_readPin+0x124>
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	84 30       	cpi	r24, 0x04	; 4
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <GPIO_readPin+0x24>
    2bf0:	80 c0       	rjmp	.+256    	; 0x2cf2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	3d 83       	std	Y+5, r19	; 0x05
    2bfa:	2c 83       	std	Y+4, r18	; 0x04
    2bfc:	4c 81       	ldd	r20, Y+4	; 0x04
    2bfe:	5d 81       	ldd	r21, Y+5	; 0x05
    2c00:	41 30       	cpi	r20, 0x01	; 1
    2c02:	51 05       	cpc	r21, r1
    2c04:	79 f1       	breq	.+94     	; 0x2c64 <GPIO_readPin+0x96>
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	34 f4       	brge	.+12     	; 0x2c1c <GPIO_readPin+0x4e>
    2c10:	2c 81       	ldd	r18, Y+4	; 0x04
    2c12:	3d 81       	ldd	r19, Y+5	; 0x05
    2c14:	21 15       	cp	r18, r1
    2c16:	31 05       	cpc	r19, r1
    2c18:	69 f0       	breq	.+26     	; 0x2c34 <GPIO_readPin+0x66>
    2c1a:	6b c0       	rjmp	.+214    	; 0x2cf2 <GPIO_readPin+0x124>
    2c1c:	4c 81       	ldd	r20, Y+4	; 0x04
    2c1e:	5d 81       	ldd	r21, Y+5	; 0x05
    2c20:	42 30       	cpi	r20, 0x02	; 2
    2c22:	51 05       	cpc	r21, r1
    2c24:	b9 f1       	breq	.+110    	; 0x2c94 <GPIO_readPin+0xc6>
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2a:	83 30       	cpi	r24, 0x03	; 3
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <GPIO_readPin+0x64>
    2c30:	49 c0       	rjmp	.+146    	; 0x2cc4 <GPIO_readPin+0xf6>
    2c32:	5f c0       	rjmp	.+190    	; 0x2cf2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2c34:	e9 e3       	ldi	r30, 0x39	; 57
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	88 2f       	mov	r24, r24
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a9 01       	movw	r20, r18
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <GPIO_readPin+0x7e>
    2c48:	55 95       	asr	r21
    2c4a:	47 95       	ror	r20
    2c4c:	8a 95       	dec	r24
    2c4e:	e2 f7       	brpl	.-8      	; 0x2c48 <GPIO_readPin+0x7a>
    2c50:	ca 01       	movw	r24, r20
    2c52:	81 70       	andi	r24, 0x01	; 1
    2c54:	90 70       	andi	r25, 0x00	; 0
    2c56:	88 23       	and	r24, r24
    2c58:	19 f0       	breq	.+6      	; 0x2c60 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	49 c0       	rjmp	.+146    	; 0x2cf2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	47 c0       	rjmp	.+142    	; 0x2cf2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2c64:	e6 e3       	ldi	r30, 0x36	; 54
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a9 01       	movw	r20, r18
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <GPIO_readPin+0xae>
    2c78:	55 95       	asr	r21
    2c7a:	47 95       	ror	r20
    2c7c:	8a 95       	dec	r24
    2c7e:	e2 f7       	brpl	.-8      	; 0x2c78 <GPIO_readPin+0xaa>
    2c80:	ca 01       	movw	r24, r20
    2c82:	81 70       	andi	r24, 0x01	; 1
    2c84:	90 70       	andi	r25, 0x00	; 0
    2c86:	88 23       	and	r24, r24
    2c88:	19 f0       	breq	.+6      	; 0x2c90 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	31 c0       	rjmp	.+98     	; 0x2cf2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2c90:	19 82       	std	Y+1, r1	; 0x01
    2c92:	2f c0       	rjmp	.+94     	; 0x2cf2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2c94:	e3 e3       	ldi	r30, 0x33	; 51
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	88 2f       	mov	r24, r24
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <GPIO_readPin+0xde>
    2ca8:	55 95       	asr	r21
    2caa:	47 95       	ror	r20
    2cac:	8a 95       	dec	r24
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <GPIO_readPin+0xda>
    2cb0:	ca 01       	movw	r24, r20
    2cb2:	81 70       	andi	r24, 0x01	; 1
    2cb4:	90 70       	andi	r25, 0x00	; 0
    2cb6:	88 23       	and	r24, r24
    2cb8:	19 f0       	breq	.+6      	; 0x2cc0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	19 c0       	rjmp	.+50     	; 0x2cf2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2cc0:	19 82       	std	Y+1, r1	; 0x01
    2cc2:	17 c0       	rjmp	.+46     	; 0x2cf2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2cc4:	e0 e3       	ldi	r30, 0x30	; 48
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	88 2f       	mov	r24, r24
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a9 01       	movw	r20, r18
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <GPIO_readPin+0x10e>
    2cd8:	55 95       	asr	r21
    2cda:	47 95       	ror	r20
    2cdc:	8a 95       	dec	r24
    2cde:	e2 f7       	brpl	.-8      	; 0x2cd8 <GPIO_readPin+0x10a>
    2ce0:	ca 01       	movw	r24, r20
    2ce2:	81 70       	andi	r24, 0x01	; 1
    2ce4:	90 70       	andi	r25, 0x00	; 0
    2ce6:	88 23       	and	r24, r24
    2ce8:	19 f0       	breq	.+6      	; 0x2cf0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2cf0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <GPIO_setupPortDirection+0x6>
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <GPIO_setupPortDirection+0x8>
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	84 30       	cpi	r24, 0x04	; 4
    2d18:	90 f5       	brcc	.+100    	; 0x2d7e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	3c 83       	std	Y+4, r19	; 0x04
    2d22:	2b 83       	std	Y+3, r18	; 0x03
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	d1 f0       	breq	.+52     	; 0x2d62 <GPIO_setupPortDirection+0x5e>
    2d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d30:	3c 81       	ldd	r19, Y+4	; 0x04
    2d32:	22 30       	cpi	r18, 0x02	; 2
    2d34:	31 05       	cpc	r19, r1
    2d36:	2c f4       	brge	.+10     	; 0x2d42 <GPIO_setupPortDirection+0x3e>
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	61 f0       	breq	.+24     	; 0x2d58 <GPIO_setupPortDirection+0x54>
    2d40:	1e c0       	rjmp	.+60     	; 0x2d7e <GPIO_setupPortDirection+0x7a>
    2d42:	2b 81       	ldd	r18, Y+3	; 0x03
    2d44:	3c 81       	ldd	r19, Y+4	; 0x04
    2d46:	22 30       	cpi	r18, 0x02	; 2
    2d48:	31 05       	cpc	r19, r1
    2d4a:	81 f0       	breq	.+32     	; 0x2d6c <GPIO_setupPortDirection+0x68>
    2d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d50:	83 30       	cpi	r24, 0x03	; 3
    2d52:	91 05       	cpc	r25, r1
    2d54:	81 f0       	breq	.+32     	; 0x2d76 <GPIO_setupPortDirection+0x72>
    2d56:	13 c0       	rjmp	.+38     	; 0x2d7e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2d58:	ea e3       	ldi	r30, 0x3A	; 58
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5e:	80 83       	st	Z, r24
    2d60:	0e c0       	rjmp	.+28     	; 0x2d7e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2d62:	e7 e3       	ldi	r30, 0x37	; 55
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	80 83       	st	Z, r24
    2d6a:	09 c0       	rjmp	.+18     	; 0x2d7e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2d6c:	e4 e3       	ldi	r30, 0x34	; 52
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	80 83       	st	Z, r24
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2d76:	e1 e3       	ldi	r30, 0x31	; 49
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <GPIO_writePort+0x6>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <GPIO_writePort+0x8>
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	84 30       	cpi	r24, 0x04	; 4
    2da0:	90 f5       	brcc	.+100    	; 0x2e06 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	3c 83       	std	Y+4, r19	; 0x04
    2daa:	2b 83       	std	Y+3, r18	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	91 05       	cpc	r25, r1
    2db4:	d1 f0       	breq	.+52     	; 0x2dea <GPIO_writePort+0x5e>
    2db6:	2b 81       	ldd	r18, Y+3	; 0x03
    2db8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dba:	22 30       	cpi	r18, 0x02	; 2
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <GPIO_writePort+0x3e>
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	61 f0       	breq	.+24     	; 0x2de0 <GPIO_writePort+0x54>
    2dc8:	1e c0       	rjmp	.+60     	; 0x2e06 <GPIO_writePort+0x7a>
    2dca:	2b 81       	ldd	r18, Y+3	; 0x03
    2dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dce:	22 30       	cpi	r18, 0x02	; 2
    2dd0:	31 05       	cpc	r19, r1
    2dd2:	81 f0       	breq	.+32     	; 0x2df4 <GPIO_writePort+0x68>
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	83 30       	cpi	r24, 0x03	; 3
    2dda:	91 05       	cpc	r25, r1
    2ddc:	81 f0       	breq	.+32     	; 0x2dfe <GPIO_writePort+0x72>
    2dde:	13 c0       	rjmp	.+38     	; 0x2e06 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2de0:	eb e3       	ldi	r30, 0x3B	; 59
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	80 83       	st	Z, r24
    2de8:	0e c0       	rjmp	.+28     	; 0x2e06 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2dea:	e8 e3       	ldi	r30, 0x38	; 56
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	80 83       	st	Z, r24
    2df2:	09 c0       	rjmp	.+18     	; 0x2e06 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2df4:	e5 e3       	ldi	r30, 0x35	; 53
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	80 83       	st	Z, r24
    2dfc:	04 c0       	rjmp	.+8      	; 0x2e06 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2dfe:	e2 e3       	ldi	r30, 0x32	; 50
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	80 83       	st	Z, r24
			break;
		}
	}
}
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <GPIO_readPort+0x6>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <GPIO_readPort+0x8>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2e22:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	84 30       	cpi	r24, 0x04	; 4
    2e28:	90 f5       	brcc	.+100    	; 0x2e8e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	3c 83       	std	Y+4, r19	; 0x04
    2e32:	2b 83       	std	Y+3, r18	; 0x03
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	d1 f0       	breq	.+52     	; 0x2e72 <GPIO_readPort+0x5e>
    2e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e40:	3c 81       	ldd	r19, Y+4	; 0x04
    2e42:	22 30       	cpi	r18, 0x02	; 2
    2e44:	31 05       	cpc	r19, r1
    2e46:	2c f4       	brge	.+10     	; 0x2e52 <GPIO_readPort+0x3e>
    2e48:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	61 f0       	breq	.+24     	; 0x2e68 <GPIO_readPort+0x54>
    2e50:	1e c0       	rjmp	.+60     	; 0x2e8e <GPIO_readPort+0x7a>
    2e52:	2b 81       	ldd	r18, Y+3	; 0x03
    2e54:	3c 81       	ldd	r19, Y+4	; 0x04
    2e56:	22 30       	cpi	r18, 0x02	; 2
    2e58:	31 05       	cpc	r19, r1
    2e5a:	81 f0       	breq	.+32     	; 0x2e7c <GPIO_readPort+0x68>
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e60:	83 30       	cpi	r24, 0x03	; 3
    2e62:	91 05       	cpc	r25, r1
    2e64:	81 f0       	breq	.+32     	; 0x2e86 <GPIO_readPort+0x72>
    2e66:	13 c0       	rjmp	.+38     	; 0x2e8e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2e68:	e9 e3       	ldi	r30, 0x39	; 57
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	0e c0       	rjmp	.+28     	; 0x2e8e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2e72:	e6 e3       	ldi	r30, 0x36	; 54
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	09 c0       	rjmp	.+18     	; 0x2e8e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2e7c:	e3 e3       	ldi	r30, 0x33	; 51
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2e86:	e0 e3       	ldi	r30, 0x30	; 48
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	60 97       	sbiw	r28, 0x10	; 16
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	62 e0       	ldi	r22, 0x02	; 2
    2eca:	40 e0       	ldi	r20, 0x00	; 0
    2ecc:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	63 e0       	ldi	r22, 0x03	; 3
    2ed4:	40 e0       	ldi	r20, 0x00	; 0
    2ed6:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	64 e0       	ldi	r22, 0x04	; 4
    2ede:	40 e0       	ldi	r20, 0x00	; 0
    2ee0:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	65 e0       	ldi	r22, 0x05	; 5
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	66 e0       	ldi	r22, 0x06	; 6
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	67 e0       	ldi	r22, 0x07	; 7
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2f02:	1f 86       	std	Y+15, r1	; 0x0f
    2f04:	ab c0       	rjmp	.+342    	; 0x305c <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2f1a:	18 8a       	std	Y+16, r1	; 0x10
    2f1c:	22 c0       	rjmp	.+68     	; 0x2f62 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2f1e:	88 89       	ldd	r24, Y+16	; 0x10
    2f20:	98 2f       	mov	r25, r24
    2f22:	9c 5f       	subi	r25, 0xFC	; 252
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	69 2f       	mov	r22, r25
    2f28:	0e 94 e7 15 	call	0x2bce	; 0x2bce <GPIO_readPin>
    2f2c:	88 23       	and	r24, r24
    2f2e:	b1 f4       	brne	.+44     	; 0x2f5c <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f32:	88 2f       	mov	r24, r24
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	98 2f       	mov	r25, r24
    2f40:	88 89       	ldd	r24, Y+16	; 0x10
    2f42:	89 0f       	add	r24, r25
    2f44:	8f 5f       	subi	r24, 0xFF	; 255
    2f46:	0e 94 33 18 	call	0x3066	; 0x3066 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2f4a:	60 96       	adiw	r28, 0x10	; 16
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2f5c:	88 89       	ldd	r24, Y+16	; 0x10
    2f5e:	8f 5f       	subi	r24, 0xFF	; 255
    2f60:	88 8b       	std	Y+16, r24	; 0x10
    2f62:	88 89       	ldd	r24, Y+16	; 0x10
    2f64:	84 30       	cpi	r24, 0x04	; 4
    2f66:	d8 f2       	brcs	.-74     	; 0x2f1e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	a0 ea       	ldi	r26, 0xA0	; 160
    2f78:	b0 e4       	ldi	r27, 0x40	; 64
    2f7a:	8b 87       	std	Y+11, r24	; 0x0b
    2f7c:	9c 87       	std	Y+12, r25	; 0x0c
    2f7e:	ad 87       	std	Y+13, r26	; 0x0d
    2f80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4a ef       	ldi	r20, 0xFA	; 250
    2f90:	54 e4       	ldi	r21, 0x44	; 68
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	8f 83       	std	Y+7, r24	; 0x07
    2f9c:	98 87       	std	Y+8, r25	; 0x08
    2f9e:	a9 87       	std	Y+9, r26	; 0x09
    2fa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa4:	78 85       	ldd	r23, Y+8	; 0x08
    2fa6:	89 85       	ldd	r24, Y+9	; 0x09
    2fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e8       	ldi	r20, 0x80	; 128
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb6:	88 23       	and	r24, r24
    2fb8:	2c f4       	brge	.+10     	; 0x2fc4 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
    2fc2:	3f c0       	rjmp	.+126    	; 0x3042 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc6:	78 85       	ldd	r23, Y+8	; 0x08
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	3f ef       	ldi	r19, 0xFF	; 255
    2fd0:	4f e7       	ldi	r20, 0x7F	; 127
    2fd2:	57 e4       	ldi	r21, 0x47	; 71
    2fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd8:	18 16       	cp	r1, r24
    2fda:	4c f5       	brge	.+82     	; 0x302e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e2       	ldi	r20, 0x20	; 32
    2fea:	51 e4       	ldi	r21, 0x41	; 65
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	0f c0       	rjmp	.+30     	; 0x3024 <KEYPAD_getPressedKey+0x186>
    3006:	88 ec       	ldi	r24, 0xC8	; 200
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9c 83       	std	Y+4, r25	; 0x04
    300c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	9c 81       	ldd	r25, Y+4	; 0x04
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	f1 f7       	brne	.-4      	; 0x3012 <KEYPAD_getPressedKey+0x174>
    3016:	9c 83       	std	Y+4, r25	; 0x04
    3018:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    301a:	8d 81       	ldd	r24, Y+5	; 0x05
    301c:	9e 81       	ldd	r25, Y+6	; 0x06
    301e:	01 97       	sbiw	r24, 0x01	; 1
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	69 f7       	brne	.-38     	; 0x3006 <KEYPAD_getPressedKey+0x168>
    302c:	14 c0       	rjmp	.+40     	; 0x3056 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302e:	6f 81       	ldd	r22, Y+7	; 0x07
    3030:	78 85       	ldd	r23, Y+8	; 0x08
    3032:	89 85       	ldd	r24, Y+9	; 0x09
    3034:	9a 85       	ldd	r25, Y+10	; 0x0a
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9e 83       	std	Y+6, r25	; 0x06
    3040:	8d 83       	std	Y+5, r24	; 0x05
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	9a 81       	ldd	r25, Y+2	; 0x02
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	f1 f7       	brne	.-4      	; 0x304e <KEYPAD_getPressedKey+0x1b0>
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3056:	8f 85       	ldd	r24, Y+15	; 0x0f
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	8f 87       	std	Y+15, r24	; 0x0f
    305c:	8f 85       	ldd	r24, Y+15	; 0x0f
    305e:	84 30       	cpi	r24, 0x04	; 4
    3060:	08 f4       	brcc	.+2      	; 0x3064 <KEYPAD_getPressedKey+0x1c6>
    3062:	51 cf       	rjmp	.-350    	; 0x2f06 <KEYPAD_getPressedKey+0x68>
    3064:	4e cf       	rjmp	.-356    	; 0x2f02 <KEYPAD_getPressedKey+0x64>

00003066 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	00 d0       	rcall	.+0      	; 0x306c <KEYPAD_4x4_adjustKeyNumber+0x6>
    306c:	00 d0       	rcall	.+0      	; 0x306e <KEYPAD_4x4_adjustKeyNumber+0x8>
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3074:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	3c 83       	std	Y+4, r19	; 0x04
    307e:	2b 83       	std	Y+3, r18	; 0x03
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	88 30       	cpi	r24, 0x08	; 8
    3086:	91 05       	cpc	r25, r1
    3088:	09 f4       	brne	.+2      	; 0x308c <KEYPAD_4x4_adjustKeyNumber+0x26>
    308a:	70 c0       	rjmp	.+224    	; 0x316c <KEYPAD_4x4_adjustKeyNumber+0x106>
    308c:	2b 81       	ldd	r18, Y+3	; 0x03
    308e:	3c 81       	ldd	r19, Y+4	; 0x04
    3090:	29 30       	cpi	r18, 0x09	; 9
    3092:	31 05       	cpc	r19, r1
    3094:	5c f5       	brge	.+86     	; 0x30ec <KEYPAD_4x4_adjustKeyNumber+0x86>
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	84 30       	cpi	r24, 0x04	; 4
    309c:	91 05       	cpc	r25, r1
    309e:	09 f4       	brne	.+2      	; 0x30a2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    30a0:	59 c0       	rjmp	.+178    	; 0x3154 <KEYPAD_4x4_adjustKeyNumber+0xee>
    30a2:	2b 81       	ldd	r18, Y+3	; 0x03
    30a4:	3c 81       	ldd	r19, Y+4	; 0x04
    30a6:	25 30       	cpi	r18, 0x05	; 5
    30a8:	31 05       	cpc	r19, r1
    30aa:	9c f4       	brge	.+38     	; 0x30d2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	82 30       	cpi	r24, 0x02	; 2
    30b2:	91 05       	cpc	r25, r1
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    30b6:	48 c0       	rjmp	.+144    	; 0x3148 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    30b8:	2b 81       	ldd	r18, Y+3	; 0x03
    30ba:	3c 81       	ldd	r19, Y+4	; 0x04
    30bc:	23 30       	cpi	r18, 0x03	; 3
    30be:	31 05       	cpc	r19, r1
    30c0:	0c f0       	brlt	.+2      	; 0x30c4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    30c2:	45 c0       	rjmp	.+138    	; 0x314e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	81 30       	cpi	r24, 0x01	; 1
    30ca:	91 05       	cpc	r25, r1
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    30ce:	39 c0       	rjmp	.+114    	; 0x3142 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    30d0:	67 c0       	rjmp	.+206    	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    30d2:	2b 81       	ldd	r18, Y+3	; 0x03
    30d4:	3c 81       	ldd	r19, Y+4	; 0x04
    30d6:	26 30       	cpi	r18, 0x06	; 6
    30d8:	31 05       	cpc	r19, r1
    30da:	09 f4       	brne	.+2      	; 0x30de <KEYPAD_4x4_adjustKeyNumber+0x78>
    30dc:	41 c0       	rjmp	.+130    	; 0x3160 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	9c 81       	ldd	r25, Y+4	; 0x04
    30e2:	87 30       	cpi	r24, 0x07	; 7
    30e4:	91 05       	cpc	r25, r1
    30e6:	0c f0       	brlt	.+2      	; 0x30ea <KEYPAD_4x4_adjustKeyNumber+0x84>
    30e8:	3e c0       	rjmp	.+124    	; 0x3166 <KEYPAD_4x4_adjustKeyNumber+0x100>
    30ea:	37 c0       	rjmp	.+110    	; 0x315a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    30ec:	2b 81       	ldd	r18, Y+3	; 0x03
    30ee:	3c 81       	ldd	r19, Y+4	; 0x04
    30f0:	2c 30       	cpi	r18, 0x0C	; 12
    30f2:	31 05       	cpc	r19, r1
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    30f6:	46 c0       	rjmp	.+140    	; 0x3184 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	8d 30       	cpi	r24, 0x0D	; 13
    30fe:	91 05       	cpc	r25, r1
    3100:	5c f4       	brge	.+22     	; 0x3118 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3102:	2b 81       	ldd	r18, Y+3	; 0x03
    3104:	3c 81       	ldd	r19, Y+4	; 0x04
    3106:	2a 30       	cpi	r18, 0x0A	; 10
    3108:	31 05       	cpc	r19, r1
    310a:	b1 f1       	breq	.+108    	; 0x3178 <KEYPAD_4x4_adjustKeyNumber+0x112>
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	9c 81       	ldd	r25, Y+4	; 0x04
    3110:	8b 30       	cpi	r24, 0x0B	; 11
    3112:	91 05       	cpc	r25, r1
    3114:	a4 f5       	brge	.+104    	; 0x317e <KEYPAD_4x4_adjustKeyNumber+0x118>
    3116:	2d c0       	rjmp	.+90     	; 0x3172 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3118:	2b 81       	ldd	r18, Y+3	; 0x03
    311a:	3c 81       	ldd	r19, Y+4	; 0x04
    311c:	2e 30       	cpi	r18, 0x0E	; 14
    311e:	31 05       	cpc	r19, r1
    3120:	b9 f1       	breq	.+110    	; 0x3190 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	9c 81       	ldd	r25, Y+4	; 0x04
    3126:	8e 30       	cpi	r24, 0x0E	; 14
    3128:	91 05       	cpc	r25, r1
    312a:	7c f1       	brlt	.+94     	; 0x318a <KEYPAD_4x4_adjustKeyNumber+0x124>
    312c:	2b 81       	ldd	r18, Y+3	; 0x03
    312e:	3c 81       	ldd	r19, Y+4	; 0x04
    3130:	2f 30       	cpi	r18, 0x0F	; 15
    3132:	31 05       	cpc	r19, r1
    3134:	79 f1       	breq	.+94     	; 0x3194 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	80 31       	cpi	r24, 0x10	; 16
    313c:	91 05       	cpc	r25, r1
    313e:	69 f1       	breq	.+90     	; 0x319a <KEYPAD_4x4_adjustKeyNumber+0x134>
    3140:	2f c0       	rjmp	.+94     	; 0x31a0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3142:	87 e0       	ldi	r24, 0x07	; 7
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	2e c0       	rjmp	.+92     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3148:	88 e0       	ldi	r24, 0x08	; 8
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	2b c0       	rjmp	.+86     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    314e:	89 e0       	ldi	r24, 0x09	; 9
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	28 c0       	rjmp	.+80     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    3154:	8f e2       	ldi	r24, 0x2F	; 47
    3156:	89 83       	std	Y+1, r24	; 0x01
    3158:	25 c0       	rjmp	.+74     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    315a:	84 e0       	ldi	r24, 0x04	; 4
    315c:	89 83       	std	Y+1, r24	; 0x01
    315e:	22 c0       	rjmp	.+68     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3160:	85 e0       	ldi	r24, 0x05	; 5
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	1f c0       	rjmp	.+62     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3166:	86 e0       	ldi	r24, 0x06	; 6
    3168:	89 83       	std	Y+1, r24	; 0x01
    316a:	1c c0       	rjmp	.+56     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    316c:	8a e2       	ldi	r24, 0x2A	; 42
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	19 c0       	rjmp	.+50     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	16 c0       	rjmp	.+44     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	13 c0       	rjmp	.+38     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    317e:	83 e0       	ldi	r24, 0x03	; 3
    3180:	89 83       	std	Y+1, r24	; 0x01
    3182:	10 c0       	rjmp	.+32     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3184:	8d e2       	ldi	r24, 0x2D	; 45
    3186:	89 83       	std	Y+1, r24	; 0x01
    3188:	0d c0       	rjmp	.+26     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    318a:	8d e0       	ldi	r24, 0x0D	; 13
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	0a c0       	rjmp	.+20     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3190:	19 82       	std	Y+1, r1	; 0x01
    3192:	08 c0       	rjmp	.+16     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3194:	8d e3       	ldi	r24, 0x3D	; 61
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	05 c0       	rjmp	.+10     	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    319a:	8b e2       	ldi	r24, 0x2B	; 43
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	2e 97       	sbiw	r28, 0x0e	; 14
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	62 e0       	ldi	r22, 0x02	; 2
    31cc:	41 e0       	ldi	r20, 0x01	; 1
    31ce:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    31d2:	83 e0       	ldi	r24, 0x03	; 3
    31d4:	63 e0       	ldi	r22, 0x03	; 3
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 11 14 	call	0x2822	; 0x2822 <GPIO_setupPinDirection>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a0 ea       	ldi	r26, 0xA0	; 160
    31e2:	b1 e4       	ldi	r27, 0x41	; 65
    31e4:	8b 87       	std	Y+11, r24	; 0x0b
    31e6:	9c 87       	std	Y+12, r25	; 0x0c
    31e8:	ad 87       	std	Y+13, r26	; 0x0d
    31ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4a ef       	ldi	r20, 0xFA	; 250
    31fa:	54 e4       	ldi	r21, 0x44	; 68
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	8f 83       	std	Y+7, r24	; 0x07
    3206:	98 87       	std	Y+8, r25	; 0x08
    3208:	a9 87       	std	Y+9, r26	; 0x09
    320a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    320c:	6f 81       	ldd	r22, Y+7	; 0x07
    320e:	78 85       	ldd	r23, Y+8	; 0x08
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	9a 85       	ldd	r25, Y+10	; 0x0a
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e8       	ldi	r20, 0x80	; 128
    321a:	5f e3       	ldi	r21, 0x3F	; 63
    321c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3220:	88 23       	and	r24, r24
    3222:	2c f4       	brge	.+10     	; 0x322e <LCD_init+0x7a>
		__ticks = 1;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	9e 83       	std	Y+6, r25	; 0x06
    322a:	8d 83       	std	Y+5, r24	; 0x05
    322c:	3f c0       	rjmp	.+126    	; 0x32ac <LCD_init+0xf8>
	else if (__tmp > 65535)
    322e:	6f 81       	ldd	r22, Y+7	; 0x07
    3230:	78 85       	ldd	r23, Y+8	; 0x08
    3232:	89 85       	ldd	r24, Y+9	; 0x09
    3234:	9a 85       	ldd	r25, Y+10	; 0x0a
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	4c f5       	brge	.+82     	; 0x3298 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3246:	6b 85       	ldd	r22, Y+11	; 0x0b
    3248:	7c 85       	ldd	r23, Y+12	; 0x0c
    324a:	8d 85       	ldd	r24, Y+13	; 0x0d
    324c:	9e 85       	ldd	r25, Y+14	; 0x0e
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e2       	ldi	r20, 0x20	; 32
    3254:	51 e4       	ldi	r21, 0x41	; 65
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
    326e:	0f c0       	rjmp	.+30     	; 0x328e <LCD_init+0xda>
    3270:	88 ec       	ldi	r24, 0xC8	; 200
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9c 83       	std	Y+4, r25	; 0x04
    3276:	8b 83       	std	Y+3, r24	; 0x03
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	9c 81       	ldd	r25, Y+4	; 0x04
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <LCD_init+0xc8>
    3280:	9c 83       	std	Y+4, r25	; 0x04
    3282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	8d 81       	ldd	r24, Y+5	; 0x05
    3286:	9e 81       	ldd	r25, Y+6	; 0x06
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	69 f7       	brne	.-38     	; 0x3270 <LCD_init+0xbc>
    3296:	14 c0       	rjmp	.+40     	; 0x32c0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3298:	6f 81       	ldd	r22, Y+7	; 0x07
    329a:	78 85       	ldd	r23, Y+8	; 0x08
    329c:	89 85       	ldd	r24, Y+9	; 0x09
    329e:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	9e 81       	ldd	r25, Y+6	; 0x06
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <LCD_init+0x104>
    32bc:	9a 83       	std	Y+2, r25	; 0x02
    32be:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	6f ef       	ldi	r22, 0xFF	; 255
    32c4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    32c8:	88 e3       	ldi	r24, 0x38	; 56
    32ca:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    32ce:	8c e0       	ldi	r24, 0x0C	; 12
    32d0:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_sendCommand>
}
    32da:	2e 96       	adiw	r28, 0x0e	; 14
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	e9 97       	sbiw	r28, 0x39	; 57
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	62 e0       	ldi	r22, 0x02	; 2
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	a0 e8       	ldi	r26, 0x80	; 128
    3312:	bf e3       	ldi	r27, 0x3F	; 63
    3314:	8d ab       	std	Y+53, r24	; 0x35
    3316:	9e ab       	std	Y+54, r25	; 0x36
    3318:	af ab       	std	Y+55, r26	; 0x37
    331a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331c:	6d a9       	ldd	r22, Y+53	; 0x35
    331e:	7e a9       	ldd	r23, Y+54	; 0x36
    3320:	8f a9       	ldd	r24, Y+55	; 0x37
    3322:	98 ad       	ldd	r25, Y+56	; 0x38
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	4a ef       	ldi	r20, 0xFA	; 250
    332a:	54 e4       	ldi	r21, 0x44	; 68
    332c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	89 ab       	std	Y+49, r24	; 0x31
    3336:	9a ab       	std	Y+50, r25	; 0x32
    3338:	ab ab       	std	Y+51, r26	; 0x33
    333a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    333c:	69 a9       	ldd	r22, Y+49	; 0x31
    333e:	7a a9       	ldd	r23, Y+50	; 0x32
    3340:	8b a9       	ldd	r24, Y+51	; 0x33
    3342:	9c a9       	ldd	r25, Y+52	; 0x34
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e8       	ldi	r20, 0x80	; 128
    334a:	5f e3       	ldi	r21, 0x3F	; 63
    334c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3350:	88 23       	and	r24, r24
    3352:	2c f4       	brge	.+10     	; 0x335e <LCD_sendCommand+0x72>
		__ticks = 1;
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	98 ab       	std	Y+48, r25	; 0x30
    335a:	8f a7       	std	Y+47, r24	; 0x2f
    335c:	3f c0       	rjmp	.+126    	; 0x33dc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    335e:	69 a9       	ldd	r22, Y+49	; 0x31
    3360:	7a a9       	ldd	r23, Y+50	; 0x32
    3362:	8b a9       	ldd	r24, Y+51	; 0x33
    3364:	9c a9       	ldd	r25, Y+52	; 0x34
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	3f ef       	ldi	r19, 0xFF	; 255
    336a:	4f e7       	ldi	r20, 0x7F	; 127
    336c:	57 e4       	ldi	r21, 0x47	; 71
    336e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3372:	18 16       	cp	r1, r24
    3374:	4c f5       	brge	.+82     	; 0x33c8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3376:	6d a9       	ldd	r22, Y+53	; 0x35
    3378:	7e a9       	ldd	r23, Y+54	; 0x36
    337a:	8f a9       	ldd	r24, Y+55	; 0x37
    337c:	98 ad       	ldd	r25, Y+56	; 0x38
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e2       	ldi	r20, 0x20	; 32
    3384:	51 e4       	ldi	r21, 0x41	; 65
    3386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	98 ab       	std	Y+48, r25	; 0x30
    339c:	8f a7       	std	Y+47, r24	; 0x2f
    339e:	0f c0       	rjmp	.+30     	; 0x33be <LCD_sendCommand+0xd2>
    33a0:	88 ec       	ldi	r24, 0xC8	; 200
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	9e a7       	std	Y+46, r25	; 0x2e
    33a6:	8d a7       	std	Y+45, r24	; 0x2d
    33a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    33aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <LCD_sendCommand+0xc0>
    33b0:	9e a7       	std	Y+46, r25	; 0x2e
    33b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b6:	98 a9       	ldd	r25, Y+48	; 0x30
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	98 ab       	std	Y+48, r25	; 0x30
    33bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33be:	8f a5       	ldd	r24, Y+47	; 0x2f
    33c0:	98 a9       	ldd	r25, Y+48	; 0x30
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	69 f7       	brne	.-38     	; 0x33a0 <LCD_sendCommand+0xb4>
    33c6:	14 c0       	rjmp	.+40     	; 0x33f0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c8:	69 a9       	ldd	r22, Y+49	; 0x31
    33ca:	7a a9       	ldd	r23, Y+50	; 0x32
    33cc:	8b a9       	ldd	r24, Y+51	; 0x33
    33ce:	9c a9       	ldd	r25, Y+52	; 0x34
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	98 ab       	std	Y+48, r25	; 0x30
    33da:	8f a7       	std	Y+47, r24	; 0x2f
    33dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33de:	98 a9       	ldd	r25, Y+48	; 0x30
    33e0:	9c a7       	std	Y+44, r25	; 0x2c
    33e2:	8b a7       	std	Y+43, r24	; 0x2b
    33e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <LCD_sendCommand+0xfc>
    33ec:	9c a7       	std	Y+44, r25	; 0x2c
    33ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    33f0:	83 e0       	ldi	r24, 0x03	; 3
    33f2:	63 e0       	ldi	r22, 0x03	; 3
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	a0 e8       	ldi	r26, 0x80	; 128
    3400:	bf e3       	ldi	r27, 0x3F	; 63
    3402:	8f a3       	std	Y+39, r24	; 0x27
    3404:	98 a7       	std	Y+40, r25	; 0x28
    3406:	a9 a7       	std	Y+41, r26	; 0x29
    3408:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340a:	6f a1       	ldd	r22, Y+39	; 0x27
    340c:	78 a5       	ldd	r23, Y+40	; 0x28
    340e:	89 a5       	ldd	r24, Y+41	; 0x29
    3410:	9a a5       	ldd	r25, Y+42	; 0x2a
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	4a ef       	ldi	r20, 0xFA	; 250
    3418:	54 e4       	ldi	r21, 0x44	; 68
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	8b a3       	std	Y+35, r24	; 0x23
    3424:	9c a3       	std	Y+36, r25	; 0x24
    3426:	ad a3       	std	Y+37, r26	; 0x25
    3428:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    342a:	6b a1       	ldd	r22, Y+35	; 0x23
    342c:	7c a1       	ldd	r23, Y+36	; 0x24
    342e:	8d a1       	ldd	r24, Y+37	; 0x25
    3430:	9e a1       	ldd	r25, Y+38	; 0x26
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	5f e3       	ldi	r21, 0x3F	; 63
    343a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343e:	88 23       	and	r24, r24
    3440:	2c f4       	brge	.+10     	; 0x344c <LCD_sendCommand+0x160>
		__ticks = 1;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	9a a3       	std	Y+34, r25	; 0x22
    3448:	89 a3       	std	Y+33, r24	; 0x21
    344a:	3f c0       	rjmp	.+126    	; 0x34ca <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    344c:	6b a1       	ldd	r22, Y+35	; 0x23
    344e:	7c a1       	ldd	r23, Y+36	; 0x24
    3450:	8d a1       	ldd	r24, Y+37	; 0x25
    3452:	9e a1       	ldd	r25, Y+38	; 0x26
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	3f ef       	ldi	r19, 0xFF	; 255
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	57 e4       	ldi	r21, 0x47	; 71
    345c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	4c f5       	brge	.+82     	; 0x34b6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3464:	6f a1       	ldd	r22, Y+39	; 0x27
    3466:	78 a5       	ldd	r23, Y+40	; 0x28
    3468:	89 a5       	ldd	r24, Y+41	; 0x29
    346a:	9a a5       	ldd	r25, Y+42	; 0x2a
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	51 e4       	ldi	r21, 0x41	; 65
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	bc 01       	movw	r22, r24
    347e:	cd 01       	movw	r24, r26
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9a a3       	std	Y+34, r25	; 0x22
    348a:	89 a3       	std	Y+33, r24	; 0x21
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <LCD_sendCommand+0x1c0>
    348e:	88 ec       	ldi	r24, 0xC8	; 200
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	98 a3       	std	Y+32, r25	; 0x20
    3494:	8f 8f       	std	Y+31, r24	; 0x1f
    3496:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3498:	98 a1       	ldd	r25, Y+32	; 0x20
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <LCD_sendCommand+0x1ae>
    349e:	98 a3       	std	Y+32, r25	; 0x20
    34a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a2:	89 a1       	ldd	r24, Y+33	; 0x21
    34a4:	9a a1       	ldd	r25, Y+34	; 0x22
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	9a a3       	std	Y+34, r25	; 0x22
    34aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ac:	89 a1       	ldd	r24, Y+33	; 0x21
    34ae:	9a a1       	ldd	r25, Y+34	; 0x22
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	69 f7       	brne	.-38     	; 0x348e <LCD_sendCommand+0x1a2>
    34b4:	14 c0       	rjmp	.+40     	; 0x34de <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b6:	6b a1       	ldd	r22, Y+35	; 0x23
    34b8:	7c a1       	ldd	r23, Y+36	; 0x24
    34ba:	8d a1       	ldd	r24, Y+37	; 0x25
    34bc:	9e a1       	ldd	r25, Y+38	; 0x26
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	9a a3       	std	Y+34, r25	; 0x22
    34c8:	89 a3       	std	Y+33, r24	; 0x21
    34ca:	89 a1       	ldd	r24, Y+33	; 0x21
    34cc:	9a a1       	ldd	r25, Y+34	; 0x22
    34ce:	9e 8f       	std	Y+30, r25	; 0x1e
    34d0:	8d 8f       	std	Y+29, r24	; 0x1d
    34d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <LCD_sendCommand+0x1ea>
    34da:	9e 8f       	std	Y+30, r25	; 0x1e
    34dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	69 ad       	ldd	r22, Y+57	; 0x39
    34e2:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <GPIO_writePort>
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	a0 e8       	ldi	r26, 0x80	; 128
    34ec:	bf e3       	ldi	r27, 0x3F	; 63
    34ee:	89 8f       	std	Y+25, r24	; 0x19
    34f0:	9a 8f       	std	Y+26, r25	; 0x1a
    34f2:	ab 8f       	std	Y+27, r26	; 0x1b
    34f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f6:	69 8d       	ldd	r22, Y+25	; 0x19
    34f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	4a ef       	ldi	r20, 0xFA	; 250
    3504:	54 e4       	ldi	r21, 0x44	; 68
    3506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	8d 8b       	std	Y+21, r24	; 0x15
    3510:	9e 8b       	std	Y+22, r25	; 0x16
    3512:	af 8b       	std	Y+23, r26	; 0x17
    3514:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3516:	6d 89       	ldd	r22, Y+21	; 0x15
    3518:	7e 89       	ldd	r23, Y+22	; 0x16
    351a:	8f 89       	ldd	r24, Y+23	; 0x17
    351c:	98 8d       	ldd	r25, Y+24	; 0x18
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	40 e8       	ldi	r20, 0x80	; 128
    3524:	5f e3       	ldi	r21, 0x3F	; 63
    3526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    352a:	88 23       	and	r24, r24
    352c:	2c f4       	brge	.+10     	; 0x3538 <LCD_sendCommand+0x24c>
		__ticks = 1;
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	9c 8b       	std	Y+20, r25	; 0x14
    3534:	8b 8b       	std	Y+19, r24	; 0x13
    3536:	3f c0       	rjmp	.+126    	; 0x35b6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3538:	6d 89       	ldd	r22, Y+21	; 0x15
    353a:	7e 89       	ldd	r23, Y+22	; 0x16
    353c:	8f 89       	ldd	r24, Y+23	; 0x17
    353e:	98 8d       	ldd	r25, Y+24	; 0x18
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	3f ef       	ldi	r19, 0xFF	; 255
    3544:	4f e7       	ldi	r20, 0x7F	; 127
    3546:	57 e4       	ldi	r21, 0x47	; 71
    3548:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    354c:	18 16       	cp	r1, r24
    354e:	4c f5       	brge	.+82     	; 0x35a2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3550:	69 8d       	ldd	r22, Y+25	; 0x19
    3552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e2       	ldi	r20, 0x20	; 32
    355e:	51 e4       	ldi	r21, 0x41	; 65
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9c 8b       	std	Y+20, r25	; 0x14
    3576:	8b 8b       	std	Y+19, r24	; 0x13
    3578:	0f c0       	rjmp	.+30     	; 0x3598 <LCD_sendCommand+0x2ac>
    357a:	88 ec       	ldi	r24, 0xC8	; 200
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	9a 8b       	std	Y+18, r25	; 0x12
    3580:	89 8b       	std	Y+17, r24	; 0x11
    3582:	89 89       	ldd	r24, Y+17	; 0x11
    3584:	9a 89       	ldd	r25, Y+18	; 0x12
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <LCD_sendCommand+0x29a>
    358a:	9a 8b       	std	Y+18, r25	; 0x12
    358c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358e:	8b 89       	ldd	r24, Y+19	; 0x13
    3590:	9c 89       	ldd	r25, Y+20	; 0x14
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	9c 8b       	std	Y+20, r25	; 0x14
    3596:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3598:	8b 89       	ldd	r24, Y+19	; 0x13
    359a:	9c 89       	ldd	r25, Y+20	; 0x14
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	69 f7       	brne	.-38     	; 0x357a <LCD_sendCommand+0x28e>
    35a0:	14 c0       	rjmp	.+40     	; 0x35ca <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a2:	6d 89       	ldd	r22, Y+21	; 0x15
    35a4:	7e 89       	ldd	r23, Y+22	; 0x16
    35a6:	8f 89       	ldd	r24, Y+23	; 0x17
    35a8:	98 8d       	ldd	r25, Y+24	; 0x18
    35aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	9c 8b       	std	Y+20, r25	; 0x14
    35b4:	8b 8b       	std	Y+19, r24	; 0x13
    35b6:	8b 89       	ldd	r24, Y+19	; 0x13
    35b8:	9c 89       	ldd	r25, Y+20	; 0x14
    35ba:	98 8b       	std	Y+16, r25	; 0x10
    35bc:	8f 87       	std	Y+15, r24	; 0x0f
    35be:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c0:	98 89       	ldd	r25, Y+16	; 0x10
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	f1 f7       	brne	.-4      	; 0x35c2 <LCD_sendCommand+0x2d6>
    35c6:	98 8b       	std	Y+16, r25	; 0x10
    35c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	63 e0       	ldi	r22, 0x03	; 3
    35ce:	40 e0       	ldi	r20, 0x00	; 0
    35d0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	a0 e8       	ldi	r26, 0x80	; 128
    35da:	bf e3       	ldi	r27, 0x3F	; 63
    35dc:	8b 87       	std	Y+11, r24	; 0x0b
    35de:	9c 87       	std	Y+12, r25	; 0x0c
    35e0:	ad 87       	std	Y+13, r26	; 0x0d
    35e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a ef       	ldi	r20, 0xFA	; 250
    35f2:	54 e4       	ldi	r21, 0x44	; 68
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	8f 83       	std	Y+7, r24	; 0x07
    35fe:	98 87       	std	Y+8, r25	; 0x08
    3600:	a9 87       	std	Y+9, r26	; 0x09
    3602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3604:	6f 81       	ldd	r22, Y+7	; 0x07
    3606:	78 85       	ldd	r23, Y+8	; 0x08
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e8       	ldi	r20, 0x80	; 128
    3612:	5f e3       	ldi	r21, 0x3F	; 63
    3614:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3618:	88 23       	and	r24, r24
    361a:	2c f4       	brge	.+10     	; 0x3626 <LCD_sendCommand+0x33a>
		__ticks = 1;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	9e 83       	std	Y+6, r25	; 0x06
    3622:	8d 83       	std	Y+5, r24	; 0x05
    3624:	3f c0       	rjmp	.+126    	; 0x36a4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3626:	6f 81       	ldd	r22, Y+7	; 0x07
    3628:	78 85       	ldd	r23, Y+8	; 0x08
    362a:	89 85       	ldd	r24, Y+9	; 0x09
    362c:	9a 85       	ldd	r25, Y+10	; 0x0a
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	3f ef       	ldi	r19, 0xFF	; 255
    3632:	4f e7       	ldi	r20, 0x7F	; 127
    3634:	57 e4       	ldi	r21, 0x47	; 71
    3636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363a:	18 16       	cp	r1, r24
    363c:	4c f5       	brge	.+82     	; 0x3690 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3640:	7c 85       	ldd	r23, Y+12	; 0x0c
    3642:	8d 85       	ldd	r24, Y+13	; 0x0d
    3644:	9e 85       	ldd	r25, Y+14	; 0x0e
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9e 83       	std	Y+6, r25	; 0x06
    3664:	8d 83       	std	Y+5, r24	; 0x05
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <LCD_sendCommand+0x39a>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	9c 81       	ldd	r25, Y+4	; 0x04
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <LCD_sendCommand+0x388>
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8d 81       	ldd	r24, Y+5	; 0x05
    367e:	9e 81       	ldd	r25, Y+6	; 0x06
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9e 83       	std	Y+6, r25	; 0x06
    3684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8d 81       	ldd	r24, Y+5	; 0x05
    3688:	9e 81       	ldd	r25, Y+6	; 0x06
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <LCD_sendCommand+0x37c>
    368e:	14 c0       	rjmp	.+40     	; 0x36b8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	6f 81       	ldd	r22, Y+7	; 0x07
    3692:	78 85       	ldd	r23, Y+8	; 0x08
    3694:	89 85       	ldd	r24, Y+9	; 0x09
    3696:	9a 85       	ldd	r25, Y+10	; 0x0a
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	9a 83       	std	Y+2, r25	; 0x02
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	9a 81       	ldd	r25, Y+2	; 0x02
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <LCD_sendCommand+0x3c4>
    36b4:	9a 83       	std	Y+2, r25	; 0x02
    36b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    36b8:	e9 96       	adiw	r28, 0x39	; 57
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	e9 97       	sbiw	r28, 0x39	; 57
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    36e0:	83 e0       	ldi	r24, 0x03	; 3
    36e2:	62 e0       	ldi	r22, 0x02	; 2
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a0 e8       	ldi	r26, 0x80	; 128
    36f0:	bf e3       	ldi	r27, 0x3F	; 63
    36f2:	8d ab       	std	Y+53, r24	; 0x35
    36f4:	9e ab       	std	Y+54, r25	; 0x36
    36f6:	af ab       	std	Y+55, r26	; 0x37
    36f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	6d a9       	ldd	r22, Y+53	; 0x35
    36fc:	7e a9       	ldd	r23, Y+54	; 0x36
    36fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3700:	98 ad       	ldd	r25, Y+56	; 0x38
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a ef       	ldi	r20, 0xFA	; 250
    3708:	54 e4       	ldi	r21, 0x44	; 68
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	89 ab       	std	Y+49, r24	; 0x31
    3714:	9a ab       	std	Y+50, r25	; 0x32
    3716:	ab ab       	std	Y+51, r26	; 0x33
    3718:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    371a:	69 a9       	ldd	r22, Y+49	; 0x31
    371c:	7a a9       	ldd	r23, Y+50	; 0x32
    371e:	8b a9       	ldd	r24, Y+51	; 0x33
    3720:	9c a9       	ldd	r25, Y+52	; 0x34
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <LCD_displayCharacter+0x72>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	98 ab       	std	Y+48, r25	; 0x30
    3738:	8f a7       	std	Y+47, r24	; 0x2f
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    373c:	69 a9       	ldd	r22, Y+49	; 0x31
    373e:	7a a9       	ldd	r23, Y+50	; 0x32
    3740:	8b a9       	ldd	r24, Y+51	; 0x33
    3742:	9c a9       	ldd	r25, Y+52	; 0x34
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	6d a9       	ldd	r22, Y+53	; 0x35
    3756:	7e a9       	ldd	r23, Y+54	; 0x36
    3758:	8f a9       	ldd	r24, Y+55	; 0x37
    375a:	98 ad       	ldd	r25, Y+56	; 0x38
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	98 ab       	std	Y+48, r25	; 0x30
    377a:	8f a7       	std	Y+47, r24	; 0x2f
    377c:	0f c0       	rjmp	.+30     	; 0x379c <LCD_displayCharacter+0xd2>
    377e:	88 ec       	ldi	r24, 0xC8	; 200
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	9e a7       	std	Y+46, r25	; 0x2e
    3784:	8d a7       	std	Y+45, r24	; 0x2d
    3786:	8d a5       	ldd	r24, Y+45	; 0x2d
    3788:	9e a5       	ldd	r25, Y+46	; 0x2e
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <LCD_displayCharacter+0xc0>
    378e:	9e a7       	std	Y+46, r25	; 0x2e
    3790:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8f a5       	ldd	r24, Y+47	; 0x2f
    3794:	98 a9       	ldd	r25, Y+48	; 0x30
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	98 ab       	std	Y+48, r25	; 0x30
    379a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8f a5       	ldd	r24, Y+47	; 0x2f
    379e:	98 a9       	ldd	r25, Y+48	; 0x30
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <LCD_displayCharacter+0xb4>
    37a4:	14 c0       	rjmp	.+40     	; 0x37ce <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	69 a9       	ldd	r22, Y+49	; 0x31
    37a8:	7a a9       	ldd	r23, Y+50	; 0x32
    37aa:	8b a9       	ldd	r24, Y+51	; 0x33
    37ac:	9c a9       	ldd	r25, Y+52	; 0x34
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	98 ab       	std	Y+48, r25	; 0x30
    37b8:	8f a7       	std	Y+47, r24	; 0x2f
    37ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    37bc:	98 a9       	ldd	r25, Y+48	; 0x30
    37be:	9c a7       	std	Y+44, r25	; 0x2c
    37c0:	8b a7       	std	Y+43, r24	; 0x2b
    37c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <LCD_displayCharacter+0xfc>
    37ca:	9c a7       	std	Y+44, r25	; 0x2c
    37cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	63 e0       	ldi	r22, 0x03	; 3
    37d2:	41 e0       	ldi	r20, 0x01	; 1
    37d4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 e8       	ldi	r26, 0x80	; 128
    37de:	bf e3       	ldi	r27, 0x3F	; 63
    37e0:	8f a3       	std	Y+39, r24	; 0x27
    37e2:	98 a7       	std	Y+40, r25	; 0x28
    37e4:	a9 a7       	std	Y+41, r26	; 0x29
    37e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e8:	6f a1       	ldd	r22, Y+39	; 0x27
    37ea:	78 a5       	ldd	r23, Y+40	; 0x28
    37ec:	89 a5       	ldd	r24, Y+41	; 0x29
    37ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a ef       	ldi	r20, 0xFA	; 250
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	8b a3       	std	Y+35, r24	; 0x23
    3802:	9c a3       	std	Y+36, r25	; 0x24
    3804:	ad a3       	std	Y+37, r26	; 0x25
    3806:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3808:	6b a1       	ldd	r22, Y+35	; 0x23
    380a:	7c a1       	ldd	r23, Y+36	; 0x24
    380c:	8d a1       	ldd	r24, Y+37	; 0x25
    380e:	9e a1       	ldd	r25, Y+38	; 0x26
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	2c f4       	brge	.+10     	; 0x382a <LCD_displayCharacter+0x160>
		__ticks = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	9a a3       	std	Y+34, r25	; 0x22
    3826:	89 a3       	std	Y+33, r24	; 0x21
    3828:	3f c0       	rjmp	.+126    	; 0x38a8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    382a:	6b a1       	ldd	r22, Y+35	; 0x23
    382c:	7c a1       	ldd	r23, Y+36	; 0x24
    382e:	8d a1       	ldd	r24, Y+37	; 0x25
    3830:	9e a1       	ldd	r25, Y+38	; 0x26
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	3f ef       	ldi	r19, 0xFF	; 255
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	57 e4       	ldi	r21, 0x47	; 71
    383a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    383e:	18 16       	cp	r1, r24
    3840:	4c f5       	brge	.+82     	; 0x3894 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	6f a1       	ldd	r22, Y+39	; 0x27
    3844:	78 a5       	ldd	r23, Y+40	; 0x28
    3846:	89 a5       	ldd	r24, Y+41	; 0x29
    3848:	9a a5       	ldd	r25, Y+42	; 0x2a
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	9a a3       	std	Y+34, r25	; 0x22
    3868:	89 a3       	std	Y+33, r24	; 0x21
    386a:	0f c0       	rjmp	.+30     	; 0x388a <LCD_displayCharacter+0x1c0>
    386c:	88 ec       	ldi	r24, 0xC8	; 200
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	98 a3       	std	Y+32, r25	; 0x20
    3872:	8f 8f       	std	Y+31, r24	; 0x1f
    3874:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3876:	98 a1       	ldd	r25, Y+32	; 0x20
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <LCD_displayCharacter+0x1ae>
    387c:	98 a3       	std	Y+32, r25	; 0x20
    387e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3880:	89 a1       	ldd	r24, Y+33	; 0x21
    3882:	9a a1       	ldd	r25, Y+34	; 0x22
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	9a a3       	std	Y+34, r25	; 0x22
    3888:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388a:	89 a1       	ldd	r24, Y+33	; 0x21
    388c:	9a a1       	ldd	r25, Y+34	; 0x22
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f7       	brne	.-38     	; 0x386c <LCD_displayCharacter+0x1a2>
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3894:	6b a1       	ldd	r22, Y+35	; 0x23
    3896:	7c a1       	ldd	r23, Y+36	; 0x24
    3898:	8d a1       	ldd	r24, Y+37	; 0x25
    389a:	9e a1       	ldd	r25, Y+38	; 0x26
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	89 a1       	ldd	r24, Y+33	; 0x21
    38aa:	9a a1       	ldd	r25, Y+34	; 0x22
    38ac:	9e 8f       	std	Y+30, r25	; 0x1e
    38ae:	8d 8f       	std	Y+29, r24	; 0x1d
    38b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <LCD_displayCharacter+0x1ea>
    38b8:	9e 8f       	std	Y+30, r25	; 0x1e
    38ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    38bc:	82 e0       	ldi	r24, 0x02	; 2
    38be:	69 ad       	ldd	r22, Y+57	; 0x39
    38c0:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <GPIO_writePort>
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	a0 e8       	ldi	r26, 0x80	; 128
    38ca:	bf e3       	ldi	r27, 0x3F	; 63
    38cc:	89 8f       	std	Y+25, r24	; 0x19
    38ce:	9a 8f       	std	Y+26, r25	; 0x1a
    38d0:	ab 8f       	std	Y+27, r26	; 0x1b
    38d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d4:	69 8d       	ldd	r22, Y+25	; 0x19
    38d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	4a ef       	ldi	r20, 0xFA	; 250
    38e2:	54 e4       	ldi	r21, 0x44	; 68
    38e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	8d 8b       	std	Y+21, r24	; 0x15
    38ee:	9e 8b       	std	Y+22, r25	; 0x16
    38f0:	af 8b       	std	Y+23, r26	; 0x17
    38f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38f4:	6d 89       	ldd	r22, Y+21	; 0x15
    38f6:	7e 89       	ldd	r23, Y+22	; 0x16
    38f8:	8f 89       	ldd	r24, Y+23	; 0x17
    38fa:	98 8d       	ldd	r25, Y+24	; 0x18
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e8       	ldi	r20, 0x80	; 128
    3902:	5f e3       	ldi	r21, 0x3F	; 63
    3904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3908:	88 23       	and	r24, r24
    390a:	2c f4       	brge	.+10     	; 0x3916 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	9c 8b       	std	Y+20, r25	; 0x14
    3912:	8b 8b       	std	Y+19, r24	; 0x13
    3914:	3f c0       	rjmp	.+126    	; 0x3994 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3916:	6d 89       	ldd	r22, Y+21	; 0x15
    3918:	7e 89       	ldd	r23, Y+22	; 0x16
    391a:	8f 89       	ldd	r24, Y+23	; 0x17
    391c:	98 8d       	ldd	r25, Y+24	; 0x18
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	3f ef       	ldi	r19, 0xFF	; 255
    3922:	4f e7       	ldi	r20, 0x7F	; 127
    3924:	57 e4       	ldi	r21, 0x47	; 71
    3926:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392a:	18 16       	cp	r1, r24
    392c:	4c f5       	brge	.+82     	; 0x3980 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392e:	69 8d       	ldd	r22, Y+25	; 0x19
    3930:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3932:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3934:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	40 e2       	ldi	r20, 0x20	; 32
    393c:	51 e4       	ldi	r21, 0x41	; 65
    393e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	bc 01       	movw	r22, r24
    3948:	cd 01       	movw	r24, r26
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	9c 8b       	std	Y+20, r25	; 0x14
    3954:	8b 8b       	std	Y+19, r24	; 0x13
    3956:	0f c0       	rjmp	.+30     	; 0x3976 <LCD_displayCharacter+0x2ac>
    3958:	88 ec       	ldi	r24, 0xC8	; 200
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	9a 8b       	std	Y+18, r25	; 0x12
    395e:	89 8b       	std	Y+17, r24	; 0x11
    3960:	89 89       	ldd	r24, Y+17	; 0x11
    3962:	9a 89       	ldd	r25, Y+18	; 0x12
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <LCD_displayCharacter+0x29a>
    3968:	9a 8b       	std	Y+18, r25	; 0x12
    396a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396c:	8b 89       	ldd	r24, Y+19	; 0x13
    396e:	9c 89       	ldd	r25, Y+20	; 0x14
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	9c 8b       	std	Y+20, r25	; 0x14
    3974:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3976:	8b 89       	ldd	r24, Y+19	; 0x13
    3978:	9c 89       	ldd	r25, Y+20	; 0x14
    397a:	00 97       	sbiw	r24, 0x00	; 0
    397c:	69 f7       	brne	.-38     	; 0x3958 <LCD_displayCharacter+0x28e>
    397e:	14 c0       	rjmp	.+40     	; 0x39a8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3980:	6d 89       	ldd	r22, Y+21	; 0x15
    3982:	7e 89       	ldd	r23, Y+22	; 0x16
    3984:	8f 89       	ldd	r24, Y+23	; 0x17
    3986:	98 8d       	ldd	r25, Y+24	; 0x18
    3988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	9c 8b       	std	Y+20, r25	; 0x14
    3992:	8b 8b       	std	Y+19, r24	; 0x13
    3994:	8b 89       	ldd	r24, Y+19	; 0x13
    3996:	9c 89       	ldd	r25, Y+20	; 0x14
    3998:	98 8b       	std	Y+16, r25	; 0x10
    399a:	8f 87       	std	Y+15, r24	; 0x0f
    399c:	8f 85       	ldd	r24, Y+15	; 0x0f
    399e:	98 89       	ldd	r25, Y+16	; 0x10
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <LCD_displayCharacter+0x2d6>
    39a4:	98 8b       	std	Y+16, r25	; 0x10
    39a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    39a8:	83 e0       	ldi	r24, 0x03	; 3
    39aa:	63 e0       	ldi	r22, 0x03	; 3
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <GPIO_writePin>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	a0 e8       	ldi	r26, 0x80	; 128
    39b8:	bf e3       	ldi	r27, 0x3F	; 63
    39ba:	8b 87       	std	Y+11, r24	; 0x0b
    39bc:	9c 87       	std	Y+12, r25	; 0x0c
    39be:	ad 87       	std	Y+13, r26	; 0x0d
    39c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	4a ef       	ldi	r20, 0xFA	; 250
    39d0:	54 e4       	ldi	r21, 0x44	; 68
    39d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	8f 83       	std	Y+7, r24	; 0x07
    39dc:	98 87       	std	Y+8, r25	; 0x08
    39de:	a9 87       	std	Y+9, r26	; 0x09
    39e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39e2:	6f 81       	ldd	r22, Y+7	; 0x07
    39e4:	78 85       	ldd	r23, Y+8	; 0x08
    39e6:	89 85       	ldd	r24, Y+9	; 0x09
    39e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e8       	ldi	r20, 0x80	; 128
    39f0:	5f e3       	ldi	r21, 0x3F	; 63
    39f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f6:	88 23       	and	r24, r24
    39f8:	2c f4       	brge	.+10     	; 0x3a04 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	9e 83       	std	Y+6, r25	; 0x06
    3a00:	8d 83       	std	Y+5, r24	; 0x05
    3a02:	3f c0       	rjmp	.+126    	; 0x3a82 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3a04:	6f 81       	ldd	r22, Y+7	; 0x07
    3a06:	78 85       	ldd	r23, Y+8	; 0x08
    3a08:	89 85       	ldd	r24, Y+9	; 0x09
    3a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	3f ef       	ldi	r19, 0xFF	; 255
    3a10:	4f e7       	ldi	r20, 0x7F	; 127
    3a12:	57 e4       	ldi	r21, 0x47	; 71
    3a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a18:	18 16       	cp	r1, r24
    3a1a:	4c f5       	brge	.+82     	; 0x3a6e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e2       	ldi	r20, 0x20	; 32
    3a2a:	51 e4       	ldi	r21, 0x41	; 65
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	0f c0       	rjmp	.+30     	; 0x3a64 <LCD_displayCharacter+0x39a>
    3a46:	88 ec       	ldi	r24, 0xC8	; 200
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	9c 83       	std	Y+4, r25	; 0x04
    3a4c:	8b 83       	std	Y+3, r24	; 0x03
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	9c 81       	ldd	r25, Y+4	; 0x04
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <LCD_displayCharacter+0x388>
    3a56:	9c 83       	std	Y+4, r25	; 0x04
    3a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	9e 83       	std	Y+6, r25	; 0x06
    3a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
    3a66:	9e 81       	ldd	r25, Y+6	; 0x06
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	69 f7       	brne	.-38     	; 0x3a46 <LCD_displayCharacter+0x37c>
    3a6c:	14 c0       	rjmp	.+40     	; 0x3a96 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a70:	78 85       	ldd	r23, Y+8	; 0x08
    3a72:	89 85       	ldd	r24, Y+9	; 0x09
    3a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	9e 83       	std	Y+6, r25	; 0x06
    3a80:	8d 83       	std	Y+5, r24	; 0x05
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	9a 83       	std	Y+2, r25	; 0x02
    3a88:	89 83       	std	Y+1, r24	; 0x01
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <LCD_displayCharacter+0x3c4>
    3a92:	9a 83       	std	Y+2, r25	; 0x02
    3a94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3a96:	e9 96       	adiw	r28, 0x39	; 57
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <LCD_displayString+0x6>
    3aae:	0f 92       	push	r0
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	9b 83       	std	Y+3, r25	; 0x03
    3ab6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ab8:	19 82       	std	Y+1, r1	; 0x01
    3aba:	0e c0       	rjmp	.+28     	; 0x3ad8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	28 2f       	mov	r18, r24
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	e2 0f       	add	r30, r18
    3aca:	f3 1f       	adc	r31, r19
    3acc:	80 81       	ld	r24, Z
    3ace:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_displayCharacter>
		i++;
    3ad2:	89 81       	ldd	r24, Y+1	; 0x01
    3ad4:	8f 5f       	subi	r24, 0xFF	; 255
    3ad6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	28 2f       	mov	r18, r24
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	e2 0f       	add	r30, r18
    3ae6:	f3 1f       	adc	r31, r19
    3ae8:	80 81       	ld	r24, Z
    3aea:	88 23       	and	r24, r24
    3aec:	39 f7       	brne	.-50     	; 0x3abc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	08 95       	ret

00003afa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3afa:	df 93       	push	r29
    3afc:	cf 93       	push	r28
    3afe:	00 d0       	rcall	.+0      	; 0x3b00 <LCD_moveCursor+0x6>
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <LCD_moveCursor+0x8>
    3b02:	0f 92       	push	r0
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	8a 83       	std	Y+2, r24	; 0x02
    3b0a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0e:	28 2f       	mov	r18, r24
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	3d 83       	std	Y+5, r19	; 0x05
    3b14:	2c 83       	std	Y+4, r18	; 0x04
    3b16:	8c 81       	ldd	r24, Y+4	; 0x04
    3b18:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	c1 f0       	breq	.+48     	; 0x3b50 <LCD_moveCursor+0x56>
    3b20:	2c 81       	ldd	r18, Y+4	; 0x04
    3b22:	3d 81       	ldd	r19, Y+5	; 0x05
    3b24:	22 30       	cpi	r18, 0x02	; 2
    3b26:	31 05       	cpc	r19, r1
    3b28:	2c f4       	brge	.+10     	; 0x3b34 <LCD_moveCursor+0x3a>
    3b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	61 f0       	breq	.+24     	; 0x3b4a <LCD_moveCursor+0x50>
    3b32:	19 c0       	rjmp	.+50     	; 0x3b66 <LCD_moveCursor+0x6c>
    3b34:	2c 81       	ldd	r18, Y+4	; 0x04
    3b36:	3d 81       	ldd	r19, Y+5	; 0x05
    3b38:	22 30       	cpi	r18, 0x02	; 2
    3b3a:	31 05       	cpc	r19, r1
    3b3c:	69 f0       	breq	.+26     	; 0x3b58 <LCD_moveCursor+0x5e>
    3b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b40:	9d 81       	ldd	r25, Y+5	; 0x05
    3b42:	83 30       	cpi	r24, 0x03	; 3
    3b44:	91 05       	cpc	r25, r1
    3b46:	61 f0       	breq	.+24     	; 0x3b60 <LCD_moveCursor+0x66>
    3b48:	0e c0       	rjmp	.+28     	; 0x3b66 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4c:	89 83       	std	Y+1, r24	; 0x01
    3b4e:	0b c0       	rjmp	.+22     	; 0x3b66 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	80 5c       	subi	r24, 0xC0	; 192
    3b54:	89 83       	std	Y+1, r24	; 0x01
    3b56:	07 c0       	rjmp	.+14     	; 0x3b66 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	80 5f       	subi	r24, 0xF0	; 240
    3b5c:	89 83       	std	Y+1, r24	; 0x01
    3b5e:	03 c0       	rjmp	.+6      	; 0x3b66 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	80 5b       	subi	r24, 0xB0	; 176
    3b64:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	80 68       	ori	r24, 0x80	; 128
    3b6a:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_sendCommand>
}
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	00 d0       	rcall	.+0      	; 0x3b84 <LCD_displayStringRowColumn+0x6>
    3b84:	00 d0       	rcall	.+0      	; 0x3b86 <LCD_displayStringRowColumn+0x8>
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	6a 83       	std	Y+2, r22	; 0x02
    3b8e:	5c 83       	std	Y+4, r21	; 0x04
    3b90:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	6a 81       	ldd	r22, Y+2	; 0x02
    3b96:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
}
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	08 95       	ret

00003bb0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	62 97       	sbiw	r28, 0x12	; 18
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	9a 8b       	std	Y+18, r25	; 0x12
    3bc6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3bc8:	89 89       	ldd	r24, Y+17	; 0x11
    3bca:	9a 89       	ldd	r25, Y+18	; 0x12
    3bcc:	9e 01       	movw	r18, r28
    3bce:	2f 5f       	subi	r18, 0xFF	; 255
    3bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd2:	b9 01       	movw	r22, r18
    3bd4:	4a e0       	ldi	r20, 0x0A	; 10
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	0e 94 9b 20 	call	0x4136	; 0x4136 <itoa>
   LCD_displayString(buff); /* Display the string */
    3bdc:	ce 01       	movw	r24, r28
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <LCD_displayString>
}
    3be4:	62 96       	adiw	r28, 0x12	; 18
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	cf 91       	pop	r28
    3bf2:	df 91       	pop	r29
    3bf4:	08 95       	ret

00003bf6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3bf6:	df 93       	push	r29
    3bf8:	cf 93       	push	r28
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	0e 94 76 19 	call	0x32ec	; 0x32ec <LCD_sendCommand>
}
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Input: pointer to the configuration structure with type Timer1_ConfigType
 * Return: Void
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <Timer1_init+0x6>
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	9a 83       	std	Y+2, r25	; 0x02
    3c16:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    3c18:	ef e4       	ldi	r30, 0x4F	; 79
    3c1a:	f0 e0       	ldi	r31, 0x00	; 0
    3c1c:	8c e0       	ldi	r24, 0x0C	; 12
    3c1e:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    3c20:	af e4       	ldi	r26, 0x4F	; 79
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	ef e4       	ldi	r30, 0x4F	; 79
    3c26:	f0 e0       	ldi	r31, 0x00	; 0
    3c28:	80 81       	ld	r24, Z
    3c2a:	98 2f       	mov	r25, r24
    3c2c:	9c 7f       	andi	r25, 0xFC	; 252
    3c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c30:	fa 81       	ldd	r31, Y+2	; 0x02
    3c32:	85 81       	ldd	r24, Z+5	; 0x05
    3c34:	83 70       	andi	r24, 0x03	; 3
    3c36:	89 2b       	or	r24, r25
    3c38:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    3c3a:	ae e4       	ldi	r26, 0x4E	; 78
    3c3c:	b0 e0       	ldi	r27, 0x00	; 0
    3c3e:	ee e4       	ldi	r30, 0x4E	; 78
    3c40:	f0 e0       	ldi	r31, 0x00	; 0
    3c42:	80 81       	ld	r24, Z
    3c44:	28 2f       	mov	r18, r24
    3c46:	27 7e       	andi	r18, 0xE7	; 231
    3c48:	e9 81       	ldd	r30, Y+1	; 0x01
    3c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c4c:	85 81       	ldd	r24, Z+5	; 0x05
    3c4e:	88 2f       	mov	r24, r24
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	8c 70       	andi	r24, 0x0C	; 12
    3c54:	90 70       	andi	r25, 0x00	; 0
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	82 2b       	or	r24, r18
    3c5c:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    3c5e:	ac e4       	ldi	r26, 0x4C	; 76
    3c60:	b0 e0       	ldi	r27, 0x00	; 0
    3c62:	e9 81       	ldd	r30, Y+1	; 0x01
    3c64:	fa 81       	ldd	r31, Y+2	; 0x02
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	11 96       	adiw	r26, 0x01	; 1
    3c6c:	9c 93       	st	X, r25
    3c6e:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    3c70:	e9 81       	ldd	r30, Y+1	; 0x01
    3c72:	fa 81       	ldd	r31, Y+2	; 0x02
    3c74:	85 81       	ldd	r24, Z+5	; 0x05
    3c76:	88 23       	and	r24, r24
    3c78:	29 f4       	brne	.+10     	; 0x3c84 <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    3c7a:	e9 e5       	ldi	r30, 0x59	; 89
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	84 e0       	ldi	r24, 0x04	; 4
    3c80:	80 83       	st	Z, r24
    3c82:	12 c0       	rjmp	.+36     	; 0x3ca8 <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    3c84:	e9 81       	ldd	r30, Y+1	; 0x01
    3c86:	fa 81       	ldd	r31, Y+2	; 0x02
    3c88:	85 81       	ldd	r24, Z+5	; 0x05
    3c8a:	84 30       	cpi	r24, 0x04	; 4
    3c8c:	69 f4       	brne	.+26     	; 0x3ca8 <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    3c8e:	aa e4       	ldi	r26, 0x4A	; 74
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	e9 81       	ldd	r30, Y+1	; 0x01
    3c94:	fa 81       	ldd	r31, Y+2	; 0x02
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	11 96       	adiw	r26, 0x01	; 1
    3c9c:	9c 93       	st	X, r25
    3c9e:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    3ca0:	e9 e5       	ldi	r30, 0x59	; 89
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 e1       	ldi	r24, 0x10	; 16
    3ca6:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    3ca8:	ae e4       	ldi	r26, 0x4E	; 78
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	ee e4       	ldi	r30, 0x4E	; 78
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	80 81       	ld	r24, Z
    3cb2:	98 2f       	mov	r25, r24
    3cb4:	98 7f       	andi	r25, 0xF8	; 248
    3cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3cba:	84 81       	ldd	r24, Z+4	; 0x04
    3cbc:	89 2b       	or	r24, r25
    3cbe:	8c 93       	st	X, r24
}
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	08 95       	ret

00003cca <Timer1_deInit>:
 * Description: Function to disable the Timer1
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_deInit(void)
{
    3cca:	df 93       	push	r29
    3ccc:	cf 93       	push	r28
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0 ;
    3cd2:	ef e4       	ldi	r30, 0x4F	; 79
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	10 82       	st	Z, r1

	TCCR1B = 0 ;
    3cd8:	ee e4       	ldi	r30, 0x4E	; 78
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	10 82       	st	Z, r1

	TIMSK = 0 ;
    3cde:	e9 e5       	ldi	r30, 0x59	; 89
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	10 82       	st	Z, r1

}
    3ce4:	cf 91       	pop	r28
    3ce6:	df 91       	pop	r29
    3ce8:	08 95       	ret

00003cea <Timer1_setCallBack>:
 * Description: set the Call Back function address
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_setCallBack(void (*a_ptr)(void))
{
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	00 d0       	rcall	.+0      	; 0x3cf0 <Timer1_setCallBack+0x6>
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	9a 83       	std	Y+2, r25	; 0x02
    3cf6:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfc:	90 93 18 01 	sts	0x0118, r25
    3d00:	80 93 17 01 	sts	0x0117, r24
}
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	cf 91       	pop	r28
    3d0a:	df 91       	pop	r29
    3d0c:	08 95       	ret

00003d0e <__vector_9>:

/*******************************************************************************
 *                    ISR (Interrupt Service Routines)                         *
 *******************************************************************************/
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    3d0e:	1f 92       	push	r1
    3d10:	0f 92       	push	r0
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	0f 92       	push	r0
    3d16:	11 24       	eor	r1, r1
    3d18:	2f 93       	push	r18
    3d1a:	3f 93       	push	r19
    3d1c:	4f 93       	push	r20
    3d1e:	5f 93       	push	r21
    3d20:	6f 93       	push	r22
    3d22:	7f 93       	push	r23
    3d24:	8f 93       	push	r24
    3d26:	9f 93       	push	r25
    3d28:	af 93       	push	r26
    3d2a:	bf 93       	push	r27
    3d2c:	ef 93       	push	r30
    3d2e:	ff 93       	push	r31
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    3d38:	80 91 17 01 	lds	r24, 0x0117
    3d3c:	90 91 18 01 	lds	r25, 0x0118
    3d40:	00 97       	sbiw	r24, 0x00	; 0
    3d42:	29 f0       	breq	.+10     	; 0x3d4e <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    3d44:	e0 91 17 01 	lds	r30, 0x0117
    3d48:	f0 91 18 01 	lds	r31, 0x0118
    3d4c:	09 95       	icall
	}
}
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	ff 91       	pop	r31
    3d54:	ef 91       	pop	r30
    3d56:	bf 91       	pop	r27
    3d58:	af 91       	pop	r26
    3d5a:	9f 91       	pop	r25
    3d5c:	8f 91       	pop	r24
    3d5e:	7f 91       	pop	r23
    3d60:	6f 91       	pop	r22
    3d62:	5f 91       	pop	r21
    3d64:	4f 91       	pop	r20
    3d66:	3f 91       	pop	r19
    3d68:	2f 91       	pop	r18
    3d6a:	0f 90       	pop	r0
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	0f 90       	pop	r0
    3d70:	1f 90       	pop	r1
    3d72:	18 95       	reti

00003d74 <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    3d74:	1f 92       	push	r1
    3d76:	0f 92       	push	r0
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	0f 92       	push	r0
    3d7c:	11 24       	eor	r1, r1
    3d7e:	2f 93       	push	r18
    3d80:	3f 93       	push	r19
    3d82:	4f 93       	push	r20
    3d84:	5f 93       	push	r21
    3d86:	6f 93       	push	r22
    3d88:	7f 93       	push	r23
    3d8a:	8f 93       	push	r24
    3d8c:	9f 93       	push	r25
    3d8e:	af 93       	push	r26
    3d90:	bf 93       	push	r27
    3d92:	ef 93       	push	r30
    3d94:	ff 93       	push	r31
    3d96:	df 93       	push	r29
    3d98:	cf 93       	push	r28
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    3d9e:	80 91 17 01 	lds	r24, 0x0117
    3da2:	90 91 18 01 	lds	r25, 0x0118
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	29 f0       	breq	.+10     	; 0x3db4 <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    3daa:	e0 91 17 01 	lds	r30, 0x0117
    3dae:	f0 91 18 01 	lds	r31, 0x0118
    3db2:	09 95       	icall
	}
}
    3db4:	cf 91       	pop	r28
    3db6:	df 91       	pop	r29
    3db8:	ff 91       	pop	r31
    3dba:	ef 91       	pop	r30
    3dbc:	bf 91       	pop	r27
    3dbe:	af 91       	pop	r26
    3dc0:	9f 91       	pop	r25
    3dc2:	8f 91       	pop	r24
    3dc4:	7f 91       	pop	r23
    3dc6:	6f 91       	pop	r22
    3dc8:	5f 91       	pop	r21
    3dca:	4f 91       	pop	r20
    3dcc:	3f 91       	pop	r19
    3dce:	2f 91       	pop	r18
    3dd0:	0f 90       	pop	r0
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	0f 90       	pop	r0
    3dd6:	1f 90       	pop	r1
    3dd8:	18 95       	reti

00003dda <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    3dda:	1f 92       	push	r1
    3ddc:	0f 92       	push	r0
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	0f 92       	push	r0
    3de2:	11 24       	eor	r1, r1
    3de4:	2f 93       	push	r18
    3de6:	3f 93       	push	r19
    3de8:	4f 93       	push	r20
    3dea:	5f 93       	push	r21
    3dec:	6f 93       	push	r22
    3dee:	7f 93       	push	r23
    3df0:	8f 93       	push	r24
    3df2:	9f 93       	push	r25
    3df4:	af 93       	push	r26
    3df6:	bf 93       	push	r27
    3df8:	ef 93       	push	r30
    3dfa:	ff 93       	push	r31
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    3e04:	80 91 17 01 	lds	r24, 0x0117
    3e08:	90 91 18 01 	lds	r25, 0x0118
    3e0c:	00 97       	sbiw	r24, 0x00	; 0
    3e0e:	29 f0       	breq	.+10     	; 0x3e1a <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    3e10:	e0 91 17 01 	lds	r30, 0x0117
    3e14:	f0 91 18 01 	lds	r31, 0x0118
    3e18:	09 95       	icall
	}
}
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	ff 91       	pop	r31
    3e20:	ef 91       	pop	r30
    3e22:	bf 91       	pop	r27
    3e24:	af 91       	pop	r26
    3e26:	9f 91       	pop	r25
    3e28:	8f 91       	pop	r24
    3e2a:	7f 91       	pop	r23
    3e2c:	6f 91       	pop	r22
    3e2e:	5f 91       	pop	r21
    3e30:	4f 91       	pop	r20
    3e32:	3f 91       	pop	r19
    3e34:	2f 91       	pop	r18
    3e36:	0f 90       	pop	r0
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	0f 90       	pop	r0
    3e3c:	1f 90       	pop	r1
    3e3e:	18 95       	reti

00003e40 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3e40:	df 93       	push	r29
    3e42:	cf 93       	push	r28
    3e44:	00 d0       	rcall	.+0      	; 0x3e46 <UART_init+0x6>
    3e46:	00 d0       	rcall	.+0      	; 0x3e48 <UART_init+0x8>
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
    3e4c:	9c 83       	std	Y+4, r25	; 0x04
    3e4e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr = 0 ; /* Variable For Baud Rate Register */
    3e50:	1a 82       	std	Y+2, r1	; 0x02
    3e52:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ; /* Double Speed of UART */
    3e54:	eb e2       	ldi	r30, 0x2B	; 43
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	82 e0       	ldi	r24, 0x02	; 2
    3e5a:	80 83       	st	Z, r24
	
	UCSRB = (1<<TXEN) | (1<<RXEN) ; /* Enable Receive & Transmit */
    3e5c:	ea e2       	ldi	r30, 0x2A	; 42
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	88 e1       	ldi	r24, 0x18	; 24
    3e62:	80 83       	st	Z, r24

	/* Configure UCSZ2 By Desired Data Bits */
	UCSRB = (UCSRB & 0xFB) | (GET_BIT(Config_Ptr->bit_data , 2)<<2) ;
    3e64:	aa e2       	ldi	r26, 0x2A	; 42
    3e66:	b0 e0       	ldi	r27, 0x00	; 0
    3e68:	ea e2       	ldi	r30, 0x2A	; 42
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	80 81       	ld	r24, Z
    3e6e:	98 2f       	mov	r25, r24
    3e70:	9b 7f       	andi	r25, 0xFB	; 251
    3e72:	eb 81       	ldd	r30, Y+3	; 0x03
    3e74:	fc 81       	ldd	r31, Y+4	; 0x04
    3e76:	80 81       	ld	r24, Z
    3e78:	84 70       	andi	r24, 0x04	; 4
    3e7a:	89 2b       	or	r24, r25
    3e7c:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL) ; /* Set This Bit to Write in UCSRC Reg. */
    3e7e:	e0 e4       	ldi	r30, 0x40	; 64
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	80 e8       	ldi	r24, 0x80	; 128
    3e84:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity<<4) ; /* Configure Parity Bit */
    3e86:	a0 e4       	ldi	r26, 0x40	; 64
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	e0 e4       	ldi	r30, 0x40	; 64
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	80 81       	ld	r24, Z
    3e90:	28 2f       	mov	r18, r24
    3e92:	2f 7c       	andi	r18, 0xCF	; 207
    3e94:	eb 81       	ldd	r30, Y+3	; 0x03
    3e96:	fc 81       	ldd	r31, Y+4	; 0x04
    3e98:	81 81       	ldd	r24, Z+1	; 0x01
    3e9a:	88 2f       	mov	r24, r24
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	82 95       	swap	r24
    3ea0:	92 95       	swap	r25
    3ea2:	90 7f       	andi	r25, 0xF0	; 240
    3ea4:	98 27       	eor	r25, r24
    3ea6:	80 7f       	andi	r24, 0xF0	; 240
    3ea8:	98 27       	eor	r25, r24
    3eaa:	82 2b       	or	r24, r18
    3eac:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit<<3); /* Configure Stop Bit */
    3eae:	a0 e4       	ldi	r26, 0x40	; 64
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	e0 e4       	ldi	r30, 0x40	; 64
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	28 2f       	mov	r18, r24
    3eba:	27 7f       	andi	r18, 0xF7	; 247
    3ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    3ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    3ec0:	82 81       	ldd	r24, Z+2	; 0x02
    3ec2:	88 2f       	mov	r24, r24
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	88 0f       	add	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	88 0f       	add	r24, r24
    3ed0:	99 1f       	adc	r25, r25
    3ed2:	82 2b       	or	r24, r18
    3ed4:	8c 93       	st	X, r24

	/* Configure UCSZ0:1 By Desired Data Bits */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->bit_data & 0x03)<< 1 ) ;
    3ed6:	a0 e4       	ldi	r26, 0x40	; 64
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	e0 e4       	ldi	r30, 0x40	; 64
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	80 81       	ld	r24, Z
    3ee0:	28 2f       	mov	r18, r24
    3ee2:	29 7f       	andi	r18, 0xF9	; 249
    3ee4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ee6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ee8:	80 81       	ld	r24, Z
    3eea:	88 2f       	mov	r24, r24
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	83 70       	andi	r24, 0x03	; 3
    3ef0:	90 70       	andi	r25, 0x00	; 0
    3ef2:	88 0f       	add	r24, r24
    3ef4:	99 1f       	adc	r25, r25
    3ef6:	82 2b       	or	r24, r18
    3ef8:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr = (uint16)((F_CPU / (8UL * Config_Ptr->baud_rate)) - 1) ;
    3efa:	eb 81       	ldd	r30, Y+3	; 0x03
    3efc:	fc 81       	ldd	r31, Y+4	; 0x04
    3efe:	83 81       	ldd	r24, Z+3	; 0x03
    3f00:	94 81       	ldd	r25, Z+4	; 0x04
    3f02:	a5 81       	ldd	r26, Z+5	; 0x05
    3f04:	b6 81       	ldd	r27, Z+6	; 0x06
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	aa 1f       	adc	r26, r26
    3f0c:	bb 1f       	adc	r27, r27
    3f0e:	88 0f       	add	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	aa 1f       	adc	r26, r26
    3f14:	bb 1f       	adc	r27, r27
    3f16:	88 0f       	add	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	aa 1f       	adc	r26, r26
    3f1c:	bb 1f       	adc	r27, r27
    3f1e:	9c 01       	movw	r18, r24
    3f20:	ad 01       	movw	r20, r26
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	92 e1       	ldi	r25, 0x12	; 18
    3f26:	aa e7       	ldi	r26, 0x7A	; 122
    3f28:	b0 e0       	ldi	r27, 0x00	; 0
    3f2a:	bc 01       	movw	r22, r24
    3f2c:	cd 01       	movw	r24, r26
    3f2e:	0e 94 42 20 	call	0x4084	; 0x4084 <__udivmodsi4>
    3f32:	da 01       	movw	r26, r20
    3f34:	c9 01       	movw	r24, r18
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	9a 83       	std	Y+2, r25	; 0x02
    3f3a:	89 83       	std	Y+1, r24	; 0x01

	/* Configure UBRR Reg with Desired Baud Rate */
	UBRRH = ubrr>>8 ;
    3f3c:	e0 e4       	ldi	r30, 0x40	; 64
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	89 81       	ldd	r24, Y+1	; 0x01
    3f42:	9a 81       	ldd	r25, Y+2	; 0x02
    3f44:	89 2f       	mov	r24, r25
    3f46:	99 27       	eor	r25, r25
    3f48:	80 83       	st	Z, r24
	UBRRL = ubrr ;
    3f4a:	e9 e2       	ldi	r30, 0x29	; 41
    3f4c:	f0 e0       	ldi	r31, 0x00	; 0
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
    3f50:	80 83       	st	Z, r24

}
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	0f 92       	push	r0
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3f6c:	eb e2       	ldi	r30, 0x2B	; 43
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	88 2f       	mov	r24, r24
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	80 72       	andi	r24, 0x20	; 32
    3f78:	90 70       	andi	r25, 0x00	; 0
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	b9 f3       	breq	.-18     	; 0x3f6c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3f7e:	ec e2       	ldi	r30, 0x2C	; 44
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3f86:	0f 90       	pop	r0
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	08 95       	ret

00003f8e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3f8e:	df 93       	push	r29
    3f90:	cf 93       	push	r28
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3f96:	eb e2       	ldi	r30, 0x2B	; 43
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	80 81       	ld	r24, Z
    3f9c:	88 23       	and	r24, r24
    3f9e:	dc f7       	brge	.-10     	; 0x3f96 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3fa0:	ec e2       	ldi	r30, 0x2C	; 44
    3fa2:	f0 e0       	ldi	r31, 0x00	; 0
    3fa4:	80 81       	ld	r24, Z
}
    3fa6:	cf 91       	pop	r28
    3fa8:	df 91       	pop	r29
    3faa:	08 95       	ret

00003fac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	00 d0       	rcall	.+0      	; 0x3fb2 <UART_sendString+0x6>
    3fb2:	0f 92       	push	r0
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	9b 83       	std	Y+3, r25	; 0x03
    3fba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3fbc:	19 82       	std	Y+1, r1	; 0x01
    3fbe:	0e c0       	rjmp	.+28     	; 0x3fdc <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	28 2f       	mov	r18, r24
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fca:	fc 01       	movw	r30, r24
    3fcc:	e2 0f       	add	r30, r18
    3fce:	f3 1f       	adc	r31, r19
    3fd0:	80 81       	ld	r24, Z
    3fd2:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <UART_sendByte>
		i++;
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	8f 5f       	subi	r24, 0xFF	; 255
    3fda:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	28 2f       	mov	r18, r24
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	e2 0f       	add	r30, r18
    3fea:	f3 1f       	adc	r31, r19
    3fec:	80 81       	ld	r24, Z
    3fee:	88 23       	and	r24, r24
    3ff0:	39 f7       	brne	.-50     	; 0x3fc0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	08 95       	ret

00003ffe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3ffe:	0f 93       	push	r16
    4000:	1f 93       	push	r17
    4002:	df 93       	push	r29
    4004:	cf 93       	push	r28
    4006:	00 d0       	rcall	.+0      	; 0x4008 <UART_receiveString+0xa>
    4008:	0f 92       	push	r0
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	9b 83       	std	Y+3, r25	; 0x03
    4010:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4012:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	28 2f       	mov	r18, r24
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	9b 81       	ldd	r25, Y+3	; 0x03
    401e:	8c 01       	movw	r16, r24
    4020:	02 0f       	add	r16, r18
    4022:	13 1f       	adc	r17, r19
    4024:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>
    4028:	f8 01       	movw	r30, r16
    402a:	80 83       	st	Z, r24
    402c:	0f c0       	rjmp	.+30     	; 0x404c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    402e:	89 81       	ldd	r24, Y+1	; 0x01
    4030:	8f 5f       	subi	r24, 0xFF	; 255
    4032:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	28 2f       	mov	r18, r24
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	8a 81       	ldd	r24, Y+2	; 0x02
    403c:	9b 81       	ldd	r25, Y+3	; 0x03
    403e:	8c 01       	movw	r16, r24
    4040:	02 0f       	add	r16, r18
    4042:	13 1f       	adc	r17, r19
    4044:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <UART_recieveByte>
    4048:	f8 01       	movw	r30, r16
    404a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	28 2f       	mov	r18, r24
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	8a 81       	ldd	r24, Y+2	; 0x02
    4054:	9b 81       	ldd	r25, Y+3	; 0x03
    4056:	fc 01       	movw	r30, r24
    4058:	e2 0f       	add	r30, r18
    405a:	f3 1f       	adc	r31, r19
    405c:	80 81       	ld	r24, Z
    405e:	83 32       	cpi	r24, 0x23	; 35
    4060:	31 f7       	brne	.-52     	; 0x402e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	28 2f       	mov	r18, r24
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	8a 81       	ldd	r24, Y+2	; 0x02
    406a:	9b 81       	ldd	r25, Y+3	; 0x03
    406c:	fc 01       	movw	r30, r24
    406e:	e2 0f       	add	r30, r18
    4070:	f3 1f       	adc	r31, r19
    4072:	10 82       	st	Z, r1
}
    4074:	0f 90       	pop	r0
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	08 95       	ret

00004084 <__udivmodsi4>:
    4084:	a1 e2       	ldi	r26, 0x21	; 33
    4086:	1a 2e       	mov	r1, r26
    4088:	aa 1b       	sub	r26, r26
    408a:	bb 1b       	sub	r27, r27
    408c:	fd 01       	movw	r30, r26
    408e:	0d c0       	rjmp	.+26     	; 0x40aa <__udivmodsi4_ep>

00004090 <__udivmodsi4_loop>:
    4090:	aa 1f       	adc	r26, r26
    4092:	bb 1f       	adc	r27, r27
    4094:	ee 1f       	adc	r30, r30
    4096:	ff 1f       	adc	r31, r31
    4098:	a2 17       	cp	r26, r18
    409a:	b3 07       	cpc	r27, r19
    409c:	e4 07       	cpc	r30, r20
    409e:	f5 07       	cpc	r31, r21
    40a0:	20 f0       	brcs	.+8      	; 0x40aa <__udivmodsi4_ep>
    40a2:	a2 1b       	sub	r26, r18
    40a4:	b3 0b       	sbc	r27, r19
    40a6:	e4 0b       	sbc	r30, r20
    40a8:	f5 0b       	sbc	r31, r21

000040aa <__udivmodsi4_ep>:
    40aa:	66 1f       	adc	r22, r22
    40ac:	77 1f       	adc	r23, r23
    40ae:	88 1f       	adc	r24, r24
    40b0:	99 1f       	adc	r25, r25
    40b2:	1a 94       	dec	r1
    40b4:	69 f7       	brne	.-38     	; 0x4090 <__udivmodsi4_loop>
    40b6:	60 95       	com	r22
    40b8:	70 95       	com	r23
    40ba:	80 95       	com	r24
    40bc:	90 95       	com	r25
    40be:	9b 01       	movw	r18, r22
    40c0:	ac 01       	movw	r20, r24
    40c2:	bd 01       	movw	r22, r26
    40c4:	cf 01       	movw	r24, r30
    40c6:	08 95       	ret

000040c8 <__prologue_saves__>:
    40c8:	2f 92       	push	r2
    40ca:	3f 92       	push	r3
    40cc:	4f 92       	push	r4
    40ce:	5f 92       	push	r5
    40d0:	6f 92       	push	r6
    40d2:	7f 92       	push	r7
    40d4:	8f 92       	push	r8
    40d6:	9f 92       	push	r9
    40d8:	af 92       	push	r10
    40da:	bf 92       	push	r11
    40dc:	cf 92       	push	r12
    40de:	df 92       	push	r13
    40e0:	ef 92       	push	r14
    40e2:	ff 92       	push	r15
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
    40f0:	ca 1b       	sub	r28, r26
    40f2:	db 0b       	sbc	r29, r27
    40f4:	0f b6       	in	r0, 0x3f	; 63
    40f6:	f8 94       	cli
    40f8:	de bf       	out	0x3e, r29	; 62
    40fa:	0f be       	out	0x3f, r0	; 63
    40fc:	cd bf       	out	0x3d, r28	; 61
    40fe:	09 94       	ijmp

00004100 <__epilogue_restores__>:
    4100:	2a 88       	ldd	r2, Y+18	; 0x12
    4102:	39 88       	ldd	r3, Y+17	; 0x11
    4104:	48 88       	ldd	r4, Y+16	; 0x10
    4106:	5f 84       	ldd	r5, Y+15	; 0x0f
    4108:	6e 84       	ldd	r6, Y+14	; 0x0e
    410a:	7d 84       	ldd	r7, Y+13	; 0x0d
    410c:	8c 84       	ldd	r8, Y+12	; 0x0c
    410e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4110:	aa 84       	ldd	r10, Y+10	; 0x0a
    4112:	b9 84       	ldd	r11, Y+9	; 0x09
    4114:	c8 84       	ldd	r12, Y+8	; 0x08
    4116:	df 80       	ldd	r13, Y+7	; 0x07
    4118:	ee 80       	ldd	r14, Y+6	; 0x06
    411a:	fd 80       	ldd	r15, Y+5	; 0x05
    411c:	0c 81       	ldd	r16, Y+4	; 0x04
    411e:	1b 81       	ldd	r17, Y+3	; 0x03
    4120:	aa 81       	ldd	r26, Y+2	; 0x02
    4122:	b9 81       	ldd	r27, Y+1	; 0x01
    4124:	ce 0f       	add	r28, r30
    4126:	d1 1d       	adc	r29, r1
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	f8 94       	cli
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	cd bf       	out	0x3d, r28	; 61
    4132:	ed 01       	movw	r28, r26
    4134:	08 95       	ret

00004136 <itoa>:
    4136:	fb 01       	movw	r30, r22
    4138:	9f 01       	movw	r18, r30
    413a:	e8 94       	clt
    413c:	42 30       	cpi	r20, 0x02	; 2
    413e:	c4 f0       	brlt	.+48     	; 0x4170 <itoa+0x3a>
    4140:	45 32       	cpi	r20, 0x25	; 37
    4142:	b4 f4       	brge	.+44     	; 0x4170 <itoa+0x3a>
    4144:	4a 30       	cpi	r20, 0x0A	; 10
    4146:	29 f4       	brne	.+10     	; 0x4152 <itoa+0x1c>
    4148:	97 fb       	bst	r25, 7
    414a:	1e f4       	brtc	.+6      	; 0x4152 <itoa+0x1c>
    414c:	90 95       	com	r25
    414e:	81 95       	neg	r24
    4150:	9f 4f       	sbci	r25, 0xFF	; 255
    4152:	64 2f       	mov	r22, r20
    4154:	77 27       	eor	r23, r23
    4156:	0e 94 cc 20 	call	0x4198	; 0x4198 <__udivmodhi4>
    415a:	80 5d       	subi	r24, 0xD0	; 208
    415c:	8a 33       	cpi	r24, 0x3A	; 58
    415e:	0c f0       	brlt	.+2      	; 0x4162 <itoa+0x2c>
    4160:	89 5d       	subi	r24, 0xD9	; 217
    4162:	81 93       	st	Z+, r24
    4164:	cb 01       	movw	r24, r22
    4166:	00 97       	sbiw	r24, 0x00	; 0
    4168:	a1 f7       	brne	.-24     	; 0x4152 <itoa+0x1c>
    416a:	16 f4       	brtc	.+4      	; 0x4170 <itoa+0x3a>
    416c:	5d e2       	ldi	r21, 0x2D	; 45
    416e:	51 93       	st	Z+, r21
    4170:	10 82       	st	Z, r1
    4172:	c9 01       	movw	r24, r18
    4174:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <strrev>

00004178 <strrev>:
    4178:	dc 01       	movw	r26, r24
    417a:	fc 01       	movw	r30, r24
    417c:	67 2f       	mov	r22, r23
    417e:	71 91       	ld	r23, Z+
    4180:	77 23       	and	r23, r23
    4182:	e1 f7       	brne	.-8      	; 0x417c <strrev+0x4>
    4184:	32 97       	sbiw	r30, 0x02	; 2
    4186:	04 c0       	rjmp	.+8      	; 0x4190 <strrev+0x18>
    4188:	7c 91       	ld	r23, X
    418a:	6d 93       	st	X+, r22
    418c:	70 83       	st	Z, r23
    418e:	62 91       	ld	r22, -Z
    4190:	ae 17       	cp	r26, r30
    4192:	bf 07       	cpc	r27, r31
    4194:	c8 f3       	brcs	.-14     	; 0x4188 <strrev+0x10>
    4196:	08 95       	ret

00004198 <__udivmodhi4>:
    4198:	aa 1b       	sub	r26, r26
    419a:	bb 1b       	sub	r27, r27
    419c:	51 e1       	ldi	r21, 0x11	; 17
    419e:	07 c0       	rjmp	.+14     	; 0x41ae <__udivmodhi4_ep>

000041a0 <__udivmodhi4_loop>:
    41a0:	aa 1f       	adc	r26, r26
    41a2:	bb 1f       	adc	r27, r27
    41a4:	a6 17       	cp	r26, r22
    41a6:	b7 07       	cpc	r27, r23
    41a8:	10 f0       	brcs	.+4      	; 0x41ae <__udivmodhi4_ep>
    41aa:	a6 1b       	sub	r26, r22
    41ac:	b7 0b       	sbc	r27, r23

000041ae <__udivmodhi4_ep>:
    41ae:	88 1f       	adc	r24, r24
    41b0:	99 1f       	adc	r25, r25
    41b2:	5a 95       	dec	r21
    41b4:	a9 f7       	brne	.-22     	; 0x41a0 <__udivmodhi4_loop>
    41b6:	80 95       	com	r24
    41b8:	90 95       	com	r25
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	08 95       	ret

000041c0 <_exit>:
    41c0:	f8 94       	cli

000041c2 <__stop_program>:
    41c2:	ff cf       	rjmp	.-2      	; 0x41c2 <__stop_program>
