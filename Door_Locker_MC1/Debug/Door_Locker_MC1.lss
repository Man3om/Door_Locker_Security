
Door_Locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00004c62  00004cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800108  00800108  00004d9e  2**0
                  ALLOC
  3 .stab         000038ac  00000000  00000000  00004da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010be  00000000  00000000  0000864c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000970a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000984a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000099ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b603  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d689  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000de57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__vector_7>
      20:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__vector_8>
      24:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
      8a:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 25 	jmp	0x4b7e	; 0x4b7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 25 	jmp	0x4bbe	; 0x4bbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer>:

/*********************************************************************************
 *                            CallBack Function                                  *
 ********************************************************************************/
void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     b4e:	80 91 08 01 	lds	r24, 0x0108
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 08 01 	sts	0x0108, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <main>:

/*********************************************************************************
 *                            Application Code                                   *
 ********************************************************************************/
int main(void)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	c8 56       	subi	r28, 0x68	; 104
     b6c:	d1 40       	sbci	r29, 0x01	; 1
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0 , pass1[5] = {0} , pass2[5] = {0} ,i = 0 , status = 0;
     b78:	fe 01       	movw	r30, r28
     b7a:	e9 5b       	subi	r30, 0xB9	; 185
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	10 82       	st	Z, r1
     b80:	ce 01       	movw	r24, r28
     b82:	88 5b       	subi	r24, 0xB8	; 184
     b84:	9e 4f       	sbci	r25, 0xFE	; 254
     b86:	25 e0       	ldi	r18, 0x05	; 5
     b88:	fc 01       	movw	r30, r24
     b8a:	df 01       	movw	r26, r30
     b8c:	82 2f       	mov	r24, r18
     b8e:	1d 92       	st	X+, r1
     b90:	8a 95       	dec	r24
     b92:	e9 f7       	brne	.-6      	; 0xb8e <main+0x30>
     b94:	ce 01       	movw	r24, r28
     b96:	83 5b       	subi	r24, 0xB3	; 179
     b98:	9e 4f       	sbci	r25, 0xFE	; 254
     b9a:	25 e0       	ldi	r18, 0x05	; 5
     b9c:	fc 01       	movw	r30, r24
     b9e:	df 01       	movw	r26, r30
     ba0:	82 2f       	mov	r24, r18
     ba2:	1d 92       	st	X+, r1
     ba4:	8a 95       	dec	r24
     ba6:	e9 f7       	brne	.-6      	; 0xba2 <main+0x44>
     ba8:	fe 01       	movw	r30, r28
     baa:	ea 5b       	subi	r30, 0xBA	; 186
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	10 82       	st	Z, r1
     bb0:	fe 01       	movw	r30, r28
     bb2:	eb 5b       	subi	r30, 0xBB	; 187
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
     bb6:	10 82       	st	Z, r1
	uint8 flag = 0 , count = 0 ;
     bb8:	fe 01       	movw	r30, r28
     bba:	ec 5b       	subi	r30, 0xBC	; 188
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	10 82       	st	Z, r1
     bc0:	fe 01       	movw	r30, r28
     bc2:	ed 5b       	subi	r30, 0xBD	; 189
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	10 82       	st	Z, r1

	SREG |= (1<<7); /* Enable Global Interrupt */
     bc8:	af e5       	ldi	r26, 0x5F	; 95
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ef e5       	ldi	r30, 0x5F	; 95
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 68       	ori	r24, 0x80	; 128
     bd4:	8c 93       	st	X, r24

	/* Configure The UART & Timer1 With Desired Specifications */
	UART_ConfigType u_configure = {BIT8 , Disable , ONE_Stop , 9600};
     bd6:	ce 01       	movw	r24, r28
     bd8:	8e 5a       	subi	r24, 0xAE	; 174
     bda:	9e 4f       	sbci	r25, 0xFE	; 254
     bdc:	c1 5a       	subi	r28, 0xA1	; 161
     bde:	de 4f       	sbci	r29, 0xFE	; 254
     be0:	99 83       	std	Y+1, r25	; 0x01
     be2:	88 83       	st	Y, r24
     be4:	cf 55       	subi	r28, 0x5F	; 95
     be6:	d1 40       	sbci	r29, 0x01	; 1
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	cf 59       	subi	r28, 0x9F	; 159
     bee:	de 4f       	sbci	r29, 0xFE	; 254
     bf0:	b9 83       	std	Y+1, r27	; 0x01
     bf2:	a8 83       	st	Y, r26
     bf4:	c1 56       	subi	r28, 0x61	; 97
     bf6:	d1 40       	sbci	r29, 0x01	; 1
     bf8:	b7 e0       	ldi	r27, 0x07	; 7
     bfa:	cd 59       	subi	r28, 0x9D	; 157
     bfc:	de 4f       	sbci	r29, 0xFE	; 254
     bfe:	b8 83       	st	Y, r27
     c00:	c3 56       	subi	r28, 0x63	; 99
     c02:	d1 40       	sbci	r29, 0x01	; 1
     c04:	cf 59       	subi	r28, 0x9F	; 159
     c06:	de 4f       	sbci	r29, 0xFE	; 254
     c08:	e8 81       	ld	r30, Y
     c0a:	f9 81       	ldd	r31, Y+1	; 0x01
     c0c:	c1 56       	subi	r28, 0x61	; 97
     c0e:	d1 40       	sbci	r29, 0x01	; 1
     c10:	00 80       	ld	r0, Z
     c12:	cf 59       	subi	r28, 0x9F	; 159
     c14:	de 4f       	sbci	r29, 0xFE	; 254
     c16:	88 81       	ld	r24, Y
     c18:	99 81       	ldd	r25, Y+1	; 0x01
     c1a:	c1 56       	subi	r28, 0x61	; 97
     c1c:	d1 40       	sbci	r29, 0x01	; 1
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	cf 59       	subi	r28, 0x9F	; 159
     c22:	de 4f       	sbci	r29, 0xFE	; 254
     c24:	99 83       	std	Y+1, r25	; 0x01
     c26:	88 83       	st	Y, r24
     c28:	c1 56       	subi	r28, 0x61	; 97
     c2a:	d1 40       	sbci	r29, 0x01	; 1
     c2c:	c1 5a       	subi	r28, 0xA1	; 161
     c2e:	de 4f       	sbci	r29, 0xFE	; 254
     c30:	a8 81       	ld	r26, Y
     c32:	b9 81       	ldd	r27, Y+1	; 0x01
     c34:	cf 55       	subi	r28, 0x5F	; 95
     c36:	d1 40       	sbci	r29, 0x01	; 1
     c38:	0c 92       	st	X, r0
     c3a:	c1 5a       	subi	r28, 0xA1	; 161
     c3c:	de 4f       	sbci	r29, 0xFE	; 254
     c3e:	e8 81       	ld	r30, Y
     c40:	f9 81       	ldd	r31, Y+1	; 0x01
     c42:	cf 55       	subi	r28, 0x5F	; 95
     c44:	d1 40       	sbci	r29, 0x01	; 1
     c46:	31 96       	adiw	r30, 0x01	; 1
     c48:	c1 5a       	subi	r28, 0xA1	; 161
     c4a:	de 4f       	sbci	r29, 0xFE	; 254
     c4c:	f9 83       	std	Y+1, r31	; 0x01
     c4e:	e8 83       	st	Y, r30
     c50:	cf 55       	subi	r28, 0x5F	; 95
     c52:	d1 40       	sbci	r29, 0x01	; 1
     c54:	cd 59       	subi	r28, 0x9D	; 157
     c56:	de 4f       	sbci	r29, 0xFE	; 254
     c58:	f8 81       	ld	r31, Y
     c5a:	c3 56       	subi	r28, 0x63	; 99
     c5c:	d1 40       	sbci	r29, 0x01	; 1
     c5e:	f1 50       	subi	r31, 0x01	; 1
     c60:	cd 59       	subi	r28, 0x9D	; 157
     c62:	de 4f       	sbci	r29, 0xFE	; 254
     c64:	f8 83       	st	Y, r31
     c66:	c3 56       	subi	r28, 0x63	; 99
     c68:	d1 40       	sbci	r29, 0x01	; 1
     c6a:	cd 59       	subi	r28, 0x9D	; 157
     c6c:	de 4f       	sbci	r29, 0xFE	; 254
     c6e:	88 81       	ld	r24, Y
     c70:	c3 56       	subi	r28, 0x63	; 99
     c72:	d1 40       	sbci	r29, 0x01	; 1
     c74:	88 23       	and	r24, r24
     c76:	31 f6       	brne	.-116    	; 0xc04 <main+0xa6>
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     c78:	ce 01       	movw	r24, r28
     c7a:	87 5a       	subi	r24, 0xA7	; 167
     c7c:	9e 4f       	sbci	r25, 0xFE	; 254
     c7e:	cc 59       	subi	r28, 0x9C	; 156
     c80:	de 4f       	sbci	r29, 0xFE	; 254
     c82:	99 83       	std	Y+1, r25	; 0x01
     c84:	88 83       	st	Y, r24
     c86:	c4 56       	subi	r28, 0x64	; 100
     c88:	d1 40       	sbci	r29, 0x01	; 1
     c8a:	aa ef       	ldi	r26, 0xFA	; 250
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	ca 59       	subi	r28, 0x9A	; 154
     c90:	de 4f       	sbci	r29, 0xFE	; 254
     c92:	b9 83       	std	Y+1, r27	; 0x01
     c94:	a8 83       	st	Y, r26
     c96:	c6 56       	subi	r28, 0x66	; 102
     c98:	d1 40       	sbci	r29, 0x01	; 1
     c9a:	b6 e0       	ldi	r27, 0x06	; 6
     c9c:	c8 59       	subi	r28, 0x98	; 152
     c9e:	de 4f       	sbci	r29, 0xFE	; 254
     ca0:	b8 83       	st	Y, r27
     ca2:	c8 56       	subi	r28, 0x68	; 104
     ca4:	d1 40       	sbci	r29, 0x01	; 1
     ca6:	ca 59       	subi	r28, 0x9A	; 154
     ca8:	de 4f       	sbci	r29, 0xFE	; 254
     caa:	e8 81       	ld	r30, Y
     cac:	f9 81       	ldd	r31, Y+1	; 0x01
     cae:	c6 56       	subi	r28, 0x66	; 102
     cb0:	d1 40       	sbci	r29, 0x01	; 1
     cb2:	00 80       	ld	r0, Z
     cb4:	ca 59       	subi	r28, 0x9A	; 154
     cb6:	de 4f       	sbci	r29, 0xFE	; 254
     cb8:	88 81       	ld	r24, Y
     cba:	99 81       	ldd	r25, Y+1	; 0x01
     cbc:	c6 56       	subi	r28, 0x66	; 102
     cbe:	d1 40       	sbci	r29, 0x01	; 1
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	ca 59       	subi	r28, 0x9A	; 154
     cc4:	de 4f       	sbci	r29, 0xFE	; 254
     cc6:	99 83       	std	Y+1, r25	; 0x01
     cc8:	88 83       	st	Y, r24
     cca:	c6 56       	subi	r28, 0x66	; 102
     ccc:	d1 40       	sbci	r29, 0x01	; 1
     cce:	cc 59       	subi	r28, 0x9C	; 156
     cd0:	de 4f       	sbci	r29, 0xFE	; 254
     cd2:	a8 81       	ld	r26, Y
     cd4:	b9 81       	ldd	r27, Y+1	; 0x01
     cd6:	c4 56       	subi	r28, 0x64	; 100
     cd8:	d1 40       	sbci	r29, 0x01	; 1
     cda:	0c 92       	st	X, r0
     cdc:	cc 59       	subi	r28, 0x9C	; 156
     cde:	de 4f       	sbci	r29, 0xFE	; 254
     ce0:	e8 81       	ld	r30, Y
     ce2:	f9 81       	ldd	r31, Y+1	; 0x01
     ce4:	c4 56       	subi	r28, 0x64	; 100
     ce6:	d1 40       	sbci	r29, 0x01	; 1
     ce8:	31 96       	adiw	r30, 0x01	; 1
     cea:	cc 59       	subi	r28, 0x9C	; 156
     cec:	de 4f       	sbci	r29, 0xFE	; 254
     cee:	f9 83       	std	Y+1, r31	; 0x01
     cf0:	e8 83       	st	Y, r30
     cf2:	c4 56       	subi	r28, 0x64	; 100
     cf4:	d1 40       	sbci	r29, 0x01	; 1
     cf6:	c8 59       	subi	r28, 0x98	; 152
     cf8:	de 4f       	sbci	r29, 0xFE	; 254
     cfa:	f8 81       	ld	r31, Y
     cfc:	c8 56       	subi	r28, 0x68	; 104
     cfe:	d1 40       	sbci	r29, 0x01	; 1
     d00:	f1 50       	subi	r31, 0x01	; 1
     d02:	c8 59       	subi	r28, 0x98	; 152
     d04:	de 4f       	sbci	r29, 0xFE	; 254
     d06:	f8 83       	st	Y, r31
     d08:	c8 56       	subi	r28, 0x68	; 104
     d0a:	d1 40       	sbci	r29, 0x01	; 1
     d0c:	c8 59       	subi	r28, 0x98	; 152
     d0e:	de 4f       	sbci	r29, 0xFE	; 254
     d10:	88 81       	ld	r24, Y
     d12:	c8 56       	subi	r28, 0x68	; 104
     d14:	d1 40       	sbci	r29, 0x01	; 1
     d16:	88 23       	and	r24, r24
     d18:	31 f6       	brne	.-116    	; 0xca6 <main+0x148>

	/* Initialization Drivers */
	UART_init(&u_configure);
     d1a:	ce 01       	movw	r24, r28
     d1c:	8e 5a       	subi	r24, 0xAE	; 174
     d1e:	9e 4f       	sbci	r25, 0xFE	; 254
     d20:	0e 94 6f 24 	call	0x48de	; 0x48de <UART_init>
	LCD_init();
     d24:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <LCD_init>

	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
     d28:	83 ea       	ldi	r24, 0xA3	; 163
     d2a:	95 e0       	ldi	r25, 0x05	; 5
     d2c:	0e 94 c4 23 	call	0x4788	; 0x4788 <Timer1_setCallBack>

	UART_recieveByte(); /* Waiting For MCU2 To be Ready */
     d30:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>

	while(1)
	{
		/* Create Password to The System */
		if(flag == 0)
     d34:	fe 01       	movw	r30, r28
     d36:	ec 5b       	subi	r30, 0xBC	; 188
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	80 81       	ld	r24, Z
     d3c:	88 23       	and	r24, r24
     d3e:	09 f0       	breq	.+2      	; 0xd42 <main+0x1e4>
     d40:	1e c5       	rjmp	.+2620   	; 0x177e <main+0xc20>
		{
			LCD_clearScreen();
     d42:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
			LCD_displayString("PLZ Enter Pass:");
     d46:	80 e6       	ldi	r24, 0x60	; 96
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
			LCD_moveCursor(1, 0);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	0e 94 cc 22 	call	0x4598	; 0x4598 <LCD_moveCursor>

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
     d56:	fe 01       	movw	r30, r28
     d58:	ea 5b       	subi	r30, 0xBA	; 186
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	10 82       	st	Z, r1
     d5e:	d6 c0       	rjmp	.+428    	; 0xf0c <main+0x3ae>
			{
				key = KEYPAD_getPressedKey() ;
     d60:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
     d64:	fe 01       	movw	r30, r28
     d66:	e9 5b       	subi	r30, 0xB9	; 185
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 83       	st	Z, r24
				pass1[i] = key ;
     d6c:	fe 01       	movw	r30, r28
     d6e:	ea 5b       	subi	r30, 0xBA	; 186
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	80 81       	ld	r24, Z
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	ce 01       	movw	r24, r28
     d7a:	88 5b       	subi	r24, 0xB8	; 184
     d7c:	9e 4f       	sbci	r25, 0xFE	; 254
     d7e:	dc 01       	movw	r26, r24
     d80:	a2 0f       	add	r26, r18
     d82:	b3 1f       	adc	r27, r19
     d84:	fe 01       	movw	r30, r28
     d86:	e9 5b       	subi	r30, 0xB9	; 185
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	80 81       	ld	r24, Z
     d8c:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     d8e:	8a e2       	ldi	r24, 0x2A	; 42
     d90:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
     d94:	fe 01       	movw	r30, r28
     d96:	e1 5c       	subi	r30, 0xC1	; 193
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	aa ef       	ldi	r26, 0xFA	; 250
     da0:	b3 e4       	ldi	r27, 0x43	; 67
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	8e 01       	movw	r16, r28
     dac:	05 5c       	subi	r16, 0xC5	; 197
     dae:	1e 4f       	sbci	r17, 0xFE	; 254
     db0:	fe 01       	movw	r30, r28
     db2:	e1 5c       	subi	r30, 0xC1	; 193
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4a ef       	ldi	r20, 0xFA	; 250
     dc4:	54 e4       	ldi	r21, 0x44	; 68
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f8 01       	movw	r30, r16
     dd0:	80 83       	st	Z, r24
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	a2 83       	std	Z+2, r26	; 0x02
     dd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd8:	fe 01       	movw	r30, r28
     dda:	e5 5c       	subi	r30, 0xC5	; 197
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	93 81       	ldd	r25, Z+3	; 0x03
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df2:	88 23       	and	r24, r24
     df4:	44 f4       	brge	.+16     	; 0xe06 <main+0x2a8>
		__ticks = 1;
     df6:	fe 01       	movw	r30, r28
     df8:	e7 5c       	subi	r30, 0xC7	; 199
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
     e04:	64 c0       	rjmp	.+200    	; 0xece <main+0x370>
	else if (__tmp > 65535)
     e06:	fe 01       	movw	r30, r28
     e08:	e5 5c       	subi	r30, 0xC5	; 197
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	4f e7       	ldi	r20, 0x7F	; 127
     e1a:	57 e4       	ldi	r21, 0x47	; 71
     e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e20:	18 16       	cp	r1, r24
     e22:	0c f0       	brlt	.+2      	; 0xe26 <main+0x2c8>
     e24:	43 c0       	rjmp	.+134    	; 0xeac <main+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e26:	fe 01       	movw	r30, r28
     e28:	e1 5c       	subi	r30, 0xC1	; 193
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	82 81       	ldd	r24, Z+2	; 0x02
     e32:	93 81       	ldd	r25, Z+3	; 0x03
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e2       	ldi	r20, 0x20	; 32
     e3a:	51 e4       	ldi	r21, 0x41	; 65
     e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	8e 01       	movw	r16, r28
     e46:	07 5c       	subi	r16, 0xC7	; 199
     e48:	1e 4f       	sbci	r17, 0xFE	; 254
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	f8 01       	movw	r30, r16
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	80 83       	st	Z, r24
     e5c:	1f c0       	rjmp	.+62     	; 0xe9c <main+0x33e>
     e5e:	fe 01       	movw	r30, r28
     e60:	e9 5c       	subi	r30, 0xC9	; 201
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	88 ec       	ldi	r24, 0xC8	; 200
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e6c:	fe 01       	movw	r30, r28
     e6e:	e9 5c       	subi	r30, 0xC9	; 201
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <main+0x318>
     e7a:	fe 01       	movw	r30, r28
     e7c:	e9 5c       	subi	r30, 0xC9	; 201
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e84:	de 01       	movw	r26, r28
     e86:	a7 5c       	subi	r26, 0xC7	; 199
     e88:	be 4f       	sbci	r27, 0xFE	; 254
     e8a:	fe 01       	movw	r30, r28
     e8c:	e7 5c       	subi	r30, 0xC7	; 199
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	9c 93       	st	X, r25
     e9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9c:	fe 01       	movw	r30, r28
     e9e:	e7 5c       	subi	r30, 0xC7	; 199
     ea0:	fe 4f       	sbci	r31, 0xFE	; 254
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	d1 f6       	brne	.-76     	; 0xe5e <main+0x300>
     eaa:	27 c0       	rjmp	.+78     	; 0xefa <main+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eac:	8e 01       	movw	r16, r28
     eae:	07 5c       	subi	r16, 0xC7	; 199
     eb0:	1e 4f       	sbci	r17, 0xFE	; 254
     eb2:	fe 01       	movw	r30, r28
     eb4:	e5 5c       	subi	r30, 0xC5	; 197
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	f8 01       	movw	r30, r16
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
     ece:	de 01       	movw	r26, r28
     ed0:	ab 5c       	subi	r26, 0xCB	; 203
     ed2:	be 4f       	sbci	r27, 0xFE	; 254
     ed4:	fe 01       	movw	r30, r28
     ed6:	e7 5c       	subi	r30, 0xC7	; 199
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	8d 93       	st	X+, r24
     ee0:	9c 93       	st	X, r25
     ee2:	fe 01       	movw	r30, r28
     ee4:	eb 5c       	subi	r30, 0xCB	; 203
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <main+0x38e>
     ef0:	fe 01       	movw	r30, r28
     ef2:	eb 5c       	subi	r30, 0xCB	; 203
     ef4:	fe 4f       	sbci	r31, 0xFE	; 254
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("PLZ Enter Pass:");
			LCD_moveCursor(1, 0);

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
     efa:	de 01       	movw	r26, r28
     efc:	aa 5b       	subi	r26, 0xBA	; 186
     efe:	be 4f       	sbci	r27, 0xFE	; 254
     f00:	fe 01       	movw	r30, r28
     f02:	ea 5b       	subi	r30, 0xBA	; 186
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	80 81       	ld	r24, Z
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	8c 93       	st	X, r24
     f0c:	fe 01       	movw	r30, r28
     f0e:	ea 5b       	subi	r30, 0xBA	; 186
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	80 81       	ld	r24, Z
     f14:	85 30       	cpi	r24, 0x05	; 5
     f16:	08 f4       	brcc	.+2      	; 0xf1a <main+0x3bc>
     f18:	23 cf       	rjmp	.-442    	; 0xd60 <main+0x202>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
     f1a:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
     f1e:	fe 01       	movw	r30, r28
     f20:	e9 5b       	subi	r30, 0xB9	; 185
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	80 83       	st	Z, r24
     f26:	fe 01       	movw	r30, r28
     f28:	ef 5c       	subi	r30, 0xCF	; 207
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	aa ef       	ldi	r26, 0xFA	; 250
     f32:	b3 e4       	ldi	r27, 0x43	; 67
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	a2 83       	std	Z+2, r26	; 0x02
     f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3c:	8e 01       	movw	r16, r28
     f3e:	03 5d       	subi	r16, 0xD3	; 211
     f40:	1e 4f       	sbci	r17, 0xFE	; 254
     f42:	fe 01       	movw	r30, r28
     f44:	ef 5c       	subi	r30, 0xCF	; 207
     f46:	fe 4f       	sbci	r31, 0xFE	; 254
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a ef       	ldi	r20, 0xFA	; 250
     f56:	54 e4       	ldi	r21, 0x44	; 68
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	80 83       	st	Z, r24
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f6a:	fe 01       	movw	r30, r28
     f6c:	e3 5d       	subi	r30, 0xD3	; 211
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	44 f4       	brge	.+16     	; 0xf98 <main+0x43a>
		__ticks = 1;
     f88:	fe 01       	movw	r30, r28
     f8a:	e5 5d       	subi	r30, 0xD5	; 213
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
     f96:	64 c0       	rjmp	.+200    	; 0x1060 <main+0x502>
	else if (__tmp > 65535)
     f98:	fe 01       	movw	r30, r28
     f9a:	e3 5d       	subi	r30, 0xD3	; 211
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	0c f0       	brlt	.+2      	; 0xfb8 <main+0x45a>
     fb6:	43 c0       	rjmp	.+134    	; 0x103e <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb8:	fe 01       	movw	r30, r28
     fba:	ef 5c       	subi	r30, 0xCF	; 207
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8e 01       	movw	r16, r28
     fd8:	05 5d       	subi	r16, 0xD5	; 213
     fda:	1e 4f       	sbci	r17, 0xFE	; 254
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	f8 01       	movw	r30, r16
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
     fee:	1f c0       	rjmp	.+62     	; 0x102e <main+0x4d0>
     ff0:	fe 01       	movw	r30, r28
     ff2:	e7 5d       	subi	r30, 0xD7	; 215
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	88 ec       	ldi	r24, 0xC8	; 200
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	fe 01       	movw	r30, r28
    1000:	e7 5d       	subi	r30, 0xD7	; 215
    1002:	fe 4f       	sbci	r31, 0xFE	; 254
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <main+0x4aa>
    100c:	fe 01       	movw	r30, r28
    100e:	e7 5d       	subi	r30, 0xD7	; 215
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	de 01       	movw	r26, r28
    1018:	a5 5d       	subi	r26, 0xD5	; 213
    101a:	be 4f       	sbci	r27, 0xFE	; 254
    101c:	fe 01       	movw	r30, r28
    101e:	e5 5d       	subi	r30, 0xD5	; 213
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	9c 93       	st	X, r25
    102c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102e:	fe 01       	movw	r30, r28
    1030:	e5 5d       	subi	r30, 0xD5	; 213
    1032:	fe 4f       	sbci	r31, 0xFE	; 254
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	d1 f6       	brne	.-76     	; 0xff0 <main+0x492>
    103c:	28 c0       	rjmp	.+80     	; 0x108e <main+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	8e 01       	movw	r16, r28
    1040:	05 5d       	subi	r16, 0xD5	; 213
    1042:	1e 4f       	sbci	r17, 0xFE	; 254
    1044:	fe 01       	movw	r30, r28
    1046:	e3 5d       	subi	r30, 0xD3	; 211
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	f8 01       	movw	r30, r16
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	de 01       	movw	r26, r28
    1062:	a9 5d       	subi	r26, 0xD9	; 217
    1064:	be 4f       	sbci	r27, 0xFE	; 254
    1066:	fe 01       	movw	r30, r28
    1068:	e5 5d       	subi	r30, 0xD5	; 213
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	9c 93       	st	X, r25
    1074:	8e 93       	st	-X, r24
    1076:	fe 01       	movw	r30, r28
    1078:	e9 5d       	subi	r30, 0xD9	; 217
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <main+0x522>
    1084:	fe 01       	movw	r30, r28
    1086:	e9 5d       	subi	r30, 0xD9	; 217
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    108e:	fe 01       	movw	r30, r28
    1090:	e9 5b       	subi	r30, 0xB9	; 185
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	80 81       	ld	r24, Z
    1096:	8d 30       	cpi	r24, 0x0D	; 13
    1098:	09 f0       	breq	.+2      	; 0x109c <main+0x53e>
    109a:	3f cf       	rjmp	.-386    	; 0xf1a <main+0x3bc>

			LCD_clearScreen();
    109c:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    10a0:	80 e7       	ldi	r24, 0x70	; 112
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same Pass: ");
    10a8:	21 e8       	ldi	r18, 0x81	; 129
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	0e 94 0e 23 	call	0x461c	; 0x461c <LCD_displayStringRowColumn>

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    10b6:	fe 01       	movw	r30, r28
    10b8:	ea 5b       	subi	r30, 0xBA	; 186
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	10 82       	st	Z, r1
    10be:	d6 c0       	rjmp	.+428    	; 0x126c <main+0x70e>
			{
				key = KEYPAD_getPressedKey() ;
    10c0:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    10c4:	fe 01       	movw	r30, r28
    10c6:	e9 5b       	subi	r30, 0xB9	; 185
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	80 83       	st	Z, r24
				pass2[i] = key ;
    10cc:	fe 01       	movw	r30, r28
    10ce:	ea 5b       	subi	r30, 0xBA	; 186
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	ce 01       	movw	r24, r28
    10da:	83 5b       	subi	r24, 0xB3	; 179
    10dc:	9e 4f       	sbci	r25, 0xFE	; 254
    10de:	dc 01       	movw	r26, r24
    10e0:	a2 0f       	add	r26, r18
    10e2:	b3 1f       	adc	r27, r19
    10e4:	fe 01       	movw	r30, r28
    10e6:	e9 5b       	subi	r30, 0xB9	; 185
    10e8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ea:	80 81       	ld	r24, Z
    10ec:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
    10ee:	8a e2       	ldi	r24, 0x2A	; 42
    10f0:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
    10f4:	fe 01       	movw	r30, r28
    10f6:	ed 5d       	subi	r30, 0xDD	; 221
    10f8:	fe 4f       	sbci	r31, 0xFE	; 254
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	aa ef       	ldi	r26, 0xFA	; 250
    1100:	b3 e4       	ldi	r27, 0x43	; 67
    1102:	80 83       	st	Z, r24
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	a2 83       	std	Z+2, r26	; 0x02
    1108:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	8e 01       	movw	r16, r28
    110c:	01 5e       	subi	r16, 0xE1	; 225
    110e:	1e 4f       	sbci	r17, 0xFE	; 254
    1110:	fe 01       	movw	r30, r28
    1112:	ed 5d       	subi	r30, 0xDD	; 221
    1114:	fe 4f       	sbci	r31, 0xFE	; 254
    1116:	60 81       	ld	r22, Z
    1118:	71 81       	ldd	r23, Z+1	; 0x01
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	f8 01       	movw	r30, r16
    1130:	80 83       	st	Z, r24
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	a2 83       	std	Z+2, r26	; 0x02
    1136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1138:	fe 01       	movw	r30, r28
    113a:	e1 5e       	subi	r30, 0xE1	; 225
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e8       	ldi	r20, 0x80	; 128
    114c:	5f e3       	ldi	r21, 0x3F	; 63
    114e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1152:	88 23       	and	r24, r24
    1154:	44 f4       	brge	.+16     	; 0x1166 <main+0x608>
		__ticks = 1;
    1156:	fe 01       	movw	r30, r28
    1158:	e3 5e       	subi	r30, 0xE3	; 227
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
    1164:	64 c0       	rjmp	.+200    	; 0x122e <main+0x6d0>
	else if (__tmp > 65535)
    1166:	fe 01       	movw	r30, r28
    1168:	e1 5e       	subi	r30, 0xE1	; 225
    116a:	fe 4f       	sbci	r31, 0xFE	; 254
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	0c f0       	brlt	.+2      	; 0x1186 <main+0x628>
    1184:	43 c0       	rjmp	.+134    	; 0x120c <main+0x6ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	fe 01       	movw	r30, r28
    1188:	ed 5d       	subi	r30, 0xDD	; 221
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	51 e4       	ldi	r21, 0x41	; 65
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8e 01       	movw	r16, r28
    11a6:	03 5e       	subi	r16, 0xE3	; 227
    11a8:	1e 4f       	sbci	r17, 0xFE	; 254
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	f8 01       	movw	r30, r16
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	1f c0       	rjmp	.+62     	; 0x11fc <main+0x69e>
    11be:	fe 01       	movw	r30, r28
    11c0:	e5 5e       	subi	r30, 0xE5	; 229
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	88 ec       	ldi	r24, 0xC8	; 200
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
    11cc:	fe 01       	movw	r30, r28
    11ce:	e5 5e       	subi	r30, 0xE5	; 229
    11d0:	fe 4f       	sbci	r31, 0xFE	; 254
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <main+0x678>
    11da:	fe 01       	movw	r30, r28
    11dc:	e5 5e       	subi	r30, 0xE5	; 229
    11de:	fe 4f       	sbci	r31, 0xFE	; 254
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	de 01       	movw	r26, r28
    11e6:	a3 5e       	subi	r26, 0xE3	; 227
    11e8:	be 4f       	sbci	r27, 0xFE	; 254
    11ea:	fe 01       	movw	r30, r28
    11ec:	e3 5e       	subi	r30, 0xE3	; 227
    11ee:	fe 4f       	sbci	r31, 0xFE	; 254
    11f0:	80 81       	ld	r24, Z
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	9c 93       	st	X, r25
    11fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	fe 01       	movw	r30, r28
    11fe:	e3 5e       	subi	r30, 0xE3	; 227
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	d1 f6       	brne	.-76     	; 0x11be <main+0x660>
    120a:	27 c0       	rjmp	.+78     	; 0x125a <main+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120c:	8e 01       	movw	r16, r28
    120e:	03 5e       	subi	r16, 0xE3	; 227
    1210:	1e 4f       	sbci	r17, 0xFE	; 254
    1212:	fe 01       	movw	r30, r28
    1214:	e1 5e       	subi	r30, 0xE1	; 225
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	f8 01       	movw	r30, r16
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    122e:	de 01       	movw	r26, r28
    1230:	a7 5e       	subi	r26, 0xE7	; 231
    1232:	be 4f       	sbci	r27, 0xFE	; 254
    1234:	fe 01       	movw	r30, r28
    1236:	e3 5e       	subi	r30, 0xE3	; 227
    1238:	fe 4f       	sbci	r31, 0xFE	; 254
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	8d 93       	st	X+, r24
    1240:	9c 93       	st	X, r25
    1242:	fe 01       	movw	r30, r28
    1244:	e7 5e       	subi	r30, 0xE7	; 231
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <main+0x6ee>
    1250:	fe 01       	movw	r30, r28
    1252:	e7 5e       	subi	r30, 0xE7	; 231
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("Plz re-enter the");
			LCD_displayStringRowColumn(1, 0, "same Pass: ");

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    125a:	de 01       	movw	r26, r28
    125c:	aa 5b       	subi	r26, 0xBA	; 186
    125e:	be 4f       	sbci	r27, 0xFE	; 254
    1260:	fe 01       	movw	r30, r28
    1262:	ea 5b       	subi	r30, 0xBA	; 186
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	80 81       	ld	r24, Z
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	8c 93       	st	X, r24
    126c:	fe 01       	movw	r30, r28
    126e:	ea 5b       	subi	r30, 0xBA	; 186
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	80 81       	ld	r24, Z
    1274:	85 30       	cpi	r24, 0x05	; 5
    1276:	08 f4       	brcc	.+2      	; 0x127a <main+0x71c>
    1278:	23 cf       	rjmp	.-442    	; 0x10c0 <main+0x562>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    127a:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    127e:	fe 01       	movw	r30, r28
    1280:	e9 5b       	subi	r30, 0xB9	; 185
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	80 83       	st	Z, r24
    1286:	fe 01       	movw	r30, r28
    1288:	eb 5e       	subi	r30, 0xEB	; 235
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	aa ef       	ldi	r26, 0xFA	; 250
    1292:	b3 e4       	ldi	r27, 0x43	; 67
    1294:	80 83       	st	Z, r24
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	a2 83       	std	Z+2, r26	; 0x02
    129a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129c:	8e 01       	movw	r16, r28
    129e:	0f 5e       	subi	r16, 0xEF	; 239
    12a0:	1e 4f       	sbci	r17, 0xFE	; 254
    12a2:	fe 01       	movw	r30, r28
    12a4:	eb 5e       	subi	r30, 0xEB	; 235
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	f8 01       	movw	r30, r16
    12c2:	80 83       	st	Z, r24
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	a2 83       	std	Z+2, r26	; 0x02
    12c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12ca:	fe 01       	movw	r30, r28
    12cc:	ef 5e       	subi	r30, 0xEF	; 239
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	60 81       	ld	r22, Z
    12d2:	71 81       	ldd	r23, Z+1	; 0x01
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e8       	ldi	r20, 0x80	; 128
    12de:	5f e3       	ldi	r21, 0x3F	; 63
    12e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	44 f4       	brge	.+16     	; 0x12f8 <main+0x79a>
		__ticks = 1;
    12e8:	fe 01       	movw	r30, r28
    12ea:	e1 5f       	subi	r30, 0xF1	; 241
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    12f6:	64 c0       	rjmp	.+200    	; 0x13c0 <main+0x862>
	else if (__tmp > 65535)
    12f8:	fe 01       	movw	r30, r28
    12fa:	ef 5e       	subi	r30, 0xEF	; 239
    12fc:	fe 4f       	sbci	r31, 0xFE	; 254
    12fe:	60 81       	ld	r22, Z
    1300:	71 81       	ldd	r23, Z+1	; 0x01
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	0c f0       	brlt	.+2      	; 0x1318 <main+0x7ba>
    1316:	43 c0       	rjmp	.+134    	; 0x139e <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1318:	fe 01       	movw	r30, r28
    131a:	eb 5e       	subi	r30, 0xEB	; 235
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	8e 01       	movw	r16, r28
    1338:	01 5f       	subi	r16, 0xF1	; 241
    133a:	1e 4f       	sbci	r17, 0xFE	; 254
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	f8 01       	movw	r30, r16
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
    134e:	1f c0       	rjmp	.+62     	; 0x138e <main+0x830>
    1350:	fe 01       	movw	r30, r28
    1352:	e3 5f       	subi	r30, 0xF3	; 243
    1354:	fe 4f       	sbci	r31, 0xFE	; 254
    1356:	88 ec       	ldi	r24, 0xC8	; 200
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24
    135e:	fe 01       	movw	r30, r28
    1360:	e3 5f       	subi	r30, 0xF3	; 243
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <main+0x80a>
    136c:	fe 01       	movw	r30, r28
    136e:	e3 5f       	subi	r30, 0xF3	; 243
    1370:	fe 4f       	sbci	r31, 0xFE	; 254
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	de 01       	movw	r26, r28
    1378:	a1 5f       	subi	r26, 0xF1	; 241
    137a:	be 4f       	sbci	r27, 0xFE	; 254
    137c:	fe 01       	movw	r30, r28
    137e:	e1 5f       	subi	r30, 0xF1	; 241
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	9c 93       	st	X, r25
    138c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	fe 01       	movw	r30, r28
    1390:	e1 5f       	subi	r30, 0xF1	; 241
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	d1 f6       	brne	.-76     	; 0x1350 <main+0x7f2>
    139c:	28 c0       	rjmp	.+80     	; 0x13ee <main+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139e:	8e 01       	movw	r16, r28
    13a0:	01 5f       	subi	r16, 0xF1	; 241
    13a2:	1e 4f       	sbci	r17, 0xFE	; 254
    13a4:	fe 01       	movw	r30, r28
    13a6:	ef 5e       	subi	r30, 0xEF	; 239
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	f8 01       	movw	r30, r16
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
    13c0:	de 01       	movw	r26, r28
    13c2:	a5 5f       	subi	r26, 0xF5	; 245
    13c4:	be 4f       	sbci	r27, 0xFE	; 254
    13c6:	fe 01       	movw	r30, r28
    13c8:	e1 5f       	subi	r30, 0xF1	; 241
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	11 96       	adiw	r26, 0x01	; 1
    13d2:	9c 93       	st	X, r25
    13d4:	8e 93       	st	-X, r24
    13d6:	fe 01       	movw	r30, r28
    13d8:	e5 5f       	subi	r30, 0xF5	; 245
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <main+0x882>
    13e4:	fe 01       	movw	r30, r28
    13e6:	e5 5f       	subi	r30, 0xF5	; 245
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    13ee:	fe 01       	movw	r30, r28
    13f0:	e9 5b       	subi	r30, 0xB9	; 185
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	80 81       	ld	r24, Z
    13f6:	8d 30       	cpi	r24, 0x0D	; 13
    13f8:	09 f0       	breq	.+2      	; 0x13fc <main+0x89e>
    13fa:	3f cf       	rjmp	.-386    	; 0x127a <main+0x71c>

			/* Send 2 Passwords To 2nd MCU */
			for(i = 0 ; i < 5 ; i++)
    13fc:	fe 01       	movw	r30, r28
    13fe:	ea 5b       	subi	r30, 0xBA	; 186
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	10 82       	st	Z, r1
    1404:	cb c0       	rjmp	.+406    	; 0x159c <main+0xa3e>
			{
				UART_sendByte(pass1[i]);
    1406:	fe 01       	movw	r30, r28
    1408:	ea 5b       	subi	r30, 0xBA	; 186
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	80 81       	ld	r24, Z
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	ce 01       	movw	r24, r28
    1414:	88 5b       	subi	r24, 0xB8	; 184
    1416:	9e 4f       	sbci	r25, 0xFE	; 254
    1418:	fc 01       	movw	r30, r24
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	80 81       	ld	r24, Z
    1420:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    1424:	fe 01       	movw	r30, r28
    1426:	e9 5f       	subi	r30, 0xF9	; 249
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 ea       	ldi	r26, 0xA0	; 160
    1430:	b1 e4       	ldi	r27, 0x41	; 65
    1432:	80 83       	st	Z, r24
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	a2 83       	std	Z+2, r26	; 0x02
    1438:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	8e 01       	movw	r16, r28
    143c:	0d 5f       	subi	r16, 0xFD	; 253
    143e:	1e 4f       	sbci	r17, 0xFE	; 254
    1440:	fe 01       	movw	r30, r28
    1442:	e9 5f       	subi	r30, 0xF9	; 249
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a ef       	ldi	r20, 0xFA	; 250
    1454:	54 e4       	ldi	r21, 0x44	; 68
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	f8 01       	movw	r30, r16
    1460:	80 83       	st	Z, r24
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	a2 83       	std	Z+2, r26	; 0x02
    1466:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1468:	fe 01       	movw	r30, r28
    146a:	ed 5f       	subi	r30, 0xFD	; 253
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e8       	ldi	r20, 0x80	; 128
    147c:	5f e3       	ldi	r21, 0x3F	; 63
    147e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1482:	88 23       	and	r24, r24
    1484:	44 f4       	brge	.+16     	; 0x1496 <main+0x938>
		__ticks = 1;
    1486:	fe 01       	movw	r30, r28
    1488:	ef 5f       	subi	r30, 0xFF	; 255
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	64 c0       	rjmp	.+200    	; 0x155e <main+0xa00>
	else if (__tmp > 65535)
    1496:	fe 01       	movw	r30, r28
    1498:	ed 5f       	subi	r30, 0xFD	; 253
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	0c f0       	brlt	.+2      	; 0x14b6 <main+0x958>
    14b4:	43 c0       	rjmp	.+134    	; 0x153c <main+0x9de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b6:	fe 01       	movw	r30, r28
    14b8:	e9 5f       	subi	r30, 0xF9	; 249
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8e 01       	movw	r16, r28
    14d6:	0f 5f       	subi	r16, 0xFF	; 255
    14d8:	1e 4f       	sbci	r17, 0xFE	; 254
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	f8 01       	movw	r30, r16
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    14ec:	1f c0       	rjmp	.+62     	; 0x152c <main+0x9ce>
    14ee:	fe 01       	movw	r30, r28
    14f0:	e1 50       	subi	r30, 0x01	; 1
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
    14fc:	fe 01       	movw	r30, r28
    14fe:	e1 50       	subi	r30, 0x01	; 1
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <main+0x9a8>
    150a:	fe 01       	movw	r30, r28
    150c:	e1 50       	subi	r30, 0x01	; 1
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	de 01       	movw	r26, r28
    1516:	af 5f       	subi	r26, 0xFF	; 255
    1518:	be 4f       	sbci	r27, 0xFE	; 254
    151a:	fe 01       	movw	r30, r28
    151c:	ef 5f       	subi	r30, 0xFF	; 255
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	9c 93       	st	X, r25
    152a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152c:	fe 01       	movw	r30, r28
    152e:	ef 5f       	subi	r30, 0xFF	; 255
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	d1 f6       	brne	.-76     	; 0x14ee <main+0x990>
    153a:	27 c0       	rjmp	.+78     	; 0x158a <main+0xa2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153c:	8e 01       	movw	r16, r28
    153e:	0f 5f       	subi	r16, 0xFF	; 255
    1540:	1e 4f       	sbci	r17, 0xFE	; 254
    1542:	fe 01       	movw	r30, r28
    1544:	ed 5f       	subi	r30, 0xFD	; 253
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	f8 01       	movw	r30, r16
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
    155e:	de 01       	movw	r26, r28
    1560:	a3 50       	subi	r26, 0x03	; 3
    1562:	bf 4f       	sbci	r27, 0xFF	; 255
    1564:	fe 01       	movw	r30, r28
    1566:	ef 5f       	subi	r30, 0xFF	; 255
    1568:	fe 4f       	sbci	r31, 0xFE	; 254
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	8d 93       	st	X+, r24
    1570:	9c 93       	st	X, r25
    1572:	fe 01       	movw	r30, r28
    1574:	e3 50       	subi	r30, 0x03	; 3
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <main+0xa1e>
    1580:	fe 01       	movw	r30, r28
    1582:	e3 50       	subi	r30, 0x03	; 3
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
				key = KEYPAD_getPressedKey() ;
				_delay_ms(500);
			} while(key != 13);

			/* Send 2 Passwords To 2nd MCU */
			for(i = 0 ; i < 5 ; i++)
    158a:	de 01       	movw	r26, r28
    158c:	aa 5b       	subi	r26, 0xBA	; 186
    158e:	be 4f       	sbci	r27, 0xFE	; 254
    1590:	fe 01       	movw	r30, r28
    1592:	ea 5b       	subi	r30, 0xBA	; 186
    1594:	fe 4f       	sbci	r31, 0xFE	; 254
    1596:	80 81       	ld	r24, Z
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	8c 93       	st	X, r24
    159c:	fe 01       	movw	r30, r28
    159e:	ea 5b       	subi	r30, 0xBA	; 186
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	80 81       	ld	r24, Z
    15a4:	85 30       	cpi	r24, 0x05	; 5
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <main+0xa4c>
    15a8:	2e cf       	rjmp	.-420    	; 0x1406 <main+0x8a8>
				UART_sendByte(pass1[i]);

				_delay_ms(20);
			}

			for(i = 0 ; i < 5 ; i++)
    15aa:	fe 01       	movw	r30, r28
    15ac:	ea 5b       	subi	r30, 0xBA	; 186
    15ae:	fe 4f       	sbci	r31, 0xFE	; 254
    15b0:	10 82       	st	Z, r1
    15b2:	cb c0       	rjmp	.+406    	; 0x174a <main+0xbec>
			{
				UART_sendByte(pass2[i]);
    15b4:	fe 01       	movw	r30, r28
    15b6:	ea 5b       	subi	r30, 0xBA	; 186
    15b8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ba:	80 81       	ld	r24, Z
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	ce 01       	movw	r24, r28
    15c2:	83 5b       	subi	r24, 0xB3	; 179
    15c4:	9e 4f       	sbci	r25, 0xFE	; 254
    15c6:	fc 01       	movw	r30, r24
    15c8:	e2 0f       	add	r30, r18
    15ca:	f3 1f       	adc	r31, r19
    15cc:	80 81       	ld	r24, Z
    15ce:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    15d2:	fe 01       	movw	r30, r28
    15d4:	e7 50       	subi	r30, 0x07	; 7
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 ea       	ldi	r26, 0xA0	; 160
    15de:	b1 e4       	ldi	r27, 0x41	; 65
    15e0:	80 83       	st	Z, r24
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	a2 83       	std	Z+2, r26	; 0x02
    15e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	8e 01       	movw	r16, r28
    15ea:	0b 50       	subi	r16, 0x0B	; 11
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	fe 01       	movw	r30, r28
    15f0:	e7 50       	subi	r30, 0x07	; 7
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a ef       	ldi	r20, 0xFA	; 250
    1602:	54 e4       	ldi	r21, 0x44	; 68
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	f8 01       	movw	r30, r16
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	a2 83       	std	Z+2, r26	; 0x02
    1614:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1616:	fe 01       	movw	r30, r28
    1618:	eb 50       	subi	r30, 0x0B	; 11
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	5f e3       	ldi	r21, 0x3F	; 63
    162c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1630:	88 23       	and	r24, r24
    1632:	44 f4       	brge	.+16     	; 0x1644 <main+0xae6>
		__ticks = 1;
    1634:	fe 01       	movw	r30, r28
    1636:	ed 50       	subi	r30, 0x0D	; 13
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	64 c0       	rjmp	.+200    	; 0x170c <main+0xbae>
	else if (__tmp > 65535)
    1644:	fe 01       	movw	r30, r28
    1646:	eb 50       	subi	r30, 0x0B	; 11
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	3f ef       	ldi	r19, 0xFF	; 255
    1656:	4f e7       	ldi	r20, 0x7F	; 127
    1658:	57 e4       	ldi	r21, 0x47	; 71
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165e:	18 16       	cp	r1, r24
    1660:	0c f0       	brlt	.+2      	; 0x1664 <main+0xb06>
    1662:	43 c0       	rjmp	.+134    	; 0x16ea <main+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1664:	fe 01       	movw	r30, r28
    1666:	e7 50       	subi	r30, 0x07	; 7
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8e 01       	movw	r16, r28
    1684:	0d 50       	subi	r16, 0x0D	; 13
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	1f c0       	rjmp	.+62     	; 0x16da <main+0xb7c>
    169c:	fe 01       	movw	r30, r28
    169e:	ef 50       	subi	r30, 0x0F	; 15
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	88 ec       	ldi	r24, 0xC8	; 200
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
    16aa:	fe 01       	movw	r30, r28
    16ac:	ef 50       	subi	r30, 0x0F	; 15
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <main+0xb56>
    16b8:	fe 01       	movw	r30, r28
    16ba:	ef 50       	subi	r30, 0x0F	; 15
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	de 01       	movw	r26, r28
    16c4:	ad 50       	subi	r26, 0x0D	; 13
    16c6:	bf 4f       	sbci	r27, 0xFF	; 255
    16c8:	fe 01       	movw	r30, r28
    16ca:	ed 50       	subi	r30, 0x0D	; 13
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	11 96       	adiw	r26, 0x01	; 1
    16d6:	9c 93       	st	X, r25
    16d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	fe 01       	movw	r30, r28
    16dc:	ed 50       	subi	r30, 0x0D	; 13
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	d1 f6       	brne	.-76     	; 0x169c <main+0xb3e>
    16e8:	27 c0       	rjmp	.+78     	; 0x1738 <main+0xbda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	8e 01       	movw	r16, r28
    16ec:	0d 50       	subi	r16, 0x0D	; 13
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	fe 01       	movw	r30, r28
    16f2:	eb 50       	subi	r30, 0x0B	; 11
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	f8 01       	movw	r30, r16
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
    170c:	de 01       	movw	r26, r28
    170e:	a1 51       	subi	r26, 0x11	; 17
    1710:	bf 4f       	sbci	r27, 0xFF	; 255
    1712:	fe 01       	movw	r30, r28
    1714:	ed 50       	subi	r30, 0x0D	; 13
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	8d 93       	st	X+, r24
    171e:	9c 93       	st	X, r25
    1720:	fe 01       	movw	r30, r28
    1722:	e1 51       	subi	r30, 0x11	; 17
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <main+0xbcc>
    172e:	fe 01       	movw	r30, r28
    1730:	e1 51       	subi	r30, 0x11	; 17
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
				UART_sendByte(pass1[i]);

				_delay_ms(20);
			}

			for(i = 0 ; i < 5 ; i++)
    1738:	de 01       	movw	r26, r28
    173a:	aa 5b       	subi	r26, 0xBA	; 186
    173c:	be 4f       	sbci	r27, 0xFE	; 254
    173e:	fe 01       	movw	r30, r28
    1740:	ea 5b       	subi	r30, 0xBA	; 186
    1742:	fe 4f       	sbci	r31, 0xFE	; 254
    1744:	80 81       	ld	r24, Z
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	8c 93       	st	X, r24
    174a:	fe 01       	movw	r30, r28
    174c:	ea 5b       	subi	r30, 0xBA	; 186
    174e:	fe 4f       	sbci	r31, 0xFE	; 254
    1750:	80 81       	ld	r24, Z
    1752:	85 30       	cpi	r24, 0x05	; 5
    1754:	08 f4       	brcc	.+2      	; 0x1758 <main+0xbfa>
    1756:	2e cf       	rjmp	.-420    	; 0x15b4 <main+0xa56>
				UART_sendByte(pass2[i]);

				_delay_ms(20);
			}

			status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    1758:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    175c:	fe 01       	movw	r30, r28
    175e:	eb 5b       	subi	r30, 0xBB	; 187
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	80 83       	st	Z, r24

			/* if 2 Passwords matched each other move to next phase */
			if(status == OK)
    1764:	fe 01       	movw	r30, r28
    1766:	eb 5b       	subi	r30, 0xBB	; 187
    1768:	fe 4f       	sbci	r31, 0xFE	; 254
    176a:	80 81       	ld	r24, Z
    176c:	80 31       	cpi	r24, 0x10	; 16
    176e:	09 f0       	breq	.+2      	; 0x1772 <main+0xc14>
    1770:	e1 ca       	rjmp	.-2622   	; 0xd34 <main+0x1d6>
			{
				flag = 1;
    1772:	fe 01       	movw	r30, r28
    1774:	ec 5b       	subi	r30, 0xBC	; 188
    1776:	fe 4f       	sbci	r31, 0xFE	; 254
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	80 83       	st	Z, r24
    177c:	db ca       	rjmp	.-2634   	; 0xd34 <main+0x1d6>
			}
		}
		else if(flag == 1) /* Normal Phase Of System */
    177e:	fe 01       	movw	r30, r28
    1780:	ec 5b       	subi	r30, 0xBC	; 188
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	80 81       	ld	r24, Z
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	09 f0       	breq	.+2      	; 0x178c <main+0xc2e>
    178a:	d4 ca       	rjmp	.-2648   	; 0xd34 <main+0x1d6>
		{
			LCD_clearScreen();
    178c:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    1790:	8d e8       	ldi	r24, 0x8D	; 141
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1798:	2b e9       	ldi	r18, 0x9B	; 155
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	0e 94 0e 23 	call	0x461c	; 0x461c <LCD_displayStringRowColumn>

			/* Waiting User to press (+ or -) Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    17a6:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    17aa:	fe 01       	movw	r30, r28
    17ac:	e9 5b       	subi	r30, 0xB9	; 185
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	80 83       	st	Z, r24
    17b2:	fe 01       	movw	r30, r28
    17b4:	e5 51       	subi	r30, 0x15	; 21
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	aa ef       	ldi	r26, 0xFA	; 250
    17be:	b3 e4       	ldi	r27, 0x43	; 67
    17c0:	80 83       	st	Z, r24
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	a2 83       	std	Z+2, r26	; 0x02
    17c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	8e 01       	movw	r16, r28
    17ca:	09 51       	subi	r16, 0x19	; 25
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	fe 01       	movw	r30, r28
    17d0:	e5 51       	subi	r30, 0x15	; 21
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a ef       	ldi	r20, 0xFA	; 250
    17e2:	54 e4       	ldi	r21, 0x44	; 68
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	f8 01       	movw	r30, r16
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f6:	fe 01       	movw	r30, r28
    17f8:	e9 51       	subi	r30, 0x19	; 25
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	44 f4       	brge	.+16     	; 0x1824 <main+0xcc6>
		__ticks = 1;
    1814:	fe 01       	movw	r30, r28
    1816:	eb 51       	subi	r30, 0x1B	; 27
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
    1822:	64 c0       	rjmp	.+200    	; 0x18ec <main+0xd8e>
	else if (__tmp > 65535)
    1824:	fe 01       	movw	r30, r28
    1826:	e9 51       	subi	r30, 0x19	; 25
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	0c f0       	brlt	.+2      	; 0x1844 <main+0xce6>
    1842:	43 c0       	rjmp	.+134    	; 0x18ca <main+0xd6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	fe 01       	movw	r30, r28
    1846:	e5 51       	subi	r30, 0x15	; 21
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	8e 01       	movw	r16, r28
    1864:	0b 51       	subi	r16, 0x1B	; 27
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	f8 01       	movw	r30, r16
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	80 83       	st	Z, r24
    187a:	1f c0       	rjmp	.+62     	; 0x18ba <main+0xd5c>
    187c:	fe 01       	movw	r30, r28
    187e:	ed 51       	subi	r30, 0x1D	; 29
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	fe 01       	movw	r30, r28
    188c:	ed 51       	subi	r30, 0x1D	; 29
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <main+0xd36>
    1898:	fe 01       	movw	r30, r28
    189a:	ed 51       	subi	r30, 0x1D	; 29
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	de 01       	movw	r26, r28
    18a4:	ab 51       	subi	r26, 0x1B	; 27
    18a6:	bf 4f       	sbci	r27, 0xFF	; 255
    18a8:	fe 01       	movw	r30, r28
    18aa:	eb 51       	subi	r30, 0x1B	; 27
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	9c 93       	st	X, r25
    18b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	fe 01       	movw	r30, r28
    18bc:	eb 51       	subi	r30, 0x1B	; 27
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	d1 f6       	brne	.-76     	; 0x187c <main+0xd1e>
    18c8:	28 c0       	rjmp	.+80     	; 0x191a <main+0xdbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	8e 01       	movw	r16, r28
    18cc:	0b 51       	subi	r16, 0x1B	; 27
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	e9 51       	subi	r30, 0x19	; 25
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	f8 01       	movw	r30, r16
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	de 01       	movw	r26, r28
    18ee:	af 51       	subi	r26, 0x1F	; 31
    18f0:	bf 4f       	sbci	r27, 0xFF	; 255
    18f2:	fe 01       	movw	r30, r28
    18f4:	eb 51       	subi	r30, 0x1B	; 27
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	11 96       	adiw	r26, 0x01	; 1
    18fe:	9c 93       	st	X, r25
    1900:	8e 93       	st	-X, r24
    1902:	fe 01       	movw	r30, r28
    1904:	ef 51       	subi	r30, 0x1F	; 31
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <main+0xdae>
    1910:	fe 01       	movw	r30, r28
    1912:	ef 51       	subi	r30, 0x1F	; 31
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
				_delay_ms(500);
			} while((key != '+') && (key != '-'));
    191a:	fe 01       	movw	r30, r28
    191c:	e9 5b       	subi	r30, 0xB9	; 185
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	80 81       	ld	r24, Z
    1922:	8b 32       	cpi	r24, 0x2B	; 43
    1924:	39 f0       	breq	.+14     	; 0x1934 <main+0xdd6>
    1926:	fe 01       	movw	r30, r28
    1928:	e9 5b       	subi	r30, 0xB9	; 185
    192a:	fe 4f       	sbci	r31, 0xFE	; 254
    192c:	80 81       	ld	r24, Z
    192e:	8d 32       	cpi	r24, 0x2D	; 45
    1930:	09 f0       	breq	.+2      	; 0x1934 <main+0xdd6>
    1932:	39 cf       	rjmp	.-398    	; 0x17a6 <main+0xc48>

			if(key == '+') /* User Choose Open The Door */
    1934:	fe 01       	movw	r30, r28
    1936:	e9 5b       	subi	r30, 0xB9	; 185
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	80 81       	ld	r24, Z
    193c:	8b 32       	cpi	r24, 0x2B	; 43
    193e:	09 f0       	breq	.+2      	; 0x1942 <main+0xde4>
    1940:	1a c7       	rjmp	.+3636   	; 0x2776 <main+0x1c18>
			{
				LCD_clearScreen();
    1942:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    1946:	8b ea       	ldi	r24, 0xAB	; 171
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
				LCD_moveCursor(1, 0);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	0e 94 cc 22 	call	0x4598	; 0x4598 <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1956:	fe 01       	movw	r30, r28
    1958:	ea 5b       	subi	r30, 0xBA	; 186
    195a:	fe 4f       	sbci	r31, 0xFE	; 254
    195c:	10 82       	st	Z, r1
    195e:	d6 c0       	rjmp	.+428    	; 0x1b0c <main+0xfae>
				{
					key = KEYPAD_getPressedKey() ;
    1960:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    1964:	fe 01       	movw	r30, r28
    1966:	e9 5b       	subi	r30, 0xB9	; 185
    1968:	fe 4f       	sbci	r31, 0xFE	; 254
    196a:	80 83       	st	Z, r24
					pass1[i] = key ;
    196c:	fe 01       	movw	r30, r28
    196e:	ea 5b       	subi	r30, 0xBA	; 186
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	ce 01       	movw	r24, r28
    197a:	88 5b       	subi	r24, 0xB8	; 184
    197c:	9e 4f       	sbci	r25, 0xFE	; 254
    197e:	dc 01       	movw	r26, r24
    1980:	a2 0f       	add	r26, r18
    1982:	b3 1f       	adc	r27, r19
    1984:	fe 01       	movw	r30, r28
    1986:	e9 5b       	subi	r30, 0xB9	; 185
    1988:	fe 4f       	sbci	r31, 0xFE	; 254
    198a:	80 81       	ld	r24, Z
    198c:	8c 93       	st	X, r24
					LCD_displayCharacter('*');
    198e:	8a e2       	ldi	r24, 0x2A	; 42
    1990:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
    1994:	fe 01       	movw	r30, r28
    1996:	e3 52       	subi	r30, 0x23	; 35
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	aa ef       	ldi	r26, 0xFA	; 250
    19a0:	b3 e4       	ldi	r27, 0x43	; 67
    19a2:	80 83       	st	Z, r24
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	a2 83       	std	Z+2, r26	; 0x02
    19a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	8e 01       	movw	r16, r28
    19ac:	07 52       	subi	r16, 0x27	; 39
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e3 52       	subi	r30, 0x23	; 35
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a ef       	ldi	r20, 0xFA	; 250
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	a2 83       	std	Z+2, r26	; 0x02
    19d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 52       	subi	r30, 0x27	; 39
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	44 f4       	brge	.+16     	; 0x1a06 <main+0xea8>
		__ticks = 1;
    19f6:	fe 01       	movw	r30, r28
    19f8:	e9 52       	subi	r30, 0x29	; 41
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	64 c0       	rjmp	.+200    	; 0x1ace <main+0xf70>
	else if (__tmp > 65535)
    1a06:	fe 01       	movw	r30, r28
    1a08:	e7 52       	subi	r30, 0x27	; 39
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	0c f0       	brlt	.+2      	; 0x1a26 <main+0xec8>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <main+0xf4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	fe 01       	movw	r30, r28
    1a28:	e3 52       	subi	r30, 0x23	; 35
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8e 01       	movw	r16, r28
    1a46:	09 52       	subi	r16, 0x29	; 41
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
    1a5c:	1f c0       	rjmp	.+62     	; 0x1a9c <main+0xf3e>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	eb 52       	subi	r30, 0x2B	; 43
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	eb 52       	subi	r30, 0x2B	; 43
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <main+0xf18>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	eb 52       	subi	r30, 0x2B	; 43
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	de 01       	movw	r26, r28
    1a86:	a9 52       	subi	r26, 0x29	; 41
    1a88:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e9 52       	subi	r30, 0x29	; 41
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	91 81       	ldd	r25, Z+1	; 0x01
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	11 96       	adiw	r26, 0x01	; 1
    1a98:	9c 93       	st	X, r25
    1a9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e9 52       	subi	r30, 0x29	; 41
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	d1 f6       	brne	.-76     	; 0x1a5e <main+0xf00>
    1aaa:	27 c0       	rjmp	.+78     	; 0x1afa <main+0xf9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	8e 01       	movw	r16, r28
    1aae:	09 52       	subi	r16, 0x29	; 41
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e7 52       	subi	r30, 0x27	; 39
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	60 81       	ld	r22, Z
    1aba:	71 81       	ldd	r23, Z+1	; 0x01
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	f8 01       	movw	r30, r16
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
    1ace:	de 01       	movw	r26, r28
    1ad0:	ad 52       	subi	r26, 0x2D	; 45
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e9 52       	subi	r30, 0x29	; 41
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	8d 93       	st	X+, r24
    1ae0:	9c 93       	st	X, r25
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ed 52       	subi	r30, 0x2D	; 45
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <main+0xf8e>
    1af0:	fe 01       	movw	r30, r28
    1af2:	ed 52       	subi	r30, 0x2D	; 45
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1afa:	de 01       	movw	r26, r28
    1afc:	aa 5b       	subi	r26, 0xBA	; 186
    1afe:	be 4f       	sbci	r27, 0xFE	; 254
    1b00:	fe 01       	movw	r30, r28
    1b02:	ea 5b       	subi	r30, 0xBA	; 186
    1b04:	fe 4f       	sbci	r31, 0xFE	; 254
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	8c 93       	st	X, r24
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ea 5b       	subi	r30, 0xBA	; 186
    1b10:	fe 4f       	sbci	r31, 0xFE	; 254
    1b12:	80 81       	ld	r24, Z
    1b14:	85 30       	cpi	r24, 0x05	; 5
    1b16:	08 f4       	brcc	.+2      	; 0x1b1a <main+0xfbc>
    1b18:	23 cf       	rjmp	.-442    	; 0x1960 <main+0xe02>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    1b1a:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 5b       	subi	r30, 0xB9	; 185
    1b22:	fe 4f       	sbci	r31, 0xFE	; 254
    1b24:	80 83       	st	Z, r24
    1b26:	fe 01       	movw	r30, r28
    1b28:	e1 53       	subi	r30, 0x31	; 49
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	aa ef       	ldi	r26, 0xFA	; 250
    1b32:	b3 e4       	ldi	r27, 0x43	; 67
    1b34:	80 83       	st	Z, r24
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	a2 83       	std	Z+2, r26	; 0x02
    1b3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	8e 01       	movw	r16, r28
    1b3e:	05 53       	subi	r16, 0x35	; 53
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	fe 01       	movw	r30, r28
    1b44:	e1 53       	subi	r30, 0x31	; 49
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a ef       	ldi	r20, 0xFA	; 250
    1b56:	54 e4       	ldi	r21, 0x44	; 68
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	f8 01       	movw	r30, r16
    1b62:	80 83       	st	Z, r24
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	a2 83       	std	Z+2, r26	; 0x02
    1b68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e5 53       	subi	r30, 0x35	; 53
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	44 f4       	brge	.+16     	; 0x1b98 <main+0x103a>
		__ticks = 1;
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e7 53       	subi	r30, 0x37	; 55
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
    1b96:	64 c0       	rjmp	.+200    	; 0x1c60 <main+0x1102>
	else if (__tmp > 65535)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e5 53       	subi	r30, 0x35	; 53
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	0c f0       	brlt	.+2      	; 0x1bb8 <main+0x105a>
    1bb6:	43 c0       	rjmp	.+134    	; 0x1c3e <main+0x10e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e1 53       	subi	r30, 0x31	; 49
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	07 53       	subi	r16, 0x37	; 55
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	1f c0       	rjmp	.+62     	; 0x1c2e <main+0x10d0>
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e9 53       	subi	r30, 0x39	; 57
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	88 ec       	ldi	r24, 0xC8	; 200
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e9 53       	subi	r30, 0x39	; 57
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <main+0x10aa>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e9 53       	subi	r30, 0x39	; 57
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	de 01       	movw	r26, r28
    1c18:	a7 53       	subi	r26, 0x37	; 55
    1c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e7 53       	subi	r30, 0x37	; 55
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	11 96       	adiw	r26, 0x01	; 1
    1c2a:	9c 93       	st	X, r25
    1c2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e7 53       	subi	r30, 0x37	; 55
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	d1 f6       	brne	.-76     	; 0x1bf0 <main+0x1092>
    1c3c:	28 c0       	rjmp	.+80     	; 0x1c8e <main+0x1130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	8e 01       	movw	r16, r28
    1c40:	07 53       	subi	r16, 0x37	; 55
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	e5 53       	subi	r30, 0x35	; 53
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	80 83       	st	Z, r24
    1c60:	de 01       	movw	r26, r28
    1c62:	ab 53       	subi	r26, 0x3B	; 59
    1c64:	bf 4f       	sbci	r27, 0xFF	; 255
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 53       	subi	r30, 0x37	; 55
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	fe 01       	movw	r30, r28
    1c78:	eb 53       	subi	r30, 0x3B	; 59
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <main+0x1122>
    1c84:	fe 01       	movw	r30, r28
    1c86:	eb 53       	subi	r30, 0x3B	; 59
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e9 5b       	subi	r30, 0xB9	; 185
    1c92:	fe 4f       	sbci	r31, 0xFE	; 254
    1c94:	80 81       	ld	r24, Z
    1c96:	8d 30       	cpi	r24, 0x0D	; 13
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <main+0x113e>
    1c9a:	3f cf       	rjmp	.-386    	; 0x1b1a <main+0xfbc>

				UART_sendByte(CHECK); /* */
    1c9c:	81 e1       	ldi	r24, 0x11	; 17
    1c9e:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ef 53       	subi	r30, 0x3F	; 63
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 ea       	ldi	r26, 0xA0	; 160
    1cae:	b1 e4       	ldi	r27, 0x41	; 65
    1cb0:	80 83       	st	Z, r24
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	a2 83       	std	Z+2, r26	; 0x02
    1cb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	8e 01       	movw	r16, r28
    1cba:	03 54       	subi	r16, 0x43	; 67
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ef 53       	subi	r30, 0x3F	; 63
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a ef       	ldi	r20, 0xFA	; 250
    1cd2:	54 e4       	ldi	r21, 0x44	; 68
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	f8 01       	movw	r30, r16
    1cde:	80 83       	st	Z, r24
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	a2 83       	std	Z+2, r26	; 0x02
    1ce4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e3 54       	subi	r30, 0x43	; 67
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	44 f4       	brge	.+16     	; 0x1d14 <main+0x11b6>
		__ticks = 1;
    1d04:	fe 01       	movw	r30, r28
    1d06:	e5 54       	subi	r30, 0x45	; 69
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
    1d12:	64 c0       	rjmp	.+200    	; 0x1ddc <main+0x127e>
	else if (__tmp > 65535)
    1d14:	fe 01       	movw	r30, r28
    1d16:	e3 54       	subi	r30, 0x43	; 67
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	0c f0       	brlt	.+2      	; 0x1d34 <main+0x11d6>
    1d32:	43 c0       	rjmp	.+134    	; 0x1dba <main+0x125c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	fe 01       	movw	r30, r28
    1d36:	ef 53       	subi	r30, 0x3F	; 63
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8e 01       	movw	r16, r28
    1d54:	05 54       	subi	r16, 0x45	; 69
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	f8 01       	movw	r30, r16
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	1f c0       	rjmp	.+62     	; 0x1daa <main+0x124c>
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e7 54       	subi	r30, 0x47	; 71
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e7 54       	subi	r30, 0x47	; 71
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <main+0x1226>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e7 54       	subi	r30, 0x47	; 71
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d92:	de 01       	movw	r26, r28
    1d94:	a5 54       	subi	r26, 0x45	; 69
    1d96:	bf 4f       	sbci	r27, 0xFF	; 255
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e5 54       	subi	r30, 0x45	; 69
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	9c 93       	st	X, r25
    1da8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	fe 01       	movw	r30, r28
    1dac:	e5 54       	subi	r30, 0x45	; 69
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	d1 f6       	brne	.-76     	; 0x1d6c <main+0x120e>
    1db8:	28 c0       	rjmp	.+80     	; 0x1e0a <main+0x12ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	8e 01       	movw	r16, r28
    1dbc:	05 54       	subi	r16, 0x45	; 69
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e3 54       	subi	r30, 0x43	; 67
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	de 01       	movw	r26, r28
    1dde:	a9 54       	subi	r26, 0x49	; 73
    1de0:	bf 4f       	sbci	r27, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	e5 54       	subi	r30, 0x45	; 69
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
    1df2:	fe 01       	movw	r30, r28
    1df4:	e9 54       	subi	r30, 0x49	; 73
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <main+0x129e>
    1e00:	fe 01       	movw	r30, r28
    1e02:	e9 54       	subi	r30, 0x49	; 73
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24

				_delay_ms(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ea 5b       	subi	r30, 0xBA	; 186
    1e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e10:	10 82       	st	Z, r1
    1e12:	cb c0       	rjmp	.+406    	; 0x1faa <main+0x144c>
				{
					UART_sendByte(pass1[i]);
    1e14:	fe 01       	movw	r30, r28
    1e16:	ea 5b       	subi	r30, 0xBA	; 186
    1e18:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1a:	80 81       	ld	r24, Z
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	ce 01       	movw	r24, r28
    1e22:	88 5b       	subi	r24, 0xB8	; 184
    1e24:	9e 4f       	sbci	r25, 0xFE	; 254
    1e26:	fc 01       	movw	r30, r24
    1e28:	e2 0f       	add	r30, r18
    1e2a:	f3 1f       	adc	r31, r19
    1e2c:	80 81       	ld	r24, Z
    1e2e:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    1e32:	fe 01       	movw	r30, r28
    1e34:	ed 54       	subi	r30, 0x4D	; 77
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e3e:	b1 e4       	ldi	r27, 0x41	; 65
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	8e 01       	movw	r16, r28
    1e4a:	01 55       	subi	r16, 0x51	; 81
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	fe 01       	movw	r30, r28
    1e50:	ed 54       	subi	r30, 0x4D	; 77
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	82 81       	ldd	r24, Z+2	; 0x02
    1e5a:	93 81       	ldd	r25, Z+3	; 0x03
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a ef       	ldi	r20, 0xFA	; 250
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e76:	fe 01       	movw	r30, r28
    1e78:	e1 55       	subi	r30, 0x51	; 81
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	44 f4       	brge	.+16     	; 0x1ea4 <main+0x1346>
		__ticks = 1;
    1e94:	fe 01       	movw	r30, r28
    1e96:	e3 55       	subi	r30, 0x53	; 83
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	64 c0       	rjmp	.+200    	; 0x1f6c <main+0x140e>
	else if (__tmp > 65535)
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e1 55       	subi	r30, 0x51	; 81
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	0c f0       	brlt	.+2      	; 0x1ec4 <main+0x1366>
    1ec2:	43 c0       	rjmp	.+134    	; 0x1f4a <main+0x13ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	ed 54       	subi	r30, 0x4D	; 77
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	60 81       	ld	r22, Z
    1ecc:	71 81       	ldd	r23, Z+1	; 0x01
    1ece:	82 81       	ldd	r24, Z+2	; 0x02
    1ed0:	93 81       	ldd	r25, Z+3	; 0x03
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	03 55       	subi	r16, 0x53	; 83
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    1efa:	1f c0       	rjmp	.+62     	; 0x1f3a <main+0x13dc>
    1efc:	fe 01       	movw	r30, r28
    1efe:	e5 55       	subi	r30, 0x55	; 85
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e5 55       	subi	r30, 0x55	; 85
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <main+0x13b6>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e5 55       	subi	r30, 0x55	; 85
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	de 01       	movw	r26, r28
    1f24:	a3 55       	subi	r26, 0x53	; 83
    1f26:	bf 4f       	sbci	r27, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e3 55       	subi	r30, 0x53	; 83
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	9c 93       	st	X, r25
    1f38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e3 55       	subi	r30, 0x53	; 83
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	d1 f6       	brne	.-76     	; 0x1efc <main+0x139e>
    1f48:	27 c0       	rjmp	.+78     	; 0x1f98 <main+0x143a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	8e 01       	movw	r16, r28
    1f4c:	03 55       	subi	r16, 0x53	; 83
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	fe 01       	movw	r30, r28
    1f52:	e1 55       	subi	r30, 0x51	; 81
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	f8 01       	movw	r30, r16
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
    1f6c:	de 01       	movw	r26, r28
    1f6e:	a7 55       	subi	r26, 0x57	; 87
    1f70:	bf 4f       	sbci	r27, 0xFF	; 255
    1f72:	fe 01       	movw	r30, r28
    1f74:	e3 55       	subi	r30, 0x53	; 83
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	8d 93       	st	X+, r24
    1f7e:	9c 93       	st	X, r25
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 55       	subi	r30, 0x57	; 87
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	91 81       	ldd	r25, Z+1	; 0x01
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <main+0x142c>
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e7 55       	subi	r30, 0x57	; 87
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
				UART_sendByte(CHECK); /* */

				_delay_ms(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    1f98:	de 01       	movw	r26, r28
    1f9a:	aa 5b       	subi	r26, 0xBA	; 186
    1f9c:	be 4f       	sbci	r27, 0xFE	; 254
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ea 5b       	subi	r30, 0xBA	; 186
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	8c 93       	st	X, r24
    1faa:	fe 01       	movw	r30, r28
    1fac:	ea 5b       	subi	r30, 0xBA	; 186
    1fae:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb0:	80 81       	ld	r24, Z
    1fb2:	85 30       	cpi	r24, 0x05	; 5
    1fb4:	08 f4       	brcc	.+2      	; 0x1fb8 <main+0x145a>
    1fb6:	2e cf       	rjmp	.-420    	; 0x1e14 <main+0x12b6>
					UART_sendByte(pass1[i]);

					_delay_ms(20);
				}

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    1fb8:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	eb 5b       	subi	r30, 0xBB	; 187
    1fc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc2:	80 83       	st	Z, r24

				while(1)
				{
					if (status == OK) /* Right Password */
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	eb 5b       	subi	r30, 0xBB	; 187
    1fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 31       	cpi	r24, 0x10	; 16
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <main+0x1474>
    1fd0:	4a c0       	rjmp	.+148    	; 0x2066 <main+0x1508>
					{
						/* Door Unlocking */
						UART_sendByte(UNLOCK);
    1fd2:	82 e1       	ldi	r24, 0x12	; 18
    1fd4:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
						LCD_clearScreen();
    1fd8:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    1fdc:	2b eb       	ldi	r18, 0xBB	; 187
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	a9 01       	movw	r20, r18
    1fe6:	0e 94 0e 23 	call	0x461c	; 0x461c <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    1fea:	ce 01       	movw	r24, r28
    1fec:	87 5a       	subi	r24, 0xA7	; 167
    1fee:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff0:	0e 94 54 23 	call	0x46a8	; 0x46a8 <Timer1_init>
						while(g_count != 15); /* Waiting For 15 Seconds */
    1ff4:	80 91 08 01 	lds	r24, 0x0108
    1ff8:	8f 30       	cpi	r24, 0x0F	; 15
    1ffa:	e1 f7       	brne	.-8      	; 0x1ff4 <main+0x1496>
						Timer1_deInit();
    1ffc:	0e 94 b4 23 	call	0x4768	; 0x4768 <Timer1_deInit>
						g_count = 0 ;
    2000:	10 92 08 01 	sts	0x0108, r1

						/* Door Holding */
						LCD_clearScreen();
    2004:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Holding");
    2008:	2a ec       	ldi	r18, 0xCA	; 202
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	a9 01       	movw	r20, r18
    2012:	0e 94 0e 23 	call	0x461c	; 0x461c <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    2016:	ce 01       	movw	r24, r28
    2018:	87 5a       	subi	r24, 0xA7	; 167
    201a:	9e 4f       	sbci	r25, 0xFE	; 254
    201c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <Timer1_init>
						while(g_count != 3); /* Waiting For 3 Seconds */
    2020:	80 91 08 01 	lds	r24, 0x0108
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	e1 f7       	brne	.-8      	; 0x2020 <main+0x14c2>
						Timer1_deInit();
    2028:	0e 94 b4 23 	call	0x4768	; 0x4768 <Timer1_deInit>
						g_count = 0 ;
    202c:	10 92 08 01 	sts	0x0108, r1

						/* Door locking */
						UART_sendByte(LOCK);
    2030:	83 e1       	ldi	r24, 0x13	; 19
    2032:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
						LCD_clearScreen();
    2036:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Locking");
    203a:	27 ed       	ldi	r18, 0xD7	; 215
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	a9 01       	movw	r20, r18
    2044:	0e 94 0e 23 	call	0x461c	; 0x461c <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    2048:	ce 01       	movw	r24, r28
    204a:	87 5a       	subi	r24, 0xA7	; 167
    204c:	9e 4f       	sbci	r25, 0xFE	; 254
    204e:	0e 94 54 23 	call	0x46a8	; 0x46a8 <Timer1_init>
						while(g_count != 15); /* Waiting For 15 Seconds */
    2052:	80 91 08 01 	lds	r24, 0x0108
    2056:	8f 30       	cpi	r24, 0x0F	; 15
    2058:	e1 f7       	brne	.-8      	; 0x2052 <main+0x14f4>
						Timer1_deInit();
    205a:	0e 94 b4 23 	call	0x4768	; 0x4768 <Timer1_deInit>
						g_count = 0 ;
    205e:	10 92 08 01 	sts	0x0108, r1
    2062:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <main+0x1d6>

						break;
					}
					else if(status == ERROR) /* Wrong Password */
    2066:	fe 01       	movw	r30, r28
    2068:	eb 5b       	subi	r30, 0xBB	; 187
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	80 81       	ld	r24, Z
    206e:	88 23       	and	r24, r24
    2070:	09 f0       	breq	.+2      	; 0x2074 <main+0x1516>
    2072:	a8 cf       	rjmp	.-176    	; 0x1fc4 <main+0x1466>
					{
						count = 0 ;
    2074:	fe 01       	movw	r30, r28
    2076:	ed 5b       	subi	r30, 0xBD	; 189
    2078:	fe 4f       	sbci	r31, 0xFE	; 254
    207a:	10 82       	st	Z, r1

						do
						{
							count++;
    207c:	de 01       	movw	r26, r28
    207e:	ad 5b       	subi	r26, 0xBD	; 189
    2080:	be 4f       	sbci	r27, 0xFE	; 254
    2082:	fe 01       	movw	r30, r28
    2084:	ed 5b       	subi	r30, 0xBD	; 189
    2086:	fe 4f       	sbci	r31, 0xFE	; 254
    2088:	80 81       	ld	r24, Z
    208a:	8f 5f       	subi	r24, 0xFF	; 255
    208c:	8c 93       	st	X, r24

							LCD_clearScreen();
    208e:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
							LCD_displayString("PLZ Enter Pass:");
    2092:	80 e6       	ldi	r24, 0x60	; 96
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
							LCD_moveCursor(1, 0);
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	0e 94 cc 22 	call	0x4598	; 0x4598 <LCD_moveCursor>

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    20a2:	fe 01       	movw	r30, r28
    20a4:	ea 5b       	subi	r30, 0xBA	; 186
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	10 82       	st	Z, r1
    20aa:	d6 c0       	rjmp	.+428    	; 0x2258 <main+0x16fa>
							{
								key = KEYPAD_getPressedKey() ;
    20ac:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    20b0:	fe 01       	movw	r30, r28
    20b2:	e9 5b       	subi	r30, 0xB9	; 185
    20b4:	fe 4f       	sbci	r31, 0xFE	; 254
    20b6:	80 83       	st	Z, r24
								pass1[i] = key ;
    20b8:	fe 01       	movw	r30, r28
    20ba:	ea 5b       	subi	r30, 0xBA	; 186
    20bc:	fe 4f       	sbci	r31, 0xFE	; 254
    20be:	80 81       	ld	r24, Z
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	ce 01       	movw	r24, r28
    20c6:	88 5b       	subi	r24, 0xB8	; 184
    20c8:	9e 4f       	sbci	r25, 0xFE	; 254
    20ca:	dc 01       	movw	r26, r24
    20cc:	a2 0f       	add	r26, r18
    20ce:	b3 1f       	adc	r27, r19
    20d0:	fe 01       	movw	r30, r28
    20d2:	e9 5b       	subi	r30, 0xB9	; 185
    20d4:	fe 4f       	sbci	r31, 0xFE	; 254
    20d6:	80 81       	ld	r24, Z
    20d8:	8c 93       	st	X, r24
								LCD_displayCharacter('*');
    20da:	8a e2       	ldi	r24, 0x2A	; 42
    20dc:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
    20e0:	fe 01       	movw	r30, r28
    20e2:	eb 55       	subi	r30, 0x5B	; 91
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	aa ef       	ldi	r26, 0xFA	; 250
    20ec:	b3 e4       	ldi	r27, 0x43	; 67
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	8e 01       	movw	r16, r28
    20f8:	0f 55       	subi	r16, 0x5F	; 95
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	eb 55       	subi	r30, 0x5B	; 91
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a ef       	ldi	r20, 0xFA	; 250
    2110:	54 e4       	ldi	r21, 0x44	; 68
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	f8 01       	movw	r30, r16
    211c:	80 83       	st	Z, r24
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	a2 83       	std	Z+2, r26	; 0x02
    2122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2124:	fe 01       	movw	r30, r28
    2126:	ef 55       	subi	r30, 0x5F	; 95
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	44 f4       	brge	.+16     	; 0x2152 <main+0x15f4>
		__ticks = 1;
    2142:	fe 01       	movw	r30, r28
    2144:	e1 56       	subi	r30, 0x61	; 97
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	64 c0       	rjmp	.+200    	; 0x221a <main+0x16bc>
	else if (__tmp > 65535)
    2152:	fe 01       	movw	r30, r28
    2154:	ef 55       	subi	r30, 0x5F	; 95
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	0c f0       	brlt	.+2      	; 0x2172 <main+0x1614>
    2170:	43 c0       	rjmp	.+134    	; 0x21f8 <main+0x169a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	fe 01       	movw	r30, r28
    2174:	eb 55       	subi	r30, 0x5B	; 91
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8e 01       	movw	r16, r28
    2192:	01 56       	subi	r16, 0x61	; 97
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	f8 01       	movw	r30, r16
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	1f c0       	rjmp	.+62     	; 0x21e8 <main+0x168a>
    21aa:	fe 01       	movw	r30, r28
    21ac:	e3 56       	subi	r30, 0x63	; 99
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	88 ec       	ldi	r24, 0xC8	; 200
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	80 83       	st	Z, r24
    21b8:	fe 01       	movw	r30, r28
    21ba:	e3 56       	subi	r30, 0x63	; 99
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <main+0x1664>
    21c6:	fe 01       	movw	r30, r28
    21c8:	e3 56       	subi	r30, 0x63	; 99
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	de 01       	movw	r26, r28
    21d2:	a1 56       	subi	r26, 0x61	; 97
    21d4:	bf 4f       	sbci	r27, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	e1 56       	subi	r30, 0x61	; 97
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 93       	st	X, r25
    21e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	fe 01       	movw	r30, r28
    21ea:	e1 56       	subi	r30, 0x61	; 97
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	d1 f6       	brne	.-76     	; 0x21aa <main+0x164c>
    21f6:	27 c0       	rjmp	.+78     	; 0x2246 <main+0x16e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	8e 01       	movw	r16, r28
    21fa:	01 56       	subi	r16, 0x61	; 97
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	fe 01       	movw	r30, r28
    2200:	ef 55       	subi	r30, 0x5F	; 95
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	f8 01       	movw	r30, r16
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	de 01       	movw	r26, r28
    221c:	a5 56       	subi	r26, 0x65	; 101
    221e:	bf 4f       	sbci	r27, 0xFF	; 255
    2220:	fe 01       	movw	r30, r28
    2222:	e1 56       	subi	r30, 0x61	; 97
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	8d 93       	st	X+, r24
    222c:	9c 93       	st	X, r25
    222e:	fe 01       	movw	r30, r28
    2230:	e5 56       	subi	r30, 0x65	; 101
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <main+0x16da>
    223c:	fe 01       	movw	r30, r28
    223e:	e5 56       	subi	r30, 0x65	; 101
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
							LCD_clearScreen();
							LCD_displayString("PLZ Enter Pass:");
							LCD_moveCursor(1, 0);

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    2246:	de 01       	movw	r26, r28
    2248:	aa 5b       	subi	r26, 0xBA	; 186
    224a:	be 4f       	sbci	r27, 0xFE	; 254
    224c:	fe 01       	movw	r30, r28
    224e:	ea 5b       	subi	r30, 0xBA	; 186
    2250:	fe 4f       	sbci	r31, 0xFE	; 254
    2252:	80 81       	ld	r24, Z
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	8c 93       	st	X, r24
    2258:	fe 01       	movw	r30, r28
    225a:	ea 5b       	subi	r30, 0xBA	; 186
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	80 81       	ld	r24, Z
    2260:	85 30       	cpi	r24, 0x05	; 5
    2262:	08 f4       	brcc	.+2      	; 0x2266 <main+0x1708>
    2264:	23 cf       	rjmp	.-442    	; 0x20ac <main+0x154e>
							}

							/* Waiting User to press The Enter Button */
							do
							{
								key = KEYPAD_getPressedKey() ;
    2266:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    226a:	fe 01       	movw	r30, r28
    226c:	e9 5b       	subi	r30, 0xB9	; 185
    226e:	fe 4f       	sbci	r31, 0xFE	; 254
    2270:	80 83       	st	Z, r24
    2272:	fe 01       	movw	r30, r28
    2274:	e9 56       	subi	r30, 0x69	; 105
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	aa ef       	ldi	r26, 0xFA	; 250
    227e:	b3 e4       	ldi	r27, 0x43	; 67
    2280:	80 83       	st	Z, r24
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	a2 83       	std	Z+2, r26	; 0x02
    2286:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2288:	8e 01       	movw	r16, r28
    228a:	0d 56       	subi	r16, 0x6D	; 109
    228c:	1f 4f       	sbci	r17, 0xFF	; 255
    228e:	fe 01       	movw	r30, r28
    2290:	e9 56       	subi	r30, 0x69	; 105
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	60 81       	ld	r22, Z
    2296:	71 81       	ldd	r23, Z+1	; 0x01
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	4a ef       	ldi	r20, 0xFA	; 250
    22a2:	54 e4       	ldi	r21, 0x44	; 68
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	f8 01       	movw	r30, r16
    22ae:	80 83       	st	Z, r24
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	a2 83       	std	Z+2, r26	; 0x02
    22b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b6:	fe 01       	movw	r30, r28
    22b8:	ed 56       	subi	r30, 0x6D	; 109
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	60 81       	ld	r22, Z
    22be:	71 81       	ldd	r23, Z+1	; 0x01
    22c0:	82 81       	ldd	r24, Z+2	; 0x02
    22c2:	93 81       	ldd	r25, Z+3	; 0x03
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	44 f4       	brge	.+16     	; 0x22e4 <main+0x1786>
		__ticks = 1;
    22d4:	fe 01       	movw	r30, r28
    22d6:	ef 56       	subi	r30, 0x6F	; 111
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	64 c0       	rjmp	.+200    	; 0x23ac <main+0x184e>
	else if (__tmp > 65535)
    22e4:	fe 01       	movw	r30, r28
    22e6:	ed 56       	subi	r30, 0x6D	; 109
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	60 81       	ld	r22, Z
    22ec:	71 81       	ldd	r23, Z+1	; 0x01
    22ee:	82 81       	ldd	r24, Z+2	; 0x02
    22f0:	93 81       	ldd	r25, Z+3	; 0x03
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	0c f0       	brlt	.+2      	; 0x2304 <main+0x17a6>
    2302:	43 c0       	rjmp	.+134    	; 0x238a <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2304:	fe 01       	movw	r30, r28
    2306:	e9 56       	subi	r30, 0x69	; 105
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e2       	ldi	r20, 0x20	; 32
    2318:	51 e4       	ldi	r21, 0x41	; 65
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8e 01       	movw	r16, r28
    2324:	0f 56       	subi	r16, 0x6F	; 111
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	f8 01       	movw	r30, r16
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	1f c0       	rjmp	.+62     	; 0x237a <main+0x181c>
    233c:	fe 01       	movw	r30, r28
    233e:	e1 57       	subi	r30, 0x71	; 113
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
    234a:	fe 01       	movw	r30, r28
    234c:	e1 57       	subi	r30, 0x71	; 113
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <main+0x17f6>
    2358:	fe 01       	movw	r30, r28
    235a:	e1 57       	subi	r30, 0x71	; 113
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	de 01       	movw	r26, r28
    2364:	af 56       	subi	r26, 0x6F	; 111
    2366:	bf 4f       	sbci	r27, 0xFF	; 255
    2368:	fe 01       	movw	r30, r28
    236a:	ef 56       	subi	r30, 0x6F	; 111
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	11 96       	adiw	r26, 0x01	; 1
    2376:	9c 93       	st	X, r25
    2378:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	fe 01       	movw	r30, r28
    237c:	ef 56       	subi	r30, 0x6F	; 111
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	d1 f6       	brne	.-76     	; 0x233c <main+0x17de>
    2388:	28 c0       	rjmp	.+80     	; 0x23da <main+0x187c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	8e 01       	movw	r16, r28
    238c:	0f 56       	subi	r16, 0x6F	; 111
    238e:	1f 4f       	sbci	r17, 0xFF	; 255
    2390:	fe 01       	movw	r30, r28
    2392:	ed 56       	subi	r30, 0x6D	; 109
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	f8 01       	movw	r30, r16
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
    23ac:	de 01       	movw	r26, r28
    23ae:	a3 57       	subi	r26, 0x73	; 115
    23b0:	bf 4f       	sbci	r27, 0xFF	; 255
    23b2:	fe 01       	movw	r30, r28
    23b4:	ef 56       	subi	r30, 0x6F	; 111
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	11 96       	adiw	r26, 0x01	; 1
    23be:	9c 93       	st	X, r25
    23c0:	8e 93       	st	-X, r24
    23c2:	fe 01       	movw	r30, r28
    23c4:	e3 57       	subi	r30, 0x73	; 115
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <main+0x186e>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e3 57       	subi	r30, 0x73	; 115
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
								_delay_ms(500);
							} while(key != 13);
    23da:	fe 01       	movw	r30, r28
    23dc:	e9 5b       	subi	r30, 0xB9	; 185
    23de:	fe 4f       	sbci	r31, 0xFE	; 254
    23e0:	80 81       	ld	r24, Z
    23e2:	8d 30       	cpi	r24, 0x0D	; 13
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <main+0x188a>
    23e6:	3f cf       	rjmp	.-386    	; 0x2266 <main+0x1708>

							UART_sendByte(CHECK); /* */
    23e8:	81 e1       	ldi	r24, 0x11	; 17
    23ea:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e7 57       	subi	r30, 0x77	; 119
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 ea       	ldi	r26, 0xA0	; 160
    23fa:	b1 e4       	ldi	r27, 0x41	; 65
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	a2 83       	std	Z+2, r26	; 0x02
    2402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	8e 01       	movw	r16, r28
    2406:	0b 57       	subi	r16, 0x7B	; 123
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e7 57       	subi	r30, 0x77	; 119
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2432:	fe 01       	movw	r30, r28
    2434:	eb 57       	subi	r30, 0x7B	; 123
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	44 f4       	brge	.+16     	; 0x2460 <main+0x1902>
		__ticks = 1;
    2450:	fe 01       	movw	r30, r28
    2452:	ed 57       	subi	r30, 0x7D	; 125
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	64 c0       	rjmp	.+200    	; 0x2528 <main+0x19ca>
	else if (__tmp > 65535)
    2460:	fe 01       	movw	r30, r28
    2462:	eb 57       	subi	r30, 0x7B	; 123
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	0c f0       	brlt	.+2      	; 0x2480 <main+0x1922>
    247e:	43 c0       	rjmp	.+134    	; 0x2506 <main+0x19a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	fe 01       	movw	r30, r28
    2482:	e7 57       	subi	r30, 0x77	; 119
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8e 01       	movw	r16, r28
    24a0:	0d 57       	subi	r16, 0x7D	; 125
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	1f c0       	rjmp	.+62     	; 0x24f6 <main+0x1998>
    24b8:	fe 01       	movw	r30, r28
    24ba:	ef 57       	subi	r30, 0x7F	; 127
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	88 ec       	ldi	r24, 0xC8	; 200
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	ef 57       	subi	r30, 0x7F	; 127
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <main+0x1972>
    24d4:	fe 01       	movw	r30, r28
    24d6:	ef 57       	subi	r30, 0x7F	; 127
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	de 01       	movw	r26, r28
    24e0:	ad 57       	subi	r26, 0x7D	; 125
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	ed 57       	subi	r30, 0x7D	; 125
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	9c 93       	st	X, r25
    24f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 57       	subi	r30, 0x7D	; 125
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	d1 f6       	brne	.-76     	; 0x24b8 <main+0x195a>
    2504:	28 c0       	rjmp	.+80     	; 0x2556 <main+0x19f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	8e 01       	movw	r16, r28
    2508:	0d 57       	subi	r16, 0x7D	; 125
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	eb 57       	subi	r30, 0x7B	; 123
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	f8 01       	movw	r30, r16
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	de 01       	movw	r26, r28
    252a:	a1 58       	subi	r26, 0x81	; 129
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	ed 57       	subi	r30, 0x7D	; 125
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	11 96       	adiw	r26, 0x01	; 1
    253a:	9c 93       	st	X, r25
    253c:	8e 93       	st	-X, r24
    253e:	fe 01       	movw	r30, r28
    2540:	e1 58       	subi	r30, 0x81	; 129
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <main+0x19ea>
    254c:	fe 01       	movw	r30, r28
    254e:	e1 58       	subi	r30, 0x81	; 129
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24

							_delay_ms(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    2556:	fe 01       	movw	r30, r28
    2558:	ea 5b       	subi	r30, 0xBA	; 186
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	10 82       	st	Z, r1
    255e:	cb c0       	rjmp	.+406    	; 0x26f6 <main+0x1b98>
							{
								UART_sendByte(pass1[i]);
    2560:	fe 01       	movw	r30, r28
    2562:	ea 5b       	subi	r30, 0xBA	; 186
    2564:	fe 4f       	sbci	r31, 0xFE	; 254
    2566:	80 81       	ld	r24, Z
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	ce 01       	movw	r24, r28
    256e:	88 5b       	subi	r24, 0xB8	; 184
    2570:	9e 4f       	sbci	r25, 0xFE	; 254
    2572:	fc 01       	movw	r30, r24
    2574:	e2 0f       	add	r30, r18
    2576:	f3 1f       	adc	r31, r19
    2578:	80 81       	ld	r24, Z
    257a:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    257e:	fe 01       	movw	r30, r28
    2580:	e5 58       	subi	r30, 0x85	; 133
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 ea       	ldi	r26, 0xA0	; 160
    258a:	b1 e4       	ldi	r27, 0x41	; 65
    258c:	80 83       	st	Z, r24
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	a2 83       	std	Z+2, r26	; 0x02
    2592:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	8e 01       	movw	r16, r28
    2596:	09 58       	subi	r16, 0x89	; 137
    2598:	1f 4f       	sbci	r17, 0xFF	; 255
    259a:	fe 01       	movw	r30, r28
    259c:	e5 58       	subi	r30, 0x85	; 133
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4a ef       	ldi	r20, 0xFA	; 250
    25ae:	54 e4       	ldi	r21, 0x44	; 68
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	f8 01       	movw	r30, r16
    25ba:	80 83       	st	Z, r24
    25bc:	91 83       	std	Z+1, r25	; 0x01
    25be:	a2 83       	std	Z+2, r26	; 0x02
    25c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c2:	fe 01       	movw	r30, r28
    25c4:	e9 58       	subi	r30, 0x89	; 137
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	60 81       	ld	r22, Z
    25ca:	71 81       	ldd	r23, Z+1	; 0x01
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	44 f4       	brge	.+16     	; 0x25f0 <main+0x1a92>
		__ticks = 1;
    25e0:	fe 01       	movw	r30, r28
    25e2:	eb 58       	subi	r30, 0x8B	; 139
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	64 c0       	rjmp	.+200    	; 0x26b8 <main+0x1b5a>
	else if (__tmp > 65535)
    25f0:	fe 01       	movw	r30, r28
    25f2:	e9 58       	subi	r30, 0x89	; 137
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	93 81       	ldd	r25, Z+3	; 0x03
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	3f ef       	ldi	r19, 0xFF	; 255
    2602:	4f e7       	ldi	r20, 0x7F	; 127
    2604:	57 e4       	ldi	r21, 0x47	; 71
    2606:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    260a:	18 16       	cp	r1, r24
    260c:	0c f0       	brlt	.+2      	; 0x2610 <main+0x1ab2>
    260e:	43 c0       	rjmp	.+134    	; 0x2696 <main+0x1b38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2610:	fe 01       	movw	r30, r28
    2612:	e5 58       	subi	r30, 0x85	; 133
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8e 01       	movw	r16, r28
    2630:	0b 58       	subi	r16, 0x8B	; 139
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	1f c0       	rjmp	.+62     	; 0x2686 <main+0x1b28>
    2648:	fe 01       	movw	r30, r28
    264a:	ed 58       	subi	r30, 0x8D	; 141
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	fe 01       	movw	r30, r28
    2658:	ed 58       	subi	r30, 0x8D	; 141
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <main+0x1b02>
    2664:	fe 01       	movw	r30, r28
    2666:	ed 58       	subi	r30, 0x8D	; 141
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266e:	de 01       	movw	r26, r28
    2670:	ab 58       	subi	r26, 0x8B	; 139
    2672:	bf 4f       	sbci	r27, 0xFF	; 255
    2674:	fe 01       	movw	r30, r28
    2676:	eb 58       	subi	r30, 0x8B	; 139
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	11 96       	adiw	r26, 0x01	; 1
    2682:	9c 93       	st	X, r25
    2684:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2686:	fe 01       	movw	r30, r28
    2688:	eb 58       	subi	r30, 0x8B	; 139
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	d1 f6       	brne	.-76     	; 0x2648 <main+0x1aea>
    2694:	27 c0       	rjmp	.+78     	; 0x26e4 <main+0x1b86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2696:	8e 01       	movw	r16, r28
    2698:	0b 58       	subi	r16, 0x8B	; 139
    269a:	1f 4f       	sbci	r17, 0xFF	; 255
    269c:	fe 01       	movw	r30, r28
    269e:	e9 58       	subi	r30, 0x89	; 137
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	f8 01       	movw	r30, r16
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
    26b8:	de 01       	movw	r26, r28
    26ba:	af 58       	subi	r26, 0x8F	; 143
    26bc:	bf 4f       	sbci	r27, 0xFF	; 255
    26be:	fe 01       	movw	r30, r28
    26c0:	eb 58       	subi	r30, 0x8B	; 139
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	8d 93       	st	X+, r24
    26ca:	9c 93       	st	X, r25
    26cc:	fe 01       	movw	r30, r28
    26ce:	ef 58       	subi	r30, 0x8F	; 143
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <main+0x1b78>
    26da:	fe 01       	movw	r30, r28
    26dc:	ef 58       	subi	r30, 0x8F	; 143
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
							UART_sendByte(CHECK); /* */

							_delay_ms(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    26e4:	de 01       	movw	r26, r28
    26e6:	aa 5b       	subi	r26, 0xBA	; 186
    26e8:	be 4f       	sbci	r27, 0xFE	; 254
    26ea:	fe 01       	movw	r30, r28
    26ec:	ea 5b       	subi	r30, 0xBA	; 186
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
    26f0:	80 81       	ld	r24, Z
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	8c 93       	st	X, r24
    26f6:	fe 01       	movw	r30, r28
    26f8:	ea 5b       	subi	r30, 0xBA	; 186
    26fa:	fe 4f       	sbci	r31, 0xFE	; 254
    26fc:	80 81       	ld	r24, Z
    26fe:	85 30       	cpi	r24, 0x05	; 5
    2700:	08 f4       	brcc	.+2      	; 0x2704 <main+0x1ba6>
    2702:	2e cf       	rjmp	.-420    	; 0x2560 <main+0x1a02>
								UART_sendByte(pass1[i]);

								_delay_ms(20);
							}

							status = UART_recieveByte();
    2704:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    2708:	fe 01       	movw	r30, r28
    270a:	eb 5b       	subi	r30, 0xBB	; 187
    270c:	fe 4f       	sbci	r31, 0xFE	; 254
    270e:	80 83       	st	Z, r24

						}while((count != 2) && (status == ERROR));
    2710:	fe 01       	movw	r30, r28
    2712:	ed 5b       	subi	r30, 0xBD	; 189
    2714:	fe 4f       	sbci	r31, 0xFE	; 254
    2716:	80 81       	ld	r24, Z
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	39 f0       	breq	.+14     	; 0x272a <main+0x1bcc>
    271c:	fe 01       	movw	r30, r28
    271e:	eb 5b       	subi	r30, 0xBB	; 187
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	80 81       	ld	r24, Z
    2724:	88 23       	and	r24, r24
    2726:	09 f4       	brne	.+2      	; 0x272a <main+0x1bcc>
    2728:	a9 cc       	rjmp	.-1710   	; 0x207c <main+0x151e>

						if((count == 2) && (status == ERROR))
    272a:	fe 01       	movw	r30, r28
    272c:	ed 5b       	subi	r30, 0xBD	; 189
    272e:	fe 4f       	sbci	r31, 0xFE	; 254
    2730:	80 81       	ld	r24, Z
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	09 f0       	breq	.+2      	; 0x2738 <main+0x1bda>
    2736:	46 cc       	rjmp	.-1908   	; 0x1fc4 <main+0x1466>
    2738:	fe 01       	movw	r30, r28
    273a:	eb 5b       	subi	r30, 0xBB	; 187
    273c:	fe 4f       	sbci	r31, 0xFE	; 254
    273e:	80 81       	ld	r24, Z
    2740:	88 23       	and	r24, r24
    2742:	09 f0       	breq	.+2      	; 0x2746 <main+0x1be8>
    2744:	3f cc       	rjmp	.-1922   	; 0x1fc4 <main+0x1466>
						{
							UART_sendByte(BUZZER);
    2746:	84 e1       	ldi	r24, 0x14	; 20
    2748:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
							LCD_clearScreen();
    274c:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
							LCD_displayString("System Locked");
    2750:	84 ee       	ldi	r24, 0xE4	; 228
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
							Timer1_init(&t_configure); /* Start Timer */
    2758:	ce 01       	movw	r24, r28
    275a:	87 5a       	subi	r24, 0xA7	; 167
    275c:	9e 4f       	sbci	r25, 0xFE	; 254
    275e:	0e 94 54 23 	call	0x46a8	; 0x46a8 <Timer1_init>
							while(g_count != 60); /* Waiting For 60 Seconds */
    2762:	80 91 08 01 	lds	r24, 0x0108
    2766:	8c 33       	cpi	r24, 0x3C	; 60
    2768:	e1 f7       	brne	.-8      	; 0x2762 <main+0x1c04>
							Timer1_deInit();
    276a:	0e 94 b4 23 	call	0x4768	; 0x4768 <Timer1_deInit>
							g_count = 0 ;
    276e:	10 92 08 01 	sts	0x0108, r1
    2772:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <main+0x1d6>
							break;
						}
					}
				}
			}
			else if(key == '-') /* User Choose Change The Password */
    2776:	fe 01       	movw	r30, r28
    2778:	e9 5b       	subi	r30, 0xB9	; 185
    277a:	fe 4f       	sbci	r31, 0xFE	; 254
    277c:	80 81       	ld	r24, Z
    277e:	8d 32       	cpi	r24, 0x2D	; 45
    2780:	11 f0       	breq	.+4      	; 0x2786 <main+0x1c28>
    2782:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <main+0x1d6>
			{
				LCD_clearScreen();
    2786:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    278a:	8b ea       	ldi	r24, 0xAB	; 171
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
				LCD_moveCursor(1, 0);
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	60 e0       	ldi	r22, 0x00	; 0
    2796:	0e 94 cc 22 	call	0x4598	; 0x4598 <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    279a:	fe 01       	movw	r30, r28
    279c:	ea 5b       	subi	r30, 0xBA	; 186
    279e:	fe 4f       	sbci	r31, 0xFE	; 254
    27a0:	10 82       	st	Z, r1
    27a2:	d6 c0       	rjmp	.+428    	; 0x2950 <main+0x1df2>
				{
					key = KEYPAD_getPressedKey() ;
    27a4:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    27a8:	fe 01       	movw	r30, r28
    27aa:	e9 5b       	subi	r30, 0xB9	; 185
    27ac:	fe 4f       	sbci	r31, 0xFE	; 254
    27ae:	80 83       	st	Z, r24
					pass1[i] = key ;
    27b0:	fe 01       	movw	r30, r28
    27b2:	ea 5b       	subi	r30, 0xBA	; 186
    27b4:	fe 4f       	sbci	r31, 0xFE	; 254
    27b6:	80 81       	ld	r24, Z
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	ce 01       	movw	r24, r28
    27be:	88 5b       	subi	r24, 0xB8	; 184
    27c0:	9e 4f       	sbci	r25, 0xFE	; 254
    27c2:	dc 01       	movw	r26, r24
    27c4:	a2 0f       	add	r26, r18
    27c6:	b3 1f       	adc	r27, r19
    27c8:	fe 01       	movw	r30, r28
    27ca:	e9 5b       	subi	r30, 0xB9	; 185
    27cc:	fe 4f       	sbci	r31, 0xFE	; 254
    27ce:	80 81       	ld	r24, Z
    27d0:	8c 93       	st	X, r24
					LCD_displayCharacter('*');
    27d2:	8a e2       	ldi	r24, 0x2A	; 42
    27d4:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
    27d8:	fe 01       	movw	r30, r28
    27da:	e3 59       	subi	r30, 0x93	; 147
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	aa ef       	ldi	r26, 0xFA	; 250
    27e4:	b3 e4       	ldi	r27, 0x43	; 67
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	8e 01       	movw	r16, r28
    27f0:	07 59       	subi	r16, 0x97	; 151
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	e3 59       	subi	r30, 0x93	; 147
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a ef       	ldi	r20, 0xFA	; 250
    2808:	54 e4       	ldi	r21, 0x44	; 68
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	f8 01       	movw	r30, r16
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281c:	fe 01       	movw	r30, r28
    281e:	e7 59       	subi	r30, 0x97	; 151
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	44 f4       	brge	.+16     	; 0x284a <main+0x1cec>
		__ticks = 1;
    283a:	fe 01       	movw	r30, r28
    283c:	e9 59       	subi	r30, 0x99	; 153
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	64 c0       	rjmp	.+200    	; 0x2912 <main+0x1db4>
	else if (__tmp > 65535)
    284a:	fe 01       	movw	r30, r28
    284c:	e7 59       	subi	r30, 0x97	; 151
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	0c f0       	brlt	.+2      	; 0x286a <main+0x1d0c>
    2868:	43 c0       	rjmp	.+134    	; 0x28f0 <main+0x1d92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	fe 01       	movw	r30, r28
    286c:	e3 59       	subi	r30, 0x93	; 147
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8e 01       	movw	r16, r28
    288a:	09 59       	subi	r16, 0x99	; 153
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
    28a0:	1f c0       	rjmp	.+62     	; 0x28e0 <main+0x1d82>
    28a2:	fe 01       	movw	r30, r28
    28a4:	eb 59       	subi	r30, 0x9B	; 155
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	fe 01       	movw	r30, r28
    28b2:	eb 59       	subi	r30, 0x9B	; 155
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <main+0x1d5c>
    28be:	fe 01       	movw	r30, r28
    28c0:	eb 59       	subi	r30, 0x9B	; 155
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	de 01       	movw	r26, r28
    28ca:	a9 59       	subi	r26, 0x99	; 153
    28cc:	bf 4f       	sbci	r27, 0xFF	; 255
    28ce:	fe 01       	movw	r30, r28
    28d0:	e9 59       	subi	r30, 0x99	; 153
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	9c 93       	st	X, r25
    28de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e0:	fe 01       	movw	r30, r28
    28e2:	e9 59       	subi	r30, 0x99	; 153
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	d1 f6       	brne	.-76     	; 0x28a2 <main+0x1d44>
    28ee:	27 c0       	rjmp	.+78     	; 0x293e <main+0x1de0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	8e 01       	movw	r16, r28
    28f2:	09 59       	subi	r16, 0x99	; 153
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	fe 01       	movw	r30, r28
    28f8:	e7 59       	subi	r30, 0x97	; 151
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	de 01       	movw	r26, r28
    2914:	ad 59       	subi	r26, 0x9D	; 157
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e9 59       	subi	r30, 0x99	; 153
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	8d 93       	st	X+, r24
    2924:	9c 93       	st	X, r25
    2926:	fe 01       	movw	r30, r28
    2928:	ed 59       	subi	r30, 0x9D	; 157
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <main+0x1dd2>
    2934:	fe 01       	movw	r30, r28
    2936:	ed 59       	subi	r30, 0x9D	; 157
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    293e:	de 01       	movw	r26, r28
    2940:	aa 5b       	subi	r26, 0xBA	; 186
    2942:	be 4f       	sbci	r27, 0xFE	; 254
    2944:	fe 01       	movw	r30, r28
    2946:	ea 5b       	subi	r30, 0xBA	; 186
    2948:	fe 4f       	sbci	r31, 0xFE	; 254
    294a:	80 81       	ld	r24, Z
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	8c 93       	st	X, r24
    2950:	fe 01       	movw	r30, r28
    2952:	ea 5b       	subi	r30, 0xBA	; 186
    2954:	fe 4f       	sbci	r31, 0xFE	; 254
    2956:	80 81       	ld	r24, Z
    2958:	85 30       	cpi	r24, 0x05	; 5
    295a:	08 f4       	brcc	.+2      	; 0x295e <main+0x1e00>
    295c:	23 cf       	rjmp	.-442    	; 0x27a4 <main+0x1c46>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    295e:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    2962:	fe 01       	movw	r30, r28
    2964:	e9 5b       	subi	r30, 0xB9	; 185
    2966:	fe 4f       	sbci	r31, 0xFE	; 254
    2968:	80 83       	st	Z, r24
    296a:	fe 01       	movw	r30, r28
    296c:	e1 5a       	subi	r30, 0xA1	; 161
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	aa ef       	ldi	r26, 0xFA	; 250
    2976:	b3 e4       	ldi	r27, 0x43	; 67
    2978:	80 83       	st	Z, r24
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	a2 83       	std	Z+2, r26	; 0x02
    297e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	8e 01       	movw	r16, r28
    2982:	05 5a       	subi	r16, 0xA5	; 165
    2984:	1f 4f       	sbci	r17, 0xFF	; 255
    2986:	fe 01       	movw	r30, r28
    2988:	e1 5a       	subi	r30, 0xA1	; 161
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a ef       	ldi	r20, 0xFA	; 250
    299a:	54 e4       	ldi	r21, 0x44	; 68
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ae:	fe 01       	movw	r30, r28
    29b0:	e5 5a       	subi	r30, 0xA5	; 165
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	44 f4       	brge	.+16     	; 0x29dc <main+0x1e7e>
		__ticks = 1;
    29cc:	fe 01       	movw	r30, r28
    29ce:	e7 5a       	subi	r30, 0xA7	; 167
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	64 c0       	rjmp	.+200    	; 0x2aa4 <main+0x1f46>
	else if (__tmp > 65535)
    29dc:	fe 01       	movw	r30, r28
    29de:	e5 5a       	subi	r30, 0xA5	; 165
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	0c f0       	brlt	.+2      	; 0x29fc <main+0x1e9e>
    29fa:	43 c0       	rjmp	.+134    	; 0x2a82 <main+0x1f24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	fe 01       	movw	r30, r28
    29fe:	e1 5a       	subi	r30, 0xA1	; 161
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	07 5a       	subi	r16, 0xA7	; 167
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
    2a32:	1f c0       	rjmp	.+62     	; 0x2a72 <main+0x1f14>
    2a34:	fe 01       	movw	r30, r28
    2a36:	e9 5a       	subi	r30, 0xA9	; 169
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	fe 01       	movw	r30, r28
    2a44:	e9 5a       	subi	r30, 0xA9	; 169
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <main+0x1eee>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e9 5a       	subi	r30, 0xA9	; 169
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	de 01       	movw	r26, r28
    2a5c:	a7 5a       	subi	r26, 0xA7	; 167
    2a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a60:	fe 01       	movw	r30, r28
    2a62:	e7 5a       	subi	r30, 0xA7	; 167
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	11 96       	adiw	r26, 0x01	; 1
    2a6e:	9c 93       	st	X, r25
    2a70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	fe 01       	movw	r30, r28
    2a74:	e7 5a       	subi	r30, 0xA7	; 167
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	d1 f6       	brne	.-76     	; 0x2a34 <main+0x1ed6>
    2a80:	28 c0       	rjmp	.+80     	; 0x2ad2 <main+0x1f74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	8e 01       	movw	r16, r28
    2a84:	07 5a       	subi	r16, 0xA7	; 167
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e5 5a       	subi	r30, 0xA5	; 165
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	de 01       	movw	r26, r28
    2aa6:	ab 5a       	subi	r26, 0xAB	; 171
    2aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e7 5a       	subi	r30, 0xA7	; 167
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	11 96       	adiw	r26, 0x01	; 1
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	fe 01       	movw	r30, r28
    2abc:	eb 5a       	subi	r30, 0xAB	; 171
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <main+0x1f66>
    2ac8:	fe 01       	movw	r30, r28
    2aca:	eb 5a       	subi	r30, 0xAB	; 171
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e9 5b       	subi	r30, 0xB9	; 185
    2ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad8:	80 81       	ld	r24, Z
    2ada:	8d 30       	cpi	r24, 0x0D	; 13
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <main+0x1f82>
    2ade:	3f cf       	rjmp	.-386    	; 0x295e <main+0x1e00>

				UART_sendByte(CHECK); /* */
    2ae0:	81 e1       	ldi	r24, 0x11	; 17
    2ae2:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ef 5a       	subi	r30, 0xAF	; 175
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 ea       	ldi	r26, 0xA0	; 160
    2af2:	b1 e4       	ldi	r27, 0x41	; 65
    2af4:	80 83       	st	Z, r24
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	a2 83       	std	Z+2, r26	; 0x02
    2afa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	8e 01       	movw	r16, r28
    2afe:	03 5b       	subi	r16, 0xB3	; 179
    2b00:	1f 4f       	sbci	r17, 0xFF	; 255
    2b02:	fe 01       	movw	r30, r28
    2b04:	ef 5a       	subi	r30, 0xAF	; 175
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a ef       	ldi	r20, 0xFA	; 250
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	f8 01       	movw	r30, r16
    2b22:	80 83       	st	Z, r24
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	a2 83       	std	Z+2, r26	; 0x02
    2b28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e3 5b       	subi	r30, 0xB3	; 179
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e8       	ldi	r20, 0x80	; 128
    2b3e:	5f e3       	ldi	r21, 0x3F	; 63
    2b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b44:	88 23       	and	r24, r24
    2b46:	44 f4       	brge	.+16     	; 0x2b58 <main+0x1ffa>
		__ticks = 1;
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e5 5b       	subi	r30, 0xB5	; 181
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	80 83       	st	Z, r24
    2b56:	64 c0       	rjmp	.+200    	; 0x2c20 <main+0x20c2>
	else if (__tmp > 65535)
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e3 5b       	subi	r30, 0xB3	; 179
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	0c f0       	brlt	.+2      	; 0x2b78 <main+0x201a>
    2b76:	43 c0       	rjmp	.+134    	; 0x2bfe <main+0x20a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ef 5a       	subi	r30, 0xAF	; 175
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e2       	ldi	r20, 0x20	; 32
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8e 01       	movw	r16, r28
    2b98:	05 5b       	subi	r16, 0xB5	; 181
    2b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	f8 01       	movw	r30, r16
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	1f c0       	rjmp	.+62     	; 0x2bee <main+0x2090>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e7 5b       	subi	r30, 0xB7	; 183
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	88 ec       	ldi	r24, 0xC8	; 200
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e7 5b       	subi	r30, 0xB7	; 183
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	80 81       	ld	r24, Z
    2bc6:	91 81       	ldd	r25, Z+1	; 0x01
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <main+0x206a>
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e7 5b       	subi	r30, 0xB7	; 183
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd6:	de 01       	movw	r26, r28
    2bd8:	a5 5b       	subi	r26, 0xB5	; 181
    2bda:	bf 4f       	sbci	r27, 0xFF	; 255
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e5 5b       	subi	r30, 0xB5	; 181
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	91 81       	ldd	r25, Z+1	; 0x01
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	11 96       	adiw	r26, 0x01	; 1
    2bea:	9c 93       	st	X, r25
    2bec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e5 5b       	subi	r30, 0xB5	; 181
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	d1 f6       	brne	.-76     	; 0x2bb0 <main+0x2052>
    2bfc:	28 c0       	rjmp	.+80     	; 0x2c4e <main+0x20f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	8e 01       	movw	r16, r28
    2c00:	05 5b       	subi	r16, 0xB5	; 181
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	e3 5b       	subi	r30, 0xB3	; 179
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
    2c20:	de 01       	movw	r26, r28
    2c22:	a9 5b       	subi	r26, 0xB9	; 185
    2c24:	bf 4f       	sbci	r27, 0xFF	; 255
    2c26:	fe 01       	movw	r30, r28
    2c28:	e5 5b       	subi	r30, 0xB5	; 181
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	11 96       	adiw	r26, 0x01	; 1
    2c32:	9c 93       	st	X, r25
    2c34:	8e 93       	st	-X, r24
    2c36:	fe 01       	movw	r30, r28
    2c38:	e9 5b       	subi	r30, 0xB9	; 185
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <main+0x20e2>
    2c44:	fe 01       	movw	r30, r28
    2c46:	e9 5b       	subi	r30, 0xB9	; 185
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24

				_delay_ms(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ea 5b       	subi	r30, 0xBA	; 186
    2c52:	fe 4f       	sbci	r31, 0xFE	; 254
    2c54:	10 82       	st	Z, r1
    2c56:	9d c0       	rjmp	.+314    	; 0x2d92 <main+0x2234>
				{
					UART_sendByte(pass1[i]);
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ea 5b       	subi	r30, 0xBA	; 186
    2c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	ce 01       	movw	r24, r28
    2c66:	88 5b       	subi	r24, 0xB8	; 184
    2c68:	9e 4f       	sbci	r25, 0xFE	; 254
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	e2 0f       	add	r30, r18
    2c6e:	f3 1f       	adc	r31, r19
    2c70:	80 81       	ld	r24, Z
    2c72:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    2c76:	fe 01       	movw	r30, r28
    2c78:	ed 5b       	subi	r30, 0xBD	; 189
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a0 ea       	ldi	r26, 0xA0	; 160
    2c82:	b1 e4       	ldi	r27, 0x41	; 65
    2c84:	80 83       	st	Z, r24
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	a2 83       	std	Z+2, r26	; 0x02
    2c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	8e 01       	movw	r16, r28
    2c8e:	01 5c       	subi	r16, 0xC1	; 193
    2c90:	1f 4f       	sbci	r17, 0xFF	; 255
    2c92:	fe 01       	movw	r30, r28
    2c94:	ed 5b       	subi	r30, 0xBD	; 189
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4a ef       	ldi	r20, 0xFA	; 250
    2ca6:	54 e4       	ldi	r21, 0x44	; 68
    2ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	80 83       	st	Z, r24
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	a2 83       	std	Z+2, r26	; 0x02
    2cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ff 96       	adiw	r30, 0x3f	; 63
    2cbe:	60 81       	ld	r22, Z
    2cc0:	71 81       	ldd	r23, Z+1	; 0x01
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e8       	ldi	r20, 0x80	; 128
    2ccc:	5f e3       	ldi	r21, 0x3F	; 63
    2cce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd2:	88 23       	and	r24, r24
    2cd4:	2c f4       	brge	.+10     	; 0x2ce0 <main+0x2182>
		__ticks = 1;
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9e af       	std	Y+62, r25	; 0x3e
    2cdc:	8d af       	std	Y+61, r24	; 0x3d
    2cde:	46 c0       	rjmp	.+140    	; 0x2d6c <main+0x220e>
	else if (__tmp > 65535)
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	ff 96       	adiw	r30, 0x3f	; 63
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	64 f5       	brge	.+88     	; 0x2d54 <main+0x21f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ed 5b       	subi	r30, 0xBD	; 189
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	93 81       	ldd	r25, Z+3	; 0x03
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e2       	ldi	r20, 0x20	; 32
    2d10:	51 e4       	ldi	r21, 0x41	; 65
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9e af       	std	Y+62, r25	; 0x3e
    2d28:	8d af       	std	Y+61, r24	; 0x3d
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <main+0x21ec>
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9c af       	std	Y+60, r25	; 0x3c
    2d32:	8b af       	std	Y+59, r24	; 0x3b
    2d34:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d36:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <main+0x21da>
    2d3c:	9c af       	std	Y+60, r25	; 0x3c
    2d3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d42:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	9e af       	std	Y+62, r25	; 0x3e
    2d48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <main+0x21ce>
    2d52:	16 c0       	rjmp	.+44     	; 0x2d80 <main+0x2222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d54:	fe 01       	movw	r30, r28
    2d56:	ff 96       	adiw	r30, 0x3f	; 63
    2d58:	60 81       	ld	r22, Z
    2d5a:	71 81       	ldd	r23, Z+1	; 0x01
    2d5c:	82 81       	ldd	r24, Z+2	; 0x02
    2d5e:	93 81       	ldd	r25, Z+3	; 0x03
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9e af       	std	Y+62, r25	; 0x3e
    2d6a:	8d af       	std	Y+61, r24	; 0x3d
    2d6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d70:	9a af       	std	Y+58, r25	; 0x3a
    2d72:	89 af       	std	Y+57, r24	; 0x39
    2d74:	89 ad       	ldd	r24, Y+57	; 0x39
    2d76:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <main+0x221a>
    2d7c:	9a af       	std	Y+58, r25	; 0x3a
    2d7e:	89 af       	std	Y+57, r24	; 0x39
				UART_sendByte(CHECK); /* */

				_delay_ms(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    2d80:	de 01       	movw	r26, r28
    2d82:	aa 5b       	subi	r26, 0xBA	; 186
    2d84:	be 4f       	sbci	r27, 0xFE	; 254
    2d86:	fe 01       	movw	r30, r28
    2d88:	ea 5b       	subi	r30, 0xBA	; 186
    2d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8f 5f       	subi	r24, 0xFF	; 255
    2d90:	8c 93       	st	X, r24
    2d92:	fe 01       	movw	r30, r28
    2d94:	ea 5b       	subi	r30, 0xBA	; 186
    2d96:	fe 4f       	sbci	r31, 0xFE	; 254
    2d98:	80 81       	ld	r24, Z
    2d9a:	85 30       	cpi	r24, 0x05	; 5
    2d9c:	08 f4       	brcc	.+2      	; 0x2da0 <main+0x2242>
    2d9e:	5c cf       	rjmp	.-328    	; 0x2c58 <main+0x20fa>
					UART_sendByte(pass1[i]);

					_delay_ms(20);
				}

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    2da0:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    2da4:	fe 01       	movw	r30, r28
    2da6:	eb 5b       	subi	r30, 0xBB	; 187
    2da8:	fe 4f       	sbci	r31, 0xFE	; 254
    2daa:	80 83       	st	Z, r24

				while(1)
				{
					if(status == OK) /* Right Password */
    2dac:	fe 01       	movw	r30, r28
    2dae:	eb 5b       	subi	r30, 0xBB	; 187
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	80 81       	ld	r24, Z
    2db4:	80 31       	cpi	r24, 0x10	; 16
    2db6:	49 f4       	brne	.+18     	; 0x2dca <main+0x226c>
					{
						flag = 0 ;
    2db8:	fe 01       	movw	r30, r28
    2dba:	ec 5b       	subi	r30, 0xBC	; 188
    2dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dbe:	10 82       	st	Z, r1
						UART_sendByte(CR_PASS);
    2dc0:	85 e1       	ldi	r24, 0x15	; 21
    2dc2:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    2dc6:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <main+0x1d6>
						break;
					}
					else /* Wrong Password */
					{
						count = 0 ;
    2dca:	fe 01       	movw	r30, r28
    2dcc:	ed 5b       	subi	r30, 0xBD	; 189
    2dce:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd0:	10 82       	st	Z, r1

						do
						{
							count++;
    2dd2:	de 01       	movw	r26, r28
    2dd4:	ad 5b       	subi	r26, 0xBD	; 189
    2dd6:	be 4f       	sbci	r27, 0xFE	; 254
    2dd8:	fe 01       	movw	r30, r28
    2dda:	ed 5b       	subi	r30, 0xBD	; 189
    2ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dde:	80 81       	ld	r24, Z
    2de0:	8f 5f       	subi	r24, 0xFF	; 255
    2de2:	8c 93       	st	X, r24

							LCD_clearScreen();
    2de4:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
							LCD_displayString("PLZ Enter Pass:");
    2de8:	80 e6       	ldi	r24, 0x60	; 96
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
							LCD_moveCursor(1, 0);
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	0e 94 cc 22 	call	0x4598	; 0x4598 <LCD_moveCursor>

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    2df8:	fe 01       	movw	r30, r28
    2dfa:	ea 5b       	subi	r30, 0xBA	; 186
    2dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dfe:	10 82       	st	Z, r1
    2e00:	95 c0       	rjmp	.+298    	; 0x2f2c <main+0x23ce>
							{
								key = KEYPAD_getPressedKey() ;
    2e02:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    2e06:	fe 01       	movw	r30, r28
    2e08:	e9 5b       	subi	r30, 0xB9	; 185
    2e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0c:	80 83       	st	Z, r24
								pass1[i] = key ;
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ea 5b       	subi	r30, 0xBA	; 186
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
    2e14:	80 81       	ld	r24, Z
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	88 5b       	subi	r24, 0xB8	; 184
    2e1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e20:	dc 01       	movw	r26, r24
    2e22:	a2 0f       	add	r26, r18
    2e24:	b3 1f       	adc	r27, r19
    2e26:	fe 01       	movw	r30, r28
    2e28:	e9 5b       	subi	r30, 0xB9	; 185
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8c 93       	st	X, r24
								LCD_displayCharacter('*');
    2e30:	8a e2       	ldi	r24, 0x2A	; 42
    2e32:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	aa ef       	ldi	r26, 0xFA	; 250
    2e3c:	b3 e4       	ldi	r27, 0x43	; 67
    2e3e:	8d ab       	std	Y+53, r24	; 0x35
    2e40:	9e ab       	std	Y+54, r25	; 0x36
    2e42:	af ab       	std	Y+55, r26	; 0x37
    2e44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e46:	6d a9       	ldd	r22, Y+53	; 0x35
    2e48:	7e a9       	ldd	r23, Y+54	; 0x36
    2e4a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e4c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a ef       	ldi	r20, 0xFA	; 250
    2e54:	54 e4       	ldi	r21, 0x44	; 68
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	89 ab       	std	Y+49, r24	; 0x31
    2e60:	9a ab       	std	Y+50, r25	; 0x32
    2e62:	ab ab       	std	Y+51, r26	; 0x33
    2e64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e66:	69 a9       	ldd	r22, Y+49	; 0x31
    2e68:	7a a9       	ldd	r23, Y+50	; 0x32
    2e6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	2c f4       	brge	.+10     	; 0x2e88 <main+0x232a>
		__ticks = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	98 ab       	std	Y+48, r25	; 0x30
    2e84:	8f a7       	std	Y+47, r24	; 0x2f
    2e86:	3f c0       	rjmp	.+126    	; 0x2f06 <main+0x23a8>
	else if (__tmp > 65535)
    2e88:	69 a9       	ldd	r22, Y+49	; 0x31
    2e8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2e8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2e8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	4c f5       	brge	.+82     	; 0x2ef2 <main+0x2394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	98 ab       	std	Y+48, r25	; 0x30
    2ec6:	8f a7       	std	Y+47, r24	; 0x2f
    2ec8:	0f c0       	rjmp	.+30     	; 0x2ee8 <main+0x238a>
    2eca:	88 ec       	ldi	r24, 0xC8	; 200
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	9e a7       	std	Y+46, r25	; 0x2e
    2ed0:	8d a7       	std	Y+45, r24	; 0x2d
    2ed2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ed4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <main+0x2378>
    2eda:	9e a7       	std	Y+46, r25	; 0x2e
    2edc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	98 ab       	std	Y+48, r25	; 0x30
    2ee6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eea:	98 a9       	ldd	r25, Y+48	; 0x30
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	69 f7       	brne	.-38     	; 0x2eca <main+0x236c>
    2ef0:	14 c0       	rjmp	.+40     	; 0x2f1a <main+0x23bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ef4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ef6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ef8:	9c a9       	ldd	r25, Y+52	; 0x34
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	98 ab       	std	Y+48, r25	; 0x30
    2f04:	8f a7       	std	Y+47, r24	; 0x2f
    2f06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f08:	98 a9       	ldd	r25, Y+48	; 0x30
    2f0a:	9c a7       	std	Y+44, r25	; 0x2c
    2f0c:	8b a7       	std	Y+43, r24	; 0x2b
    2f0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f10:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	f1 f7       	brne	.-4      	; 0x2f12 <main+0x23b4>
    2f16:	9c a7       	std	Y+44, r25	; 0x2c
    2f18:	8b a7       	std	Y+43, r24	; 0x2b
							LCD_clearScreen();
							LCD_displayString("PLZ Enter Pass:");
							LCD_moveCursor(1, 0);

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    2f1a:	de 01       	movw	r26, r28
    2f1c:	aa 5b       	subi	r26, 0xBA	; 186
    2f1e:	be 4f       	sbci	r27, 0xFE	; 254
    2f20:	fe 01       	movw	r30, r28
    2f22:	ea 5b       	subi	r30, 0xBA	; 186
    2f24:	fe 4f       	sbci	r31, 0xFE	; 254
    2f26:	80 81       	ld	r24, Z
    2f28:	8f 5f       	subi	r24, 0xFF	; 255
    2f2a:	8c 93       	st	X, r24
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ea 5b       	subi	r30, 0xBA	; 186
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	80 81       	ld	r24, Z
    2f34:	85 30       	cpi	r24, 0x05	; 5
    2f36:	08 f4       	brcc	.+2      	; 0x2f3a <main+0x23dc>
    2f38:	64 cf       	rjmp	.-312    	; 0x2e02 <main+0x22a4>
							}

							/* Waiting User to press The Enter Button */
							do
							{
								key = KEYPAD_getPressedKey() ;
    2f3a:	0e 94 9e 1c 	call	0x393c	; 0x393c <KEYPAD_getPressedKey>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e9 5b       	subi	r30, 0xB9	; 185
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	80 83       	st	Z, r24
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	aa ef       	ldi	r26, 0xFA	; 250
    2f4c:	b3 e4       	ldi	r27, 0x43	; 67
    2f4e:	8f a3       	std	Y+39, r24	; 0x27
    2f50:	98 a7       	std	Y+40, r25	; 0x28
    2f52:	a9 a7       	std	Y+41, r26	; 0x29
    2f54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	6f a1       	ldd	r22, Y+39	; 0x27
    2f58:	78 a5       	ldd	r23, Y+40	; 0x28
    2f5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2f5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8b a3       	std	Y+35, r24	; 0x23
    2f70:	9c a3       	std	Y+36, r25	; 0x24
    2f72:	ad a3       	std	Y+37, r26	; 0x25
    2f74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f76:	6b a1       	ldd	r22, Y+35	; 0x23
    2f78:	7c a1       	ldd	r23, Y+36	; 0x24
    2f7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <main+0x243a>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9a a3       	std	Y+34, r25	; 0x22
    2f94:	89 a3       	std	Y+33, r24	; 0x21
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <main+0x24b8>
	else if (__tmp > 65535)
    2f98:	6b a1       	ldd	r22, Y+35	; 0x23
    2f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <main+0x24a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2fb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2fb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2fb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9a a3       	std	Y+34, r25	; 0x22
    2fd6:	89 a3       	std	Y+33, r24	; 0x21
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <main+0x249a>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	98 a3       	std	Y+32, r25	; 0x20
    2fe0:	8f 8f       	std	Y+31, r24	; 0x1f
    2fe2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fe4:	98 a1       	ldd	r25, Y+32	; 0x20
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <main+0x2488>
    2fea:	98 a3       	std	Y+32, r25	; 0x20
    2fec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9a a3       	std	Y+34, r25	; 0x22
    2ff6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ffa:	9a a1       	ldd	r25, Y+34	; 0x22
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <main+0x247c>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <main+0x24cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6b a1       	ldd	r22, Y+35	; 0x23
    3004:	7c a1       	ldd	r23, Y+36	; 0x24
    3006:	8d a1       	ldd	r24, Y+37	; 0x25
    3008:	9e a1       	ldd	r25, Y+38	; 0x26
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9a a3       	std	Y+34, r25	; 0x22
    3014:	89 a3       	std	Y+33, r24	; 0x21
    3016:	89 a1       	ldd	r24, Y+33	; 0x21
    3018:	9a a1       	ldd	r25, Y+34	; 0x22
    301a:	9e 8f       	std	Y+30, r25	; 0x1e
    301c:	8d 8f       	std	Y+29, r24	; 0x1d
    301e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3020:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <main+0x24c4>
    3026:	9e 8f       	std	Y+30, r25	; 0x1e
    3028:	8d 8f       	std	Y+29, r24	; 0x1d
								_delay_ms(500);
							} while(key != 13);
    302a:	fe 01       	movw	r30, r28
    302c:	e9 5b       	subi	r30, 0xB9	; 185
    302e:	fe 4f       	sbci	r31, 0xFE	; 254
    3030:	80 81       	ld	r24, Z
    3032:	8d 30       	cpi	r24, 0x0D	; 13
    3034:	09 f0       	breq	.+2      	; 0x3038 <main+0x24da>
    3036:	81 cf       	rjmp	.-254    	; 0x2f3a <main+0x23dc>

							UART_sendByte(CHECK); /* */
    3038:	81 e1       	ldi	r24, 0x11	; 17
    303a:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 ea       	ldi	r26, 0xA0	; 160
    3044:	b1 e4       	ldi	r27, 0x41	; 65
    3046:	89 8f       	std	Y+25, r24	; 0x19
    3048:	9a 8f       	std	Y+26, r25	; 0x1a
    304a:	ab 8f       	std	Y+27, r26	; 0x1b
    304c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	69 8d       	ldd	r22, Y+25	; 0x19
    3050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a ef       	ldi	r20, 0xFA	; 250
    305c:	54 e4       	ldi	r21, 0x44	; 68
    305e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8d 8b       	std	Y+21, r24	; 0x15
    3068:	9e 8b       	std	Y+22, r25	; 0x16
    306a:	af 8b       	std	Y+23, r26	; 0x17
    306c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    306e:	6d 89       	ldd	r22, Y+21	; 0x15
    3070:	7e 89       	ldd	r23, Y+22	; 0x16
    3072:	8f 89       	ldd	r24, Y+23	; 0x17
    3074:	98 8d       	ldd	r25, Y+24	; 0x18
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <main+0x2532>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	3f c0       	rjmp	.+126    	; 0x310e <main+0x25b0>
	else if (__tmp > 65535)
    3090:	6d 89       	ldd	r22, Y+21	; 0x15
    3092:	7e 89       	ldd	r23, Y+22	; 0x16
    3094:	8f 89       	ldd	r24, Y+23	; 0x17
    3096:	98 8d       	ldd	r25, Y+24	; 0x18
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	4c f5       	brge	.+82     	; 0x30fa <main+0x259c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	69 8d       	ldd	r22, Y+25	; 0x19
    30aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e2       	ldi	r20, 0x20	; 32
    30b6:	51 e4       	ldi	r21, 0x41	; 65
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9c 8b       	std	Y+20, r25	; 0x14
    30ce:	8b 8b       	std	Y+19, r24	; 0x13
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <main+0x2592>
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9a 8b       	std	Y+18, r25	; 0x12
    30d8:	89 8b       	std	Y+17, r24	; 0x11
    30da:	89 89       	ldd	r24, Y+17	; 0x11
    30dc:	9a 89       	ldd	r25, Y+18	; 0x12
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <main+0x2580>
    30e2:	9a 8b       	std	Y+18, r25	; 0x12
    30e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e6:	8b 89       	ldd	r24, Y+19	; 0x13
    30e8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	9c 8b       	std	Y+20, r25	; 0x14
    30ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f0:	8b 89       	ldd	r24, Y+19	; 0x13
    30f2:	9c 89       	ldd	r25, Y+20	; 0x14
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <main+0x2574>
    30f8:	14 c0       	rjmp	.+40     	; 0x3122 <main+0x25c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fa:	6d 89       	ldd	r22, Y+21	; 0x15
    30fc:	7e 89       	ldd	r23, Y+22	; 0x16
    30fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3100:	98 8d       	ldd	r25, Y+24	; 0x18
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9c 8b       	std	Y+20, r25	; 0x14
    310c:	8b 8b       	std	Y+19, r24	; 0x13
    310e:	8b 89       	ldd	r24, Y+19	; 0x13
    3110:	9c 89       	ldd	r25, Y+20	; 0x14
    3112:	98 8b       	std	Y+16, r25	; 0x10
    3114:	8f 87       	std	Y+15, r24	; 0x0f
    3116:	8f 85       	ldd	r24, Y+15	; 0x0f
    3118:	98 89       	ldd	r25, Y+16	; 0x10
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <main+0x25bc>
    311e:	98 8b       	std	Y+16, r25	; 0x10
    3120:	8f 87       	std	Y+15, r24	; 0x0f

							_delay_ms(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    3122:	fe 01       	movw	r30, r28
    3124:	ea 5b       	subi	r30, 0xBA	; 186
    3126:	fe 4f       	sbci	r31, 0xFE	; 254
    3128:	10 82       	st	Z, r1
    312a:	8a c0       	rjmp	.+276    	; 0x3240 <main+0x26e2>
							{
								UART_sendByte(pass1[i]);
    312c:	fe 01       	movw	r30, r28
    312e:	ea 5b       	subi	r30, 0xBA	; 186
    3130:	fe 4f       	sbci	r31, 0xFE	; 254
    3132:	80 81       	ld	r24, Z
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	ce 01       	movw	r24, r28
    313a:	88 5b       	subi	r24, 0xB8	; 184
    313c:	9e 4f       	sbci	r25, 0xFE	; 254
    313e:	fc 01       	movw	r30, r24
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	80 81       	ld	r24, Z
    3146:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	a0 ea       	ldi	r26, 0xA0	; 160
    3150:	b1 e4       	ldi	r27, 0x41	; 65
    3152:	8b 87       	std	Y+11, r24	; 0x0b
    3154:	9c 87       	std	Y+12, r25	; 0x0c
    3156:	ad 87       	std	Y+13, r26	; 0x0d
    3158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315a:	6b 85       	ldd	r22, Y+11	; 0x0b
    315c:	7c 85       	ldd	r23, Y+12	; 0x0c
    315e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3160:	9e 85       	ldd	r25, Y+14	; 0x0e
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	4a ef       	ldi	r20, 0xFA	; 250
    3168:	54 e4       	ldi	r21, 0x44	; 68
    316a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	8f 83       	std	Y+7, r24	; 0x07
    3174:	98 87       	std	Y+8, r25	; 0x08
    3176:	a9 87       	std	Y+9, r26	; 0x09
    3178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    317a:	6f 81       	ldd	r22, Y+7	; 0x07
    317c:	78 85       	ldd	r23, Y+8	; 0x08
    317e:	89 85       	ldd	r24, Y+9	; 0x09
    3180:	9a 85       	ldd	r25, Y+10	; 0x0a
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e8       	ldi	r20, 0x80	; 128
    3188:	5f e3       	ldi	r21, 0x3F	; 63
    318a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    318e:	88 23       	and	r24, r24
    3190:	2c f4       	brge	.+10     	; 0x319c <main+0x263e>
		__ticks = 1;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9e 83       	std	Y+6, r25	; 0x06
    3198:	8d 83       	std	Y+5, r24	; 0x05
    319a:	3f c0       	rjmp	.+126    	; 0x321a <main+0x26bc>
	else if (__tmp > 65535)
    319c:	6f 81       	ldd	r22, Y+7	; 0x07
    319e:	78 85       	ldd	r23, Y+8	; 0x08
    31a0:	89 85       	ldd	r24, Y+9	; 0x09
    31a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	3f ef       	ldi	r19, 0xFF	; 255
    31a8:	4f e7       	ldi	r20, 0x7F	; 127
    31aa:	57 e4       	ldi	r21, 0x47	; 71
    31ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b0:	18 16       	cp	r1, r24
    31b2:	4c f5       	brge	.+82     	; 0x3206 <main+0x26a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e2       	ldi	r20, 0x20	; 32
    31c2:	51 e4       	ldi	r21, 0x41	; 65
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	9e 83       	std	Y+6, r25	; 0x06
    31da:	8d 83       	std	Y+5, r24	; 0x05
    31dc:	0f c0       	rjmp	.+30     	; 0x31fc <main+0x269e>
    31de:	88 ec       	ldi	r24, 0xC8	; 200
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	9c 83       	std	Y+4, r25	; 0x04
    31e4:	8b 83       	std	Y+3, r24	; 0x03
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	f1 f7       	brne	.-4      	; 0x31ea <main+0x268c>
    31ee:	9c 83       	std	Y+4, r25	; 0x04
    31f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	9e 83       	std	Y+6, r25	; 0x06
    31fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	69 f7       	brne	.-38     	; 0x31de <main+0x2680>
    3204:	14 c0       	rjmp	.+40     	; 0x322e <main+0x26d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3206:	6f 81       	ldd	r22, Y+7	; 0x07
    3208:	78 85       	ldd	r23, Y+8	; 0x08
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	9a 85       	ldd	r25, Y+10	; 0x0a
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	9a 83       	std	Y+2, r25	; 0x02
    3220:	89 83       	std	Y+1, r24	; 0x01
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	9a 81       	ldd	r25, Y+2	; 0x02
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <main+0x26c8>
    322a:	9a 83       	std	Y+2, r25	; 0x02
    322c:	89 83       	std	Y+1, r24	; 0x01
							UART_sendByte(CHECK); /* */

							_delay_ms(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    322e:	de 01       	movw	r26, r28
    3230:	aa 5b       	subi	r26, 0xBA	; 186
    3232:	be 4f       	sbci	r27, 0xFE	; 254
    3234:	fe 01       	movw	r30, r28
    3236:	ea 5b       	subi	r30, 0xBA	; 186
    3238:	fe 4f       	sbci	r31, 0xFE	; 254
    323a:	80 81       	ld	r24, Z
    323c:	8f 5f       	subi	r24, 0xFF	; 255
    323e:	8c 93       	st	X, r24
    3240:	fe 01       	movw	r30, r28
    3242:	ea 5b       	subi	r30, 0xBA	; 186
    3244:	fe 4f       	sbci	r31, 0xFE	; 254
    3246:	80 81       	ld	r24, Z
    3248:	85 30       	cpi	r24, 0x05	; 5
    324a:	08 f4       	brcc	.+2      	; 0x324e <main+0x26f0>
    324c:	6f cf       	rjmp	.-290    	; 0x312c <main+0x25ce>
								UART_sendByte(pass1[i]);

								_delay_ms(20);
							}

							status = UART_recieveByte();
    324e:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    3252:	fe 01       	movw	r30, r28
    3254:	eb 5b       	subi	r30, 0xBB	; 187
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	80 83       	st	Z, r24

						}while((count != 2) && (status == ERROR));
    325a:	fe 01       	movw	r30, r28
    325c:	ed 5b       	subi	r30, 0xBD	; 189
    325e:	fe 4f       	sbci	r31, 0xFE	; 254
    3260:	80 81       	ld	r24, Z
    3262:	82 30       	cpi	r24, 0x02	; 2
    3264:	39 f0       	breq	.+14     	; 0x3274 <main+0x2716>
    3266:	fe 01       	movw	r30, r28
    3268:	eb 5b       	subi	r30, 0xBB	; 187
    326a:	fe 4f       	sbci	r31, 0xFE	; 254
    326c:	80 81       	ld	r24, Z
    326e:	88 23       	and	r24, r24
    3270:	09 f4       	brne	.+2      	; 0x3274 <main+0x2716>
    3272:	af cd       	rjmp	.-1186   	; 0x2dd2 <main+0x2274>

						if((count == 2) && (status == ERROR))
    3274:	fe 01       	movw	r30, r28
    3276:	ed 5b       	subi	r30, 0xBD	; 189
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	80 81       	ld	r24, Z
    327c:	82 30       	cpi	r24, 0x02	; 2
    327e:	09 f0       	breq	.+2      	; 0x3282 <main+0x2724>
    3280:	95 cd       	rjmp	.-1238   	; 0x2dac <main+0x224e>
    3282:	fe 01       	movw	r30, r28
    3284:	eb 5b       	subi	r30, 0xBB	; 187
    3286:	fe 4f       	sbci	r31, 0xFE	; 254
    3288:	80 81       	ld	r24, Z
    328a:	88 23       	and	r24, r24
    328c:	09 f0       	breq	.+2      	; 0x3290 <main+0x2732>
    328e:	8e cd       	rjmp	.-1252   	; 0x2dac <main+0x224e>
						{
							UART_sendByte(BUZZER);
    3290:	84 e1       	ldi	r24, 0x14	; 20
    3292:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
							LCD_clearScreen();
    3296:	0e 94 4a 23 	call	0x4694	; 0x4694 <LCD_clearScreen>
							LCD_displayString("System Locked");
    329a:	84 ee       	ldi	r24, 0xE4	; 228
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
							Timer1_init(&t_configure); /* Start Timer */
    32a2:	ce 01       	movw	r24, r28
    32a4:	87 5a       	subi	r24, 0xA7	; 167
    32a6:	9e 4f       	sbci	r25, 0xFE	; 254
    32a8:	0e 94 54 23 	call	0x46a8	; 0x46a8 <Timer1_init>
							while(g_count != 60); /* Waiting For 60 Seconds */
    32ac:	80 91 08 01 	lds	r24, 0x0108
    32b0:	8c 33       	cpi	r24, 0x3C	; 60
    32b2:	e1 f7       	brne	.-8      	; 0x32ac <main+0x274e>
							Timer1_deInit();
    32b4:	0e 94 b4 23 	call	0x4768	; 0x4768 <Timer1_deInit>
							g_count = 0 ;
    32b8:	10 92 08 01 	sts	0x0108, r1
    32bc:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <main+0x1d6>

000032c0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <GPIO_setupPinDirection+0x6>
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <GPIO_setupPinDirection+0x8>
    32c8:	0f 92       	push	r0
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	6a 83       	std	Y+2, r22	; 0x02
    32d2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	88 30       	cpi	r24, 0x08	; 8
    32d8:	08 f0       	brcs	.+2      	; 0x32dc <GPIO_setupPinDirection+0x1c>
    32da:	d5 c0       	rjmp	.+426    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	84 30       	cpi	r24, 0x04	; 4
    32e0:	08 f0       	brcs	.+2      	; 0x32e4 <GPIO_setupPinDirection+0x24>
    32e2:	d1 c0       	rjmp	.+418    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	28 2f       	mov	r18, r24
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	3d 83       	std	Y+5, r19	; 0x05
    32ec:	2c 83       	std	Y+4, r18	; 0x04
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	81 30       	cpi	r24, 0x01	; 1
    32f4:	91 05       	cpc	r25, r1
    32f6:	09 f4       	brne	.+2      	; 0x32fa <GPIO_setupPinDirection+0x3a>
    32f8:	43 c0       	rjmp	.+134    	; 0x3380 <GPIO_setupPinDirection+0xc0>
    32fa:	2c 81       	ldd	r18, Y+4	; 0x04
    32fc:	3d 81       	ldd	r19, Y+5	; 0x05
    32fe:	22 30       	cpi	r18, 0x02	; 2
    3300:	31 05       	cpc	r19, r1
    3302:	2c f4       	brge	.+10     	; 0x330e <GPIO_setupPinDirection+0x4e>
    3304:	8c 81       	ldd	r24, Y+4	; 0x04
    3306:	9d 81       	ldd	r25, Y+5	; 0x05
    3308:	00 97       	sbiw	r24, 0x00	; 0
    330a:	71 f0       	breq	.+28     	; 0x3328 <GPIO_setupPinDirection+0x68>
    330c:	bc c0       	rjmp	.+376    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
    330e:	2c 81       	ldd	r18, Y+4	; 0x04
    3310:	3d 81       	ldd	r19, Y+5	; 0x05
    3312:	22 30       	cpi	r18, 0x02	; 2
    3314:	31 05       	cpc	r19, r1
    3316:	09 f4       	brne	.+2      	; 0x331a <GPIO_setupPinDirection+0x5a>
    3318:	5f c0       	rjmp	.+190    	; 0x33d8 <GPIO_setupPinDirection+0x118>
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	9d 81       	ldd	r25, Y+5	; 0x05
    331e:	83 30       	cpi	r24, 0x03	; 3
    3320:	91 05       	cpc	r25, r1
    3322:	09 f4       	brne	.+2      	; 0x3326 <GPIO_setupPinDirection+0x66>
    3324:	85 c0       	rjmp	.+266    	; 0x3430 <GPIO_setupPinDirection+0x170>
    3326:	af c0       	rjmp	.+350    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	a1 f4       	brne	.+40     	; 0x3356 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    332e:	aa e3       	ldi	r26, 0x3A	; 58
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	ea e3       	ldi	r30, 0x3A	; 58
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	48 2f       	mov	r20, r24
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	02 2e       	mov	r0, r18
    3346:	02 c0       	rjmp	.+4      	; 0x334c <GPIO_setupPinDirection+0x8c>
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	0a 94       	dec	r0
    334e:	e2 f7       	brpl	.-8      	; 0x3348 <GPIO_setupPinDirection+0x88>
    3350:	84 2b       	or	r24, r20
    3352:	8c 93       	st	X, r24
    3354:	98 c0       	rjmp	.+304    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3356:	aa e3       	ldi	r26, 0x3A	; 58
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	ea e3       	ldi	r30, 0x3A	; 58
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	48 2f       	mov	r20, r24
    3362:	8a 81       	ldd	r24, Y+2	; 0x02
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	02 2e       	mov	r0, r18
    336e:	02 c0       	rjmp	.+4      	; 0x3374 <GPIO_setupPinDirection+0xb4>
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	0a 94       	dec	r0
    3376:	e2 f7       	brpl	.-8      	; 0x3370 <GPIO_setupPinDirection+0xb0>
    3378:	80 95       	com	r24
    337a:	84 23       	and	r24, r20
    337c:	8c 93       	st	X, r24
    337e:	83 c0       	rjmp	.+262    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	81 30       	cpi	r24, 0x01	; 1
    3384:	a1 f4       	brne	.+40     	; 0x33ae <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3386:	a7 e3       	ldi	r26, 0x37	; 55
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e7 e3       	ldi	r30, 0x37	; 55
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	48 2f       	mov	r20, r24
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	02 2e       	mov	r0, r18
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <GPIO_setupPinDirection+0xe4>
    33a0:	88 0f       	add	r24, r24
    33a2:	99 1f       	adc	r25, r25
    33a4:	0a 94       	dec	r0
    33a6:	e2 f7       	brpl	.-8      	; 0x33a0 <GPIO_setupPinDirection+0xe0>
    33a8:	84 2b       	or	r24, r20
    33aa:	8c 93       	st	X, r24
    33ac:	6c c0       	rjmp	.+216    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    33ae:	a7 e3       	ldi	r26, 0x37	; 55
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	e7 e3       	ldi	r30, 0x37	; 55
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	80 81       	ld	r24, Z
    33b8:	48 2f       	mov	r20, r24
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	02 2e       	mov	r0, r18
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <GPIO_setupPinDirection+0x10c>
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	0a 94       	dec	r0
    33ce:	e2 f7       	brpl	.-8      	; 0x33c8 <GPIO_setupPinDirection+0x108>
    33d0:	80 95       	com	r24
    33d2:	84 23       	and	r24, r20
    33d4:	8c 93       	st	X, r24
    33d6:	57 c0       	rjmp	.+174    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	81 30       	cpi	r24, 0x01	; 1
    33dc:	a1 f4       	brne	.+40     	; 0x3406 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    33de:	a4 e3       	ldi	r26, 0x34	; 52
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	e4 e3       	ldi	r30, 0x34	; 52
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	48 2f       	mov	r20, r24
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	02 2e       	mov	r0, r18
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <GPIO_setupPinDirection+0x13c>
    33f8:	88 0f       	add	r24, r24
    33fa:	99 1f       	adc	r25, r25
    33fc:	0a 94       	dec	r0
    33fe:	e2 f7       	brpl	.-8      	; 0x33f8 <GPIO_setupPinDirection+0x138>
    3400:	84 2b       	or	r24, r20
    3402:	8c 93       	st	X, r24
    3404:	40 c0       	rjmp	.+128    	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    3406:	a4 e3       	ldi	r26, 0x34	; 52
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e4 e3       	ldi	r30, 0x34	; 52
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	48 2f       	mov	r20, r24
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	28 2f       	mov	r18, r24
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	02 2e       	mov	r0, r18
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <GPIO_setupPinDirection+0x164>
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	0a 94       	dec	r0
    3426:	e2 f7       	brpl	.-8      	; 0x3420 <GPIO_setupPinDirection+0x160>
    3428:	80 95       	com	r24
    342a:	84 23       	and	r24, r20
    342c:	8c 93       	st	X, r24
    342e:	2b c0       	rjmp	.+86     	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	a1 f4       	brne	.+40     	; 0x345e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3436:	a1 e3       	ldi	r26, 0x31	; 49
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e1 e3       	ldi	r30, 0x31	; 49
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	48 2f       	mov	r20, r24
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	02 2e       	mov	r0, r18
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <GPIO_setupPinDirection+0x194>
    3450:	88 0f       	add	r24, r24
    3452:	99 1f       	adc	r25, r25
    3454:	0a 94       	dec	r0
    3456:	e2 f7       	brpl	.-8      	; 0x3450 <GPIO_setupPinDirection+0x190>
    3458:	84 2b       	or	r24, r20
    345a:	8c 93       	st	X, r24
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    345e:	a1 e3       	ldi	r26, 0x31	; 49
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e1 e3       	ldi	r30, 0x31	; 49
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	48 2f       	mov	r20, r24
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	02 2e       	mov	r0, r18
    3476:	02 c0       	rjmp	.+4      	; 0x347c <GPIO_setupPinDirection+0x1bc>
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	0a 94       	dec	r0
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <GPIO_setupPinDirection+0x1b8>
    3480:	80 95       	com	r24
    3482:	84 23       	and	r24, r20
    3484:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	cf 91       	pop	r28
    3492:	df 91       	pop	r29
    3494:	08 95       	ret

00003496 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	00 d0       	rcall	.+0      	; 0x349c <GPIO_writePin+0x6>
    349c:	00 d0       	rcall	.+0      	; 0x349e <GPIO_writePin+0x8>
    349e:	0f 92       	push	r0
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	6a 83       	std	Y+2, r22	; 0x02
    34a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	88 30       	cpi	r24, 0x08	; 8
    34ae:	08 f0       	brcs	.+2      	; 0x34b2 <GPIO_writePin+0x1c>
    34b0:	d5 c0       	rjmp	.+426    	; 0x365c <GPIO_writePin+0x1c6>
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	84 30       	cpi	r24, 0x04	; 4
    34b6:	08 f0       	brcs	.+2      	; 0x34ba <GPIO_writePin+0x24>
    34b8:	d1 c0       	rjmp	.+418    	; 0x365c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	3d 83       	std	Y+5, r19	; 0x05
    34c2:	2c 83       	std	Y+4, r18	; 0x04
    34c4:	8c 81       	ldd	r24, Y+4	; 0x04
    34c6:	9d 81       	ldd	r25, Y+5	; 0x05
    34c8:	81 30       	cpi	r24, 0x01	; 1
    34ca:	91 05       	cpc	r25, r1
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <GPIO_writePin+0x3a>
    34ce:	43 c0       	rjmp	.+134    	; 0x3556 <GPIO_writePin+0xc0>
    34d0:	2c 81       	ldd	r18, Y+4	; 0x04
    34d2:	3d 81       	ldd	r19, Y+5	; 0x05
    34d4:	22 30       	cpi	r18, 0x02	; 2
    34d6:	31 05       	cpc	r19, r1
    34d8:	2c f4       	brge	.+10     	; 0x34e4 <GPIO_writePin+0x4e>
    34da:	8c 81       	ldd	r24, Y+4	; 0x04
    34dc:	9d 81       	ldd	r25, Y+5	; 0x05
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	71 f0       	breq	.+28     	; 0x34fe <GPIO_writePin+0x68>
    34e2:	bc c0       	rjmp	.+376    	; 0x365c <GPIO_writePin+0x1c6>
    34e4:	2c 81       	ldd	r18, Y+4	; 0x04
    34e6:	3d 81       	ldd	r19, Y+5	; 0x05
    34e8:	22 30       	cpi	r18, 0x02	; 2
    34ea:	31 05       	cpc	r19, r1
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <GPIO_writePin+0x5a>
    34ee:	5f c0       	rjmp	.+190    	; 0x35ae <GPIO_writePin+0x118>
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
    34f2:	9d 81       	ldd	r25, Y+5	; 0x05
    34f4:	83 30       	cpi	r24, 0x03	; 3
    34f6:	91 05       	cpc	r25, r1
    34f8:	09 f4       	brne	.+2      	; 0x34fc <GPIO_writePin+0x66>
    34fa:	85 c0       	rjmp	.+266    	; 0x3606 <GPIO_writePin+0x170>
    34fc:	af c0       	rjmp	.+350    	; 0x365c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	81 30       	cpi	r24, 0x01	; 1
    3502:	a1 f4       	brne	.+40     	; 0x352c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    3504:	ab e3       	ldi	r26, 0x3B	; 59
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	eb e3       	ldi	r30, 0x3B	; 59
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	80 81       	ld	r24, Z
    350e:	48 2f       	mov	r20, r24
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	02 2e       	mov	r0, r18
    351c:	02 c0       	rjmp	.+4      	; 0x3522 <GPIO_writePin+0x8c>
    351e:	88 0f       	add	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	0a 94       	dec	r0
    3524:	e2 f7       	brpl	.-8      	; 0x351e <GPIO_writePin+0x88>
    3526:	84 2b       	or	r24, r20
    3528:	8c 93       	st	X, r24
    352a:	98 c0       	rjmp	.+304    	; 0x365c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    352c:	ab e3       	ldi	r26, 0x3B	; 59
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	eb e3       	ldi	r30, 0x3B	; 59
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	48 2f       	mov	r20, r24
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	28 2f       	mov	r18, r24
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	02 2e       	mov	r0, r18
    3544:	02 c0       	rjmp	.+4      	; 0x354a <GPIO_writePin+0xb4>
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	0a 94       	dec	r0
    354c:	e2 f7       	brpl	.-8      	; 0x3546 <GPIO_writePin+0xb0>
    354e:	80 95       	com	r24
    3550:	84 23       	and	r24, r20
    3552:	8c 93       	st	X, r24
    3554:	83 c0       	rjmp	.+262    	; 0x365c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	a1 f4       	brne	.+40     	; 0x3584 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    355c:	a8 e3       	ldi	r26, 0x38	; 56
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	e8 e3       	ldi	r30, 0x38	; 56
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	48 2f       	mov	r20, r24
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	02 2e       	mov	r0, r18
    3574:	02 c0       	rjmp	.+4      	; 0x357a <GPIO_writePin+0xe4>
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	0a 94       	dec	r0
    357c:	e2 f7       	brpl	.-8      	; 0x3576 <GPIO_writePin+0xe0>
    357e:	84 2b       	or	r24, r20
    3580:	8c 93       	st	X, r24
    3582:	6c c0       	rjmp	.+216    	; 0x365c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    3584:	a8 e3       	ldi	r26, 0x38	; 56
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e8 e3       	ldi	r30, 0x38	; 56
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	48 2f       	mov	r20, r24
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	02 2e       	mov	r0, r18
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <GPIO_writePin+0x10c>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	0a 94       	dec	r0
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <GPIO_writePin+0x108>
    35a6:	80 95       	com	r24
    35a8:	84 23       	and	r24, r20
    35aa:	8c 93       	st	X, r24
    35ac:	57 c0       	rjmp	.+174    	; 0x365c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	81 30       	cpi	r24, 0x01	; 1
    35b2:	a1 f4       	brne	.+40     	; 0x35dc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    35b4:	a5 e3       	ldi	r26, 0x35	; 53
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	e5 e3       	ldi	r30, 0x35	; 53
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	48 2f       	mov	r20, r24
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	02 2e       	mov	r0, r18
    35cc:	02 c0       	rjmp	.+4      	; 0x35d2 <GPIO_writePin+0x13c>
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	0a 94       	dec	r0
    35d4:	e2 f7       	brpl	.-8      	; 0x35ce <GPIO_writePin+0x138>
    35d6:	84 2b       	or	r24, r20
    35d8:	8c 93       	st	X, r24
    35da:	40 c0       	rjmp	.+128    	; 0x365c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    35dc:	a5 e3       	ldi	r26, 0x35	; 53
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e5 e3       	ldi	r30, 0x35	; 53
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	48 2f       	mov	r20, r24
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	02 2e       	mov	r0, r18
    35f4:	02 c0       	rjmp	.+4      	; 0x35fa <GPIO_writePin+0x164>
    35f6:	88 0f       	add	r24, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	0a 94       	dec	r0
    35fc:	e2 f7       	brpl	.-8      	; 0x35f6 <GPIO_writePin+0x160>
    35fe:	80 95       	com	r24
    3600:	84 23       	and	r24, r20
    3602:	8c 93       	st	X, r24
    3604:	2b c0       	rjmp	.+86     	; 0x365c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	81 30       	cpi	r24, 0x01	; 1
    360a:	a1 f4       	brne	.+40     	; 0x3634 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    360c:	a2 e3       	ldi	r26, 0x32	; 50
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	e2 e3       	ldi	r30, 0x32	; 50
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	48 2f       	mov	r20, r24
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	02 2e       	mov	r0, r18
    3624:	02 c0       	rjmp	.+4      	; 0x362a <GPIO_writePin+0x194>
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	0a 94       	dec	r0
    362c:	e2 f7       	brpl	.-8      	; 0x3626 <GPIO_writePin+0x190>
    362e:	84 2b       	or	r24, r20
    3630:	8c 93       	st	X, r24
    3632:	14 c0       	rjmp	.+40     	; 0x365c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    3634:	a2 e3       	ldi	r26, 0x32	; 50
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	e2 e3       	ldi	r30, 0x32	; 50
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	48 2f       	mov	r20, r24
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	02 2e       	mov	r0, r18
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <GPIO_writePin+0x1bc>
    364e:	88 0f       	add	r24, r24
    3650:	99 1f       	adc	r25, r25
    3652:	0a 94       	dec	r0
    3654:	e2 f7       	brpl	.-8      	; 0x364e <GPIO_writePin+0x1b8>
    3656:	80 95       	com	r24
    3658:	84 23       	and	r24, r20
    365a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <GPIO_readPin+0x6>
    3672:	00 d0       	rcall	.+0      	; 0x3674 <GPIO_readPin+0x8>
    3674:	0f 92       	push	r0
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	8a 83       	std	Y+2, r24	; 0x02
    367c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    367e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	88 30       	cpi	r24, 0x08	; 8
    3684:	08 f0       	brcs	.+2      	; 0x3688 <GPIO_readPin+0x1c>
    3686:	84 c0       	rjmp	.+264    	; 0x3790 <GPIO_readPin+0x124>
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	84 30       	cpi	r24, 0x04	; 4
    368c:	08 f0       	brcs	.+2      	; 0x3690 <GPIO_readPin+0x24>
    368e:	80 c0       	rjmp	.+256    	; 0x3790 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	3d 83       	std	Y+5, r19	; 0x05
    3698:	2c 83       	std	Y+4, r18	; 0x04
    369a:	4c 81       	ldd	r20, Y+4	; 0x04
    369c:	5d 81       	ldd	r21, Y+5	; 0x05
    369e:	41 30       	cpi	r20, 0x01	; 1
    36a0:	51 05       	cpc	r21, r1
    36a2:	79 f1       	breq	.+94     	; 0x3702 <GPIO_readPin+0x96>
    36a4:	8c 81       	ldd	r24, Y+4	; 0x04
    36a6:	9d 81       	ldd	r25, Y+5	; 0x05
    36a8:	82 30       	cpi	r24, 0x02	; 2
    36aa:	91 05       	cpc	r25, r1
    36ac:	34 f4       	brge	.+12     	; 0x36ba <GPIO_readPin+0x4e>
    36ae:	2c 81       	ldd	r18, Y+4	; 0x04
    36b0:	3d 81       	ldd	r19, Y+5	; 0x05
    36b2:	21 15       	cp	r18, r1
    36b4:	31 05       	cpc	r19, r1
    36b6:	69 f0       	breq	.+26     	; 0x36d2 <GPIO_readPin+0x66>
    36b8:	6b c0       	rjmp	.+214    	; 0x3790 <GPIO_readPin+0x124>
    36ba:	4c 81       	ldd	r20, Y+4	; 0x04
    36bc:	5d 81       	ldd	r21, Y+5	; 0x05
    36be:	42 30       	cpi	r20, 0x02	; 2
    36c0:	51 05       	cpc	r21, r1
    36c2:	b9 f1       	breq	.+110    	; 0x3732 <GPIO_readPin+0xc6>
    36c4:	8c 81       	ldd	r24, Y+4	; 0x04
    36c6:	9d 81       	ldd	r25, Y+5	; 0x05
    36c8:	83 30       	cpi	r24, 0x03	; 3
    36ca:	91 05       	cpc	r25, r1
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <GPIO_readPin+0x64>
    36ce:	49 c0       	rjmp	.+146    	; 0x3762 <GPIO_readPin+0xf6>
    36d0:	5f c0       	rjmp	.+190    	; 0x3790 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    36d2:	e9 e3       	ldi	r30, 0x39	; 57
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	28 2f       	mov	r18, r24
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	8b 81       	ldd	r24, Y+3	; 0x03
    36de:	88 2f       	mov	r24, r24
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	a9 01       	movw	r20, r18
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <GPIO_readPin+0x7e>
    36e6:	55 95       	asr	r21
    36e8:	47 95       	ror	r20
    36ea:	8a 95       	dec	r24
    36ec:	e2 f7       	brpl	.-8      	; 0x36e6 <GPIO_readPin+0x7a>
    36ee:	ca 01       	movw	r24, r20
    36f0:	81 70       	andi	r24, 0x01	; 1
    36f2:	90 70       	andi	r25, 0x00	; 0
    36f4:	88 23       	and	r24, r24
    36f6:	19 f0       	breq	.+6      	; 0x36fe <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	89 83       	std	Y+1, r24	; 0x01
    36fc:	49 c0       	rjmp	.+146    	; 0x3790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    36fe:	19 82       	std	Y+1, r1	; 0x01
    3700:	47 c0       	rjmp	.+142    	; 0x3790 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    3702:	e6 e3       	ldi	r30, 0x36	; 54
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	a9 01       	movw	r20, r18
    3714:	02 c0       	rjmp	.+4      	; 0x371a <GPIO_readPin+0xae>
    3716:	55 95       	asr	r21
    3718:	47 95       	ror	r20
    371a:	8a 95       	dec	r24
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <GPIO_readPin+0xaa>
    371e:	ca 01       	movw	r24, r20
    3720:	81 70       	andi	r24, 0x01	; 1
    3722:	90 70       	andi	r25, 0x00	; 0
    3724:	88 23       	and	r24, r24
    3726:	19 f0       	breq	.+6      	; 0x372e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	31 c0       	rjmp	.+98     	; 0x3790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    372e:	19 82       	std	Y+1, r1	; 0x01
    3730:	2f c0       	rjmp	.+94     	; 0x3790 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    3732:	e3 e3       	ldi	r30, 0x33	; 51
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	28 2f       	mov	r18, r24
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	8b 81       	ldd	r24, Y+3	; 0x03
    373e:	88 2f       	mov	r24, r24
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	a9 01       	movw	r20, r18
    3744:	02 c0       	rjmp	.+4      	; 0x374a <GPIO_readPin+0xde>
    3746:	55 95       	asr	r21
    3748:	47 95       	ror	r20
    374a:	8a 95       	dec	r24
    374c:	e2 f7       	brpl	.-8      	; 0x3746 <GPIO_readPin+0xda>
    374e:	ca 01       	movw	r24, r20
    3750:	81 70       	andi	r24, 0x01	; 1
    3752:	90 70       	andi	r25, 0x00	; 0
    3754:	88 23       	and	r24, r24
    3756:	19 f0       	breq	.+6      	; 0x375e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	19 c0       	rjmp	.+50     	; 0x3790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    375e:	19 82       	std	Y+1, r1	; 0x01
    3760:	17 c0       	rjmp	.+46     	; 0x3790 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3762:	e0 e3       	ldi	r30, 0x30	; 48
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 81       	ld	r24, Z
    3768:	28 2f       	mov	r18, r24
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	a9 01       	movw	r20, r18
    3774:	02 c0       	rjmp	.+4      	; 0x377a <GPIO_readPin+0x10e>
    3776:	55 95       	asr	r21
    3778:	47 95       	ror	r20
    377a:	8a 95       	dec	r24
    377c:	e2 f7       	brpl	.-8      	; 0x3776 <GPIO_readPin+0x10a>
    377e:	ca 01       	movw	r24, r20
    3780:	81 70       	andi	r24, 0x01	; 1
    3782:	90 70       	andi	r25, 0x00	; 0
    3784:	88 23       	and	r24, r24
    3786:	19 f0       	breq	.+6      	; 0x378e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    378e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    3790:	89 81       	ldd	r24, Y+1	; 0x01
}
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <GPIO_setupPortDirection+0x6>
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <GPIO_setupPortDirection+0x8>
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	84 30       	cpi	r24, 0x04	; 4
    37b6:	90 f5       	brcc	.+100    	; 0x381c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	28 2f       	mov	r18, r24
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	3c 83       	std	Y+4, r19	; 0x04
    37c0:	2b 83       	std	Y+3, r18	; 0x03
    37c2:	8b 81       	ldd	r24, Y+3	; 0x03
    37c4:	9c 81       	ldd	r25, Y+4	; 0x04
    37c6:	81 30       	cpi	r24, 0x01	; 1
    37c8:	91 05       	cpc	r25, r1
    37ca:	d1 f0       	breq	.+52     	; 0x3800 <GPIO_setupPortDirection+0x5e>
    37cc:	2b 81       	ldd	r18, Y+3	; 0x03
    37ce:	3c 81       	ldd	r19, Y+4	; 0x04
    37d0:	22 30       	cpi	r18, 0x02	; 2
    37d2:	31 05       	cpc	r19, r1
    37d4:	2c f4       	brge	.+10     	; 0x37e0 <GPIO_setupPortDirection+0x3e>
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	9c 81       	ldd	r25, Y+4	; 0x04
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	61 f0       	breq	.+24     	; 0x37f6 <GPIO_setupPortDirection+0x54>
    37de:	1e c0       	rjmp	.+60     	; 0x381c <GPIO_setupPortDirection+0x7a>
    37e0:	2b 81       	ldd	r18, Y+3	; 0x03
    37e2:	3c 81       	ldd	r19, Y+4	; 0x04
    37e4:	22 30       	cpi	r18, 0x02	; 2
    37e6:	31 05       	cpc	r19, r1
    37e8:	81 f0       	breq	.+32     	; 0x380a <GPIO_setupPortDirection+0x68>
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	9c 81       	ldd	r25, Y+4	; 0x04
    37ee:	83 30       	cpi	r24, 0x03	; 3
    37f0:	91 05       	cpc	r25, r1
    37f2:	81 f0       	breq	.+32     	; 0x3814 <GPIO_setupPortDirection+0x72>
    37f4:	13 c0       	rjmp	.+38     	; 0x381c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    37f6:	ea e3       	ldi	r30, 0x3A	; 58
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	80 83       	st	Z, r24
    37fe:	0e c0       	rjmp	.+28     	; 0x381c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    3800:	e7 e3       	ldi	r30, 0x37	; 55
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	8a 81       	ldd	r24, Y+2	; 0x02
    3806:	80 83       	st	Z, r24
    3808:	09 c0       	rjmp	.+18     	; 0x381c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    380a:	e4 e3       	ldi	r30, 0x34	; 52
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	80 83       	st	Z, r24
    3812:	04 c0       	rjmp	.+8      	; 0x381c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    3814:	e1 e3       	ldi	r30, 0x31	; 49
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	8a 81       	ldd	r24, Y+2	; 0x02
    381a:	80 83       	st	Z, r24
			break;
		}
	}
}
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	00 d0       	rcall	.+0      	; 0x3830 <GPIO_writePort+0x6>
    3830:	00 d0       	rcall	.+0      	; 0x3832 <GPIO_writePort+0x8>
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	89 83       	std	Y+1, r24	; 0x01
    3838:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	84 30       	cpi	r24, 0x04	; 4
    383e:	90 f5       	brcc	.+100    	; 0x38a4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	28 2f       	mov	r18, r24
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	3c 83       	std	Y+4, r19	; 0x04
    3848:	2b 83       	std	Y+3, r18	; 0x03
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	9c 81       	ldd	r25, Y+4	; 0x04
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	91 05       	cpc	r25, r1
    3852:	d1 f0       	breq	.+52     	; 0x3888 <GPIO_writePort+0x5e>
    3854:	2b 81       	ldd	r18, Y+3	; 0x03
    3856:	3c 81       	ldd	r19, Y+4	; 0x04
    3858:	22 30       	cpi	r18, 0x02	; 2
    385a:	31 05       	cpc	r19, r1
    385c:	2c f4       	brge	.+10     	; 0x3868 <GPIO_writePort+0x3e>
    385e:	8b 81       	ldd	r24, Y+3	; 0x03
    3860:	9c 81       	ldd	r25, Y+4	; 0x04
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	61 f0       	breq	.+24     	; 0x387e <GPIO_writePort+0x54>
    3866:	1e c0       	rjmp	.+60     	; 0x38a4 <GPIO_writePort+0x7a>
    3868:	2b 81       	ldd	r18, Y+3	; 0x03
    386a:	3c 81       	ldd	r19, Y+4	; 0x04
    386c:	22 30       	cpi	r18, 0x02	; 2
    386e:	31 05       	cpc	r19, r1
    3870:	81 f0       	breq	.+32     	; 0x3892 <GPIO_writePort+0x68>
    3872:	8b 81       	ldd	r24, Y+3	; 0x03
    3874:	9c 81       	ldd	r25, Y+4	; 0x04
    3876:	83 30       	cpi	r24, 0x03	; 3
    3878:	91 05       	cpc	r25, r1
    387a:	81 f0       	breq	.+32     	; 0x389c <GPIO_writePort+0x72>
    387c:	13 c0       	rjmp	.+38     	; 0x38a4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    387e:	eb e3       	ldi	r30, 0x3B	; 59
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	80 83       	st	Z, r24
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3888:	e8 e3       	ldi	r30, 0x38	; 56
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	8a 81       	ldd	r24, Y+2	; 0x02
    388e:	80 83       	st	Z, r24
    3890:	09 c0       	rjmp	.+18     	; 0x38a4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    3892:	e5 e3       	ldi	r30, 0x35	; 53
    3894:	f0 e0       	ldi	r31, 0x00	; 0
    3896:	8a 81       	ldd	r24, Y+2	; 0x02
    3898:	80 83       	st	Z, r24
    389a:	04 c0       	rjmp	.+8      	; 0x38a4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    389c:	e2 e3       	ldi	r30, 0x32	; 50
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	08 95       	ret

000038b2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    38b2:	df 93       	push	r29
    38b4:	cf 93       	push	r28
    38b6:	00 d0       	rcall	.+0      	; 0x38b8 <GPIO_readPort+0x6>
    38b8:	00 d0       	rcall	.+0      	; 0x38ba <GPIO_readPort+0x8>
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    38be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    38c0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	84 30       	cpi	r24, 0x04	; 4
    38c6:	90 f5       	brcc	.+100    	; 0x392c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	28 2f       	mov	r18, r24
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	3c 83       	std	Y+4, r19	; 0x04
    38d0:	2b 83       	std	Y+3, r18	; 0x03
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	9c 81       	ldd	r25, Y+4	; 0x04
    38d6:	81 30       	cpi	r24, 0x01	; 1
    38d8:	91 05       	cpc	r25, r1
    38da:	d1 f0       	breq	.+52     	; 0x3910 <GPIO_readPort+0x5e>
    38dc:	2b 81       	ldd	r18, Y+3	; 0x03
    38de:	3c 81       	ldd	r19, Y+4	; 0x04
    38e0:	22 30       	cpi	r18, 0x02	; 2
    38e2:	31 05       	cpc	r19, r1
    38e4:	2c f4       	brge	.+10     	; 0x38f0 <GPIO_readPort+0x3e>
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	61 f0       	breq	.+24     	; 0x3906 <GPIO_readPort+0x54>
    38ee:	1e c0       	rjmp	.+60     	; 0x392c <GPIO_readPort+0x7a>
    38f0:	2b 81       	ldd	r18, Y+3	; 0x03
    38f2:	3c 81       	ldd	r19, Y+4	; 0x04
    38f4:	22 30       	cpi	r18, 0x02	; 2
    38f6:	31 05       	cpc	r19, r1
    38f8:	81 f0       	breq	.+32     	; 0x391a <GPIO_readPort+0x68>
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	9c 81       	ldd	r25, Y+4	; 0x04
    38fe:	83 30       	cpi	r24, 0x03	; 3
    3900:	91 05       	cpc	r25, r1
    3902:	81 f0       	breq	.+32     	; 0x3924 <GPIO_readPort+0x72>
    3904:	13 c0       	rjmp	.+38     	; 0x392c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    3906:	e9 e3       	ldi	r30, 0x39	; 57
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	89 83       	std	Y+1, r24	; 0x01
    390e:	0e c0       	rjmp	.+28     	; 0x392c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    3910:	e6 e3       	ldi	r30, 0x36	; 54
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	09 c0       	rjmp	.+18     	; 0x392c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    391a:	e3 e3       	ldi	r30, 0x33	; 51
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	89 83       	std	Y+1, r24	; 0x01
    3922:	04 c0       	rjmp	.+8      	; 0x392c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3924:	e0 e3       	ldi	r30, 0x30	; 48
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    392c:	89 81       	ldd	r24, Y+1	; 0x01
}
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    3944:	60 97       	sbiw	r28, 0x10	; 16
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	60 e0       	ldi	r22, 0x00	; 0
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	61 e0       	ldi	r22, 0x01	; 1
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	62 e0       	ldi	r22, 0x02	; 2
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	63 e0       	ldi	r22, 0x03	; 3
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	64 e0       	ldi	r22, 0x04	; 4
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	65 e0       	ldi	r22, 0x05	; 5
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	66 e0       	ldi	r22, 0x06	; 6
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	67 e0       	ldi	r22, 0x07	; 7
    399a:	40 e0       	ldi	r20, 0x00	; 0
    399c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    39a0:	1f 86       	std	Y+15, r1	; 0x0f
    39a2:	ab c0       	rjmp	.+342    	; 0x3afa <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	6f 85       	ldd	r22, Y+15	; 0x0f
    39a8:	41 e0       	ldi	r20, 0x01	; 1
    39aa:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    39b2:	40 e0       	ldi	r20, 0x00	; 0
    39b4:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    39b8:	18 8a       	std	Y+16, r1	; 0x10
    39ba:	22 c0       	rjmp	.+68     	; 0x3a00 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    39bc:	88 89       	ldd	r24, Y+16	; 0x10
    39be:	98 2f       	mov	r25, r24
    39c0:	9c 5f       	subi	r25, 0xFC	; 252
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	69 2f       	mov	r22, r25
    39c6:	0e 94 36 1b 	call	0x366c	; 0x366c <GPIO_readPin>
    39ca:	88 23       	and	r24, r24
    39cc:	b1 f4       	brne	.+44     	; 0x39fa <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    39ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d0:	88 2f       	mov	r24, r24
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	98 2f       	mov	r25, r24
    39de:	88 89       	ldd	r24, Y+16	; 0x10
    39e0:	89 0f       	add	r24, r25
    39e2:	8f 5f       	subi	r24, 0xFF	; 255
    39e4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    39e8:	60 96       	adiw	r28, 0x10	; 16
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    39fa:	88 89       	ldd	r24, Y+16	; 0x10
    39fc:	8f 5f       	subi	r24, 0xFF	; 255
    39fe:	88 8b       	std	Y+16, r24	; 0x10
    3a00:	88 89       	ldd	r24, Y+16	; 0x10
    3a02:	84 30       	cpi	r24, 0x04	; 4
    3a04:	d8 f2       	brcs	.-74     	; 0x39bc <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	a0 ea       	ldi	r26, 0xA0	; 160
    3a16:	b0 e4       	ldi	r27, 0x40	; 64
    3a18:	8b 87       	std	Y+11, r24	; 0x0b
    3a1a:	9c 87       	std	Y+12, r25	; 0x0c
    3a1c:	ad 87       	std	Y+13, r26	; 0x0d
    3a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	4a ef       	ldi	r20, 0xFA	; 250
    3a2e:	54 e4       	ldi	r21, 0x44	; 68
    3a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	8f 83       	std	Y+7, r24	; 0x07
    3a3a:	98 87       	std	Y+8, r25	; 0x08
    3a3c:	a9 87       	std	Y+9, r26	; 0x09
    3a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a40:	6f 81       	ldd	r22, Y+7	; 0x07
    3a42:	78 85       	ldd	r23, Y+8	; 0x08
    3a44:	89 85       	ldd	r24, Y+9	; 0x09
    3a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	40 e8       	ldi	r20, 0x80	; 128
    3a4e:	5f e3       	ldi	r21, 0x3F	; 63
    3a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a54:	88 23       	and	r24, r24
    3a56:	2c f4       	brge	.+10     	; 0x3a62 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	3f c0       	rjmp	.+126    	; 0x3ae0 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    3a62:	6f 81       	ldd	r22, Y+7	; 0x07
    3a64:	78 85       	ldd	r23, Y+8	; 0x08
    3a66:	89 85       	ldd	r24, Y+9	; 0x09
    3a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	3f ef       	ldi	r19, 0xFF	; 255
    3a6e:	4f e7       	ldi	r20, 0x7F	; 127
    3a70:	57 e4       	ldi	r21, 0x47	; 71
    3a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a76:	18 16       	cp	r1, r24
    3a78:	4c f5       	brge	.+82     	; 0x3acc <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e2       	ldi	r20, 0x20	; 32
    3a88:	51 e4       	ldi	r21, 0x41	; 65
    3a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	9e 83       	std	Y+6, r25	; 0x06
    3aa0:	8d 83       	std	Y+5, r24	; 0x05
    3aa2:	0f c0       	rjmp	.+30     	; 0x3ac2 <KEYPAD_getPressedKey+0x186>
    3aa4:	88 ec       	ldi	r24, 0xC8	; 200
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	9c 83       	std	Y+4, r25	; 0x04
    3aaa:	8b 83       	std	Y+3, r24	; 0x03
    3aac:	8b 81       	ldd	r24, Y+3	; 0x03
    3aae:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <KEYPAD_getPressedKey+0x174>
    3ab4:	9c 83       	std	Y+4, r25	; 0x04
    3ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	9e 81       	ldd	r25, Y+6	; 0x06
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	9e 83       	std	Y+6, r25	; 0x06
    3ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	00 97       	sbiw	r24, 0x00	; 0
    3ac8:	69 f7       	brne	.-38     	; 0x3aa4 <KEYPAD_getPressedKey+0x168>
    3aca:	14 c0       	rjmp	.+40     	; 0x3af4 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3acc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ace:	78 85       	ldd	r23, Y+8	; 0x08
    3ad0:	89 85       	ldd	r24, Y+9	; 0x09
    3ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	9e 83       	std	Y+6, r25	; 0x06
    3ade:	8d 83       	std	Y+5, r24	; 0x05
    3ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae4:	9a 83       	std	Y+2, r25	; 0x02
    3ae6:	89 83       	std	Y+1, r24	; 0x01
    3ae8:	89 81       	ldd	r24, Y+1	; 0x01
    3aea:	9a 81       	ldd	r25, Y+2	; 0x02
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	f1 f7       	brne	.-4      	; 0x3aec <KEYPAD_getPressedKey+0x1b0>
    3af0:	9a 83       	std	Y+2, r25	; 0x02
    3af2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af6:	8f 5f       	subi	r24, 0xFF	; 255
    3af8:	8f 87       	std	Y+15, r24	; 0x0f
    3afa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3afc:	84 30       	cpi	r24, 0x04	; 4
    3afe:	08 f4       	brcc	.+2      	; 0x3b02 <KEYPAD_getPressedKey+0x1c6>
    3b00:	51 cf       	rjmp	.-350    	; 0x39a4 <KEYPAD_getPressedKey+0x68>
    3b02:	4e cf       	rjmp	.-356    	; 0x39a0 <KEYPAD_getPressedKey+0x64>

00003b04 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <KEYPAD_4x4_adjustKeyNumber+0x6>
    3b0a:	00 d0       	rcall	.+0      	; 0x3b0c <KEYPAD_4x4_adjustKeyNumber+0x8>
    3b0c:	cd b7       	in	r28, 0x3d	; 61
    3b0e:	de b7       	in	r29, 0x3e	; 62
    3b10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3b12:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3b14:	8a 81       	ldd	r24, Y+2	; 0x02
    3b16:	28 2f       	mov	r18, r24
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	3c 83       	std	Y+4, r19	; 0x04
    3b1c:	2b 83       	std	Y+3, r18	; 0x03
    3b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b20:	9c 81       	ldd	r25, Y+4	; 0x04
    3b22:	88 30       	cpi	r24, 0x08	; 8
    3b24:	91 05       	cpc	r25, r1
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <KEYPAD_4x4_adjustKeyNumber+0x26>
    3b28:	70 c0       	rjmp	.+224    	; 0x3c0a <KEYPAD_4x4_adjustKeyNumber+0x106>
    3b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b2e:	29 30       	cpi	r18, 0x09	; 9
    3b30:	31 05       	cpc	r19, r1
    3b32:	5c f5       	brge	.+86     	; 0x3b8a <KEYPAD_4x4_adjustKeyNumber+0x86>
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	9c 81       	ldd	r25, Y+4	; 0x04
    3b38:	84 30       	cpi	r24, 0x04	; 4
    3b3a:	91 05       	cpc	r25, r1
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3b3e:	59 c0       	rjmp	.+178    	; 0x3bf2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3b40:	2b 81       	ldd	r18, Y+3	; 0x03
    3b42:	3c 81       	ldd	r19, Y+4	; 0x04
    3b44:	25 30       	cpi	r18, 0x05	; 5
    3b46:	31 05       	cpc	r19, r1
    3b48:	9c f4       	brge	.+38     	; 0x3b70 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4e:	82 30       	cpi	r24, 0x02	; 2
    3b50:	91 05       	cpc	r25, r1
    3b52:	09 f4       	brne	.+2      	; 0x3b56 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3b54:	48 c0       	rjmp	.+144    	; 0x3be6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3b56:	2b 81       	ldd	r18, Y+3	; 0x03
    3b58:	3c 81       	ldd	r19, Y+4	; 0x04
    3b5a:	23 30       	cpi	r18, 0x03	; 3
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	0c f0       	brlt	.+2      	; 0x3b62 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3b60:	45 c0       	rjmp	.+138    	; 0x3bec <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3b62:	8b 81       	ldd	r24, Y+3	; 0x03
    3b64:	9c 81       	ldd	r25, Y+4	; 0x04
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	91 05       	cpc	r25, r1
    3b6a:	09 f4       	brne	.+2      	; 0x3b6e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3b6c:	39 c0       	rjmp	.+114    	; 0x3be0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3b6e:	67 c0       	rjmp	.+206    	; 0x3c3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3b70:	2b 81       	ldd	r18, Y+3	; 0x03
    3b72:	3c 81       	ldd	r19, Y+4	; 0x04
    3b74:	26 30       	cpi	r18, 0x06	; 6
    3b76:	31 05       	cpc	r19, r1
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <KEYPAD_4x4_adjustKeyNumber+0x78>
    3b7a:	41 c0       	rjmp	.+130    	; 0x3bfe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b80:	87 30       	cpi	r24, 0x07	; 7
    3b82:	91 05       	cpc	r25, r1
    3b84:	0c f0       	brlt	.+2      	; 0x3b88 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3b86:	3e c0       	rjmp	.+124    	; 0x3c04 <KEYPAD_4x4_adjustKeyNumber+0x100>
    3b88:	37 c0       	rjmp	.+110    	; 0x3bf8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b8e:	2c 30       	cpi	r18, 0x0C	; 12
    3b90:	31 05       	cpc	r19, r1
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3b94:	46 c0       	rjmp	.+140    	; 0x3c22 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3b96:	8b 81       	ldd	r24, Y+3	; 0x03
    3b98:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9a:	8d 30       	cpi	r24, 0x0D	; 13
    3b9c:	91 05       	cpc	r25, r1
    3b9e:	5c f4       	brge	.+22     	; 0x3bb6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ba4:	2a 30       	cpi	r18, 0x0A	; 10
    3ba6:	31 05       	cpc	r19, r1
    3ba8:	b1 f1       	breq	.+108    	; 0x3c16 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	9c 81       	ldd	r25, Y+4	; 0x04
    3bae:	8b 30       	cpi	r24, 0x0B	; 11
    3bb0:	91 05       	cpc	r25, r1
    3bb2:	a4 f5       	brge	.+104    	; 0x3c1c <KEYPAD_4x4_adjustKeyNumber+0x118>
    3bb4:	2d c0       	rjmp	.+90     	; 0x3c10 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    3bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    3bba:	2e 30       	cpi	r18, 0x0E	; 14
    3bbc:	31 05       	cpc	r19, r1
    3bbe:	b9 f1       	breq	.+110    	; 0x3c2e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc4:	8e 30       	cpi	r24, 0x0E	; 14
    3bc6:	91 05       	cpc	r25, r1
    3bc8:	7c f1       	brlt	.+94     	; 0x3c28 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3bca:	2b 81       	ldd	r18, Y+3	; 0x03
    3bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    3bce:	2f 30       	cpi	r18, 0x0F	; 15
    3bd0:	31 05       	cpc	r19, r1
    3bd2:	79 f1       	breq	.+94     	; 0x3c32 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd8:	80 31       	cpi	r24, 0x10	; 16
    3bda:	91 05       	cpc	r25, r1
    3bdc:	69 f1       	breq	.+90     	; 0x3c38 <KEYPAD_4x4_adjustKeyNumber+0x134>
    3bde:	2f c0       	rjmp	.+94     	; 0x3c3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3be0:	87 e0       	ldi	r24, 0x07	; 7
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	2e c0       	rjmp	.+92     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3be6:	88 e0       	ldi	r24, 0x08	; 8
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	2b c0       	rjmp	.+86     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3bec:	89 e0       	ldi	r24, 0x09	; 9
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	28 c0       	rjmp	.+80     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    3bf2:	8f e2       	ldi	r24, 0x2F	; 47
    3bf4:	89 83       	std	Y+1, r24	; 0x01
    3bf6:	25 c0       	rjmp	.+74     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3bf8:	84 e0       	ldi	r24, 0x04	; 4
    3bfa:	89 83       	std	Y+1, r24	; 0x01
    3bfc:	22 c0       	rjmp	.+68     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3bfe:	85 e0       	ldi	r24, 0x05	; 5
    3c00:	89 83       	std	Y+1, r24	; 0x01
    3c02:	1f c0       	rjmp	.+62     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3c04:	86 e0       	ldi	r24, 0x06	; 6
    3c06:	89 83       	std	Y+1, r24	; 0x01
    3c08:	1c c0       	rjmp	.+56     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3c0a:	8a e2       	ldi	r24, 0x2A	; 42
    3c0c:	89 83       	std	Y+1, r24	; 0x01
    3c0e:	19 c0       	rjmp	.+50     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	89 83       	std	Y+1, r24	; 0x01
    3c14:	16 c0       	rjmp	.+44     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3c16:	82 e0       	ldi	r24, 0x02	; 2
    3c18:	89 83       	std	Y+1, r24	; 0x01
    3c1a:	13 c0       	rjmp	.+38     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3c1c:	83 e0       	ldi	r24, 0x03	; 3
    3c1e:	89 83       	std	Y+1, r24	; 0x01
    3c20:	10 c0       	rjmp	.+32     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3c22:	8d e2       	ldi	r24, 0x2D	; 45
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	0d c0       	rjmp	.+26     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3c28:	8d e0       	ldi	r24, 0x0D	; 13
    3c2a:	89 83       	std	Y+1, r24	; 0x01
    3c2c:	0a c0       	rjmp	.+20     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    3c2e:	19 82       	std	Y+1, r1	; 0x01
    3c30:	08 c0       	rjmp	.+16     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3c32:	8d e3       	ldi	r24, 0x3D	; 61
    3c34:	89 83       	std	Y+1, r24	; 0x01
    3c36:	05 c0       	rjmp	.+10     	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3c38:	8b e2       	ldi	r24, 0x2B	; 43
    3c3a:	89 83       	std	Y+1, r24	; 0x01
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c40:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	cf 91       	pop	r28
    3c4e:	df 91       	pop	r29
    3c50:	08 95       	ret

00003c52 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	2e 97       	sbiw	r28, 0x0e	; 14
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3c66:	83 e0       	ldi	r24, 0x03	; 3
    3c68:	62 e0       	ldi	r22, 0x02	; 2
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3c70:	83 e0       	ldi	r24, 0x03	; 3
    3c72:	63 e0       	ldi	r22, 0x03	; 3
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 60 19 	call	0x32c0	; 0x32c0 <GPIO_setupPinDirection>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a0 ea       	ldi	r26, 0xA0	; 160
    3c80:	b1 e4       	ldi	r27, 0x41	; 65
    3c82:	8b 87       	std	Y+11, r24	; 0x0b
    3c84:	9c 87       	std	Y+12, r25	; 0x0c
    3c86:	ad 87       	std	Y+13, r26	; 0x0d
    3c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	4a ef       	ldi	r20, 0xFA	; 250
    3c98:	54 e4       	ldi	r21, 0x44	; 68
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	8f 83       	std	Y+7, r24	; 0x07
    3ca4:	98 87       	std	Y+8, r25	; 0x08
    3ca6:	a9 87       	std	Y+9, r26	; 0x09
    3ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3caa:	6f 81       	ldd	r22, Y+7	; 0x07
    3cac:	78 85       	ldd	r23, Y+8	; 0x08
    3cae:	89 85       	ldd	r24, Y+9	; 0x09
    3cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	40 e8       	ldi	r20, 0x80	; 128
    3cb8:	5f e3       	ldi	r21, 0x3F	; 63
    3cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cbe:	88 23       	and	r24, r24
    3cc0:	2c f4       	brge	.+10     	; 0x3ccc <LCD_init+0x7a>
		__ticks = 1;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	9e 83       	std	Y+6, r25	; 0x06
    3cc8:	8d 83       	std	Y+5, r24	; 0x05
    3cca:	3f c0       	rjmp	.+126    	; 0x3d4a <LCD_init+0xf8>
	else if (__tmp > 65535)
    3ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cce:	78 85       	ldd	r23, Y+8	; 0x08
    3cd0:	89 85       	ldd	r24, Y+9	; 0x09
    3cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	3f ef       	ldi	r19, 0xFF	; 255
    3cd8:	4f e7       	ldi	r20, 0x7F	; 127
    3cda:	57 e4       	ldi	r21, 0x47	; 71
    3cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce0:	18 16       	cp	r1, r24
    3ce2:	4c f5       	brge	.+82     	; 0x3d36 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e2       	ldi	r20, 0x20	; 32
    3cf2:	51 e4       	ldi	r21, 0x41	; 65
    3cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	bc 01       	movw	r22, r24
    3cfe:	cd 01       	movw	r24, r26
    3d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
    3d0c:	0f c0       	rjmp	.+30     	; 0x3d2c <LCD_init+0xda>
    3d0e:	88 ec       	ldi	r24, 0xC8	; 200
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9c 83       	std	Y+4, r25	; 0x04
    3d14:	8b 83       	std	Y+3, r24	; 0x03
    3d16:	8b 81       	ldd	r24, Y+3	; 0x03
    3d18:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <LCD_init+0xc8>
    3d1e:	9c 83       	std	Y+4, r25	; 0x04
    3d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	9e 83       	std	Y+6, r25	; 0x06
    3d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	69 f7       	brne	.-38     	; 0x3d0e <LCD_init+0xbc>
    3d34:	14 c0       	rjmp	.+40     	; 0x3d5e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d36:	6f 81       	ldd	r22, Y+7	; 0x07
    3d38:	78 85       	ldd	r23, Y+8	; 0x08
    3d3a:	89 85       	ldd	r24, Y+9	; 0x09
    3d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	9e 83       	std	Y+6, r25	; 0x06
    3d48:	8d 83       	std	Y+5, r24	; 0x05
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	89 83       	std	Y+1, r24	; 0x01
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	9a 81       	ldd	r25, Y+2	; 0x02
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <LCD_init+0x104>
    3d5a:	9a 83       	std	Y+2, r25	; 0x02
    3d5c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	6f ef       	ldi	r22, 0xFF	; 255
    3d62:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3d66:	88 e3       	ldi	r24, 0x38	; 56
    3d68:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3d6c:	8c e0       	ldi	r24, 0x0C	; 12
    3d6e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_sendCommand>
}
    3d78:	2e 96       	adiw	r28, 0x0e	; 14
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	e9 97       	sbiw	r28, 0x39	; 57
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3da0:	83 e0       	ldi	r24, 0x03	; 3
    3da2:	62 e0       	ldi	r22, 0x02	; 2
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	a0 e8       	ldi	r26, 0x80	; 128
    3db0:	bf e3       	ldi	r27, 0x3F	; 63
    3db2:	8d ab       	std	Y+53, r24	; 0x35
    3db4:	9e ab       	std	Y+54, r25	; 0x36
    3db6:	af ab       	std	Y+55, r26	; 0x37
    3db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dba:	6d a9       	ldd	r22, Y+53	; 0x35
    3dbc:	7e a9       	ldd	r23, Y+54	; 0x36
    3dbe:	8f a9       	ldd	r24, Y+55	; 0x37
    3dc0:	98 ad       	ldd	r25, Y+56	; 0x38
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	4a ef       	ldi	r20, 0xFA	; 250
    3dc8:	54 e4       	ldi	r21, 0x44	; 68
    3dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	89 ab       	std	Y+49, r24	; 0x31
    3dd4:	9a ab       	std	Y+50, r25	; 0x32
    3dd6:	ab ab       	std	Y+51, r26	; 0x33
    3dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3dda:	69 a9       	ldd	r22, Y+49	; 0x31
    3ddc:	7a a9       	ldd	r23, Y+50	; 0x32
    3dde:	8b a9       	ldd	r24, Y+51	; 0x33
    3de0:	9c a9       	ldd	r25, Y+52	; 0x34
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e8       	ldi	r20, 0x80	; 128
    3de8:	5f e3       	ldi	r21, 0x3F	; 63
    3dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dee:	88 23       	and	r24, r24
    3df0:	2c f4       	brge	.+10     	; 0x3dfc <LCD_sendCommand+0x72>
		__ticks = 1;
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	98 ab       	std	Y+48, r25	; 0x30
    3df8:	8f a7       	std	Y+47, r24	; 0x2f
    3dfa:	3f c0       	rjmp	.+126    	; 0x3e7a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3dfc:	69 a9       	ldd	r22, Y+49	; 0x31
    3dfe:	7a a9       	ldd	r23, Y+50	; 0x32
    3e00:	8b a9       	ldd	r24, Y+51	; 0x33
    3e02:	9c a9       	ldd	r25, Y+52	; 0x34
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	3f ef       	ldi	r19, 0xFF	; 255
    3e08:	4f e7       	ldi	r20, 0x7F	; 127
    3e0a:	57 e4       	ldi	r21, 0x47	; 71
    3e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e10:	18 16       	cp	r1, r24
    3e12:	4c f5       	brge	.+82     	; 0x3e66 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e14:	6d a9       	ldd	r22, Y+53	; 0x35
    3e16:	7e a9       	ldd	r23, Y+54	; 0x36
    3e18:	8f a9       	ldd	r24, Y+55	; 0x37
    3e1a:	98 ad       	ldd	r25, Y+56	; 0x38
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e2       	ldi	r20, 0x20	; 32
    3e22:	51 e4       	ldi	r21, 0x41	; 65
    3e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	98 ab       	std	Y+48, r25	; 0x30
    3e3a:	8f a7       	std	Y+47, r24	; 0x2f
    3e3c:	0f c0       	rjmp	.+30     	; 0x3e5c <LCD_sendCommand+0xd2>
    3e3e:	88 ec       	ldi	r24, 0xC8	; 200
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	9e a7       	std	Y+46, r25	; 0x2e
    3e44:	8d a7       	std	Y+45, r24	; 0x2d
    3e46:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e48:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	f1 f7       	brne	.-4      	; 0x3e4a <LCD_sendCommand+0xc0>
    3e4e:	9e a7       	std	Y+46, r25	; 0x2e
    3e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e52:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e54:	98 a9       	ldd	r25, Y+48	; 0x30
    3e56:	01 97       	sbiw	r24, 0x01	; 1
    3e58:	98 ab       	std	Y+48, r25	; 0x30
    3e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3e60:	00 97       	sbiw	r24, 0x00	; 0
    3e62:	69 f7       	brne	.-38     	; 0x3e3e <LCD_sendCommand+0xb4>
    3e64:	14 c0       	rjmp	.+40     	; 0x3e8e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e66:	69 a9       	ldd	r22, Y+49	; 0x31
    3e68:	7a a9       	ldd	r23, Y+50	; 0x32
    3e6a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e6c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	98 ab       	std	Y+48, r25	; 0x30
    3e78:	8f a7       	std	Y+47, r24	; 0x2f
    3e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e7c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e7e:	9c a7       	std	Y+44, r25	; 0x2c
    3e80:	8b a7       	std	Y+43, r24	; 0x2b
    3e82:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e84:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <LCD_sendCommand+0xfc>
    3e8a:	9c a7       	std	Y+44, r25	; 0x2c
    3e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3e8e:	83 e0       	ldi	r24, 0x03	; 3
    3e90:	63 e0       	ldi	r22, 0x03	; 3
    3e92:	41 e0       	ldi	r20, 0x01	; 1
    3e94:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	a0 e8       	ldi	r26, 0x80	; 128
    3e9e:	bf e3       	ldi	r27, 0x3F	; 63
    3ea0:	8f a3       	std	Y+39, r24	; 0x27
    3ea2:	98 a7       	std	Y+40, r25	; 0x28
    3ea4:	a9 a7       	std	Y+41, r26	; 0x29
    3ea6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea8:	6f a1       	ldd	r22, Y+39	; 0x27
    3eaa:	78 a5       	ldd	r23, Y+40	; 0x28
    3eac:	89 a5       	ldd	r24, Y+41	; 0x29
    3eae:	9a a5       	ldd	r25, Y+42	; 0x2a
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	4a ef       	ldi	r20, 0xFA	; 250
    3eb6:	54 e4       	ldi	r21, 0x44	; 68
    3eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	8b a3       	std	Y+35, r24	; 0x23
    3ec2:	9c a3       	std	Y+36, r25	; 0x24
    3ec4:	ad a3       	std	Y+37, r26	; 0x25
    3ec6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    3eca:	7c a1       	ldd	r23, Y+36	; 0x24
    3ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ece:	9e a1       	ldd	r25, Y+38	; 0x26
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	40 e8       	ldi	r20, 0x80	; 128
    3ed6:	5f e3       	ldi	r21, 0x3F	; 63
    3ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3edc:	88 23       	and	r24, r24
    3ede:	2c f4       	brge	.+10     	; 0x3eea <LCD_sendCommand+0x160>
		__ticks = 1;
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	9a a3       	std	Y+34, r25	; 0x22
    3ee6:	89 a3       	std	Y+33, r24	; 0x21
    3ee8:	3f c0       	rjmp	.+126    	; 0x3f68 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3eea:	6b a1       	ldd	r22, Y+35	; 0x23
    3eec:	7c a1       	ldd	r23, Y+36	; 0x24
    3eee:	8d a1       	ldd	r24, Y+37	; 0x25
    3ef0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	3f ef       	ldi	r19, 0xFF	; 255
    3ef6:	4f e7       	ldi	r20, 0x7F	; 127
    3ef8:	57 e4       	ldi	r21, 0x47	; 71
    3efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3efe:	18 16       	cp	r1, r24
    3f00:	4c f5       	brge	.+82     	; 0x3f54 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f02:	6f a1       	ldd	r22, Y+39	; 0x27
    3f04:	78 a5       	ldd	r23, Y+40	; 0x28
    3f06:	89 a5       	ldd	r24, Y+41	; 0x29
    3f08:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	40 e2       	ldi	r20, 0x20	; 32
    3f10:	51 e4       	ldi	r21, 0x41	; 65
    3f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	9a a3       	std	Y+34, r25	; 0x22
    3f28:	89 a3       	std	Y+33, r24	; 0x21
    3f2a:	0f c0       	rjmp	.+30     	; 0x3f4a <LCD_sendCommand+0x1c0>
    3f2c:	88 ec       	ldi	r24, 0xC8	; 200
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	98 a3       	std	Y+32, r25	; 0x20
    3f32:	8f 8f       	std	Y+31, r24	; 0x1f
    3f34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f36:	98 a1       	ldd	r25, Y+32	; 0x20
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	f1 f7       	brne	.-4      	; 0x3f38 <LCD_sendCommand+0x1ae>
    3f3c:	98 a3       	std	Y+32, r25	; 0x20
    3f3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f40:	89 a1       	ldd	r24, Y+33	; 0x21
    3f42:	9a a1       	ldd	r25, Y+34	; 0x22
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	9a a3       	std	Y+34, r25	; 0x22
    3f48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f4e:	00 97       	sbiw	r24, 0x00	; 0
    3f50:	69 f7       	brne	.-38     	; 0x3f2c <LCD_sendCommand+0x1a2>
    3f52:	14 c0       	rjmp	.+40     	; 0x3f7c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f54:	6b a1       	ldd	r22, Y+35	; 0x23
    3f56:	7c a1       	ldd	r23, Y+36	; 0x24
    3f58:	8d a1       	ldd	r24, Y+37	; 0x25
    3f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	9a a3       	std	Y+34, r25	; 0x22
    3f66:	89 a3       	std	Y+33, r24	; 0x21
    3f68:	89 a1       	ldd	r24, Y+33	; 0x21
    3f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f6c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f6e:	8d 8f       	std	Y+29, r24	; 0x1d
    3f70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <LCD_sendCommand+0x1ea>
    3f78:	9e 8f       	std	Y+30, r25	; 0x1e
    3f7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3f7c:	82 e0       	ldi	r24, 0x02	; 2
    3f7e:	69 ad       	ldd	r22, Y+57	; 0x39
    3f80:	0e 94 15 1c 	call	0x382a	; 0x382a <GPIO_writePort>
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	a0 e8       	ldi	r26, 0x80	; 128
    3f8a:	bf e3       	ldi	r27, 0x3F	; 63
    3f8c:	89 8f       	std	Y+25, r24	; 0x19
    3f8e:	9a 8f       	std	Y+26, r25	; 0x1a
    3f90:	ab 8f       	std	Y+27, r26	; 0x1b
    3f92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f94:	69 8d       	ldd	r22, Y+25	; 0x19
    3f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	4a ef       	ldi	r20, 0xFA	; 250
    3fa2:	54 e4       	ldi	r21, 0x44	; 68
    3fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	8d 8b       	std	Y+21, r24	; 0x15
    3fae:	9e 8b       	std	Y+22, r25	; 0x16
    3fb0:	af 8b       	std	Y+23, r26	; 0x17
    3fb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fba:	98 8d       	ldd	r25, Y+24	; 0x18
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	40 e8       	ldi	r20, 0x80	; 128
    3fc2:	5f e3       	ldi	r21, 0x3F	; 63
    3fc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fc8:	88 23       	and	r24, r24
    3fca:	2c f4       	brge	.+10     	; 0x3fd6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	9c 8b       	std	Y+20, r25	; 0x14
    3fd2:	8b 8b       	std	Y+19, r24	; 0x13
    3fd4:	3f c0       	rjmp	.+126    	; 0x4054 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3fda:	8f 89       	ldd	r24, Y+23	; 0x17
    3fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	3f ef       	ldi	r19, 0xFF	; 255
    3fe2:	4f e7       	ldi	r20, 0x7F	; 127
    3fe4:	57 e4       	ldi	r21, 0x47	; 71
    3fe6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fea:	18 16       	cp	r1, r24
    3fec:	4c f5       	brge	.+82     	; 0x4040 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fee:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e2       	ldi	r20, 0x20	; 32
    3ffc:	51 e4       	ldi	r21, 0x41	; 65
    3ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	9c 8b       	std	Y+20, r25	; 0x14
    4014:	8b 8b       	std	Y+19, r24	; 0x13
    4016:	0f c0       	rjmp	.+30     	; 0x4036 <LCD_sendCommand+0x2ac>
    4018:	88 ec       	ldi	r24, 0xC8	; 200
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	9a 8b       	std	Y+18, r25	; 0x12
    401e:	89 8b       	std	Y+17, r24	; 0x11
    4020:	89 89       	ldd	r24, Y+17	; 0x11
    4022:	9a 89       	ldd	r25, Y+18	; 0x12
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	f1 f7       	brne	.-4      	; 0x4024 <LCD_sendCommand+0x29a>
    4028:	9a 8b       	std	Y+18, r25	; 0x12
    402a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    402c:	8b 89       	ldd	r24, Y+19	; 0x13
    402e:	9c 89       	ldd	r25, Y+20	; 0x14
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	9c 8b       	std	Y+20, r25	; 0x14
    4034:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4036:	8b 89       	ldd	r24, Y+19	; 0x13
    4038:	9c 89       	ldd	r25, Y+20	; 0x14
    403a:	00 97       	sbiw	r24, 0x00	; 0
    403c:	69 f7       	brne	.-38     	; 0x4018 <LCD_sendCommand+0x28e>
    403e:	14 c0       	rjmp	.+40     	; 0x4068 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4040:	6d 89       	ldd	r22, Y+21	; 0x15
    4042:	7e 89       	ldd	r23, Y+22	; 0x16
    4044:	8f 89       	ldd	r24, Y+23	; 0x17
    4046:	98 8d       	ldd	r25, Y+24	; 0x18
    4048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	9c 8b       	std	Y+20, r25	; 0x14
    4052:	8b 8b       	std	Y+19, r24	; 0x13
    4054:	8b 89       	ldd	r24, Y+19	; 0x13
    4056:	9c 89       	ldd	r25, Y+20	; 0x14
    4058:	98 8b       	std	Y+16, r25	; 0x10
    405a:	8f 87       	std	Y+15, r24	; 0x0f
    405c:	8f 85       	ldd	r24, Y+15	; 0x0f
    405e:	98 89       	ldd	r25, Y+16	; 0x10
    4060:	01 97       	sbiw	r24, 0x01	; 1
    4062:	f1 f7       	brne	.-4      	; 0x4060 <LCD_sendCommand+0x2d6>
    4064:	98 8b       	std	Y+16, r25	; 0x10
    4066:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4068:	83 e0       	ldi	r24, 0x03	; 3
    406a:	63 e0       	ldi	r22, 0x03	; 3
    406c:	40 e0       	ldi	r20, 0x00	; 0
    406e:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	a0 e8       	ldi	r26, 0x80	; 128
    4078:	bf e3       	ldi	r27, 0x3F	; 63
    407a:	8b 87       	std	Y+11, r24	; 0x0b
    407c:	9c 87       	std	Y+12, r25	; 0x0c
    407e:	ad 87       	std	Y+13, r26	; 0x0d
    4080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4082:	6b 85       	ldd	r22, Y+11	; 0x0b
    4084:	7c 85       	ldd	r23, Y+12	; 0x0c
    4086:	8d 85       	ldd	r24, Y+13	; 0x0d
    4088:	9e 85       	ldd	r25, Y+14	; 0x0e
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	4a ef       	ldi	r20, 0xFA	; 250
    4090:	54 e4       	ldi	r21, 0x44	; 68
    4092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	8f 83       	std	Y+7, r24	; 0x07
    409c:	98 87       	std	Y+8, r25	; 0x08
    409e:	a9 87       	std	Y+9, r26	; 0x09
    40a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40a2:	6f 81       	ldd	r22, Y+7	; 0x07
    40a4:	78 85       	ldd	r23, Y+8	; 0x08
    40a6:	89 85       	ldd	r24, Y+9	; 0x09
    40a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e8       	ldi	r20, 0x80	; 128
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40b6:	88 23       	and	r24, r24
    40b8:	2c f4       	brge	.+10     	; 0x40c4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9e 83       	std	Y+6, r25	; 0x06
    40c0:	8d 83       	std	Y+5, r24	; 0x05
    40c2:	3f c0       	rjmp	.+126    	; 0x4142 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    40c4:	6f 81       	ldd	r22, Y+7	; 0x07
    40c6:	78 85       	ldd	r23, Y+8	; 0x08
    40c8:	89 85       	ldd	r24, Y+9	; 0x09
    40ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	3f ef       	ldi	r19, 0xFF	; 255
    40d0:	4f e7       	ldi	r20, 0x7F	; 127
    40d2:	57 e4       	ldi	r21, 0x47	; 71
    40d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40d8:	18 16       	cp	r1, r24
    40da:	4c f5       	brge	.+82     	; 0x412e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40de:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e2       	ldi	r20, 0x20	; 32
    40ea:	51 e4       	ldi	r21, 0x41	; 65
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	9e 83       	std	Y+6, r25	; 0x06
    4102:	8d 83       	std	Y+5, r24	; 0x05
    4104:	0f c0       	rjmp	.+30     	; 0x4124 <LCD_sendCommand+0x39a>
    4106:	88 ec       	ldi	r24, 0xC8	; 200
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	9c 83       	std	Y+4, r25	; 0x04
    410c:	8b 83       	std	Y+3, r24	; 0x03
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	9c 81       	ldd	r25, Y+4	; 0x04
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <LCD_sendCommand+0x388>
    4116:	9c 83       	std	Y+4, r25	; 0x04
    4118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411a:	8d 81       	ldd	r24, Y+5	; 0x05
    411c:	9e 81       	ldd	r25, Y+6	; 0x06
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	9e 83       	std	Y+6, r25	; 0x06
    4122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4124:	8d 81       	ldd	r24, Y+5	; 0x05
    4126:	9e 81       	ldd	r25, Y+6	; 0x06
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	69 f7       	brne	.-38     	; 0x4106 <LCD_sendCommand+0x37c>
    412c:	14 c0       	rjmp	.+40     	; 0x4156 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412e:	6f 81       	ldd	r22, Y+7	; 0x07
    4130:	78 85       	ldd	r23, Y+8	; 0x08
    4132:	89 85       	ldd	r24, Y+9	; 0x09
    4134:	9a 85       	ldd	r25, Y+10	; 0x0a
    4136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	9e 83       	std	Y+6, r25	; 0x06
    4140:	8d 83       	std	Y+5, r24	; 0x05
    4142:	8d 81       	ldd	r24, Y+5	; 0x05
    4144:	9e 81       	ldd	r25, Y+6	; 0x06
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	89 83       	std	Y+1, r24	; 0x01
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <LCD_sendCommand+0x3c4>
    4152:	9a 83       	std	Y+2, r25	; 0x02
    4154:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4156:	e9 96       	adiw	r28, 0x39	; 57
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	cf 91       	pop	r28
    4164:	df 91       	pop	r29
    4166:	08 95       	ret

00004168 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    4168:	df 93       	push	r29
    416a:	cf 93       	push	r28
    416c:	cd b7       	in	r28, 0x3d	; 61
    416e:	de b7       	in	r29, 0x3e	; 62
    4170:	e9 97       	sbiw	r28, 0x39	; 57
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	f8 94       	cli
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	cd bf       	out	0x3d, r28	; 61
    417c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    417e:	83 e0       	ldi	r24, 0x03	; 3
    4180:	62 e0       	ldi	r22, 0x02	; 2
    4182:	41 e0       	ldi	r20, 0x01	; 1
    4184:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	a0 e8       	ldi	r26, 0x80	; 128
    418e:	bf e3       	ldi	r27, 0x3F	; 63
    4190:	8d ab       	std	Y+53, r24	; 0x35
    4192:	9e ab       	std	Y+54, r25	; 0x36
    4194:	af ab       	std	Y+55, r26	; 0x37
    4196:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4198:	6d a9       	ldd	r22, Y+53	; 0x35
    419a:	7e a9       	ldd	r23, Y+54	; 0x36
    419c:	8f a9       	ldd	r24, Y+55	; 0x37
    419e:	98 ad       	ldd	r25, Y+56	; 0x38
    41a0:	20 e0       	ldi	r18, 0x00	; 0
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	4a ef       	ldi	r20, 0xFA	; 250
    41a6:	54 e4       	ldi	r21, 0x44	; 68
    41a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	89 ab       	std	Y+49, r24	; 0x31
    41b2:	9a ab       	std	Y+50, r25	; 0x32
    41b4:	ab ab       	std	Y+51, r26	; 0x33
    41b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    41b8:	69 a9       	ldd	r22, Y+49	; 0x31
    41ba:	7a a9       	ldd	r23, Y+50	; 0x32
    41bc:	8b a9       	ldd	r24, Y+51	; 0x33
    41be:	9c a9       	ldd	r25, Y+52	; 0x34
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e8       	ldi	r20, 0x80	; 128
    41c6:	5f e3       	ldi	r21, 0x3F	; 63
    41c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41cc:	88 23       	and	r24, r24
    41ce:	2c f4       	brge	.+10     	; 0x41da <LCD_displayCharacter+0x72>
		__ticks = 1;
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	98 ab       	std	Y+48, r25	; 0x30
    41d6:	8f a7       	std	Y+47, r24	; 0x2f
    41d8:	3f c0       	rjmp	.+126    	; 0x4258 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    41da:	69 a9       	ldd	r22, Y+49	; 0x31
    41dc:	7a a9       	ldd	r23, Y+50	; 0x32
    41de:	8b a9       	ldd	r24, Y+51	; 0x33
    41e0:	9c a9       	ldd	r25, Y+52	; 0x34
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	3f ef       	ldi	r19, 0xFF	; 255
    41e6:	4f e7       	ldi	r20, 0x7F	; 127
    41e8:	57 e4       	ldi	r21, 0x47	; 71
    41ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41ee:	18 16       	cp	r1, r24
    41f0:	4c f5       	brge	.+82     	; 0x4244 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f2:	6d a9       	ldd	r22, Y+53	; 0x35
    41f4:	7e a9       	ldd	r23, Y+54	; 0x36
    41f6:	8f a9       	ldd	r24, Y+55	; 0x37
    41f8:	98 ad       	ldd	r25, Y+56	; 0x38
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e2       	ldi	r20, 0x20	; 32
    4200:	51 e4       	ldi	r21, 0x41	; 65
    4202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	bc 01       	movw	r22, r24
    420c:	cd 01       	movw	r24, r26
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	98 ab       	std	Y+48, r25	; 0x30
    4218:	8f a7       	std	Y+47, r24	; 0x2f
    421a:	0f c0       	rjmp	.+30     	; 0x423a <LCD_displayCharacter+0xd2>
    421c:	88 ec       	ldi	r24, 0xC8	; 200
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	9e a7       	std	Y+46, r25	; 0x2e
    4222:	8d a7       	std	Y+45, r24	; 0x2d
    4224:	8d a5       	ldd	r24, Y+45	; 0x2d
    4226:	9e a5       	ldd	r25, Y+46	; 0x2e
    4228:	01 97       	sbiw	r24, 0x01	; 1
    422a:	f1 f7       	brne	.-4      	; 0x4228 <LCD_displayCharacter+0xc0>
    422c:	9e a7       	std	Y+46, r25	; 0x2e
    422e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4230:	8f a5       	ldd	r24, Y+47	; 0x2f
    4232:	98 a9       	ldd	r25, Y+48	; 0x30
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	98 ab       	std	Y+48, r25	; 0x30
    4238:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423a:	8f a5       	ldd	r24, Y+47	; 0x2f
    423c:	98 a9       	ldd	r25, Y+48	; 0x30
    423e:	00 97       	sbiw	r24, 0x00	; 0
    4240:	69 f7       	brne	.-38     	; 0x421c <LCD_displayCharacter+0xb4>
    4242:	14 c0       	rjmp	.+40     	; 0x426c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4244:	69 a9       	ldd	r22, Y+49	; 0x31
    4246:	7a a9       	ldd	r23, Y+50	; 0x32
    4248:	8b a9       	ldd	r24, Y+51	; 0x33
    424a:	9c a9       	ldd	r25, Y+52	; 0x34
    424c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	98 ab       	std	Y+48, r25	; 0x30
    4256:	8f a7       	std	Y+47, r24	; 0x2f
    4258:	8f a5       	ldd	r24, Y+47	; 0x2f
    425a:	98 a9       	ldd	r25, Y+48	; 0x30
    425c:	9c a7       	std	Y+44, r25	; 0x2c
    425e:	8b a7       	std	Y+43, r24	; 0x2b
    4260:	8b a5       	ldd	r24, Y+43	; 0x2b
    4262:	9c a5       	ldd	r25, Y+44	; 0x2c
    4264:	01 97       	sbiw	r24, 0x01	; 1
    4266:	f1 f7       	brne	.-4      	; 0x4264 <LCD_displayCharacter+0xfc>
    4268:	9c a7       	std	Y+44, r25	; 0x2c
    426a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    426c:	83 e0       	ldi	r24, 0x03	; 3
    426e:	63 e0       	ldi	r22, 0x03	; 3
    4270:	41 e0       	ldi	r20, 0x01	; 1
    4272:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	a0 e8       	ldi	r26, 0x80	; 128
    427c:	bf e3       	ldi	r27, 0x3F	; 63
    427e:	8f a3       	std	Y+39, r24	; 0x27
    4280:	98 a7       	std	Y+40, r25	; 0x28
    4282:	a9 a7       	std	Y+41, r26	; 0x29
    4284:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4286:	6f a1       	ldd	r22, Y+39	; 0x27
    4288:	78 a5       	ldd	r23, Y+40	; 0x28
    428a:	89 a5       	ldd	r24, Y+41	; 0x29
    428c:	9a a5       	ldd	r25, Y+42	; 0x2a
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	4a ef       	ldi	r20, 0xFA	; 250
    4294:	54 e4       	ldi	r21, 0x44	; 68
    4296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	8b a3       	std	Y+35, r24	; 0x23
    42a0:	9c a3       	std	Y+36, r25	; 0x24
    42a2:	ad a3       	std	Y+37, r26	; 0x25
    42a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42a6:	6b a1       	ldd	r22, Y+35	; 0x23
    42a8:	7c a1       	ldd	r23, Y+36	; 0x24
    42aa:	8d a1       	ldd	r24, Y+37	; 0x25
    42ac:	9e a1       	ldd	r25, Y+38	; 0x26
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e8       	ldi	r20, 0x80	; 128
    42b4:	5f e3       	ldi	r21, 0x3F	; 63
    42b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ba:	88 23       	and	r24, r24
    42bc:	2c f4       	brge	.+10     	; 0x42c8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	9a a3       	std	Y+34, r25	; 0x22
    42c4:	89 a3       	std	Y+33, r24	; 0x21
    42c6:	3f c0       	rjmp	.+126    	; 0x4346 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    42c8:	6b a1       	ldd	r22, Y+35	; 0x23
    42ca:	7c a1       	ldd	r23, Y+36	; 0x24
    42cc:	8d a1       	ldd	r24, Y+37	; 0x25
    42ce:	9e a1       	ldd	r25, Y+38	; 0x26
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	3f ef       	ldi	r19, 0xFF	; 255
    42d4:	4f e7       	ldi	r20, 0x7F	; 127
    42d6:	57 e4       	ldi	r21, 0x47	; 71
    42d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42dc:	18 16       	cp	r1, r24
    42de:	4c f5       	brge	.+82     	; 0x4332 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e0:	6f a1       	ldd	r22, Y+39	; 0x27
    42e2:	78 a5       	ldd	r23, Y+40	; 0x28
    42e4:	89 a5       	ldd	r24, Y+41	; 0x29
    42e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	40 e2       	ldi	r20, 0x20	; 32
    42ee:	51 e4       	ldi	r21, 0x41	; 65
    42f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	bc 01       	movw	r22, r24
    42fa:	cd 01       	movw	r24, r26
    42fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	9a a3       	std	Y+34, r25	; 0x22
    4306:	89 a3       	std	Y+33, r24	; 0x21
    4308:	0f c0       	rjmp	.+30     	; 0x4328 <LCD_displayCharacter+0x1c0>
    430a:	88 ec       	ldi	r24, 0xC8	; 200
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	98 a3       	std	Y+32, r25	; 0x20
    4310:	8f 8f       	std	Y+31, r24	; 0x1f
    4312:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4314:	98 a1       	ldd	r25, Y+32	; 0x20
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <LCD_displayCharacter+0x1ae>
    431a:	98 a3       	std	Y+32, r25	; 0x20
    431c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431e:	89 a1       	ldd	r24, Y+33	; 0x21
    4320:	9a a1       	ldd	r25, Y+34	; 0x22
    4322:	01 97       	sbiw	r24, 0x01	; 1
    4324:	9a a3       	std	Y+34, r25	; 0x22
    4326:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4328:	89 a1       	ldd	r24, Y+33	; 0x21
    432a:	9a a1       	ldd	r25, Y+34	; 0x22
    432c:	00 97       	sbiw	r24, 0x00	; 0
    432e:	69 f7       	brne	.-38     	; 0x430a <LCD_displayCharacter+0x1a2>
    4330:	14 c0       	rjmp	.+40     	; 0x435a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4332:	6b a1       	ldd	r22, Y+35	; 0x23
    4334:	7c a1       	ldd	r23, Y+36	; 0x24
    4336:	8d a1       	ldd	r24, Y+37	; 0x25
    4338:	9e a1       	ldd	r25, Y+38	; 0x26
    433a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433e:	dc 01       	movw	r26, r24
    4340:	cb 01       	movw	r24, r22
    4342:	9a a3       	std	Y+34, r25	; 0x22
    4344:	89 a3       	std	Y+33, r24	; 0x21
    4346:	89 a1       	ldd	r24, Y+33	; 0x21
    4348:	9a a1       	ldd	r25, Y+34	; 0x22
    434a:	9e 8f       	std	Y+30, r25	; 0x1e
    434c:	8d 8f       	std	Y+29, r24	; 0x1d
    434e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4352:	01 97       	sbiw	r24, 0x01	; 1
    4354:	f1 f7       	brne	.-4      	; 0x4352 <LCD_displayCharacter+0x1ea>
    4356:	9e 8f       	std	Y+30, r25	; 0x1e
    4358:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	69 ad       	ldd	r22, Y+57	; 0x39
    435e:	0e 94 15 1c 	call	0x382a	; 0x382a <GPIO_writePort>
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	a0 e8       	ldi	r26, 0x80	; 128
    4368:	bf e3       	ldi	r27, 0x3F	; 63
    436a:	89 8f       	std	Y+25, r24	; 0x19
    436c:	9a 8f       	std	Y+26, r25	; 0x1a
    436e:	ab 8f       	std	Y+27, r26	; 0x1b
    4370:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4372:	69 8d       	ldd	r22, Y+25	; 0x19
    4374:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4376:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4378:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	4a ef       	ldi	r20, 0xFA	; 250
    4380:	54 e4       	ldi	r21, 0x44	; 68
    4382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	8d 8b       	std	Y+21, r24	; 0x15
    438c:	9e 8b       	std	Y+22, r25	; 0x16
    438e:	af 8b       	std	Y+23, r26	; 0x17
    4390:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4392:	6d 89       	ldd	r22, Y+21	; 0x15
    4394:	7e 89       	ldd	r23, Y+22	; 0x16
    4396:	8f 89       	ldd	r24, Y+23	; 0x17
    4398:	98 8d       	ldd	r25, Y+24	; 0x18
    439a:	20 e0       	ldi	r18, 0x00	; 0
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	40 e8       	ldi	r20, 0x80	; 128
    43a0:	5f e3       	ldi	r21, 0x3F	; 63
    43a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43a6:	88 23       	and	r24, r24
    43a8:	2c f4       	brge	.+10     	; 0x43b4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	9c 8b       	std	Y+20, r25	; 0x14
    43b0:	8b 8b       	std	Y+19, r24	; 0x13
    43b2:	3f c0       	rjmp	.+126    	; 0x4432 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    43b4:	6d 89       	ldd	r22, Y+21	; 0x15
    43b6:	7e 89       	ldd	r23, Y+22	; 0x16
    43b8:	8f 89       	ldd	r24, Y+23	; 0x17
    43ba:	98 8d       	ldd	r25, Y+24	; 0x18
    43bc:	20 e0       	ldi	r18, 0x00	; 0
    43be:	3f ef       	ldi	r19, 0xFF	; 255
    43c0:	4f e7       	ldi	r20, 0x7F	; 127
    43c2:	57 e4       	ldi	r21, 0x47	; 71
    43c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43c8:	18 16       	cp	r1, r24
    43ca:	4c f5       	brge	.+82     	; 0x441e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43cc:	69 8d       	ldd	r22, Y+25	; 0x19
    43ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43d4:	20 e0       	ldi	r18, 0x00	; 0
    43d6:	30 e0       	ldi	r19, 0x00	; 0
    43d8:	40 e2       	ldi	r20, 0x20	; 32
    43da:	51 e4       	ldi	r21, 0x41	; 65
    43dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	bc 01       	movw	r22, r24
    43e6:	cd 01       	movw	r24, r26
    43e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	9c 8b       	std	Y+20, r25	; 0x14
    43f2:	8b 8b       	std	Y+19, r24	; 0x13
    43f4:	0f c0       	rjmp	.+30     	; 0x4414 <LCD_displayCharacter+0x2ac>
    43f6:	88 ec       	ldi	r24, 0xC8	; 200
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	9a 8b       	std	Y+18, r25	; 0x12
    43fc:	89 8b       	std	Y+17, r24	; 0x11
    43fe:	89 89       	ldd	r24, Y+17	; 0x11
    4400:	9a 89       	ldd	r25, Y+18	; 0x12
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	f1 f7       	brne	.-4      	; 0x4402 <LCD_displayCharacter+0x29a>
    4406:	9a 8b       	std	Y+18, r25	; 0x12
    4408:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    440a:	8b 89       	ldd	r24, Y+19	; 0x13
    440c:	9c 89       	ldd	r25, Y+20	; 0x14
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	9c 8b       	std	Y+20, r25	; 0x14
    4412:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4414:	8b 89       	ldd	r24, Y+19	; 0x13
    4416:	9c 89       	ldd	r25, Y+20	; 0x14
    4418:	00 97       	sbiw	r24, 0x00	; 0
    441a:	69 f7       	brne	.-38     	; 0x43f6 <LCD_displayCharacter+0x28e>
    441c:	14 c0       	rjmp	.+40     	; 0x4446 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441e:	6d 89       	ldd	r22, Y+21	; 0x15
    4420:	7e 89       	ldd	r23, Y+22	; 0x16
    4422:	8f 89       	ldd	r24, Y+23	; 0x17
    4424:	98 8d       	ldd	r25, Y+24	; 0x18
    4426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	9c 8b       	std	Y+20, r25	; 0x14
    4430:	8b 8b       	std	Y+19, r24	; 0x13
    4432:	8b 89       	ldd	r24, Y+19	; 0x13
    4434:	9c 89       	ldd	r25, Y+20	; 0x14
    4436:	98 8b       	std	Y+16, r25	; 0x10
    4438:	8f 87       	std	Y+15, r24	; 0x0f
    443a:	8f 85       	ldd	r24, Y+15	; 0x0f
    443c:	98 89       	ldd	r25, Y+16	; 0x10
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <LCD_displayCharacter+0x2d6>
    4442:	98 8b       	std	Y+16, r25	; 0x10
    4444:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4446:	83 e0       	ldi	r24, 0x03	; 3
    4448:	63 e0       	ldi	r22, 0x03	; 3
    444a:	40 e0       	ldi	r20, 0x00	; 0
    444c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <GPIO_writePin>
    4450:	80 e0       	ldi	r24, 0x00	; 0
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	a0 e8       	ldi	r26, 0x80	; 128
    4456:	bf e3       	ldi	r27, 0x3F	; 63
    4458:	8b 87       	std	Y+11, r24	; 0x0b
    445a:	9c 87       	std	Y+12, r25	; 0x0c
    445c:	ad 87       	std	Y+13, r26	; 0x0d
    445e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4460:	6b 85       	ldd	r22, Y+11	; 0x0b
    4462:	7c 85       	ldd	r23, Y+12	; 0x0c
    4464:	8d 85       	ldd	r24, Y+13	; 0x0d
    4466:	9e 85       	ldd	r25, Y+14	; 0x0e
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	4a ef       	ldi	r20, 0xFA	; 250
    446e:	54 e4       	ldi	r21, 0x44	; 68
    4470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	8f 83       	std	Y+7, r24	; 0x07
    447a:	98 87       	std	Y+8, r25	; 0x08
    447c:	a9 87       	std	Y+9, r26	; 0x09
    447e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4480:	6f 81       	ldd	r22, Y+7	; 0x07
    4482:	78 85       	ldd	r23, Y+8	; 0x08
    4484:	89 85       	ldd	r24, Y+9	; 0x09
    4486:	9a 85       	ldd	r25, Y+10	; 0x0a
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	40 e8       	ldi	r20, 0x80	; 128
    448e:	5f e3       	ldi	r21, 0x3F	; 63
    4490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4494:	88 23       	and	r24, r24
    4496:	2c f4       	brge	.+10     	; 0x44a2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	9e 83       	std	Y+6, r25	; 0x06
    449e:	8d 83       	std	Y+5, r24	; 0x05
    44a0:	3f c0       	rjmp	.+126    	; 0x4520 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    44a2:	6f 81       	ldd	r22, Y+7	; 0x07
    44a4:	78 85       	ldd	r23, Y+8	; 0x08
    44a6:	89 85       	ldd	r24, Y+9	; 0x09
    44a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	3f ef       	ldi	r19, 0xFF	; 255
    44ae:	4f e7       	ldi	r20, 0x7F	; 127
    44b0:	57 e4       	ldi	r21, 0x47	; 71
    44b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44b6:	18 16       	cp	r1, r24
    44b8:	4c f5       	brge	.+82     	; 0x450c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    44bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    44be:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c2:	20 e0       	ldi	r18, 0x00	; 0
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	40 e2       	ldi	r20, 0x20	; 32
    44c8:	51 e4       	ldi	r21, 0x41	; 65
    44ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	bc 01       	movw	r22, r24
    44d4:	cd 01       	movw	r24, r26
    44d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	9e 83       	std	Y+6, r25	; 0x06
    44e0:	8d 83       	std	Y+5, r24	; 0x05
    44e2:	0f c0       	rjmp	.+30     	; 0x4502 <LCD_displayCharacter+0x39a>
    44e4:	88 ec       	ldi	r24, 0xC8	; 200
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	9c 83       	std	Y+4, r25	; 0x04
    44ea:	8b 83       	std	Y+3, r24	; 0x03
    44ec:	8b 81       	ldd	r24, Y+3	; 0x03
    44ee:	9c 81       	ldd	r25, Y+4	; 0x04
    44f0:	01 97       	sbiw	r24, 0x01	; 1
    44f2:	f1 f7       	brne	.-4      	; 0x44f0 <LCD_displayCharacter+0x388>
    44f4:	9c 83       	std	Y+4, r25	; 0x04
    44f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f8:	8d 81       	ldd	r24, Y+5	; 0x05
    44fa:	9e 81       	ldd	r25, Y+6	; 0x06
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	9e 83       	std	Y+6, r25	; 0x06
    4500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4502:	8d 81       	ldd	r24, Y+5	; 0x05
    4504:	9e 81       	ldd	r25, Y+6	; 0x06
    4506:	00 97       	sbiw	r24, 0x00	; 0
    4508:	69 f7       	brne	.-38     	; 0x44e4 <LCD_displayCharacter+0x37c>
    450a:	14 c0       	rjmp	.+40     	; 0x4534 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450c:	6f 81       	ldd	r22, Y+7	; 0x07
    450e:	78 85       	ldd	r23, Y+8	; 0x08
    4510:	89 85       	ldd	r24, Y+9	; 0x09
    4512:	9a 85       	ldd	r25, Y+10	; 0x0a
    4514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	9e 83       	std	Y+6, r25	; 0x06
    451e:	8d 83       	std	Y+5, r24	; 0x05
    4520:	8d 81       	ldd	r24, Y+5	; 0x05
    4522:	9e 81       	ldd	r25, Y+6	; 0x06
    4524:	9a 83       	std	Y+2, r25	; 0x02
    4526:	89 83       	std	Y+1, r24	; 0x01
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	9a 81       	ldd	r25, Y+2	; 0x02
    452c:	01 97       	sbiw	r24, 0x01	; 1
    452e:	f1 f7       	brne	.-4      	; 0x452c <LCD_displayCharacter+0x3c4>
    4530:	9a 83       	std	Y+2, r25	; 0x02
    4532:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4534:	e9 96       	adiw	r28, 0x39	; 57
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	f8 94       	cli
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	cd bf       	out	0x3d, r28	; 61
    4540:	cf 91       	pop	r28
    4542:	df 91       	pop	r29
    4544:	08 95       	ret

00004546 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4546:	df 93       	push	r29
    4548:	cf 93       	push	r28
    454a:	00 d0       	rcall	.+0      	; 0x454c <LCD_displayString+0x6>
    454c:	0f 92       	push	r0
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
    4552:	9b 83       	std	Y+3, r25	; 0x03
    4554:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4556:	19 82       	std	Y+1, r1	; 0x01
    4558:	0e c0       	rjmp	.+28     	; 0x4576 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	28 2f       	mov	r18, r24
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	9b 81       	ldd	r25, Y+3	; 0x03
    4564:	fc 01       	movw	r30, r24
    4566:	e2 0f       	add	r30, r18
    4568:	f3 1f       	adc	r31, r19
    456a:	80 81       	ld	r24, Z
    456c:	0e 94 b4 20 	call	0x4168	; 0x4168 <LCD_displayCharacter>
		i++;
    4570:	89 81       	ldd	r24, Y+1	; 0x01
    4572:	8f 5f       	subi	r24, 0xFF	; 255
    4574:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	28 2f       	mov	r18, r24
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	9b 81       	ldd	r25, Y+3	; 0x03
    4580:	fc 01       	movw	r30, r24
    4582:	e2 0f       	add	r30, r18
    4584:	f3 1f       	adc	r31, r19
    4586:	80 81       	ld	r24, Z
    4588:	88 23       	and	r24, r24
    458a:	39 f7       	brne	.-50     	; 0x455a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	0f 90       	pop	r0
    4592:	cf 91       	pop	r28
    4594:	df 91       	pop	r29
    4596:	08 95       	ret

00004598 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    4598:	df 93       	push	r29
    459a:	cf 93       	push	r28
    459c:	00 d0       	rcall	.+0      	; 0x459e <LCD_moveCursor+0x6>
    459e:	00 d0       	rcall	.+0      	; 0x45a0 <LCD_moveCursor+0x8>
    45a0:	0f 92       	push	r0
    45a2:	cd b7       	in	r28, 0x3d	; 61
    45a4:	de b7       	in	r29, 0x3e	; 62
    45a6:	8a 83       	std	Y+2, r24	; 0x02
    45a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    45aa:	8a 81       	ldd	r24, Y+2	; 0x02
    45ac:	28 2f       	mov	r18, r24
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	3d 83       	std	Y+5, r19	; 0x05
    45b2:	2c 83       	std	Y+4, r18	; 0x04
    45b4:	8c 81       	ldd	r24, Y+4	; 0x04
    45b6:	9d 81       	ldd	r25, Y+5	; 0x05
    45b8:	81 30       	cpi	r24, 0x01	; 1
    45ba:	91 05       	cpc	r25, r1
    45bc:	c1 f0       	breq	.+48     	; 0x45ee <LCD_moveCursor+0x56>
    45be:	2c 81       	ldd	r18, Y+4	; 0x04
    45c0:	3d 81       	ldd	r19, Y+5	; 0x05
    45c2:	22 30       	cpi	r18, 0x02	; 2
    45c4:	31 05       	cpc	r19, r1
    45c6:	2c f4       	brge	.+10     	; 0x45d2 <LCD_moveCursor+0x3a>
    45c8:	8c 81       	ldd	r24, Y+4	; 0x04
    45ca:	9d 81       	ldd	r25, Y+5	; 0x05
    45cc:	00 97       	sbiw	r24, 0x00	; 0
    45ce:	61 f0       	breq	.+24     	; 0x45e8 <LCD_moveCursor+0x50>
    45d0:	19 c0       	rjmp	.+50     	; 0x4604 <LCD_moveCursor+0x6c>
    45d2:	2c 81       	ldd	r18, Y+4	; 0x04
    45d4:	3d 81       	ldd	r19, Y+5	; 0x05
    45d6:	22 30       	cpi	r18, 0x02	; 2
    45d8:	31 05       	cpc	r19, r1
    45da:	69 f0       	breq	.+26     	; 0x45f6 <LCD_moveCursor+0x5e>
    45dc:	8c 81       	ldd	r24, Y+4	; 0x04
    45de:	9d 81       	ldd	r25, Y+5	; 0x05
    45e0:	83 30       	cpi	r24, 0x03	; 3
    45e2:	91 05       	cpc	r25, r1
    45e4:	61 f0       	breq	.+24     	; 0x45fe <LCD_moveCursor+0x66>
    45e6:	0e c0       	rjmp	.+28     	; 0x4604 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	89 83       	std	Y+1, r24	; 0x01
    45ec:	0b c0       	rjmp	.+22     	; 0x4604 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    45ee:	8b 81       	ldd	r24, Y+3	; 0x03
    45f0:	80 5c       	subi	r24, 0xC0	; 192
    45f2:	89 83       	std	Y+1, r24	; 0x01
    45f4:	07 c0       	rjmp	.+14     	; 0x4604 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    45f6:	8b 81       	ldd	r24, Y+3	; 0x03
    45f8:	80 5f       	subi	r24, 0xF0	; 240
    45fa:	89 83       	std	Y+1, r24	; 0x01
    45fc:	03 c0       	rjmp	.+6      	; 0x4604 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    45fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4600:	80 5b       	subi	r24, 0xB0	; 176
    4602:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4604:	89 81       	ldd	r24, Y+1	; 0x01
    4606:	80 68       	ori	r24, 0x80	; 128
    4608:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_sendCommand>
}
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	0f 90       	pop	r0
    4612:	0f 90       	pop	r0
    4614:	0f 90       	pop	r0
    4616:	cf 91       	pop	r28
    4618:	df 91       	pop	r29
    461a:	08 95       	ret

0000461c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    461c:	df 93       	push	r29
    461e:	cf 93       	push	r28
    4620:	00 d0       	rcall	.+0      	; 0x4622 <LCD_displayStringRowColumn+0x6>
    4622:	00 d0       	rcall	.+0      	; 0x4624 <LCD_displayStringRowColumn+0x8>
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
    4628:	89 83       	std	Y+1, r24	; 0x01
    462a:	6a 83       	std	Y+2, r22	; 0x02
    462c:	5c 83       	std	Y+4, r21	; 0x04
    462e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4630:	89 81       	ldd	r24, Y+1	; 0x01
    4632:	6a 81       	ldd	r22, Y+2	; 0x02
    4634:	0e 94 cc 22 	call	0x4598	; 0x4598 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	9c 81       	ldd	r25, Y+4	; 0x04
    463c:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
}
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	cf 91       	pop	r28
    464a:	df 91       	pop	r29
    464c:	08 95       	ret

0000464e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    464e:	df 93       	push	r29
    4650:	cf 93       	push	r28
    4652:	cd b7       	in	r28, 0x3d	; 61
    4654:	de b7       	in	r29, 0x3e	; 62
    4656:	62 97       	sbiw	r28, 0x12	; 18
    4658:	0f b6       	in	r0, 0x3f	; 63
    465a:	f8 94       	cli
    465c:	de bf       	out	0x3e, r29	; 62
    465e:	0f be       	out	0x3f, r0	; 63
    4660:	cd bf       	out	0x3d, r28	; 61
    4662:	9a 8b       	std	Y+18, r25	; 0x12
    4664:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4666:	89 89       	ldd	r24, Y+17	; 0x11
    4668:	9a 89       	ldd	r25, Y+18	; 0x12
    466a:	9e 01       	movw	r18, r28
    466c:	2f 5f       	subi	r18, 0xFF	; 255
    466e:	3f 4f       	sbci	r19, 0xFF	; 255
    4670:	b9 01       	movw	r22, r18
    4672:	4a e0       	ldi	r20, 0x0A	; 10
    4674:	50 e0       	ldi	r21, 0x00	; 0
    4676:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <itoa>
   LCD_displayString(buff); /* Display the string */
    467a:	ce 01       	movw	r24, r28
    467c:	01 96       	adiw	r24, 0x01	; 1
    467e:	0e 94 a3 22 	call	0x4546	; 0x4546 <LCD_displayString>
}
    4682:	62 96       	adiw	r28, 0x12	; 18
    4684:	0f b6       	in	r0, 0x3f	; 63
    4686:	f8 94       	cli
    4688:	de bf       	out	0x3e, r29	; 62
    468a:	0f be       	out	0x3f, r0	; 63
    468c:	cd bf       	out	0x3d, r28	; 61
    468e:	cf 91       	pop	r28
    4690:	df 91       	pop	r29
    4692:	08 95       	ret

00004694 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4694:	df 93       	push	r29
    4696:	cf 93       	push	r28
    4698:	cd b7       	in	r28, 0x3d	; 61
    469a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <LCD_sendCommand>
}
    46a2:	cf 91       	pop	r28
    46a4:	df 91       	pop	r29
    46a6:	08 95       	ret

000046a8 <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Input: pointer to the configuration structure with type Timer1_ConfigType
 * Return: Void
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    46a8:	df 93       	push	r29
    46aa:	cf 93       	push	r28
    46ac:	00 d0       	rcall	.+0      	; 0x46ae <Timer1_init+0x6>
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	9a 83       	std	Y+2, r25	; 0x02
    46b4:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    46b6:	ef e4       	ldi	r30, 0x4F	; 79
    46b8:	f0 e0       	ldi	r31, 0x00	; 0
    46ba:	8c e0       	ldi	r24, 0x0C	; 12
    46bc:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    46be:	af e4       	ldi	r26, 0x4F	; 79
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	ef e4       	ldi	r30, 0x4F	; 79
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	80 81       	ld	r24, Z
    46c8:	98 2f       	mov	r25, r24
    46ca:	9c 7f       	andi	r25, 0xFC	; 252
    46cc:	e9 81       	ldd	r30, Y+1	; 0x01
    46ce:	fa 81       	ldd	r31, Y+2	; 0x02
    46d0:	85 81       	ldd	r24, Z+5	; 0x05
    46d2:	83 70       	andi	r24, 0x03	; 3
    46d4:	89 2b       	or	r24, r25
    46d6:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    46d8:	ae e4       	ldi	r26, 0x4E	; 78
    46da:	b0 e0       	ldi	r27, 0x00	; 0
    46dc:	ee e4       	ldi	r30, 0x4E	; 78
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	80 81       	ld	r24, Z
    46e2:	28 2f       	mov	r18, r24
    46e4:	27 7e       	andi	r18, 0xE7	; 231
    46e6:	e9 81       	ldd	r30, Y+1	; 0x01
    46e8:	fa 81       	ldd	r31, Y+2	; 0x02
    46ea:	85 81       	ldd	r24, Z+5	; 0x05
    46ec:	88 2f       	mov	r24, r24
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	8c 70       	andi	r24, 0x0C	; 12
    46f2:	90 70       	andi	r25, 0x00	; 0
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	82 2b       	or	r24, r18
    46fa:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    46fc:	ac e4       	ldi	r26, 0x4C	; 76
    46fe:	b0 e0       	ldi	r27, 0x00	; 0
    4700:	e9 81       	ldd	r30, Y+1	; 0x01
    4702:	fa 81       	ldd	r31, Y+2	; 0x02
    4704:	80 81       	ld	r24, Z
    4706:	91 81       	ldd	r25, Z+1	; 0x01
    4708:	11 96       	adiw	r26, 0x01	; 1
    470a:	9c 93       	st	X, r25
    470c:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    470e:	e9 81       	ldd	r30, Y+1	; 0x01
    4710:	fa 81       	ldd	r31, Y+2	; 0x02
    4712:	85 81       	ldd	r24, Z+5	; 0x05
    4714:	88 23       	and	r24, r24
    4716:	29 f4       	brne	.+10     	; 0x4722 <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    4718:	e9 e5       	ldi	r30, 0x59	; 89
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	84 e0       	ldi	r24, 0x04	; 4
    471e:	80 83       	st	Z, r24
    4720:	12 c0       	rjmp	.+36     	; 0x4746 <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    4722:	e9 81       	ldd	r30, Y+1	; 0x01
    4724:	fa 81       	ldd	r31, Y+2	; 0x02
    4726:	85 81       	ldd	r24, Z+5	; 0x05
    4728:	84 30       	cpi	r24, 0x04	; 4
    472a:	69 f4       	brne	.+26     	; 0x4746 <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    472c:	aa e4       	ldi	r26, 0x4A	; 74
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	e9 81       	ldd	r30, Y+1	; 0x01
    4732:	fa 81       	ldd	r31, Y+2	; 0x02
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	11 96       	adiw	r26, 0x01	; 1
    473a:	9c 93       	st	X, r25
    473c:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    473e:	e9 e5       	ldi	r30, 0x59	; 89
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	80 e1       	ldi	r24, 0x10	; 16
    4744:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    4746:	ae e4       	ldi	r26, 0x4E	; 78
    4748:	b0 e0       	ldi	r27, 0x00	; 0
    474a:	ee e4       	ldi	r30, 0x4E	; 78
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	80 81       	ld	r24, Z
    4750:	98 2f       	mov	r25, r24
    4752:	98 7f       	andi	r25, 0xF8	; 248
    4754:	e9 81       	ldd	r30, Y+1	; 0x01
    4756:	fa 81       	ldd	r31, Y+2	; 0x02
    4758:	84 81       	ldd	r24, Z+4	; 0x04
    475a:	89 2b       	or	r24, r25
    475c:	8c 93       	st	X, r24
}
    475e:	0f 90       	pop	r0
    4760:	0f 90       	pop	r0
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	08 95       	ret

00004768 <Timer1_deInit>:
 * Description: Function to disable the Timer1
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_deInit(void)
{
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0 ;
    4770:	ef e4       	ldi	r30, 0x4F	; 79
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	10 82       	st	Z, r1

	TCCR1B = 0 ;
    4776:	ee e4       	ldi	r30, 0x4E	; 78
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	10 82       	st	Z, r1

	TIMSK = 0 ;
    477c:	e9 e5       	ldi	r30, 0x59	; 89
    477e:	f0 e0       	ldi	r31, 0x00	; 0
    4780:	10 82       	st	Z, r1

}
    4782:	cf 91       	pop	r28
    4784:	df 91       	pop	r29
    4786:	08 95       	ret

00004788 <Timer1_setCallBack>:
 * Description: set the Call Back function address
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_setCallBack(void (*a_ptr)(void))
{
    4788:	df 93       	push	r29
    478a:	cf 93       	push	r28
    478c:	00 d0       	rcall	.+0      	; 0x478e <Timer1_setCallBack+0x6>
    478e:	cd b7       	in	r28, 0x3d	; 61
    4790:	de b7       	in	r29, 0x3e	; 62
    4792:	9a 83       	std	Y+2, r25	; 0x02
    4794:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	90 93 0a 01 	sts	0x010A, r25
    479e:	80 93 09 01 	sts	0x0109, r24
}
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	cf 91       	pop	r28
    47a8:	df 91       	pop	r29
    47aa:	08 95       	ret

000047ac <__vector_9>:

/*******************************************************************************
 *                    ISR (Interrupt Service Routines)                         *
 *******************************************************************************/
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    47ac:	1f 92       	push	r1
    47ae:	0f 92       	push	r0
    47b0:	0f b6       	in	r0, 0x3f	; 63
    47b2:	0f 92       	push	r0
    47b4:	11 24       	eor	r1, r1
    47b6:	2f 93       	push	r18
    47b8:	3f 93       	push	r19
    47ba:	4f 93       	push	r20
    47bc:	5f 93       	push	r21
    47be:	6f 93       	push	r22
    47c0:	7f 93       	push	r23
    47c2:	8f 93       	push	r24
    47c4:	9f 93       	push	r25
    47c6:	af 93       	push	r26
    47c8:	bf 93       	push	r27
    47ca:	ef 93       	push	r30
    47cc:	ff 93       	push	r31
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    47d6:	80 91 09 01 	lds	r24, 0x0109
    47da:	90 91 0a 01 	lds	r25, 0x010A
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	29 f0       	breq	.+10     	; 0x47ec <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    47e2:	e0 91 09 01 	lds	r30, 0x0109
    47e6:	f0 91 0a 01 	lds	r31, 0x010A
    47ea:	09 95       	icall
	}
}
    47ec:	cf 91       	pop	r28
    47ee:	df 91       	pop	r29
    47f0:	ff 91       	pop	r31
    47f2:	ef 91       	pop	r30
    47f4:	bf 91       	pop	r27
    47f6:	af 91       	pop	r26
    47f8:	9f 91       	pop	r25
    47fa:	8f 91       	pop	r24
    47fc:	7f 91       	pop	r23
    47fe:	6f 91       	pop	r22
    4800:	5f 91       	pop	r21
    4802:	4f 91       	pop	r20
    4804:	3f 91       	pop	r19
    4806:	2f 91       	pop	r18
    4808:	0f 90       	pop	r0
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	0f 90       	pop	r0
    480e:	1f 90       	pop	r1
    4810:	18 95       	reti

00004812 <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    4812:	1f 92       	push	r1
    4814:	0f 92       	push	r0
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	0f 92       	push	r0
    481a:	11 24       	eor	r1, r1
    481c:	2f 93       	push	r18
    481e:	3f 93       	push	r19
    4820:	4f 93       	push	r20
    4822:	5f 93       	push	r21
    4824:	6f 93       	push	r22
    4826:	7f 93       	push	r23
    4828:	8f 93       	push	r24
    482a:	9f 93       	push	r25
    482c:	af 93       	push	r26
    482e:	bf 93       	push	r27
    4830:	ef 93       	push	r30
    4832:	ff 93       	push	r31
    4834:	df 93       	push	r29
    4836:	cf 93       	push	r28
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    483c:	80 91 09 01 	lds	r24, 0x0109
    4840:	90 91 0a 01 	lds	r25, 0x010A
    4844:	00 97       	sbiw	r24, 0x00	; 0
    4846:	29 f0       	breq	.+10     	; 0x4852 <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    4848:	e0 91 09 01 	lds	r30, 0x0109
    484c:	f0 91 0a 01 	lds	r31, 0x010A
    4850:	09 95       	icall
	}
}
    4852:	cf 91       	pop	r28
    4854:	df 91       	pop	r29
    4856:	ff 91       	pop	r31
    4858:	ef 91       	pop	r30
    485a:	bf 91       	pop	r27
    485c:	af 91       	pop	r26
    485e:	9f 91       	pop	r25
    4860:	8f 91       	pop	r24
    4862:	7f 91       	pop	r23
    4864:	6f 91       	pop	r22
    4866:	5f 91       	pop	r21
    4868:	4f 91       	pop	r20
    486a:	3f 91       	pop	r19
    486c:	2f 91       	pop	r18
    486e:	0f 90       	pop	r0
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	0f 90       	pop	r0
    4874:	1f 90       	pop	r1
    4876:	18 95       	reti

00004878 <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    4878:	1f 92       	push	r1
    487a:	0f 92       	push	r0
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	0f 92       	push	r0
    4880:	11 24       	eor	r1, r1
    4882:	2f 93       	push	r18
    4884:	3f 93       	push	r19
    4886:	4f 93       	push	r20
    4888:	5f 93       	push	r21
    488a:	6f 93       	push	r22
    488c:	7f 93       	push	r23
    488e:	8f 93       	push	r24
    4890:	9f 93       	push	r25
    4892:	af 93       	push	r26
    4894:	bf 93       	push	r27
    4896:	ef 93       	push	r30
    4898:	ff 93       	push	r31
    489a:	df 93       	push	r29
    489c:	cf 93       	push	r28
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    48a2:	80 91 09 01 	lds	r24, 0x0109
    48a6:	90 91 0a 01 	lds	r25, 0x010A
    48aa:	00 97       	sbiw	r24, 0x00	; 0
    48ac:	29 f0       	breq	.+10     	; 0x48b8 <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    48ae:	e0 91 09 01 	lds	r30, 0x0109
    48b2:	f0 91 0a 01 	lds	r31, 0x010A
    48b6:	09 95       	icall
	}
}
    48b8:	cf 91       	pop	r28
    48ba:	df 91       	pop	r29
    48bc:	ff 91       	pop	r31
    48be:	ef 91       	pop	r30
    48c0:	bf 91       	pop	r27
    48c2:	af 91       	pop	r26
    48c4:	9f 91       	pop	r25
    48c6:	8f 91       	pop	r24
    48c8:	7f 91       	pop	r23
    48ca:	6f 91       	pop	r22
    48cc:	5f 91       	pop	r21
    48ce:	4f 91       	pop	r20
    48d0:	3f 91       	pop	r19
    48d2:	2f 91       	pop	r18
    48d4:	0f 90       	pop	r0
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	0f 90       	pop	r0
    48da:	1f 90       	pop	r1
    48dc:	18 95       	reti

000048de <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    48de:	df 93       	push	r29
    48e0:	cf 93       	push	r28
    48e2:	00 d0       	rcall	.+0      	; 0x48e4 <UART_init+0x6>
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <UART_init+0x8>
    48e6:	cd b7       	in	r28, 0x3d	; 61
    48e8:	de b7       	in	r29, 0x3e	; 62
    48ea:	9c 83       	std	Y+4, r25	; 0x04
    48ec:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr = 0 ; /* Variable For Baud Rate Register */
    48ee:	1a 82       	std	Y+2, r1	; 0x02
    48f0:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ; /* Double Speed of UART */
    48f2:	eb e2       	ldi	r30, 0x2B	; 43
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	82 e0       	ldi	r24, 0x02	; 2
    48f8:	80 83       	st	Z, r24
	
	UCSRB = (1<<TXEN) | (1<<RXEN) ; /* Enable Receive & Transmit */
    48fa:	ea e2       	ldi	r30, 0x2A	; 42
    48fc:	f0 e0       	ldi	r31, 0x00	; 0
    48fe:	88 e1       	ldi	r24, 0x18	; 24
    4900:	80 83       	st	Z, r24

	/* Configure UCSZ2 By Desired Data Bits */
	UCSRB = (UCSRB & 0xFB) | (GET_BIT(Config_Ptr->bit_data , 2)<<2) ;
    4902:	aa e2       	ldi	r26, 0x2A	; 42
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	ea e2       	ldi	r30, 0x2A	; 42
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	98 2f       	mov	r25, r24
    490e:	9b 7f       	andi	r25, 0xFB	; 251
    4910:	eb 81       	ldd	r30, Y+3	; 0x03
    4912:	fc 81       	ldd	r31, Y+4	; 0x04
    4914:	80 81       	ld	r24, Z
    4916:	84 70       	andi	r24, 0x04	; 4
    4918:	89 2b       	or	r24, r25
    491a:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL) ; /* Set This Bit to Write in UCSRC Reg. */
    491c:	e0 e4       	ldi	r30, 0x40	; 64
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	80 e8       	ldi	r24, 0x80	; 128
    4922:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity<<4) ; /* Configure Parity Bit */
    4924:	a0 e4       	ldi	r26, 0x40	; 64
    4926:	b0 e0       	ldi	r27, 0x00	; 0
    4928:	e0 e4       	ldi	r30, 0x40	; 64
    492a:	f0 e0       	ldi	r31, 0x00	; 0
    492c:	80 81       	ld	r24, Z
    492e:	28 2f       	mov	r18, r24
    4930:	2f 7c       	andi	r18, 0xCF	; 207
    4932:	eb 81       	ldd	r30, Y+3	; 0x03
    4934:	fc 81       	ldd	r31, Y+4	; 0x04
    4936:	81 81       	ldd	r24, Z+1	; 0x01
    4938:	88 2f       	mov	r24, r24
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	82 95       	swap	r24
    493e:	92 95       	swap	r25
    4940:	90 7f       	andi	r25, 0xF0	; 240
    4942:	98 27       	eor	r25, r24
    4944:	80 7f       	andi	r24, 0xF0	; 240
    4946:	98 27       	eor	r25, r24
    4948:	82 2b       	or	r24, r18
    494a:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit<<3); /* Configure Stop Bit */
    494c:	a0 e4       	ldi	r26, 0x40	; 64
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e0 e4       	ldi	r30, 0x40	; 64
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	28 2f       	mov	r18, r24
    4958:	27 7f       	andi	r18, 0xF7	; 247
    495a:	eb 81       	ldd	r30, Y+3	; 0x03
    495c:	fc 81       	ldd	r31, Y+4	; 0x04
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	88 2f       	mov	r24, r24
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	88 0f       	add	r24, r24
    4966:	99 1f       	adc	r25, r25
    4968:	88 0f       	add	r24, r24
    496a:	99 1f       	adc	r25, r25
    496c:	88 0f       	add	r24, r24
    496e:	99 1f       	adc	r25, r25
    4970:	82 2b       	or	r24, r18
    4972:	8c 93       	st	X, r24

	/* Configure UCSZ0:1 By Desired Data Bits */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->bit_data & 0x03)<< 1 ) ;
    4974:	a0 e4       	ldi	r26, 0x40	; 64
    4976:	b0 e0       	ldi	r27, 0x00	; 0
    4978:	e0 e4       	ldi	r30, 0x40	; 64
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	80 81       	ld	r24, Z
    497e:	28 2f       	mov	r18, r24
    4980:	29 7f       	andi	r18, 0xF9	; 249
    4982:	eb 81       	ldd	r30, Y+3	; 0x03
    4984:	fc 81       	ldd	r31, Y+4	; 0x04
    4986:	80 81       	ld	r24, Z
    4988:	88 2f       	mov	r24, r24
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	83 70       	andi	r24, 0x03	; 3
    498e:	90 70       	andi	r25, 0x00	; 0
    4990:	88 0f       	add	r24, r24
    4992:	99 1f       	adc	r25, r25
    4994:	82 2b       	or	r24, r18
    4996:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr = (uint16)((F_CPU / (8UL * Config_Ptr->baud_rate)) - 1) ;
    4998:	eb 81       	ldd	r30, Y+3	; 0x03
    499a:	fc 81       	ldd	r31, Y+4	; 0x04
    499c:	83 81       	ldd	r24, Z+3	; 0x03
    499e:	94 81       	ldd	r25, Z+4	; 0x04
    49a0:	a5 81       	ldd	r26, Z+5	; 0x05
    49a2:	b6 81       	ldd	r27, Z+6	; 0x06
    49a4:	88 0f       	add	r24, r24
    49a6:	99 1f       	adc	r25, r25
    49a8:	aa 1f       	adc	r26, r26
    49aa:	bb 1f       	adc	r27, r27
    49ac:	88 0f       	add	r24, r24
    49ae:	99 1f       	adc	r25, r25
    49b0:	aa 1f       	adc	r26, r26
    49b2:	bb 1f       	adc	r27, r27
    49b4:	88 0f       	add	r24, r24
    49b6:	99 1f       	adc	r25, r25
    49b8:	aa 1f       	adc	r26, r26
    49ba:	bb 1f       	adc	r27, r27
    49bc:	9c 01       	movw	r18, r24
    49be:	ad 01       	movw	r20, r26
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	92 e1       	ldi	r25, 0x12	; 18
    49c4:	aa e7       	ldi	r26, 0x7A	; 122
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	bc 01       	movw	r22, r24
    49ca:	cd 01       	movw	r24, r26
    49cc:	0e 94 91 25 	call	0x4b22	; 0x4b22 <__udivmodsi4>
    49d0:	da 01       	movw	r26, r20
    49d2:	c9 01       	movw	r24, r18
    49d4:	01 97       	sbiw	r24, 0x01	; 1
    49d6:	9a 83       	std	Y+2, r25	; 0x02
    49d8:	89 83       	std	Y+1, r24	; 0x01

	/* Configure UBRR Reg with Desired Baud Rate */
	UBRRH = ubrr>>8 ;
    49da:	e0 e4       	ldi	r30, 0x40	; 64
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	89 81       	ldd	r24, Y+1	; 0x01
    49e0:	9a 81       	ldd	r25, Y+2	; 0x02
    49e2:	89 2f       	mov	r24, r25
    49e4:	99 27       	eor	r25, r25
    49e6:	80 83       	st	Z, r24
	UBRRL = ubrr ;
    49e8:	e9 e2       	ldi	r30, 0x29	; 41
    49ea:	f0 e0       	ldi	r31, 0x00	; 0
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	80 83       	st	Z, r24

}
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	0f 90       	pop	r0
    49f6:	0f 90       	pop	r0
    49f8:	cf 91       	pop	r28
    49fa:	df 91       	pop	r29
    49fc:	08 95       	ret

000049fe <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    49fe:	df 93       	push	r29
    4a00:	cf 93       	push	r28
    4a02:	0f 92       	push	r0
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
    4a08:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    4a0a:	eb e2       	ldi	r30, 0x2B	; 43
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	88 2f       	mov	r24, r24
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	80 72       	andi	r24, 0x20	; 32
    4a16:	90 70       	andi	r25, 0x00	; 0
    4a18:	00 97       	sbiw	r24, 0x00	; 0
    4a1a:	b9 f3       	breq	.-18     	; 0x4a0a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    4a1c:	ec e2       	ldi	r30, 0x2C	; 44
    4a1e:	f0 e0       	ldi	r31, 0x00	; 0
    4a20:	89 81       	ldd	r24, Y+1	; 0x01
    4a22:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    4a24:	0f 90       	pop	r0
    4a26:	cf 91       	pop	r28
    4a28:	df 91       	pop	r29
    4a2a:	08 95       	ret

00004a2c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    4a2c:	df 93       	push	r29
    4a2e:	cf 93       	push	r28
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    4a34:	eb e2       	ldi	r30, 0x2B	; 43
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	80 81       	ld	r24, Z
    4a3a:	88 23       	and	r24, r24
    4a3c:	dc f7       	brge	.-10     	; 0x4a34 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    4a3e:	ec e2       	ldi	r30, 0x2C	; 44
    4a40:	f0 e0       	ldi	r31, 0x00	; 0
    4a42:	80 81       	ld	r24, Z
}
    4a44:	cf 91       	pop	r28
    4a46:	df 91       	pop	r29
    4a48:	08 95       	ret

00004a4a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    4a4a:	df 93       	push	r29
    4a4c:	cf 93       	push	r28
    4a4e:	00 d0       	rcall	.+0      	; 0x4a50 <UART_sendString+0x6>
    4a50:	0f 92       	push	r0
    4a52:	cd b7       	in	r28, 0x3d	; 61
    4a54:	de b7       	in	r29, 0x3e	; 62
    4a56:	9b 83       	std	Y+3, r25	; 0x03
    4a58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4a5a:	19 82       	std	Y+1, r1	; 0x01
    4a5c:	0e c0       	rjmp	.+28     	; 0x4a7a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4a5e:	89 81       	ldd	r24, Y+1	; 0x01
    4a60:	28 2f       	mov	r18, r24
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	8a 81       	ldd	r24, Y+2	; 0x02
    4a66:	9b 81       	ldd	r25, Y+3	; 0x03
    4a68:	fc 01       	movw	r30, r24
    4a6a:	e2 0f       	add	r30, r18
    4a6c:	f3 1f       	adc	r31, r19
    4a6e:	80 81       	ld	r24, Z
    4a70:	0e 94 ff 24 	call	0x49fe	; 0x49fe <UART_sendByte>
		i++;
    4a74:	89 81       	ldd	r24, Y+1	; 0x01
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	28 2f       	mov	r18, r24
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	8a 81       	ldd	r24, Y+2	; 0x02
    4a82:	9b 81       	ldd	r25, Y+3	; 0x03
    4a84:	fc 01       	movw	r30, r24
    4a86:	e2 0f       	add	r30, r18
    4a88:	f3 1f       	adc	r31, r19
    4a8a:	80 81       	ld	r24, Z
    4a8c:	88 23       	and	r24, r24
    4a8e:	39 f7       	brne	.-50     	; 0x4a5e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    4a90:	0f 90       	pop	r0
    4a92:	0f 90       	pop	r0
    4a94:	0f 90       	pop	r0
    4a96:	cf 91       	pop	r28
    4a98:	df 91       	pop	r29
    4a9a:	08 95       	ret

00004a9c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    4a9c:	0f 93       	push	r16
    4a9e:	1f 93       	push	r17
    4aa0:	df 93       	push	r29
    4aa2:	cf 93       	push	r28
    4aa4:	00 d0       	rcall	.+0      	; 0x4aa6 <UART_receiveString+0xa>
    4aa6:	0f 92       	push	r0
    4aa8:	cd b7       	in	r28, 0x3d	; 61
    4aaa:	de b7       	in	r29, 0x3e	; 62
    4aac:	9b 83       	std	Y+3, r25	; 0x03
    4aae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4ab0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    4ab2:	89 81       	ldd	r24, Y+1	; 0x01
    4ab4:	28 2f       	mov	r18, r24
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	9b 81       	ldd	r25, Y+3	; 0x03
    4abc:	8c 01       	movw	r16, r24
    4abe:	02 0f       	add	r16, r18
    4ac0:	13 1f       	adc	r17, r19
    4ac2:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    4ac6:	f8 01       	movw	r30, r16
    4ac8:	80 83       	st	Z, r24
    4aca:	0f c0       	rjmp	.+30     	; 0x4aea <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
    4ace:	8f 5f       	subi	r24, 0xFF	; 255
    4ad0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    4ad2:	89 81       	ldd	r24, Y+1	; 0x01
    4ad4:	28 2f       	mov	r18, r24
    4ad6:	30 e0       	ldi	r19, 0x00	; 0
    4ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    4ada:	9b 81       	ldd	r25, Y+3	; 0x03
    4adc:	8c 01       	movw	r16, r24
    4ade:	02 0f       	add	r16, r18
    4ae0:	13 1f       	adc	r17, r19
    4ae2:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <UART_recieveByte>
    4ae6:	f8 01       	movw	r30, r16
    4ae8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	28 2f       	mov	r18, r24
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	8a 81       	ldd	r24, Y+2	; 0x02
    4af2:	9b 81       	ldd	r25, Y+3	; 0x03
    4af4:	fc 01       	movw	r30, r24
    4af6:	e2 0f       	add	r30, r18
    4af8:	f3 1f       	adc	r31, r19
    4afa:	80 81       	ld	r24, Z
    4afc:	83 32       	cpi	r24, 0x23	; 35
    4afe:	31 f7       	brne	.-52     	; 0x4acc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    4b00:	89 81       	ldd	r24, Y+1	; 0x01
    4b02:	28 2f       	mov	r18, r24
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	8a 81       	ldd	r24, Y+2	; 0x02
    4b08:	9b 81       	ldd	r25, Y+3	; 0x03
    4b0a:	fc 01       	movw	r30, r24
    4b0c:	e2 0f       	add	r30, r18
    4b0e:	f3 1f       	adc	r31, r19
    4b10:	10 82       	st	Z, r1
}
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	0f 90       	pop	r0
    4b18:	cf 91       	pop	r28
    4b1a:	df 91       	pop	r29
    4b1c:	1f 91       	pop	r17
    4b1e:	0f 91       	pop	r16
    4b20:	08 95       	ret

00004b22 <__udivmodsi4>:
    4b22:	a1 e2       	ldi	r26, 0x21	; 33
    4b24:	1a 2e       	mov	r1, r26
    4b26:	aa 1b       	sub	r26, r26
    4b28:	bb 1b       	sub	r27, r27
    4b2a:	fd 01       	movw	r30, r26
    4b2c:	0d c0       	rjmp	.+26     	; 0x4b48 <__udivmodsi4_ep>

00004b2e <__udivmodsi4_loop>:
    4b2e:	aa 1f       	adc	r26, r26
    4b30:	bb 1f       	adc	r27, r27
    4b32:	ee 1f       	adc	r30, r30
    4b34:	ff 1f       	adc	r31, r31
    4b36:	a2 17       	cp	r26, r18
    4b38:	b3 07       	cpc	r27, r19
    4b3a:	e4 07       	cpc	r30, r20
    4b3c:	f5 07       	cpc	r31, r21
    4b3e:	20 f0       	brcs	.+8      	; 0x4b48 <__udivmodsi4_ep>
    4b40:	a2 1b       	sub	r26, r18
    4b42:	b3 0b       	sbc	r27, r19
    4b44:	e4 0b       	sbc	r30, r20
    4b46:	f5 0b       	sbc	r31, r21

00004b48 <__udivmodsi4_ep>:
    4b48:	66 1f       	adc	r22, r22
    4b4a:	77 1f       	adc	r23, r23
    4b4c:	88 1f       	adc	r24, r24
    4b4e:	99 1f       	adc	r25, r25
    4b50:	1a 94       	dec	r1
    4b52:	69 f7       	brne	.-38     	; 0x4b2e <__udivmodsi4_loop>
    4b54:	60 95       	com	r22
    4b56:	70 95       	com	r23
    4b58:	80 95       	com	r24
    4b5a:	90 95       	com	r25
    4b5c:	9b 01       	movw	r18, r22
    4b5e:	ac 01       	movw	r20, r24
    4b60:	bd 01       	movw	r22, r26
    4b62:	cf 01       	movw	r24, r30
    4b64:	08 95       	ret

00004b66 <__prologue_saves__>:
    4b66:	2f 92       	push	r2
    4b68:	3f 92       	push	r3
    4b6a:	4f 92       	push	r4
    4b6c:	5f 92       	push	r5
    4b6e:	6f 92       	push	r6
    4b70:	7f 92       	push	r7
    4b72:	8f 92       	push	r8
    4b74:	9f 92       	push	r9
    4b76:	af 92       	push	r10
    4b78:	bf 92       	push	r11
    4b7a:	cf 92       	push	r12
    4b7c:	df 92       	push	r13
    4b7e:	ef 92       	push	r14
    4b80:	ff 92       	push	r15
    4b82:	0f 93       	push	r16
    4b84:	1f 93       	push	r17
    4b86:	cf 93       	push	r28
    4b88:	df 93       	push	r29
    4b8a:	cd b7       	in	r28, 0x3d	; 61
    4b8c:	de b7       	in	r29, 0x3e	; 62
    4b8e:	ca 1b       	sub	r28, r26
    4b90:	db 0b       	sbc	r29, r27
    4b92:	0f b6       	in	r0, 0x3f	; 63
    4b94:	f8 94       	cli
    4b96:	de bf       	out	0x3e, r29	; 62
    4b98:	0f be       	out	0x3f, r0	; 63
    4b9a:	cd bf       	out	0x3d, r28	; 61
    4b9c:	09 94       	ijmp

00004b9e <__epilogue_restores__>:
    4b9e:	2a 88       	ldd	r2, Y+18	; 0x12
    4ba0:	39 88       	ldd	r3, Y+17	; 0x11
    4ba2:	48 88       	ldd	r4, Y+16	; 0x10
    4ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4baa:	8c 84       	ldd	r8, Y+12	; 0x0c
    4bac:	9b 84       	ldd	r9, Y+11	; 0x0b
    4bae:	aa 84       	ldd	r10, Y+10	; 0x0a
    4bb0:	b9 84       	ldd	r11, Y+9	; 0x09
    4bb2:	c8 84       	ldd	r12, Y+8	; 0x08
    4bb4:	df 80       	ldd	r13, Y+7	; 0x07
    4bb6:	ee 80       	ldd	r14, Y+6	; 0x06
    4bb8:	fd 80       	ldd	r15, Y+5	; 0x05
    4bba:	0c 81       	ldd	r16, Y+4	; 0x04
    4bbc:	1b 81       	ldd	r17, Y+3	; 0x03
    4bbe:	aa 81       	ldd	r26, Y+2	; 0x02
    4bc0:	b9 81       	ldd	r27, Y+1	; 0x01
    4bc2:	ce 0f       	add	r28, r30
    4bc4:	d1 1d       	adc	r29, r1
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	f8 94       	cli
    4bca:	de bf       	out	0x3e, r29	; 62
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	ed 01       	movw	r28, r26
    4bd2:	08 95       	ret

00004bd4 <itoa>:
    4bd4:	fb 01       	movw	r30, r22
    4bd6:	9f 01       	movw	r18, r30
    4bd8:	e8 94       	clt
    4bda:	42 30       	cpi	r20, 0x02	; 2
    4bdc:	c4 f0       	brlt	.+48     	; 0x4c0e <itoa+0x3a>
    4bde:	45 32       	cpi	r20, 0x25	; 37
    4be0:	b4 f4       	brge	.+44     	; 0x4c0e <itoa+0x3a>
    4be2:	4a 30       	cpi	r20, 0x0A	; 10
    4be4:	29 f4       	brne	.+10     	; 0x4bf0 <itoa+0x1c>
    4be6:	97 fb       	bst	r25, 7
    4be8:	1e f4       	brtc	.+6      	; 0x4bf0 <itoa+0x1c>
    4bea:	90 95       	com	r25
    4bec:	81 95       	neg	r24
    4bee:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf0:	64 2f       	mov	r22, r20
    4bf2:	77 27       	eor	r23, r23
    4bf4:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__udivmodhi4>
    4bf8:	80 5d       	subi	r24, 0xD0	; 208
    4bfa:	8a 33       	cpi	r24, 0x3A	; 58
    4bfc:	0c f0       	brlt	.+2      	; 0x4c00 <itoa+0x2c>
    4bfe:	89 5d       	subi	r24, 0xD9	; 217
    4c00:	81 93       	st	Z+, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	00 97       	sbiw	r24, 0x00	; 0
    4c06:	a1 f7       	brne	.-24     	; 0x4bf0 <itoa+0x1c>
    4c08:	16 f4       	brtc	.+4      	; 0x4c0e <itoa+0x3a>
    4c0a:	5d e2       	ldi	r21, 0x2D	; 45
    4c0c:	51 93       	st	Z+, r21
    4c0e:	10 82       	st	Z, r1
    4c10:	c9 01       	movw	r24, r18
    4c12:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <strrev>

00004c16 <strrev>:
    4c16:	dc 01       	movw	r26, r24
    4c18:	fc 01       	movw	r30, r24
    4c1a:	67 2f       	mov	r22, r23
    4c1c:	71 91       	ld	r23, Z+
    4c1e:	77 23       	and	r23, r23
    4c20:	e1 f7       	brne	.-8      	; 0x4c1a <strrev+0x4>
    4c22:	32 97       	sbiw	r30, 0x02	; 2
    4c24:	04 c0       	rjmp	.+8      	; 0x4c2e <strrev+0x18>
    4c26:	7c 91       	ld	r23, X
    4c28:	6d 93       	st	X+, r22
    4c2a:	70 83       	st	Z, r23
    4c2c:	62 91       	ld	r22, -Z
    4c2e:	ae 17       	cp	r26, r30
    4c30:	bf 07       	cpc	r27, r31
    4c32:	c8 f3       	brcs	.-14     	; 0x4c26 <strrev+0x10>
    4c34:	08 95       	ret

00004c36 <__udivmodhi4>:
    4c36:	aa 1b       	sub	r26, r26
    4c38:	bb 1b       	sub	r27, r27
    4c3a:	51 e1       	ldi	r21, 0x11	; 17
    4c3c:	07 c0       	rjmp	.+14     	; 0x4c4c <__udivmodhi4_ep>

00004c3e <__udivmodhi4_loop>:
    4c3e:	aa 1f       	adc	r26, r26
    4c40:	bb 1f       	adc	r27, r27
    4c42:	a6 17       	cp	r26, r22
    4c44:	b7 07       	cpc	r27, r23
    4c46:	10 f0       	brcs	.+4      	; 0x4c4c <__udivmodhi4_ep>
    4c48:	a6 1b       	sub	r26, r22
    4c4a:	b7 0b       	sbc	r27, r23

00004c4c <__udivmodhi4_ep>:
    4c4c:	88 1f       	adc	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	5a 95       	dec	r21
    4c52:	a9 f7       	brne	.-22     	; 0x4c3e <__udivmodhi4_loop>
    4c54:	80 95       	com	r24
    4c56:	90 95       	com	r25
    4c58:	bc 01       	movw	r22, r24
    4c5a:	cd 01       	movw	r24, r26
    4c5c:	08 95       	ret

00004c5e <_exit>:
    4c5e:	f8 94       	cli

00004c60 <__stop_program>:
    4c60:	ff cf       	rjmp	.-2      	; 0x4c60 <__stop_program>
