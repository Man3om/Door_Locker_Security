
Door_Locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000343a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  0000343a  000034ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800108  00800108  00003576  2**0
                  ALLOC
  3 .stab         00002e50  00000000  00000000  00003578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000116b  00000000  00000000  000063c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007533  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007693  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__vector_7>
      20:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_8>
      24:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 09 	call	0x139a	; 0x139a <main>
      8a:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ef       	ldi	r22, 0xF2	; 242
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 af 19 	jmp	0x335e	; 0x335e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer>:

/*********************************************************************************
 *                            Users Function                                  *
 ********************************************************************************/
void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     ca6:	80 91 08 01 	lds	r24, 0x0108
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 08 01 	sts	0x0108, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <delay>:
 * Description: Delay Function using Timer 1
 * Input: Number of Seconds
 * Return: Void
 */
void delay(uint8 second)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	2c 97       	sbiw	r28, 0x0c	; 12
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	8f 83       	std	Y+7, r24	; 0x07
	/* Configure Timer With Desired Specifications */
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	99 87       	std	Y+9, r25	; 0x09
     cd2:	88 87       	std	Y+8, r24	; 0x08
     cd4:	ea ef       	ldi	r30, 0xFA	; 250
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	fb 87       	std	Y+11, r31	; 0x0b
     cda:	ea 87       	std	Y+10, r30	; 0x0a
     cdc:	f6 e0       	ldi	r31, 0x06	; 6
     cde:	fc 87       	std	Y+12, r31	; 0x0c
     ce0:	ea 85       	ldd	r30, Y+10	; 0x0a
     ce2:	fb 85       	ldd	r31, Y+11	; 0x0b
     ce4:	00 80       	ld	r0, Z
     ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	9b 87       	std	Y+11, r25	; 0x0b
     cee:	8a 87       	std	Y+10, r24	; 0x0a
     cf0:	e8 85       	ldd	r30, Y+8	; 0x08
     cf2:	f9 85       	ldd	r31, Y+9	; 0x09
     cf4:	00 82       	st	Z, r0
     cf6:	88 85       	ldd	r24, Y+8	; 0x08
     cf8:	99 85       	ldd	r25, Y+9	; 0x09
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	99 87       	std	Y+9, r25	; 0x09
     cfe:	88 87       	std	Y+8, r24	; 0x08
     d00:	9c 85       	ldd	r25, Y+12	; 0x0c
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	9c 87       	std	Y+12, r25	; 0x0c
     d06:	ec 85       	ldd	r30, Y+12	; 0x0c
     d08:	ee 23       	and	r30, r30
     d0a:	51 f7       	brne	.-44     	; 0xce0 <delay+0x2a>
	Timer1_init(&t_configure); /* Start Timer */
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	0e 94 40 17 	call	0x2e80	; 0x2e80 <Timer1_init>
	while(g_count != second); /* Waiting */
     d14:	90 91 08 01 	lds	r25, 0x0108
     d18:	8f 81       	ldd	r24, Y+7	; 0x07
     d1a:	98 17       	cp	r25, r24
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <delay+0x5e>
	Timer1_deInit(); /* Stop Timer */
     d1e:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <Timer1_deInit>
	g_count = 0 ;
     d22:	10 92 08 01 	sts	0x0108, r1
}
     d26:	2c 96       	adiw	r28, 0x0c	; 12
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <SendPass>:
 * Input: Array
 * Return: Void
 *
 */
void SendPass(uint8 *pass)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	6b 97       	sbiw	r28, 0x1b	; 27
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	9b 8f       	std	Y+27, r25	; 0x1b
     d4e:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 i = 0 ;
     d50:	19 8e       	std	Y+25, r1	; 0x19

	for(i = 0 ; i < 5 ; i++)
     d52:	19 8e       	std	Y+25, r1	; 0x19
     d54:	cc c0       	rjmp	.+408    	; 0xeee <SendPass+0x1b6>
	{
		UART_sendByte(pass[i]);
     d56:	89 8d       	ldd	r24, Y+25	; 0x19
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d5e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	80 81       	ld	r24, Z
     d68:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 ea       	ldi	r26, 0xA0	; 160
     d72:	b1 e4       	ldi	r27, 0x41	; 65
     d74:	8d 8b       	std	Y+21, r24	; 0x15
     d76:	9e 8b       	std	Y+22, r25	; 0x16
     d78:	af 8b       	std	Y+23, r26	; 0x17
     d7a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d7c:	6d 89       	ldd	r22, Y+21	; 0x15
     d7e:	7e 89       	ldd	r23, Y+22	; 0x16
     d80:	8f 89       	ldd	r24, Y+23	; 0x17
     d82:	98 8d       	ldd	r25, Y+24	; 0x18
     d84:	2b ea       	ldi	r18, 0xAB	; 171
     d86:	3a ea       	ldi	r19, 0xAA	; 170
     d88:	4a e2       	ldi	r20, 0x2A	; 42
     d8a:	50 e4       	ldi	r21, 0x40	; 64
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	89 8b       	std	Y+17, r24	; 0x11
     d96:	9a 8b       	std	Y+18, r25	; 0x12
     d98:	ab 8b       	std	Y+19, r26	; 0x13
     d9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d9c:	69 89       	ldd	r22, Y+17	; 0x11
     d9e:	7a 89       	ldd	r23, Y+18	; 0x12
     da0:	8b 89       	ldd	r24, Y+19	; 0x13
     da2:	9c 89       	ldd	r25, Y+20	; 0x14
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	1c f4       	brge	.+6      	; 0xdba <SendPass+0x82>
		__ticks = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	88 8b       	std	Y+16, r24	; 0x10
     db8:	91 c0       	rjmp	.+290    	; 0xedc <SendPass+0x1a4>
	else if (__tmp > 255)
     dba:	69 89       	ldd	r22, Y+17	; 0x11
     dbc:	7a 89       	ldd	r23, Y+18	; 0x12
     dbe:	8b 89       	ldd	r24, Y+19	; 0x13
     dc0:	9c 89       	ldd	r25, Y+20	; 0x14
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	53 e4       	ldi	r21, 0x43	; 67
     dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	0c f0       	brlt	.+2      	; 0xdd4 <SendPass+0x9c>
     dd2:	7b c0       	rjmp	.+246    	; 0xeca <SendPass+0x192>
	{
		_delay_ms(__us / 1000.0);
     dd4:	6d 89       	ldd	r22, Y+21	; 0x15
     dd6:	7e 89       	ldd	r23, Y+22	; 0x16
     dd8:	8f 89       	ldd	r24, Y+23	; 0x17
     dda:	98 8d       	ldd	r25, Y+24	; 0x18
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	4a e7       	ldi	r20, 0x7A	; 122
     de2:	54 e4       	ldi	r21, 0x44	; 68
     de4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	8c 87       	std	Y+12, r24	; 0x0c
     dee:	9d 87       	std	Y+13, r25	; 0x0d
     df0:	ae 87       	std	Y+14, r26	; 0x0e
     df2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df4:	6c 85       	ldd	r22, Y+12	; 0x0c
     df6:	7d 85       	ldd	r23, Y+13	; 0x0d
     df8:	8e 85       	ldd	r24, Y+14	; 0x0e
     dfa:	9f 85       	ldd	r25, Y+15	; 0x0f
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	4a ef       	ldi	r20, 0xFA	; 250
     e02:	54 e4       	ldi	r21, 0x44	; 68
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	88 87       	std	Y+8, r24	; 0x08
     e0e:	99 87       	std	Y+9, r25	; 0x09
     e10:	aa 87       	std	Y+10, r26	; 0x0a
     e12:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     e14:	68 85       	ldd	r22, Y+8	; 0x08
     e16:	79 85       	ldd	r23, Y+9	; 0x09
     e18:	8a 85       	ldd	r24, Y+10	; 0x0a
     e1a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e28:	88 23       	and	r24, r24
     e2a:	2c f4       	brge	.+10     	; 0xe36 <SendPass+0xfe>
		__ticks = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9f 83       	std	Y+7, r25	; 0x07
     e32:	8e 83       	std	Y+6, r24	; 0x06
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <SendPass+0x17c>
	else if (__tmp > 65535)
     e36:	68 85       	ldd	r22, Y+8	; 0x08
     e38:	79 85       	ldd	r23, Y+9	; 0x09
     e3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	4c f5       	brge	.+82     	; 0xea0 <SendPass+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4e:	6c 85       	ldd	r22, Y+12	; 0x0c
     e50:	7d 85       	ldd	r23, Y+13	; 0x0d
     e52:	8e 85       	ldd	r24, Y+14	; 0x0e
     e54:	9f 85       	ldd	r25, Y+15	; 0x0f
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9f 83       	std	Y+7, r25	; 0x07
     e74:	8e 83       	std	Y+6, r24	; 0x06
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <SendPass+0x15e>
     e78:	88 ec       	ldi	r24, 0xC8	; 200
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9d 83       	std	Y+5, r25	; 0x05
     e7e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <SendPass+0x14c>
     e88:	9d 83       	std	Y+5, r25	; 0x05
     e8a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8c:	8e 81       	ldd	r24, Y+6	; 0x06
     e8e:	9f 81       	ldd	r25, Y+7	; 0x07
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	9f 83       	std	Y+7, r25	; 0x07
     e94:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	9f 81       	ldd	r25, Y+7	; 0x07
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	69 f7       	brne	.-38     	; 0xe78 <SendPass+0x140>
     e9e:	24 c0       	rjmp	.+72     	; 0xee8 <SendPass+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea0:	68 85       	ldd	r22, Y+8	; 0x08
     ea2:	79 85       	ldd	r23, Y+9	; 0x09
     ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9f 83       	std	Y+7, r25	; 0x07
     eb2:	8e 83       	std	Y+6, r24	; 0x06
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	9b 83       	std	Y+3, r25	; 0x03
     eba:	8a 83       	std	Y+2, r24	; 0x02
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <SendPass+0x188>
     ec4:	9b 83       	std	Y+3, r25	; 0x03
     ec6:	8a 83       	std	Y+2, r24	; 0x02
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <SendPass+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     eca:	69 89       	ldd	r22, Y+17	; 0x11
     ecc:	7a 89       	ldd	r23, Y+18	; 0x12
     ece:	8b 89       	ldd	r24, Y+19	; 0x13
     ed0:	9c 89       	ldd	r25, Y+20	; 0x14
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	88 8b       	std	Y+16, r24	; 0x10
     edc:	88 89       	ldd	r24, Y+16	; 0x10
     ede:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	8a 95       	dec	r24
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <SendPass+0x1aa>
     ee6:	89 83       	std	Y+1, r24	; 0x01
 */
void SendPass(uint8 *pass)
{
	uint8 i = 0 ;

	for(i = 0 ; i < 5 ; i++)
     ee8:	89 8d       	ldd	r24, Y+25	; 0x19
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	89 8f       	std	Y+25, r24	; 0x19
     eee:	89 8d       	ldd	r24, Y+25	; 0x19
     ef0:	85 30       	cpi	r24, 0x05	; 5
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <SendPass+0x1be>
     ef4:	30 cf       	rjmp	.-416    	; 0xd56 <SendPass+0x1e>
	{
		UART_sendByte(pass[i]);

		_delay_us(20);
	}
}
     ef6:	6b 96       	adiw	r28, 0x1b	; 27
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <Enter_pass>:
 * Input: Array
 * Return: Void
 *
 */
void Enter_pass(uint8 *pass)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	62 97       	sbiw	r28, 0x12	; 18
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	9a 8b       	std	Y+18, r25	; 0x12
     f1e:	89 8b       	std	Y+17, r24	; 0x11
	uint8 key = 0 , i = 0 ;
     f20:	18 8a       	std	Y+16, r1	; 0x10
     f22:	1f 86       	std	Y+15, r1	; 0x0f

	for(i = 0 ; i < 5 ; i++)
     f24:	1f 86       	std	Y+15, r1	; 0x0f
     f26:	85 c0       	rjmp	.+266    	; 0x1032 <Enter_pass+0x12a>
	{
		key = KEYPAD_getPressedKey() ;
     f28:	0e 94 8a 10 	call	0x2114	; 0x2114 <KEYPAD_getPressedKey>
     f2c:	88 8b       	std	Y+16, r24	; 0x10
		pass[i] = key ;
     f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	89 89       	ldd	r24, Y+17	; 0x11
     f36:	9a 89       	ldd	r25, Y+18	; 0x12
     f38:	fc 01       	movw	r30, r24
     f3a:	e2 0f       	add	r30, r18
     f3c:	f3 1f       	adc	r31, r19
     f3e:	88 89       	ldd	r24, Y+16	; 0x10
     f40:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     f42:	8a e2       	ldi	r24, 0x2A	; 42
     f44:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_displayCharacter>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	aa ef       	ldi	r26, 0xFA	; 250
     f4e:	b3 e4       	ldi	r27, 0x43	; 67
     f50:	8b 87       	std	Y+11, r24	; 0x0b
     f52:	9c 87       	std	Y+12, r25	; 0x0c
     f54:	ad 87       	std	Y+13, r26	; 0x0d
     f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f58:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4a ef       	ldi	r20, 0xFA	; 250
     f66:	54 e4       	ldi	r21, 0x44	; 68
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	8f 83       	std	Y+7, r24	; 0x07
     f72:	98 87       	std	Y+8, r25	; 0x08
     f74:	a9 87       	std	Y+9, r26	; 0x09
     f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	2c f4       	brge	.+10     	; 0xf9a <Enter_pass+0x92>
		__ticks = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
     f98:	3f c0       	rjmp	.+126    	; 0x1018 <Enter_pass+0x110>
	else if (__tmp > 65535)
     f9a:	6f 81       	ldd	r22, Y+7	; 0x07
     f9c:	78 85       	ldd	r23, Y+8	; 0x08
     f9e:	89 85       	ldd	r24, Y+9	; 0x09
     fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	57 e4       	ldi	r21, 0x47	; 71
     faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fae:	18 16       	cp	r1, r24
     fb0:	4c f5       	brge	.+82     	; 0x1004 <Enter_pass+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	0f c0       	rjmp	.+30     	; 0xffa <Enter_pass+0xf2>
     fdc:	88 ec       	ldi	r24, 0xC8	; 200
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <Enter_pass+0xe0>
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f7       	brne	.-38     	; 0xfdc <Enter_pass+0xd4>
    1002:	14 c0       	rjmp	.+40     	; 0x102c <Enter_pass+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <Enter_pass+0x11c>
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
 */
void Enter_pass(uint8 *pass)
{
	uint8 key = 0 , i = 0 ;

	for(i = 0 ; i < 5 ; i++)
    102c:	8f 85       	ldd	r24, Y+15	; 0x0f
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	8f 87       	std	Y+15, r24	; 0x0f
    1032:	8f 85       	ldd	r24, Y+15	; 0x0f
    1034:	85 30       	cpi	r24, 0x05	; 5
    1036:	08 f4       	brcc	.+2      	; 0x103a <Enter_pass+0x132>
    1038:	77 cf       	rjmp	.-274    	; 0xf28 <Enter_pass+0x20>
		pass[i] = key ;
		LCD_displayCharacter('*');
		_delay_ms(500);
	}

}
    103a:	62 96       	adiw	r28, 0x12	; 18
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <waiting>:
 * Description: Function for waiting user to press Enter
 * Input: Void
 * Return: Void
 */
void waiting()
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	2f 97       	sbiw	r28, 0x0f	; 15
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0 ;
    1060:	1f 86       	std	Y+15, r1	; 0x0f

	do
	{
		key = KEYPAD_getPressedKey() ;
    1062:	0e 94 8a 10 	call	0x2114	; 0x2114 <KEYPAD_getPressedKey>
    1066:	8f 87       	std	Y+15, r24	; 0x0f
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	aa ef       	ldi	r26, 0xFA	; 250
    106e:	b3 e4       	ldi	r27, 0x43	; 67
    1070:	8b 87       	std	Y+11, r24	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	ad 87       	std	Y+13, r26	; 0x0d
    1076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1078:	6b 85       	ldd	r22, Y+11	; 0x0b
    107a:	7c 85       	ldd	r23, Y+12	; 0x0c
    107c:	8d 85       	ldd	r24, Y+13	; 0x0d
    107e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	4a ef       	ldi	r20, 0xFA	; 250
    1086:	54 e4       	ldi	r21, 0x44	; 68
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	a9 87       	std	Y+9, r26	; 0x09
    1096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1098:	6f 81       	ldd	r22, Y+7	; 0x07
    109a:	78 85       	ldd	r23, Y+8	; 0x08
    109c:	89 85       	ldd	r24, Y+9	; 0x09
    109e:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	2c f4       	brge	.+10     	; 0x10ba <waiting+0x6e>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	3f c0       	rjmp	.+126    	; 0x1138 <waiting+0xec>
	else if (__tmp > 65535)
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	4f e7       	ldi	r20, 0x7F	; 127
    10c8:	57 e4       	ldi	r21, 0x47	; 71
    10ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	4c f5       	brge	.+82     	; 0x1124 <waiting+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e2       	ldi	r20, 0x20	; 32
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <waiting+0xce>
    10fc:	88 ec       	ldi	r24, 0xC8	; 200
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <waiting+0xbc>
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	69 f7       	brne	.-38     	; 0x10fc <waiting+0xb0>
    1122:	14 c0       	rjmp	.+40     	; 0x114c <waiting+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1124:	6f 81       	ldd	r22, Y+7	; 0x07
    1126:	78 85       	ldd	r23, Y+8	; 0x08
    1128:	89 85       	ldd	r24, Y+9	; 0x09
    112a:	9a 85       	ldd	r25, Y+10	; 0x0a
    112c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <waiting+0xf8>
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	} while(key != 13);
    114c:	8f 85       	ldd	r24, Y+15	; 0x0f
    114e:	8d 30       	cpi	r24, 0x0D	; 13
    1150:	09 f0       	breq	.+2      	; 0x1154 <waiting+0x108>
    1152:	87 cf       	rjmp	.-242    	; 0x1062 <waiting+0x16>
}
    1154:	2f 96       	adiw	r28, 0x0f	; 15
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <St_Error>:
 * Description: Function To handle Wrong Password
 * Input: Void
 * Return: Void
 */
void St_Error(uint8 *Status)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	a2 97       	sbiw	r28, 0x22	; 34
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	9a a3       	std	Y+34, r25	; 0x22
    117c:	89 a3       	std	Y+33, r24	; 0x21
	uint8 i = 0 , key = 0  , pass[5] = {0} , count = 0 ;
    117e:	1b 8e       	std	Y+27, r1	; 0x1b
    1180:	1a 8e       	std	Y+26, r1	; 0x1a
    1182:	85 e0       	ldi	r24, 0x05	; 5
    1184:	fe 01       	movw	r30, r28
    1186:	7c 96       	adiw	r30, 0x1c	; 28
    1188:	df 01       	movw	r26, r30
    118a:	98 2f       	mov	r25, r24
    118c:	1d 92       	st	X+, r1
    118e:	9a 95       	dec	r25
    1190:	e9 f7       	brne	.-6      	; 0x118c <St_Error+0x26>
    1192:	19 8e       	std	Y+25, r1	; 0x19

	do
	{
		count++;
    1194:	89 8d       	ldd	r24, Y+25	; 0x19
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	89 8f       	std	Y+25, r24	; 0x19

		LCD_clearScreen();
    119a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
		LCD_displayString("PLZ Enter Pass:");
    119e:	80 e6       	ldi	r24, 0x60	; 96
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
		LCD_moveCursor(1, 0);
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_moveCursor>

		/* Enter The Password */
		Enter_pass(pass);
    11ae:	ce 01       	movw	r24, r28
    11b0:	4c 96       	adiw	r24, 0x1c	; 28
    11b2:	0e 94 84 07 	call	0xf08	; 0xf08 <Enter_pass>

		/* Waiting User to press The Enter Button */
		waiting();
    11b6:	0e 94 26 08 	call	0x104c	; 0x104c <waiting>

		UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */
    11ba:	81 e1       	ldi	r24, 0x11	; 17
    11bc:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 ea       	ldi	r26, 0xA0	; 160
    11c6:	b1 e4       	ldi	r27, 0x41	; 65
    11c8:	8d 8b       	std	Y+21, r24	; 0x15
    11ca:	9e 8b       	std	Y+22, r25	; 0x16
    11cc:	af 8b       	std	Y+23, r26	; 0x17
    11ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11d0:	6d 89       	ldd	r22, Y+21	; 0x15
    11d2:	7e 89       	ldd	r23, Y+22	; 0x16
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	2b ea       	ldi	r18, 0xAB	; 171
    11da:	3a ea       	ldi	r19, 0xAA	; 170
    11dc:	4a e2       	ldi	r20, 0x2A	; 42
    11de:	50 e4       	ldi	r21, 0x40	; 64
    11e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	89 8b       	std	Y+17, r24	; 0x11
    11ea:	9a 8b       	std	Y+18, r25	; 0x12
    11ec:	ab 8b       	std	Y+19, r26	; 0x13
    11ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    11f0:	69 89       	ldd	r22, Y+17	; 0x11
    11f2:	7a 89       	ldd	r23, Y+18	; 0x12
    11f4:	8b 89       	ldd	r24, Y+19	; 0x13
    11f6:	9c 89       	ldd	r25, Y+20	; 0x14
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e8       	ldi	r20, 0x80	; 128
    11fe:	5f e3       	ldi	r21, 0x3F	; 63
    1200:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1204:	88 23       	and	r24, r24
    1206:	1c f4       	brge	.+6      	; 0x120e <St_Error+0xa8>
		__ticks = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	88 8b       	std	Y+16, r24	; 0x10
    120c:	91 c0       	rjmp	.+290    	; 0x1330 <St_Error+0x1ca>
	else if (__tmp > 255)
    120e:	69 89       	ldd	r22, Y+17	; 0x11
    1210:	7a 89       	ldd	r23, Y+18	; 0x12
    1212:	8b 89       	ldd	r24, Y+19	; 0x13
    1214:	9c 89       	ldd	r25, Y+20	; 0x14
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	53 e4       	ldi	r21, 0x43	; 67
    121e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	0c f0       	brlt	.+2      	; 0x1228 <St_Error+0xc2>
    1226:	7b c0       	rjmp	.+246    	; 0x131e <St_Error+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    1228:	6d 89       	ldd	r22, Y+21	; 0x15
    122a:	7e 89       	ldd	r23, Y+22	; 0x16
    122c:	8f 89       	ldd	r24, Y+23	; 0x17
    122e:	98 8d       	ldd	r25, Y+24	; 0x18
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	4a e7       	ldi	r20, 0x7A	; 122
    1236:	54 e4       	ldi	r21, 0x44	; 68
    1238:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8c 87       	std	Y+12, r24	; 0x0c
    1242:	9d 87       	std	Y+13, r25	; 0x0d
    1244:	ae 87       	std	Y+14, r26	; 0x0e
    1246:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1248:	6c 85       	ldd	r22, Y+12	; 0x0c
    124a:	7d 85       	ldd	r23, Y+13	; 0x0d
    124c:	8e 85       	ldd	r24, Y+14	; 0x0e
    124e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4a ef       	ldi	r20, 0xFA	; 250
    1256:	54 e4       	ldi	r21, 0x44	; 68
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	88 87       	std	Y+8, r24	; 0x08
    1262:	99 87       	std	Y+9, r25	; 0x09
    1264:	aa 87       	std	Y+10, r26	; 0x0a
    1266:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1268:	68 85       	ldd	r22, Y+8	; 0x08
    126a:	79 85       	ldd	r23, Y+9	; 0x09
    126c:	8a 85       	ldd	r24, Y+10	; 0x0a
    126e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <St_Error+0x124>
		__ticks = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9f 83       	std	Y+7, r25	; 0x07
    1286:	8e 83       	std	Y+6, r24	; 0x06
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <St_Error+0x1a2>
	else if (__tmp > 65535)
    128a:	68 85       	ldd	r22, Y+8	; 0x08
    128c:	79 85       	ldd	r23, Y+9	; 0x09
    128e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1290:	9b 85       	ldd	r25, Y+11	; 0x0b
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	3f ef       	ldi	r19, 0xFF	; 255
    1296:	4f e7       	ldi	r20, 0x7F	; 127
    1298:	57 e4       	ldi	r21, 0x47	; 71
    129a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    129e:	18 16       	cp	r1, r24
    12a0:	4c f5       	brge	.+82     	; 0x12f4 <St_Error+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    12a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    12a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9f 83       	std	Y+7, r25	; 0x07
    12c8:	8e 83       	std	Y+6, r24	; 0x06
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <St_Error+0x184>
    12cc:	88 ec       	ldi	r24, 0xC8	; 200
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9d 83       	std	Y+5, r25	; 0x05
    12d2:	8c 83       	std	Y+4, r24	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <St_Error+0x172>
    12dc:	9d 83       	std	Y+5, r25	; 0x05
    12de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	8e 81       	ldd	r24, Y+6	; 0x06
    12e2:	9f 81       	ldd	r25, Y+7	; 0x07
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9f 83       	std	Y+7, r25	; 0x07
    12e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	69 f7       	brne	.-38     	; 0x12cc <St_Error+0x166>
    12f2:	24 c0       	rjmp	.+72     	; 0x133c <St_Error+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	68 85       	ldd	r22, Y+8	; 0x08
    12f6:	79 85       	ldd	r23, Y+9	; 0x09
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9f 83       	std	Y+7, r25	; 0x07
    1306:	8e 83       	std	Y+6, r24	; 0x06
    1308:	8e 81       	ldd	r24, Y+6	; 0x06
    130a:	9f 81       	ldd	r25, Y+7	; 0x07
    130c:	9b 83       	std	Y+3, r25	; 0x03
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <St_Error+0x1ae>
    1318:	9b 83       	std	Y+3, r25	; 0x03
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	0f c0       	rjmp	.+30     	; 0x133c <St_Error+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    131e:	69 89       	ldd	r22, Y+17	; 0x11
    1320:	7a 89       	ldd	r23, Y+18	; 0x12
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	88 8b       	std	Y+16, r24	; 0x10
    1330:	88 89       	ldd	r24, Y+16	; 0x10
    1332:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	8a 95       	dec	r24
    1338:	f1 f7       	brne	.-4      	; 0x1336 <St_Error+0x1d0>
    133a:	89 83       	std	Y+1, r24	; 0x01

		_delay_us(20);

		/* Send Password To 2nd MCU */
		SendPass(pass);
    133c:	ce 01       	movw	r24, r28
    133e:	4c 96       	adiw	r24, 0x1c	; 28
    1340:	0e 94 9c 06 	call	0xd38	; 0xd38 <SendPass>

		*Status = UART_recieveByte(); /* Waiting Checking Result From 2nd MCU */
    1344:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    1348:	e9 a1       	ldd	r30, Y+33	; 0x21
    134a:	fa a1       	ldd	r31, Y+34	; 0x22
    134c:	80 83       	st	Z, r24
	}while((count != 2) && (*Status == ERROR));
    134e:	89 8d       	ldd	r24, Y+25	; 0x19
    1350:	82 30       	cpi	r24, 0x02	; 2
    1352:	31 f0       	breq	.+12     	; 0x1360 <St_Error+0x1fa>
    1354:	e9 a1       	ldd	r30, Y+33	; 0x21
    1356:	fa a1       	ldd	r31, Y+34	; 0x22
    1358:	80 81       	ld	r24, Z
    135a:	88 23       	and	r24, r24
    135c:	09 f4       	brne	.+2      	; 0x1360 <St_Error+0x1fa>
    135e:	1a cf       	rjmp	.-460    	; 0x1194 <St_Error+0x2e>

	if((count == 2) && (*Status == ERROR))
    1360:	89 8d       	ldd	r24, Y+25	; 0x19
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	89 f4       	brne	.+34     	; 0x1388 <St_Error+0x222>
    1366:	e9 a1       	ldd	r30, Y+33	; 0x21
    1368:	fa a1       	ldd	r31, Y+34	; 0x22
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	61 f4       	brne	.+24     	; 0x1388 <St_Error+0x222>
	{
		UART_sendByte(BUZZER);
    1370:	84 e1       	ldi	r24, 0x14	; 20
    1372:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		LCD_clearScreen();
    1376:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
		LCD_displayString("System Locked");
    137a:	80 e7       	ldi	r24, 0x70	; 112
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
		delay(60); /* Waiting For 60 Seconds */
    1382:	8c e3       	ldi	r24, 0x3C	; 60
    1384:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>
	}
}
    1388:	a2 96       	adiw	r28, 0x22	; 34
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <main>:

/*********************************************************************************
 *                            Application Code                                   *
 ********************************************************************************/
int main(void)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	c8 55       	subi	r28, 0x58	; 88
    13a4:	d0 40       	sbci	r29, 0x00	; 0
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
	uint8 flag = 0 , key = 0 , i = 0 , status = 0 ;
    13b0:	fe 01       	movw	r30, r28
    13b2:	ef 5b       	subi	r30, 0xBF	; 191
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	10 82       	st	Z, r1
    13b8:	fe 01       	movw	r30, r28
    13ba:	e0 5c       	subi	r30, 0xC0	; 192
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	10 82       	st	Z, r1
    13c0:	1f ae       	std	Y+63, r1	; 0x3f
    13c2:	fe 01       	movw	r30, r28
    13c4:	ee 5b       	subi	r30, 0xBE	; 190
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	10 82       	st	Z, r1
	uint8 pass1[5] = {0} , pass2[5] = {0};
    13ca:	ce 01       	movw	r24, r28
    13cc:	8d 5b       	subi	r24, 0xBD	; 189
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	25 e0       	ldi	r18, 0x05	; 5
    13d2:	fc 01       	movw	r30, r24
    13d4:	df 01       	movw	r26, r30
    13d6:	82 2f       	mov	r24, r18
    13d8:	1d 92       	st	X+, r1
    13da:	8a 95       	dec	r24
    13dc:	e9 f7       	brne	.-6      	; 0x13d8 <main+0x3e>
    13de:	ce 01       	movw	r24, r28
    13e0:	88 5b       	subi	r24, 0xB8	; 184
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	25 e0       	ldi	r18, 0x05	; 5
    13e6:	fc 01       	movw	r30, r24
    13e8:	df 01       	movw	r26, r30
    13ea:	82 2f       	mov	r24, r18
    13ec:	1d 92       	st	X+, r1
    13ee:	8a 95       	dec	r24
    13f0:	e9 f7       	brne	.-6      	; 0x13ec <main+0x52>

	SREG |= (1<<7); /* Enable Global Interrupt */
    13f2:	af e5       	ldi	r26, 0x5F	; 95
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef e5       	ldi	r30, 0x5F	; 95
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 68       	ori	r24, 0x80	; 128
    13fe:	8c 93       	st	X, r24

	/* Configure The UART & Timer1 With Desired Specifications */
	UART_ConfigType u_configure = {BIT8 , Disable , ONE_Stop , 9600};
    1400:	ce 01       	movw	r24, r28
    1402:	83 5b       	subi	r24, 0xB3	; 179
    1404:	9f 4f       	sbci	r25, 0xFF	; 255
    1406:	66 96       	adiw	r28, 0x16	; 22
    1408:	9f af       	std	Y+63, r25	; 0x3f
    140a:	8e af       	std	Y+62, r24	; 0x3e
    140c:	66 97       	sbiw	r28, 0x16	; 22
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	68 96       	adiw	r28, 0x18	; 24
    1414:	bf af       	std	Y+63, r27	; 0x3f
    1416:	ae af       	std	Y+62, r26	; 0x3e
    1418:	68 97       	sbiw	r28, 0x18	; 24
    141a:	b7 e0       	ldi	r27, 0x07	; 7
    141c:	69 96       	adiw	r28, 0x19	; 25
    141e:	bf af       	std	Y+63, r27	; 0x3f
    1420:	69 97       	sbiw	r28, 0x19	; 25
    1422:	68 96       	adiw	r28, 0x18	; 24
    1424:	ee ad       	ldd	r30, Y+62	; 0x3e
    1426:	ff ad       	ldd	r31, Y+63	; 0x3f
    1428:	68 97       	sbiw	r28, 0x18	; 24
    142a:	00 80       	ld	r0, Z
    142c:	68 96       	adiw	r28, 0x18	; 24
    142e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1430:	9f ad       	ldd	r25, Y+63	; 0x3f
    1432:	68 97       	sbiw	r28, 0x18	; 24
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	68 96       	adiw	r28, 0x18	; 24
    1438:	9f af       	std	Y+63, r25	; 0x3f
    143a:	8e af       	std	Y+62, r24	; 0x3e
    143c:	68 97       	sbiw	r28, 0x18	; 24
    143e:	66 96       	adiw	r28, 0x16	; 22
    1440:	ae ad       	ldd	r26, Y+62	; 0x3e
    1442:	bf ad       	ldd	r27, Y+63	; 0x3f
    1444:	66 97       	sbiw	r28, 0x16	; 22
    1446:	0c 92       	st	X, r0
    1448:	66 96       	adiw	r28, 0x16	; 22
    144a:	ee ad       	ldd	r30, Y+62	; 0x3e
    144c:	ff ad       	ldd	r31, Y+63	; 0x3f
    144e:	66 97       	sbiw	r28, 0x16	; 22
    1450:	31 96       	adiw	r30, 0x01	; 1
    1452:	66 96       	adiw	r28, 0x16	; 22
    1454:	ff af       	std	Y+63, r31	; 0x3f
    1456:	ee af       	std	Y+62, r30	; 0x3e
    1458:	66 97       	sbiw	r28, 0x16	; 22
    145a:	69 96       	adiw	r28, 0x19	; 25
    145c:	ff ad       	ldd	r31, Y+63	; 0x3f
    145e:	69 97       	sbiw	r28, 0x19	; 25
    1460:	f1 50       	subi	r31, 0x01	; 1
    1462:	69 96       	adiw	r28, 0x19	; 25
    1464:	ff af       	std	Y+63, r31	; 0x3f
    1466:	69 97       	sbiw	r28, 0x19	; 25
    1468:	69 96       	adiw	r28, 0x19	; 25
    146a:	8f ad       	ldd	r24, Y+63	; 0x3f
    146c:	69 97       	sbiw	r28, 0x19	; 25
    146e:	88 23       	and	r24, r24
    1470:	c1 f6       	brne	.-80     	; 0x1422 <main+0x88>

	/* Initialization Drivers */
	UART_init(&u_configure);
    1472:	ce 01       	movw	r24, r28
    1474:	83 5b       	subi	r24, 0xB3	; 179
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <UART_init>
	LCD_init();
    147c:	0e 94 15 12 	call	0x242a	; 0x242a <LCD_init>

	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
    1480:	8f e4       	ldi	r24, 0x4F	; 79
    1482:	96 e0       	ldi	r25, 0x06	; 6
    1484:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <Timer1_setCallBack>

	UART_recieveByte(); /* Waiting For MCU2 To be Ready */
    1488:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>

	while(1)
	{
		/* Create Password to The System */
		if(flag == 0)
    148c:	fe 01       	movw	r30, r28
    148e:	ef 5b       	subi	r30, 0xBF	; 191
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	88 23       	and	r24, r24
    1496:	09 f0       	breq	.+2      	; 0x149a <main+0x100>
    1498:	42 c0       	rjmp	.+132    	; 0x151e <main+0x184>
		{
			LCD_clearScreen();
    149a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
			LCD_displayString("PLZ Enter Pass:");
    149e:	80 e6       	ldi	r24, 0x60	; 96
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
			LCD_moveCursor(1, 0);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_moveCursor>

			/* Enter The Password */
			Enter_pass(pass1);
    14ae:	ce 01       	movw	r24, r28
    14b0:	8d 5b       	subi	r24, 0xBD	; 189
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	0e 94 84 07 	call	0xf08	; 0xf08 <Enter_pass>

			/* Waiting User to press The Enter Button */
			waiting();
    14b8:	0e 94 26 08 	call	0x104c	; 0x104c <waiting>

			LCD_clearScreen();
    14bc:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    14c0:	8e e7       	ldi	r24, 0x7E	; 126
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same Pass: ");
    14c8:	2f e8       	ldi	r18, 0x8F	; 143
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_displayStringRowColumn>

			/* Re-enter The same Password */
			Enter_pass(pass2);
    14d6:	ce 01       	movw	r24, r28
    14d8:	88 5b       	subi	r24, 0xB8	; 184
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	0e 94 84 07 	call	0xf08	; 0xf08 <Enter_pass>

			/* Waiting User to press The Enter Button */
			waiting();
    14e0:	0e 94 26 08 	call	0x104c	; 0x104c <waiting>

			/* Send 2 Passwords To 2nd MCU */
			SendPass(pass1);
    14e4:	ce 01       	movw	r24, r28
    14e6:	8d 5b       	subi	r24, 0xBD	; 189
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	0e 94 9c 06 	call	0xd38	; 0xd38 <SendPass>
			SendPass(pass2);
    14ee:	ce 01       	movw	r24, r28
    14f0:	88 5b       	subi	r24, 0xB8	; 184
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	0e 94 9c 06 	call	0xd38	; 0xd38 <SendPass>

			status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    14f8:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    14fc:	fe 01       	movw	r30, r28
    14fe:	ee 5b       	subi	r30, 0xBE	; 190
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 83       	st	Z, r24

			/* if 2 Passwords matched each other move to next phase */
			if(status == OK)
    1504:	fe 01       	movw	r30, r28
    1506:	ee 5b       	subi	r30, 0xBE	; 190
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	80 81       	ld	r24, Z
    150c:	80 31       	cpi	r24, 0x10	; 16
    150e:	09 f0       	breq	.+2      	; 0x1512 <main+0x178>
    1510:	bd cf       	rjmp	.-134    	; 0x148c <main+0xf2>
			{
				flag = 1;
    1512:	fe 01       	movw	r30, r28
    1514:	ef 5b       	subi	r30, 0xBF	; 191
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 83       	st	Z, r24
    151c:	b7 cf       	rjmp	.-146    	; 0x148c <main+0xf2>
			}
		}
		else if(flag == 1) /* Normal Phase Of System */
    151e:	fe 01       	movw	r30, r28
    1520:	ef 5b       	subi	r30, 0xBF	; 191
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	09 f0       	breq	.+2      	; 0x152c <main+0x192>
    152a:	b0 cf       	rjmp	.-160    	; 0x148c <main+0xf2>
		{
			LCD_clearScreen();
    152c:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    1530:	8b e9       	ldi	r24, 0x9B	; 155
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1538:	29 ea       	ldi	r18, 0xA9	; 169
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_displayStringRowColumn>

			/* Waiting User to press (+ or -) Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1546:	0e 94 8a 10 	call	0x2114	; 0x2114 <KEYPAD_getPressedKey>
    154a:	fe 01       	movw	r30, r28
    154c:	e0 5c       	subi	r30, 0xC0	; 192
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 83       	st	Z, r24
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	aa ef       	ldi	r26, 0xFA	; 250
    1558:	b3 e4       	ldi	r27, 0x43	; 67
    155a:	8b af       	std	Y+59, r24	; 0x3b
    155c:	9c af       	std	Y+60, r25	; 0x3c
    155e:	ad af       	std	Y+61, r26	; 0x3d
    1560:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	6b ad       	ldd	r22, Y+59	; 0x3b
    1564:	7c ad       	ldd	r23, Y+60	; 0x3c
    1566:	8d ad       	ldd	r24, Y+61	; 0x3d
    1568:	9e ad       	ldd	r25, Y+62	; 0x3e
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	4a ef       	ldi	r20, 0xFA	; 250
    1570:	54 e4       	ldi	r21, 0x44	; 68
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8f ab       	std	Y+55, r24	; 0x37
    157c:	98 af       	std	Y+56, r25	; 0x38
    157e:	a9 af       	std	Y+57, r26	; 0x39
    1580:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1582:	6f a9       	ldd	r22, Y+55	; 0x37
    1584:	78 ad       	ldd	r23, Y+56	; 0x38
    1586:	89 ad       	ldd	r24, Y+57	; 0x39
    1588:	9a ad       	ldd	r25, Y+58	; 0x3a
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e8       	ldi	r20, 0x80	; 128
    1590:	5f e3       	ldi	r21, 0x3F	; 63
    1592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <main+0x20a>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9e ab       	std	Y+54, r25	; 0x36
    15a0:	8d ab       	std	Y+53, r24	; 0x35
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <main+0x288>
	else if (__tmp > 65535)
    15a4:	6f a9       	ldd	r22, Y+55	; 0x37
    15a6:	78 ad       	ldd	r23, Y+56	; 0x38
    15a8:	89 ad       	ldd	r24, Y+57	; 0x39
    15aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	3f ef       	ldi	r19, 0xFF	; 255
    15b0:	4f e7       	ldi	r20, 0x7F	; 127
    15b2:	57 e4       	ldi	r21, 0x47	; 71
    15b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    15be:	7c ad       	ldd	r23, Y+60	; 0x3c
    15c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    15c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	51 e4       	ldi	r21, 0x41	; 65
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9e ab       	std	Y+54, r25	; 0x36
    15e2:	8d ab       	std	Y+53, r24	; 0x35
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <main+0x26a>
    15e6:	88 ec       	ldi	r24, 0xC8	; 200
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c ab       	std	Y+52, r25	; 0x34
    15ec:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <main+0x258>
    15f6:	9c ab       	std	Y+52, r25	; 0x34
    15f8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	8d a9       	ldd	r24, Y+53	; 0x35
    15fc:	9e a9       	ldd	r25, Y+54	; 0x36
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9e ab       	std	Y+54, r25	; 0x36
    1602:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	8d a9       	ldd	r24, Y+53	; 0x35
    1606:	9e a9       	ldd	r25, Y+54	; 0x36
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	69 f7       	brne	.-38     	; 0x15e6 <main+0x24c>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <main+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6f a9       	ldd	r22, Y+55	; 0x37
    1610:	78 ad       	ldd	r23, Y+56	; 0x38
    1612:	89 ad       	ldd	r24, Y+57	; 0x39
    1614:	9a ad       	ldd	r25, Y+58	; 0x3a
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9e ab       	std	Y+54, r25	; 0x36
    1620:	8d ab       	std	Y+53, r24	; 0x35
    1622:	8d a9       	ldd	r24, Y+53	; 0x35
    1624:	9e a9       	ldd	r25, Y+54	; 0x36
    1626:	9a ab       	std	Y+50, r25	; 0x32
    1628:	89 ab       	std	Y+49, r24	; 0x31
    162a:	89 a9       	ldd	r24, Y+49	; 0x31
    162c:	9a a9       	ldd	r25, Y+50	; 0x32
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <main+0x294>
    1632:	9a ab       	std	Y+50, r25	; 0x32
    1634:	89 ab       	std	Y+49, r24	; 0x31
				_delay_ms(500);
			} while((key != '+') && (key != '-'));
    1636:	fe 01       	movw	r30, r28
    1638:	e0 5c       	subi	r30, 0xC0	; 192
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	8b 32       	cpi	r24, 0x2B	; 43
    1640:	39 f0       	breq	.+14     	; 0x1650 <main+0x2b6>
    1642:	fe 01       	movw	r30, r28
    1644:	e0 5c       	subi	r30, 0xC0	; 192
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	8d 32       	cpi	r24, 0x2D	; 45
    164c:	09 f0       	breq	.+2      	; 0x1650 <main+0x2b6>
    164e:	7b cf       	rjmp	.-266    	; 0x1546 <main+0x1ac>

			if(key == '+') /* User Choose Open The Door */
    1650:	fe 01       	movw	r30, r28
    1652:	e0 5c       	subi	r30, 0xC0	; 192
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	8b 32       	cpi	r24, 0x2B	; 43
    165a:	09 f0       	breq	.+2      	; 0x165e <main+0x2c4>
    165c:	1e c1       	rjmp	.+572    	; 0x189a <main+0x500>
			{
				LCD_clearScreen();
    165e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    1662:	89 eb       	ldi	r24, 0xB9	; 185
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
				LCD_moveCursor(1, 0);
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_moveCursor>

				/* Enter The Password */
				Enter_pass(pass1);
    1672:	ce 01       	movw	r24, r28
    1674:	8d 5b       	subi	r24, 0xBD	; 189
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	0e 94 84 07 	call	0xf08	; 0xf08 <Enter_pass>

				/* Waiting User to press The Enter Button */
				waiting();
    167c:	0e 94 26 08 	call	0x104c	; 0x104c <waiting>

				UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */
    1680:	81 e1       	ldi	r24, 0x11	; 17
    1682:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 ea       	ldi	r26, 0xA0	; 160
    168c:	b1 e4       	ldi	r27, 0x41	; 65
    168e:	8d a7       	std	Y+45, r24	; 0x2d
    1690:	9e a7       	std	Y+46, r25	; 0x2e
    1692:	af a7       	std	Y+47, r26	; 0x2f
    1694:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1696:	6d a5       	ldd	r22, Y+45	; 0x2d
    1698:	7e a5       	ldd	r23, Y+46	; 0x2e
    169a:	8f a5       	ldd	r24, Y+47	; 0x2f
    169c:	98 a9       	ldd	r25, Y+48	; 0x30
    169e:	2b ea       	ldi	r18, 0xAB	; 171
    16a0:	3a ea       	ldi	r19, 0xAA	; 170
    16a2:	4a e2       	ldi	r20, 0x2A	; 42
    16a4:	50 e4       	ldi	r21, 0x40	; 64
    16a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	89 a7       	std	Y+41, r24	; 0x29
    16b0:	9a a7       	std	Y+42, r25	; 0x2a
    16b2:	ab a7       	std	Y+43, r26	; 0x2b
    16b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16b6:	69 a5       	ldd	r22, Y+41	; 0x29
    16b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    16ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    16bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	1c f4       	brge	.+6      	; 0x16d4 <main+0x33a>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	88 a7       	std	Y+40, r24	; 0x28
    16d2:	91 c0       	rjmp	.+290    	; 0x17f6 <main+0x45c>
	else if (__tmp > 255)
    16d4:	69 a5       	ldd	r22, Y+41	; 0x29
    16d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    16d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16da:	9c a5       	ldd	r25, Y+44	; 0x2c
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	53 e4       	ldi	r21, 0x43	; 67
    16e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	0c f0       	brlt	.+2      	; 0x16ee <main+0x354>
    16ec:	7b c0       	rjmp	.+246    	; 0x17e4 <main+0x44a>
	{
		_delay_ms(__us / 1000.0);
    16ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	4a e7       	ldi	r20, 0x7A	; 122
    16fc:	54 e4       	ldi	r21, 0x44	; 68
    16fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	8c a3       	std	Y+36, r24	; 0x24
    1708:	9d a3       	std	Y+37, r25	; 0x25
    170a:	ae a3       	std	Y+38, r26	; 0x26
    170c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170e:	6c a1       	ldd	r22, Y+36	; 0x24
    1710:	7d a1       	ldd	r23, Y+37	; 0x25
    1712:	8e a1       	ldd	r24, Y+38	; 0x26
    1714:	9f a1       	ldd	r25, Y+39	; 0x27
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a ef       	ldi	r20, 0xFA	; 250
    171c:	54 e4       	ldi	r21, 0x44	; 68
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	88 a3       	std	Y+32, r24	; 0x20
    1728:	99 a3       	std	Y+33, r25	; 0x21
    172a:	aa a3       	std	Y+34, r26	; 0x22
    172c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    172e:	68 a1       	ldd	r22, Y+32	; 0x20
    1730:	79 a1       	ldd	r23, Y+33	; 0x21
    1732:	8a a1       	ldd	r24, Y+34	; 0x22
    1734:	9b a1       	ldd	r25, Y+35	; 0x23
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <main+0x3b6>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9f 8f       	std	Y+31, r25	; 0x1f
    174c:	8e 8f       	std	Y+30, r24	; 0x1e
    174e:	3f c0       	rjmp	.+126    	; 0x17ce <main+0x434>
	else if (__tmp > 65535)
    1750:	68 a1       	ldd	r22, Y+32	; 0x20
    1752:	79 a1       	ldd	r23, Y+33	; 0x21
    1754:	8a a1       	ldd	r24, Y+34	; 0x22
    1756:	9b a1       	ldd	r25, Y+35	; 0x23
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	57 e4       	ldi	r21, 0x47	; 71
    1760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1764:	18 16       	cp	r1, r24
    1766:	4c f5       	brge	.+82     	; 0x17ba <main+0x420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1768:	6c a1       	ldd	r22, Y+36	; 0x24
    176a:	7d a1       	ldd	r23, Y+37	; 0x25
    176c:	8e a1       	ldd	r24, Y+38	; 0x26
    176e:	9f a1       	ldd	r25, Y+39	; 0x27
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9f 8f       	std	Y+31, r25	; 0x1f
    178e:	8e 8f       	std	Y+30, r24	; 0x1e
    1790:	0f c0       	rjmp	.+30     	; 0x17b0 <main+0x416>
    1792:	88 ec       	ldi	r24, 0xC8	; 200
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9d 8f       	std	Y+29, r25	; 0x1d
    1798:	8c 8f       	std	Y+28, r24	; 0x1c
    179a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    179c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <main+0x404>
    17a2:	9d 8f       	std	Y+29, r25	; 0x1d
    17a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	9f 8f       	std	Y+31, r25	; 0x1f
    17ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	69 f7       	brne	.-38     	; 0x1792 <main+0x3f8>
    17b8:	24 c0       	rjmp	.+72     	; 0x1802 <main+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ba:	68 a1       	ldd	r22, Y+32	; 0x20
    17bc:	79 a1       	ldd	r23, Y+33	; 0x21
    17be:	8a a1       	ldd	r24, Y+34	; 0x22
    17c0:	9b a1       	ldd	r25, Y+35	; 0x23
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9f 8f       	std	Y+31, r25	; 0x1f
    17cc:	8e 8f       	std	Y+30, r24	; 0x1e
    17ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17d2:	9b 8f       	std	Y+27, r25	; 0x1b
    17d4:	8a 8f       	std	Y+26, r24	; 0x1a
    17d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <main+0x440>
    17de:	9b 8f       	std	Y+27, r25	; 0x1b
    17e0:	8a 8f       	std	Y+26, r24	; 0x1a
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <main+0x468>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17e4:	69 a5       	ldd	r22, Y+41	; 0x29
    17e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    17e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	88 a7       	std	Y+40, r24	; 0x28
    17f6:	88 a5       	ldd	r24, Y+40	; 0x28
    17f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17fa:	89 8d       	ldd	r24, Y+25	; 0x19
    17fc:	8a 95       	dec	r24
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <main+0x462>
    1800:	89 8f       	std	Y+25, r24	; 0x19

				_delay_us(20);

				/* Send Password To 2nd MCU */
				SendPass(pass1);
    1802:	ce 01       	movw	r24, r28
    1804:	8d 5b       	subi	r24, 0xBD	; 189
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	0e 94 9c 06 	call	0xd38	; 0xd38 <SendPass>

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    180c:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    1810:	fe 01       	movw	r30, r28
    1812:	ee 5b       	subi	r30, 0xBE	; 190
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 83       	st	Z, r24

				while(1)
				{
					if (status == OK) /* Right Password */
    1818:	fe 01       	movw	r30, r28
    181a:	ee 5b       	subi	r30, 0xBE	; 190
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	80 31       	cpi	r24, 0x10	; 16
    1822:	41 f5       	brne	.+80     	; 0x1874 <main+0x4da>
					{
						/* Door Unlocking */
						UART_sendByte(MOTOR);
    1824:	82 e1       	ldi	r24, 0x12	; 18
    1826:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
						LCD_clearScreen();
    182a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    182e:	29 ec       	ldi	r18, 0xC9	; 201
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	a9 01       	movw	r20, r18
    1838:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_displayStringRowColumn>
						delay(15); /* Waiting For 15 Seconds */
    183c:	8f e0       	ldi	r24, 0x0F	; 15
    183e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>

						/* Door Holding */
						LCD_clearScreen();
    1842:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Holding");
    1846:	28 ed       	ldi	r18, 0xD8	; 216
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	a9 01       	movw	r20, r18
    1850:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_displayStringRowColumn>
						delay(3); /* Waiting For 3 Seconds */
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>

						/* Door locking */
						LCD_clearScreen();
    185a:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Locking");
    185e:	25 ee       	ldi	r18, 0xE5	; 229
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	a9 01       	movw	r20, r18
    1868:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <LCD_displayStringRowColumn>
						delay(15); /* Waiting For 15 Seconds */
    186c:	8f e0       	ldi	r24, 0x0F	; 15
    186e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <delay>
    1872:	0c ce       	rjmp	.-1000   	; 0x148c <main+0xf2>

						break;
					}
					else if(status == ERROR) /* Wrong Password */
    1874:	fe 01       	movw	r30, r28
    1876:	ee 5b       	subi	r30, 0xBE	; 190
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	88 23       	and	r24, r24
    187e:	61 f6       	brne	.-104    	; 0x1818 <main+0x47e>
					{
						St_Error(&status); /* Call ERROR Function */
    1880:	ce 01       	movw	r24, r28
    1882:	8e 5b       	subi	r24, 0xBE	; 190
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	0e 94 b3 08 	call	0x1166	; 0x1166 <St_Error>

						if(status == ERROR)
    188a:	fe 01       	movw	r30, r28
    188c:	ee 5b       	subi	r30, 0xBE	; 190
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	09 f4       	brne	.+2      	; 0x1898 <main+0x4fe>
    1896:	fa cd       	rjmp	.-1036   	; 0x148c <main+0xf2>
    1898:	bf cf       	rjmp	.-130    	; 0x1818 <main+0x47e>
							break ;
						}
					}
				}
			}
			else if(key == '-') /* User Choose Change The Password */
    189a:	fe 01       	movw	r30, r28
    189c:	e0 5c       	subi	r30, 0xC0	; 192
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	8d 32       	cpi	r24, 0x2D	; 45
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <main+0x50e>
    18a6:	f2 cd       	rjmp	.-1052   	; 0x148c <main+0xf2>
			{
				LCD_clearScreen();
    18a8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    18ac:	89 eb       	ldi	r24, 0xB9	; 185
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
				LCD_moveCursor(1, 0);
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_moveCursor>

				/* Enter The Password */
				Enter_pass(pass1);
    18bc:	ce 01       	movw	r24, r28
    18be:	8d 5b       	subi	r24, 0xBD	; 189
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	0e 94 84 07 	call	0xf08	; 0xf08 <Enter_pass>

				/* Waiting User to press The Enter Button */
				waiting();
    18c6:	0e 94 26 08 	call	0x104c	; 0x104c <waiting>

				UART_sendByte(CHECK); /* Inform Other MCU to Check The Pass */
    18ca:	81 e1       	ldi	r24, 0x11	; 17
    18cc:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 ea       	ldi	r26, 0xA0	; 160
    18d6:	b1 e4       	ldi	r27, 0x41	; 65
    18d8:	8d 8b       	std	Y+21, r24	; 0x15
    18da:	9e 8b       	std	Y+22, r25	; 0x16
    18dc:	af 8b       	std	Y+23, r26	; 0x17
    18de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18e0:	6d 89       	ldd	r22, Y+21	; 0x15
    18e2:	7e 89       	ldd	r23, Y+22	; 0x16
    18e4:	8f 89       	ldd	r24, Y+23	; 0x17
    18e6:	98 8d       	ldd	r25, Y+24	; 0x18
    18e8:	2b ea       	ldi	r18, 0xAB	; 171
    18ea:	3a ea       	ldi	r19, 0xAA	; 170
    18ec:	4a e2       	ldi	r20, 0x2A	; 42
    18ee:	50 e4       	ldi	r21, 0x40	; 64
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	89 8b       	std	Y+17, r24	; 0x11
    18fa:	9a 8b       	std	Y+18, r25	; 0x12
    18fc:	ab 8b       	std	Y+19, r26	; 0x13
    18fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1900:	69 89       	ldd	r22, Y+17	; 0x11
    1902:	7a 89       	ldd	r23, Y+18	; 0x12
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	1c f4       	brge	.+6      	; 0x191e <main+0x584>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	88 8b       	std	Y+16, r24	; 0x10
    191c:	91 c0       	rjmp	.+290    	; 0x1a40 <main+0x6a6>
	else if (__tmp > 255)
    191e:	69 89       	ldd	r22, Y+17	; 0x11
    1920:	7a 89       	ldd	r23, Y+18	; 0x12
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	53 e4       	ldi	r21, 0x43	; 67
    192e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	0c f0       	brlt	.+2      	; 0x1938 <main+0x59e>
    1936:	7b c0       	rjmp	.+246    	; 0x1a2e <main+0x694>
	{
		_delay_ms(__us / 1000.0);
    1938:	6d 89       	ldd	r22, Y+21	; 0x15
    193a:	7e 89       	ldd	r23, Y+22	; 0x16
    193c:	8f 89       	ldd	r24, Y+23	; 0x17
    193e:	98 8d       	ldd	r25, Y+24	; 0x18
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a e7       	ldi	r20, 0x7A	; 122
    1946:	54 e4       	ldi	r21, 0x44	; 68
    1948:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8c 87       	std	Y+12, r24	; 0x0c
    1952:	9d 87       	std	Y+13, r25	; 0x0d
    1954:	ae 87       	std	Y+14, r26	; 0x0e
    1956:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1958:	6c 85       	ldd	r22, Y+12	; 0x0c
    195a:	7d 85       	ldd	r23, Y+13	; 0x0d
    195c:	8e 85       	ldd	r24, Y+14	; 0x0e
    195e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	4a ef       	ldi	r20, 0xFA	; 250
    1966:	54 e4       	ldi	r21, 0x44	; 68
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	88 87       	std	Y+8, r24	; 0x08
    1972:	99 87       	std	Y+9, r25	; 0x09
    1974:	aa 87       	std	Y+10, r26	; 0x0a
    1976:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1978:	68 85       	ldd	r22, Y+8	; 0x08
    197a:	79 85       	ldd	r23, Y+9	; 0x09
    197c:	8a 85       	ldd	r24, Y+10	; 0x0a
    197e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e8       	ldi	r20, 0x80	; 128
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198c:	88 23       	and	r24, r24
    198e:	2c f4       	brge	.+10     	; 0x199a <main+0x600>
		__ticks = 1;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9f 83       	std	Y+7, r25	; 0x07
    1996:	8e 83       	std	Y+6, r24	; 0x06
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <main+0x67e>
	else if (__tmp > 65535)
    199a:	68 85       	ldd	r22, Y+8	; 0x08
    199c:	79 85       	ldd	r23, Y+9	; 0x09
    199e:	8a 85       	ldd	r24, Y+10	; 0x0a
    19a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	3f ef       	ldi	r19, 0xFF	; 255
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	57 e4       	ldi	r21, 0x47	; 71
    19aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	4c f5       	brge	.+82     	; 0x1a04 <main+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    19b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    19b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e2       	ldi	r20, 0x20	; 32
    19c0:	51 e4       	ldi	r21, 0x41	; 65
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	bc 01       	movw	r22, r24
    19cc:	cd 01       	movw	r24, r26
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9f 83       	std	Y+7, r25	; 0x07
    19d8:	8e 83       	std	Y+6, r24	; 0x06
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <main+0x660>
    19dc:	88 ec       	ldi	r24, 0xC8	; 200
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9d 83       	std	Y+5, r25	; 0x05
    19e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <main+0x64e>
    19ec:	9d 83       	std	Y+5, r25	; 0x05
    19ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	9f 81       	ldd	r25, Y+7	; 0x07
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	9f 83       	std	Y+7, r25	; 0x07
    19f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fa:	8e 81       	ldd	r24, Y+6	; 0x06
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	69 f7       	brne	.-38     	; 0x19dc <main+0x642>
    1a02:	24 c0       	rjmp	.+72     	; 0x1a4c <main+0x6b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a04:	68 85       	ldd	r22, Y+8	; 0x08
    1a06:	79 85       	ldd	r23, Y+9	; 0x09
    1a08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9f 83       	std	Y+7, r25	; 0x07
    1a16:	8e 83       	std	Y+6, r24	; 0x06
    1a18:	8e 81       	ldd	r24, Y+6	; 0x06
    1a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <main+0x68a>
    1a28:	9b 83       	std	Y+3, r25	; 0x03
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <main+0x6b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a2e:	69 89       	ldd	r22, Y+17	; 0x11
    1a30:	7a 89       	ldd	r23, Y+18	; 0x12
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	88 8b       	std	Y+16, r24	; 0x10
    1a40:	88 89       	ldd	r24, Y+16	; 0x10
    1a42:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	8a 95       	dec	r24
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <main+0x6ac>
    1a4a:	89 83       	std	Y+1, r24	; 0x01

				_delay_us(20);

				/* Send Password To 2nd MCU */
				SendPass(pass1);
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	8d 5b       	subi	r24, 0xBD	; 189
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	0e 94 9c 06 	call	0xd38	; 0xd38 <SendPass>

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    1a56:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ee 5b       	subi	r30, 0xBE	; 190
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 83       	st	Z, r24

				while(1)
				{
					if(status == OK) /* Right Password */
    1a62:	fe 01       	movw	r30, r28
    1a64:	ee 5b       	subi	r30, 0xBE	; 190
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 31       	cpi	r24, 0x10	; 16
    1a6c:	41 f4       	brne	.+16     	; 0x1a7e <main+0x6e4>
					{
						flag = 0 ;
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 5b       	subi	r30, 0xBF	; 191
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	10 82       	st	Z, r1
						UART_sendByte(CR_PASS); /* Inform other MCU Current Phase Create Pass */
    1a76:	85 e1       	ldi	r24, 0x15	; 21
    1a78:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
    1a7c:	07 cd       	rjmp	.-1522   	; 0x148c <main+0xf2>
						break;
					}
					else /* Wrong Password */
					{
						St_Error(&status); /* Call ERROR Function */
    1a7e:	ce 01       	movw	r24, r28
    1a80:	8e 5b       	subi	r24, 0xBE	; 190
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	0e 94 b3 08 	call	0x1166	; 0x1166 <St_Error>

						if(status == ERROR)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ee 5b       	subi	r30, 0xBE	; 190
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 23       	and	r24, r24
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <main+0x6fc>
    1a94:	fb cc       	rjmp	.-1546   	; 0x148c <main+0xf2>
    1a96:	e5 cf       	rjmp	.-54     	; 0x1a62 <main+0x6c8>

00001a98 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_setupPinDirection+0x6>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <GPIO_setupPinDirection+0x8>
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	6a 83       	std	Y+2, r22	; 0x02
    1aaa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	88 30       	cpi	r24, 0x08	; 8
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <GPIO_setupPinDirection+0x1c>
    1ab2:	d5 c0       	rjmp	.+426    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <GPIO_setupPinDirection+0x24>
    1aba:	d1 c0       	rjmp	.+418    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3d 83       	std	Y+5, r19	; 0x05
    1ac4:	2c 83       	std	Y+4, r18	; 0x04
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <GPIO_setupPinDirection+0x3a>
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <GPIO_setupPinDirection+0xc0>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <GPIO_setupPinDirection+0x4e>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <GPIO_setupPinDirection+0x68>
    1ae4:	bc c0       	rjmp	.+376    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
    1ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_setupPinDirection+0x5a>
    1af0:	5f c0       	rjmp	.+190    	; 0x1bb0 <GPIO_setupPinDirection+0x118>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <GPIO_setupPinDirection+0x66>
    1afc:	85 c0       	rjmp	.+266    	; 0x1c08 <GPIO_setupPinDirection+0x170>
    1afe:	af c0       	rjmp	.+350    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b06:	aa e3       	ldi	r26, 0x3A	; 58
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ea e3       	ldi	r30, 0x3A	; 58
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_setupPinDirection+0x8c>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_setupPinDirection+0x88>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	98 c0       	rjmp	.+304    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b2e:	aa e3       	ldi	r26, 0x3A	; 58
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ea e3       	ldi	r30, 0x3A	; 58
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_setupPinDirection+0xb4>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_setupPinDirection+0xb0>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	83 c0       	rjmp	.+262    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	a1 f4       	brne	.+40     	; 0x1b86 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b5e:	a7 e3       	ldi	r26, 0x37	; 55
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e7 e3       	ldi	r30, 0x37	; 55
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GPIO_setupPinDirection+0xe4>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <GPIO_setupPinDirection+0xe0>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	6c c0       	rjmp	.+216    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b86:	a7 e3       	ldi	r26, 0x37	; 55
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e7 e3       	ldi	r30, 0x37	; 55
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_setupPinDirection+0x10c>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_setupPinDirection+0x108>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	57 c0       	rjmp	.+174    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	a1 f4       	brne	.+40     	; 0x1bde <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bb6:	a4 e3       	ldi	r26, 0x34	; 52
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e4 e3       	ldi	r30, 0x34	; 52
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_setupPinDirection+0x13c>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_setupPinDirection+0x138>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bde:	a4 e3       	ldi	r26, 0x34	; 52
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e4 e3       	ldi	r30, 0x34	; 52
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <GPIO_setupPinDirection+0x164>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <GPIO_setupPinDirection+0x160>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	2b c0       	rjmp	.+86     	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	a1 f4       	brne	.+40     	; 0x1c36 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c0e:	a1 e3       	ldi	r26, 0x31	; 49
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e1 e3       	ldi	r30, 0x31	; 49
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_setupPinDirection+0x194>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_setupPinDirection+0x190>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c36:	a1 e3       	ldi	r26, 0x31	; 49
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e1 e3       	ldi	r30, 0x31	; 49
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <GPIO_setupPinDirection+0x1bc>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <GPIO_setupPinDirection+0x1b8>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <GPIO_writePin+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_writePin+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	6a 83       	std	Y+2, r22	; 0x02
    1c80:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	88 30       	cpi	r24, 0x08	; 8
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <GPIO_writePin+0x1c>
    1c88:	d5 c0       	rjmp	.+426    	; 0x1e34 <GPIO_writePin+0x1c6>
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <GPIO_writePin+0x24>
    1c90:	d1 c0       	rjmp	.+418    	; 0x1e34 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <GPIO_writePin+0x3a>
    1ca6:	43 c0       	rjmp	.+134    	; 0x1d2e <GPIO_writePin+0xc0>
    1ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    1caa:	3d 81       	ldd	r19, Y+5	; 0x05
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <GPIO_writePin+0x4e>
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	71 f0       	breq	.+28     	; 0x1cd6 <GPIO_writePin+0x68>
    1cba:	bc c0       	rjmp	.+376    	; 0x1e34 <GPIO_writePin+0x1c6>
    1cbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <GPIO_writePin+0x5a>
    1cc6:	5f c0       	rjmp	.+190    	; 0x1d86 <GPIO_writePin+0x118>
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	91 05       	cpc	r25, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <GPIO_writePin+0x66>
    1cd2:	85 c0       	rjmp	.+266    	; 0x1dde <GPIO_writePin+0x170>
    1cd4:	af c0       	rjmp	.+350    	; 0x1e34 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cdc:	ab e3       	ldi	r26, 0x3B	; 59
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	eb e3       	ldi	r30, 0x3B	; 59
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_writePin+0x8c>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_writePin+0x88>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	98 c0       	rjmp	.+304    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d04:	ab e3       	ldi	r26, 0x3B	; 59
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	eb e3       	ldi	r30, 0x3B	; 59
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <GPIO_writePin+0xb4>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <GPIO_writePin+0xb0>
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	83 c0       	rjmp	.+262    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	a1 f4       	brne	.+40     	; 0x1d5c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d34:	a8 e3       	ldi	r26, 0x38	; 56
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <GPIO_writePin+0xe4>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <GPIO_writePin+0xe0>
    1d56:	84 2b       	or	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	6c c0       	rjmp	.+216    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d5c:	a8 e3       	ldi	r26, 0x38	; 56
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e8 e3       	ldi	r30, 0x38	; 56
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <GPIO_writePin+0x10c>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <GPIO_writePin+0x108>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	57 c0       	rjmp	.+174    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d8c:	a5 e3       	ldi	r26, 0x35	; 53
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e5 e3       	ldi	r30, 0x35	; 53
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <GPIO_writePin+0x13c>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <GPIO_writePin+0x138>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	40 c0       	rjmp	.+128    	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1db4:	a5 e3       	ldi	r26, 0x35	; 53
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e5 e3       	ldi	r30, 0x35	; 53
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <GPIO_writePin+0x164>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <GPIO_writePin+0x160>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	2b c0       	rjmp	.+86     	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	a1 f4       	brne	.+40     	; 0x1e0c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1de4:	a2 e3       	ldi	r26, 0x32	; 50
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e2 e3       	ldi	r30, 0x32	; 50
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <GPIO_writePin+0x194>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <GPIO_writePin+0x190>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	14 c0       	rjmp	.+40     	; 0x1e34 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e0c:	a2 e3       	ldi	r26, 0x32	; 50
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e2 e3       	ldi	r30, 0x32	; 50
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <GPIO_writePin+0x1bc>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <GPIO_writePin+0x1b8>
    1e2e:	80 95       	com	r24
    1e30:	84 23       	and	r24, r20
    1e32:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <GPIO_readPin+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <GPIO_readPin+0x8>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8a 83       	std	Y+2, r24	; 0x02
    1e54:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e56:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <GPIO_readPin+0x1c>
    1e5e:	84 c0       	rjmp	.+264    	; 0x1f68 <GPIO_readPin+0x124>
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <GPIO_readPin+0x24>
    1e66:	80 c0       	rjmp	.+256    	; 0x1f68 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3d 83       	std	Y+5, r19	; 0x05
    1e70:	2c 83       	std	Y+4, r18	; 0x04
    1e72:	4c 81       	ldd	r20, Y+4	; 0x04
    1e74:	5d 81       	ldd	r21, Y+5	; 0x05
    1e76:	41 30       	cpi	r20, 0x01	; 1
    1e78:	51 05       	cpc	r21, r1
    1e7a:	79 f1       	breq	.+94     	; 0x1eda <GPIO_readPin+0x96>
    1e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	91 05       	cpc	r25, r1
    1e84:	34 f4       	brge	.+12     	; 0x1e92 <GPIO_readPin+0x4e>
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	21 15       	cp	r18, r1
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	69 f0       	breq	.+26     	; 0x1eaa <GPIO_readPin+0x66>
    1e90:	6b c0       	rjmp	.+214    	; 0x1f68 <GPIO_readPin+0x124>
    1e92:	4c 81       	ldd	r20, Y+4	; 0x04
    1e94:	5d 81       	ldd	r21, Y+5	; 0x05
    1e96:	42 30       	cpi	r20, 0x02	; 2
    1e98:	51 05       	cpc	r21, r1
    1e9a:	b9 f1       	breq	.+110    	; 0x1f0a <GPIO_readPin+0xc6>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <GPIO_readPin+0x64>
    1ea6:	49 c0       	rjmp	.+146    	; 0x1f3a <GPIO_readPin+0xf6>
    1ea8:	5f c0       	rjmp	.+190    	; 0x1f68 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1eaa:	e9 e3       	ldi	r30, 0x39	; 57
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	a9 01       	movw	r20, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_readPin+0x7e>
    1ebe:	55 95       	asr	r21
    1ec0:	47 95       	ror	r20
    1ec2:	8a 95       	dec	r24
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_readPin+0x7a>
    1ec6:	ca 01       	movw	r24, r20
    1ec8:	81 70       	andi	r24, 0x01	; 1
    1eca:	90 70       	andi	r25, 0x00	; 0
    1ecc:	88 23       	and	r24, r24
    1ece:	19 f0       	breq	.+6      	; 0x1ed6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	49 c0       	rjmp	.+146    	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ed6:	19 82       	std	Y+1, r1	; 0x01
    1ed8:	47 c0       	rjmp	.+142    	; 0x1f68 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1eda:	e6 e3       	ldi	r30, 0x36	; 54
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a9 01       	movw	r20, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <GPIO_readPin+0xae>
    1eee:	55 95       	asr	r21
    1ef0:	47 95       	ror	r20
    1ef2:	8a 95       	dec	r24
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <GPIO_readPin+0xaa>
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	90 70       	andi	r25, 0x00	; 0
    1efc:	88 23       	and	r24, r24
    1efe:	19 f0       	breq	.+6      	; 0x1f06 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	31 c0       	rjmp	.+98     	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	2f c0       	rjmp	.+94     	; 0x1f68 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f0a:	e3 e3       	ldi	r30, 0x33	; 51
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <GPIO_readPin+0xde>
    1f1e:	55 95       	asr	r21
    1f20:	47 95       	ror	r20
    1f22:	8a 95       	dec	r24
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <GPIO_readPin+0xda>
    1f26:	ca 01       	movw	r24, r20
    1f28:	81 70       	andi	r24, 0x01	; 1
    1f2a:	90 70       	andi	r25, 0x00	; 0
    1f2c:	88 23       	and	r24, r24
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	19 c0       	rjmp	.+50     	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f36:	19 82       	std	Y+1, r1	; 0x01
    1f38:	17 c0       	rjmp	.+46     	; 0x1f68 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f3a:	e0 e3       	ldi	r30, 0x30	; 48
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_readPin+0x10e>
    1f4e:	55 95       	asr	r21
    1f50:	47 95       	ror	r20
    1f52:	8a 95       	dec	r24
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_readPin+0x10a>
    1f56:	ca 01       	movw	r24, r20
    1f58:	81 70       	andi	r24, 0x01	; 1
    1f5a:	90 70       	andi	r25, 0x00	; 0
    1f5c:	88 23       	and	r24, r24
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f66:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <GPIO_setupPortDirection+0x6>
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <GPIO_setupPortDirection+0x8>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	84 30       	cpi	r24, 0x04	; 4
    1f8e:	90 f5       	brcc	.+100    	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	3c 83       	std	Y+4, r19	; 0x04
    1f98:	2b 83       	std	Y+3, r18	; 0x03
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	d1 f0       	breq	.+52     	; 0x1fd8 <GPIO_setupPortDirection+0x5e>
    1fa4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa8:	22 30       	cpi	r18, 0x02	; 2
    1faa:	31 05       	cpc	r19, r1
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <GPIO_setupPortDirection+0x3e>
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <GPIO_setupPortDirection+0x54>
    1fb6:	1e c0       	rjmp	.+60     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <GPIO_setupPortDirection+0x68>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	91 05       	cpc	r25, r1
    1fca:	81 f0       	breq	.+32     	; 0x1fec <GPIO_setupPortDirection+0x72>
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fce:	ea e3       	ldi	r30, 0x3A	; 58
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	80 83       	st	Z, r24
    1fd6:	0e c0       	rjmp	.+28     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fd8:	e7 e3       	ldi	r30, 0x37	; 55
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	80 83       	st	Z, r24
    1fe0:	09 c0       	rjmp	.+18     	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fe2:	e4 e3       	ldi	r30, 0x34	; 52
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	80 83       	st	Z, r24
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fec:	e1 e3       	ldi	r30, 0x31	; 49
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_writePort+0x6>
    2008:	00 d0       	rcall	.+0      	; 0x200a <GPIO_writePort+0x8>
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	84 30       	cpi	r24, 0x04	; 4
    2016:	90 f5       	brcc	.+100    	; 0x207c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	3c 83       	std	Y+4, r19	; 0x04
    2020:	2b 83       	std	Y+3, r18	; 0x03
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	81 30       	cpi	r24, 0x01	; 1
    2028:	91 05       	cpc	r25, r1
    202a:	d1 f0       	breq	.+52     	; 0x2060 <GPIO_writePort+0x5e>
    202c:	2b 81       	ldd	r18, Y+3	; 0x03
    202e:	3c 81       	ldd	r19, Y+4	; 0x04
    2030:	22 30       	cpi	r18, 0x02	; 2
    2032:	31 05       	cpc	r19, r1
    2034:	2c f4       	brge	.+10     	; 0x2040 <GPIO_writePort+0x3e>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	61 f0       	breq	.+24     	; 0x2056 <GPIO_writePort+0x54>
    203e:	1e c0       	rjmp	.+60     	; 0x207c <GPIO_writePort+0x7a>
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	22 30       	cpi	r18, 0x02	; 2
    2046:	31 05       	cpc	r19, r1
    2048:	81 f0       	breq	.+32     	; 0x206a <GPIO_writePort+0x68>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	91 05       	cpc	r25, r1
    2052:	81 f0       	breq	.+32     	; 0x2074 <GPIO_writePort+0x72>
    2054:	13 c0       	rjmp	.+38     	; 0x207c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2056:	eb e3       	ldi	r30, 0x3B	; 59
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	80 83       	st	Z, r24
    205e:	0e c0       	rjmp	.+28     	; 0x207c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2060:	e8 e3       	ldi	r30, 0x38	; 56
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	80 83       	st	Z, r24
    2068:	09 c0       	rjmp	.+18     	; 0x207c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    206a:	e5 e3       	ldi	r30, 0x35	; 53
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	80 83       	st	Z, r24
    2072:	04 c0       	rjmp	.+8      	; 0x207c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2074:	e2 e3       	ldi	r30, 0x32	; 50
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	80 83       	st	Z, r24
			break;
		}
	}
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <GPIO_readPort+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <GPIO_readPort+0x8>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2098:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	90 f5       	brcc	.+100    	; 0x2104 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3c 83       	std	Y+4, r19	; 0x04
    20a8:	2b 83       	std	Y+3, r18	; 0x03
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	d1 f0       	breq	.+52     	; 0x20e8 <GPIO_readPort+0x5e>
    20b4:	2b 81       	ldd	r18, Y+3	; 0x03
    20b6:	3c 81       	ldd	r19, Y+4	; 0x04
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <GPIO_readPort+0x3e>
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	61 f0       	breq	.+24     	; 0x20de <GPIO_readPort+0x54>
    20c6:	1e c0       	rjmp	.+60     	; 0x2104 <GPIO_readPort+0x7a>
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	81 f0       	breq	.+32     	; 0x20f2 <GPIO_readPort+0x68>
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	81 f0       	breq	.+32     	; 0x20fc <GPIO_readPort+0x72>
    20dc:	13 c0       	rjmp	.+38     	; 0x2104 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20de:	e9 e3       	ldi	r30, 0x39	; 57
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	0e c0       	rjmp	.+28     	; 0x2104 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20e8:	e6 e3       	ldi	r30, 0x36	; 54
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	09 c0       	rjmp	.+18     	; 0x2104 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20f2:	e3 e3       	ldi	r30, 0x33	; 51
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20fc:	e0 e3       	ldi	r30, 0x30	; 48
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	60 97       	sbiw	r28, 0x10	; 16
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	62 e0       	ldi	r22, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	63 e0       	ldi	r22, 0x03	; 3
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	64 e0       	ldi	r22, 0x04	; 4
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	65 e0       	ldi	r22, 0x05	; 5
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	66 e0       	ldi	r22, 0x06	; 6
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	67 e0       	ldi	r22, 0x07	; 7
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2178:	1f 86       	std	Y+15, r1	; 0x0f
    217a:	ab c0       	rjmp	.+342    	; 0x22d2 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	6f 85       	ldd	r22, Y+15	; 0x0f
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2190:	18 8a       	std	Y+16, r1	; 0x10
    2192:	22 c0       	rjmp	.+68     	; 0x21d8 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2194:	88 89       	ldd	r24, Y+16	; 0x10
    2196:	98 2f       	mov	r25, r24
    2198:	9c 5f       	subi	r25, 0xFC	; 252
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	69 2f       	mov	r22, r25
    219e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <GPIO_readPin>
    21a2:	88 23       	and	r24, r24
    21a4:	b1 f4       	brne	.+44     	; 0x21d2 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    21a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	98 2f       	mov	r25, r24
    21b6:	88 89       	ldd	r24, Y+16	; 0x10
    21b8:	89 0f       	add	r24, r25
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    21c0:	60 96       	adiw	r28, 0x10	; 16
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    21d2:	88 89       	ldd	r24, Y+16	; 0x10
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	88 8b       	std	Y+16, r24	; 0x10
    21d8:	88 89       	ldd	r24, Y+16	; 0x10
    21da:	84 30       	cpi	r24, 0x04	; 4
    21dc:	d8 f2       	brcs	.-74     	; 0x2194 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 ea       	ldi	r26, 0xA0	; 160
    21ee:	b0 e4       	ldi	r27, 0x40	; 64
    21f0:	8b 87       	std	Y+11, r24	; 0x0b
    21f2:	9c 87       	std	Y+12, r25	; 0x0c
    21f4:	ad 87       	std	Y+13, r26	; 0x0d
    21f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	0f c0       	rjmp	.+30     	; 0x229a <KEYPAD_getPressedKey+0x186>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <KEYPAD_getPressedKey+0x174>
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <KEYPAD_getPressedKey+0x168>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <KEYPAD_getPressedKey+0x1b0>
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    22cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	84 30       	cpi	r24, 0x04	; 4
    22d6:	08 f4       	brcc	.+2      	; 0x22da <KEYPAD_getPressedKey+0x1c6>
    22d8:	51 cf       	rjmp	.-350    	; 0x217c <KEYPAD_getPressedKey+0x68>
    22da:	4e cf       	rjmp	.-356    	; 0x2178 <KEYPAD_getPressedKey+0x64>

000022dc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    22ea:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	3c 83       	std	Y+4, r19	; 0x04
    22f4:	2b 83       	std	Y+3, r18	; 0x03
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	88 30       	cpi	r24, 0x08	; 8
    22fc:	91 05       	cpc	r25, r1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2300:	70 c0       	rjmp	.+224    	; 0x23e2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2302:	2b 81       	ldd	r18, Y+3	; 0x03
    2304:	3c 81       	ldd	r19, Y+4	; 0x04
    2306:	29 30       	cpi	r18, 0x09	; 9
    2308:	31 05       	cpc	r19, r1
    230a:	5c f5       	brge	.+86     	; 0x2362 <KEYPAD_4x4_adjustKeyNumber+0x86>
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	84 30       	cpi	r24, 0x04	; 4
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2316:	59 c0       	rjmp	.+178    	; 0x23ca <KEYPAD_4x4_adjustKeyNumber+0xee>
    2318:	2b 81       	ldd	r18, Y+3	; 0x03
    231a:	3c 81       	ldd	r19, Y+4	; 0x04
    231c:	25 30       	cpi	r18, 0x05	; 5
    231e:	31 05       	cpc	r19, r1
    2320:	9c f4       	brge	.+38     	; 0x2348 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x52>
    232c:	48 c0       	rjmp	.+144    	; 0x23be <KEYPAD_4x4_adjustKeyNumber+0xe2>
    232e:	2b 81       	ldd	r18, Y+3	; 0x03
    2330:	3c 81       	ldd	r19, Y+4	; 0x04
    2332:	23 30       	cpi	r18, 0x03	; 3
    2334:	31 05       	cpc	r19, r1
    2336:	0c f0       	brlt	.+2      	; 0x233a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2338:	45 c0       	rjmp	.+138    	; 0x23c4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	91 05       	cpc	r25, r1
    2342:	09 f4       	brne	.+2      	; 0x2346 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2344:	39 c0       	rjmp	.+114    	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2346:	67 c0       	rjmp	.+206    	; 0x2416 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2348:	2b 81       	ldd	r18, Y+3	; 0x03
    234a:	3c 81       	ldd	r19, Y+4	; 0x04
    234c:	26 30       	cpi	r18, 0x06	; 6
    234e:	31 05       	cpc	r19, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2352:	41 c0       	rjmp	.+130    	; 0x23d6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	87 30       	cpi	r24, 0x07	; 7
    235a:	91 05       	cpc	r25, r1
    235c:	0c f0       	brlt	.+2      	; 0x2360 <KEYPAD_4x4_adjustKeyNumber+0x84>
    235e:	3e c0       	rjmp	.+124    	; 0x23dc <KEYPAD_4x4_adjustKeyNumber+0x100>
    2360:	37 c0       	rjmp	.+110    	; 0x23d0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2362:	2b 81       	ldd	r18, Y+3	; 0x03
    2364:	3c 81       	ldd	r19, Y+4	; 0x04
    2366:	2c 30       	cpi	r18, 0x0C	; 12
    2368:	31 05       	cpc	r19, r1
    236a:	09 f4       	brne	.+2      	; 0x236e <KEYPAD_4x4_adjustKeyNumber+0x92>
    236c:	46 c0       	rjmp	.+140    	; 0x23fa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	8d 30       	cpi	r24, 0x0D	; 13
    2374:	91 05       	cpc	r25, r1
    2376:	5c f4       	brge	.+22     	; 0x238e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	2a 30       	cpi	r18, 0x0A	; 10
    237e:	31 05       	cpc	r19, r1
    2380:	b1 f1       	breq	.+108    	; 0x23ee <KEYPAD_4x4_adjustKeyNumber+0x112>
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	8b 30       	cpi	r24, 0x0B	; 11
    2388:	91 05       	cpc	r25, r1
    238a:	a4 f5       	brge	.+104    	; 0x23f4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    238c:	2d c0       	rjmp	.+90     	; 0x23e8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	2e 30       	cpi	r18, 0x0E	; 14
    2394:	31 05       	cpc	r19, r1
    2396:	b9 f1       	breq	.+110    	; 0x2406 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	8e 30       	cpi	r24, 0x0E	; 14
    239e:	91 05       	cpc	r25, r1
    23a0:	7c f1       	brlt	.+94     	; 0x2400 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23a2:	2b 81       	ldd	r18, Y+3	; 0x03
    23a4:	3c 81       	ldd	r19, Y+4	; 0x04
    23a6:	2f 30       	cpi	r18, 0x0F	; 15
    23a8:	31 05       	cpc	r19, r1
    23aa:	79 f1       	breq	.+94     	; 0x240a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	80 31       	cpi	r24, 0x10	; 16
    23b2:	91 05       	cpc	r25, r1
    23b4:	69 f1       	breq	.+90     	; 0x2410 <KEYPAD_4x4_adjustKeyNumber+0x134>
    23b6:	2f c0       	rjmp	.+94     	; 0x2416 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    23b8:	87 e0       	ldi	r24, 0x07	; 7
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	2e c0       	rjmp	.+92     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    23be:	88 e0       	ldi	r24, 0x08	; 8
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	2b c0       	rjmp	.+86     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    23c4:	89 e0       	ldi	r24, 0x09	; 9
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	28 c0       	rjmp	.+80     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    23ca:	8f e2       	ldi	r24, 0x2F	; 47
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	25 c0       	rjmp	.+74     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    23d0:	84 e0       	ldi	r24, 0x04	; 4
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	22 c0       	rjmp	.+68     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    23d6:	85 e0       	ldi	r24, 0x05	; 5
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	1f c0       	rjmp	.+62     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    23dc:	86 e0       	ldi	r24, 0x06	; 6
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	1c c0       	rjmp	.+56     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    23e2:	8a e2       	ldi	r24, 0x2A	; 42
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	19 c0       	rjmp	.+50     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	16 c0       	rjmp	.+44     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	13 c0       	rjmp	.+38     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	10 c0       	rjmp	.+32     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    23fa:	8d e2       	ldi	r24, 0x2D	; 45
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	0d c0       	rjmp	.+26     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2400:	8d e0       	ldi	r24, 0x0D	; 13
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	0a c0       	rjmp	.+20     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	08 c0       	rjmp	.+16     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    240a:	8d e3       	ldi	r24, 0x3D	; 61
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	05 c0       	rjmp	.+10     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2410:	8b e2       	ldi	r24, 0x2B	; 43
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	02 c0       	rjmp	.+4      	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	2e 97       	sbiw	r28, 0x0e	; 14
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	41 e0       	ldi	r20, 0x01	; 1
    2444:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	63 e0       	ldi	r22, 0x03	; 3
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_setupPinDirection>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 ea       	ldi	r26, 0xA0	; 160
    2458:	b1 e4       	ldi	r27, 0x41	; 65
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	9c 87       	std	Y+12, r25	; 0x0c
    245e:	ad 87       	std	Y+13, r26	; 0x0d
    2460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	98 87       	std	Y+8, r25	; 0x08
    247e:	a9 87       	std	Y+9, r26	; 0x09
    2480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <LCD_init+0x7a>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <LCD_init+0xf8>
	else if (__tmp > 65535)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <LCD_init+0xda>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_init+0xc8>
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <LCD_init+0xbc>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_init+0x104>
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2536:	82 e0       	ldi	r24, 0x02	; 2
    2538:	6f ef       	ldi	r22, 0xFF	; 255
    253a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    253e:	88 e3       	ldi	r24, 0x38	; 56
    2540:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2544:	8c e0       	ldi	r24, 0x0C	; 12
    2546:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendCommand>
}
    2550:	2e 96       	adiw	r28, 0x0e	; 14
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	e9 97       	sbiw	r28, 0x39	; 57
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	62 e0       	ldi	r22, 0x02	; 2
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 e8       	ldi	r26, 0x80	; 128
    2588:	bf e3       	ldi	r27, 0x3F	; 63
    258a:	8d ab       	std	Y+53, r24	; 0x35
    258c:	9e ab       	std	Y+54, r25	; 0x36
    258e:	af ab       	std	Y+55, r26	; 0x37
    2590:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	6d a9       	ldd	r22, Y+53	; 0x35
    2594:	7e a9       	ldd	r23, Y+54	; 0x36
    2596:	8f a9       	ldd	r24, Y+55	; 0x37
    2598:	98 ad       	ldd	r25, Y+56	; 0x38
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	89 ab       	std	Y+49, r24	; 0x31
    25ac:	9a ab       	std	Y+50, r25	; 0x32
    25ae:	ab ab       	std	Y+51, r26	; 0x33
    25b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25b2:	69 a9       	ldd	r22, Y+49	; 0x31
    25b4:	7a a9       	ldd	r23, Y+50	; 0x32
    25b6:	8b a9       	ldd	r24, Y+51	; 0x33
    25b8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <LCD_sendCommand+0x72>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	98 ab       	std	Y+48, r25	; 0x30
    25d0:	8f a7       	std	Y+47, r24	; 0x2f
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    25d4:	69 a9       	ldd	r22, Y+49	; 0x31
    25d6:	7a a9       	ldd	r23, Y+50	; 0x32
    25d8:	8b a9       	ldd	r24, Y+51	; 0x33
    25da:	9c a9       	ldd	r25, Y+52	; 0x34
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	6d a9       	ldd	r22, Y+53	; 0x35
    25ee:	7e a9       	ldd	r23, Y+54	; 0x36
    25f0:	8f a9       	ldd	r24, Y+55	; 0x37
    25f2:	98 ad       	ldd	r25, Y+56	; 0x38
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	98 ab       	std	Y+48, r25	; 0x30
    2612:	8f a7       	std	Y+47, r24	; 0x2f
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <LCD_sendCommand+0xd2>
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9e a7       	std	Y+46, r25	; 0x2e
    261c:	8d a7       	std	Y+45, r24	; 0x2d
    261e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2620:	9e a5       	ldd	r25, Y+46	; 0x2e
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_sendCommand+0xc0>
    2626:	9e a7       	std	Y+46, r25	; 0x2e
    2628:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8f a5       	ldd	r24, Y+47	; 0x2f
    262c:	98 a9       	ldd	r25, Y+48	; 0x30
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	98 ab       	std	Y+48, r25	; 0x30
    2632:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8f a5       	ldd	r24, Y+47	; 0x2f
    2636:	98 a9       	ldd	r25, Y+48	; 0x30
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <LCD_sendCommand+0xb4>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	69 a9       	ldd	r22, Y+49	; 0x31
    2640:	7a a9       	ldd	r23, Y+50	; 0x32
    2642:	8b a9       	ldd	r24, Y+51	; 0x33
    2644:	9c a9       	ldd	r25, Y+52	; 0x34
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	98 ab       	std	Y+48, r25	; 0x30
    2650:	8f a7       	std	Y+47, r24	; 0x2f
    2652:	8f a5       	ldd	r24, Y+47	; 0x2f
    2654:	98 a9       	ldd	r25, Y+48	; 0x30
    2656:	9c a7       	std	Y+44, r25	; 0x2c
    2658:	8b a7       	std	Y+43, r24	; 0x2b
    265a:	8b a5       	ldd	r24, Y+43	; 0x2b
    265c:	9c a5       	ldd	r25, Y+44	; 0x2c
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <LCD_sendCommand+0xfc>
    2662:	9c a7       	std	Y+44, r25	; 0x2c
    2664:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	63 e0       	ldi	r22, 0x03	; 3
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a0 e8       	ldi	r26, 0x80	; 128
    2676:	bf e3       	ldi	r27, 0x3F	; 63
    2678:	8f a3       	std	Y+39, r24	; 0x27
    267a:	98 a7       	std	Y+40, r25	; 0x28
    267c:	a9 a7       	std	Y+41, r26	; 0x29
    267e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	6f a1       	ldd	r22, Y+39	; 0x27
    2682:	78 a5       	ldd	r23, Y+40	; 0x28
    2684:	89 a5       	ldd	r24, Y+41	; 0x29
    2686:	9a a5       	ldd	r25, Y+42	; 0x2a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4a ef       	ldi	r20, 0xFA	; 250
    268e:	54 e4       	ldi	r21, 0x44	; 68
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8b a3       	std	Y+35, r24	; 0x23
    269a:	9c a3       	std	Y+36, r25	; 0x24
    269c:	ad a3       	std	Y+37, r26	; 0x25
    269e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26a0:	6b a1       	ldd	r22, Y+35	; 0x23
    26a2:	7c a1       	ldd	r23, Y+36	; 0x24
    26a4:	8d a1       	ldd	r24, Y+37	; 0x25
    26a6:	9e a1       	ldd	r25, Y+38	; 0x26
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <LCD_sendCommand+0x160>
		__ticks = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9a a3       	std	Y+34, r25	; 0x22
    26be:	89 a3       	std	Y+33, r24	; 0x21
    26c0:	3f c0       	rjmp	.+126    	; 0x2740 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    26c2:	6b a1       	ldd	r22, Y+35	; 0x23
    26c4:	7c a1       	ldd	r23, Y+36	; 0x24
    26c6:	8d a1       	ldd	r24, Y+37	; 0x25
    26c8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	57 e4       	ldi	r21, 0x47	; 71
    26d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	4c f5       	brge	.+82     	; 0x272c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26da:	6f a1       	ldd	r22, Y+39	; 0x27
    26dc:	78 a5       	ldd	r23, Y+40	; 0x28
    26de:	89 a5       	ldd	r24, Y+41	; 0x29
    26e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9a a3       	std	Y+34, r25	; 0x22
    2700:	89 a3       	std	Y+33, r24	; 0x21
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <LCD_sendCommand+0x1c0>
    2704:	88 ec       	ldi	r24, 0xC8	; 200
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	98 a3       	std	Y+32, r25	; 0x20
    270a:	8f 8f       	std	Y+31, r24	; 0x1f
    270c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    270e:	98 a1       	ldd	r25, Y+32	; 0x20
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <LCD_sendCommand+0x1ae>
    2714:	98 a3       	std	Y+32, r25	; 0x20
    2716:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	89 a1       	ldd	r24, Y+33	; 0x21
    271a:	9a a1       	ldd	r25, Y+34	; 0x22
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2722:	89 a1       	ldd	r24, Y+33	; 0x21
    2724:	9a a1       	ldd	r25, Y+34	; 0x22
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	69 f7       	brne	.-38     	; 0x2704 <LCD_sendCommand+0x1a2>
    272a:	14 c0       	rjmp	.+40     	; 0x2754 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	6b a1       	ldd	r22, Y+35	; 0x23
    272e:	7c a1       	ldd	r23, Y+36	; 0x24
    2730:	8d a1       	ldd	r24, Y+37	; 0x25
    2732:	9e a1       	ldd	r25, Y+38	; 0x26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9a a3       	std	Y+34, r25	; 0x22
    273e:	89 a3       	std	Y+33, r24	; 0x21
    2740:	89 a1       	ldd	r24, Y+33	; 0x21
    2742:	9a a1       	ldd	r25, Y+34	; 0x22
    2744:	9e 8f       	std	Y+30, r25	; 0x1e
    2746:	8d 8f       	std	Y+29, r24	; 0x1d
    2748:	8d 8d       	ldd	r24, Y+29	; 0x1d
    274a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LCD_sendCommand+0x1ea>
    2750:	9e 8f       	std	Y+30, r25	; 0x1e
    2752:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	69 ad       	ldd	r22, Y+57	; 0x39
    2758:	0e 94 01 10 	call	0x2002	; 0x2002 <GPIO_writePort>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e8       	ldi	r26, 0x80	; 128
    2762:	bf e3       	ldi	r27, 0x3F	; 63
    2764:	89 8f       	std	Y+25, r24	; 0x19
    2766:	9a 8f       	std	Y+26, r25	; 0x1a
    2768:	ab 8f       	std	Y+27, r26	; 0x1b
    276a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	69 8d       	ldd	r22, Y+25	; 0x19
    276e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a ef       	ldi	r20, 0xFA	; 250
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8d 8b       	std	Y+21, r24	; 0x15
    2786:	9e 8b       	std	Y+22, r25	; 0x16
    2788:	af 8b       	std	Y+23, r26	; 0x17
    278a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    278c:	6d 89       	ldd	r22, Y+21	; 0x15
    278e:	7e 89       	ldd	r23, Y+22	; 0x16
    2790:	8f 89       	ldd	r24, Y+23	; 0x17
    2792:	98 8d       	ldd	r25, Y+24	; 0x18
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_sendCommand+0x24c>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 8b       	std	Y+20, r25	; 0x14
    27aa:	8b 8b       	std	Y+19, r24	; 0x13
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	69 8d       	ldd	r22, Y+25	; 0x19
    27c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9c 8b       	std	Y+20, r25	; 0x14
    27ec:	8b 8b       	std	Y+19, r24	; 0x13
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_sendCommand+0x2ac>
    27f0:	88 ec       	ldi	r24, 0xC8	; 200
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	9a 8b       	std	Y+18, r25	; 0x12
    27f6:	89 8b       	std	Y+17, r24	; 0x11
    27f8:	89 89       	ldd	r24, Y+17	; 0x11
    27fa:	9a 89       	ldd	r25, Y+18	; 0x12
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_sendCommand+0x29a>
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	8b 89       	ldd	r24, Y+19	; 0x13
    2806:	9c 89       	ldd	r25, Y+20	; 0x14
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_sendCommand+0x28e>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	98 8b       	std	Y+16, r25	; 0x10
    2832:	8f 87       	std	Y+15, r24	; 0x0f
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	98 89       	ldd	r25, Y+16	; 0x10
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_sendCommand+0x2d6>
    283c:	98 8b       	std	Y+16, r25	; 0x10
    283e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	63 e0       	ldi	r22, 0x03	; 3
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a0 e8       	ldi	r26, 0x80	; 128
    2850:	bf e3       	ldi	r27, 0x3F	; 63
    2852:	8b 87       	std	Y+11, r24	; 0x0b
    2854:	9c 87       	std	Y+12, r25	; 0x0c
    2856:	ad 87       	std	Y+13, r26	; 0x0d
    2858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285a:	6b 85       	ldd	r22, Y+11	; 0x0b
    285c:	7c 85       	ldd	r23, Y+12	; 0x0c
    285e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2860:	9e 85       	ldd	r25, Y+14	; 0x0e
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8f 83       	std	Y+7, r24	; 0x07
    2874:	98 87       	std	Y+8, r25	; 0x08
    2876:	a9 87       	std	Y+9, r26	; 0x09
    2878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e8       	ldi	r20, 0x80	; 128
    2888:	5f e3       	ldi	r21, 0x3F	; 63
    288a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288e:	88 23       	and	r24, r24
    2890:	2c f4       	brge	.+10     	; 0x289c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	3f c0       	rjmp	.+126    	; 0x291a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	3f ef       	ldi	r19, 0xFF	; 255
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	57 e4       	ldi	r21, 0x47	; 71
    28ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	4c f5       	brge	.+82     	; 0x2906 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	0f c0       	rjmp	.+30     	; 0x28fc <LCD_sendCommand+0x39a>
    28de:	88 ec       	ldi	r24, 0xC8	; 200
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_sendCommand+0x388>
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	69 f7       	brne	.-38     	; 0x28de <LCD_sendCommand+0x37c>
    2904:	14 c0       	rjmp	.+40     	; 0x292e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_sendCommand+0x3c4>
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    292e:	e9 96       	adiw	r28, 0x39	; 57
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	e9 97       	sbiw	r28, 0x39	; 57
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2956:	83 e0       	ldi	r24, 0x03	; 3
    2958:	62 e0       	ldi	r22, 0x02	; 2
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	a0 e8       	ldi	r26, 0x80	; 128
    2966:	bf e3       	ldi	r27, 0x3F	; 63
    2968:	8d ab       	std	Y+53, r24	; 0x35
    296a:	9e ab       	std	Y+54, r25	; 0x36
    296c:	af ab       	std	Y+55, r26	; 0x37
    296e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2970:	6d a9       	ldd	r22, Y+53	; 0x35
    2972:	7e a9       	ldd	r23, Y+54	; 0x36
    2974:	8f a9       	ldd	r24, Y+55	; 0x37
    2976:	98 ad       	ldd	r25, Y+56	; 0x38
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	89 ab       	std	Y+49, r24	; 0x31
    298a:	9a ab       	std	Y+50, r25	; 0x32
    298c:	ab ab       	std	Y+51, r26	; 0x33
    298e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2990:	69 a9       	ldd	r22, Y+49	; 0x31
    2992:	7a a9       	ldd	r23, Y+50	; 0x32
    2994:	8b a9       	ldd	r24, Y+51	; 0x33
    2996:	9c a9       	ldd	r25, Y+52	; 0x34
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a4:	88 23       	and	r24, r24
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	98 ab       	std	Y+48, r25	; 0x30
    29ae:	8f a7       	std	Y+47, r24	; 0x2f
    29b0:	3f c0       	rjmp	.+126    	; 0x2a30 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    29b2:	69 a9       	ldd	r22, Y+49	; 0x31
    29b4:	7a a9       	ldd	r23, Y+50	; 0x32
    29b6:	8b a9       	ldd	r24, Y+51	; 0x33
    29b8:	9c a9       	ldd	r25, Y+52	; 0x34
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f ef       	ldi	r19, 0xFF	; 255
    29be:	4f e7       	ldi	r20, 0x7F	; 127
    29c0:	57 e4       	ldi	r21, 0x47	; 71
    29c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c6:	18 16       	cp	r1, r24
    29c8:	4c f5       	brge	.+82     	; 0x2a1c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ca:	6d a9       	ldd	r22, Y+53	; 0x35
    29cc:	7e a9       	ldd	r23, Y+54	; 0x36
    29ce:	8f a9       	ldd	r24, Y+55	; 0x37
    29d0:	98 ad       	ldd	r25, Y+56	; 0x38
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <LCD_displayCharacter+0xd2>
    29f4:	88 ec       	ldi	r24, 0xC8	; 200
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9e a7       	std	Y+46, r25	; 0x2e
    29fa:	8d a7       	std	Y+45, r24	; 0x2d
    29fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_displayCharacter+0xc0>
    2a04:	9e a7       	std	Y+46, r25	; 0x2e
    2a06:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	98 ab       	std	Y+48, r25	; 0x30
    2a10:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a14:	98 a9       	ldd	r25, Y+48	; 0x30
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <LCD_displayCharacter+0xb4>
    2a1a:	14 c0       	rjmp	.+40     	; 0x2a44 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a20:	8b a9       	ldd	r24, Y+51	; 0x33
    2a22:	9c a9       	ldd	r25, Y+52	; 0x34
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	98 ab       	std	Y+48, r25	; 0x30
    2a2e:	8f a7       	std	Y+47, r24	; 0x2f
    2a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a32:	98 a9       	ldd	r25, Y+48	; 0x30
    2a34:	9c a7       	std	Y+44, r25	; 0x2c
    2a36:	8b a7       	std	Y+43, r24	; 0x2b
    2a38:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_displayCharacter+0xfc>
    2a40:	9c a7       	std	Y+44, r25	; 0x2c
    2a42:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	63 e0       	ldi	r22, 0x03	; 3
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a0 e8       	ldi	r26, 0x80	; 128
    2a54:	bf e3       	ldi	r27, 0x3F	; 63
    2a56:	8f a3       	std	Y+39, r24	; 0x27
    2a58:	98 a7       	std	Y+40, r25	; 0x28
    2a5a:	a9 a7       	std	Y+41, r26	; 0x29
    2a5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a60:	78 a5       	ldd	r23, Y+40	; 0x28
    2a62:	89 a5       	ldd	r24, Y+41	; 0x29
    2a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a ef       	ldi	r20, 0xFA	; 250
    2a6c:	54 e4       	ldi	r21, 0x44	; 68
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8b a3       	std	Y+35, r24	; 0x23
    2a78:	9c a3       	std	Y+36, r25	; 0x24
    2a7a:	ad a3       	std	Y+37, r26	; 0x25
    2a7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a80:	7c a1       	ldd	r23, Y+36	; 0x24
    2a82:	8d a1       	ldd	r24, Y+37	; 0x25
    2a84:	9e a1       	ldd	r25, Y+38	; 0x26
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9a a3       	std	Y+34, r25	; 0x22
    2a9c:	89 a3       	std	Y+33, r24	; 0x21
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    2aba:	78 a5       	ldd	r23, Y+40	; 0x28
    2abc:	89 a5       	ldd	r24, Y+41	; 0x29
    2abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9a a3       	std	Y+34, r25	; 0x22
    2ade:	89 a3       	std	Y+33, r24	; 0x21
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <LCD_displayCharacter+0x1c0>
    2ae2:	88 ec       	ldi	r24, 0xC8	; 200
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	98 a3       	std	Y+32, r25	; 0x20
    2ae8:	8f 8f       	std	Y+31, r24	; 0x1f
    2aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aec:	98 a1       	ldd	r25, Y+32	; 0x20
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_displayCharacter+0x1ae>
    2af2:	98 a3       	std	Y+32, r25	; 0x20
    2af4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	89 a1       	ldd	r24, Y+33	; 0x21
    2af8:	9a a1       	ldd	r25, Y+34	; 0x22
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9a a3       	std	Y+34, r25	; 0x22
    2afe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	89 a1       	ldd	r24, Y+33	; 0x21
    2b02:	9a a1       	ldd	r25, Y+34	; 0x22
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <LCD_displayCharacter+0x1a2>
    2b08:	14 c0       	rjmp	.+40     	; 0x2b32 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b10:	9e a1       	ldd	r25, Y+38	; 0x26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9a a3       	std	Y+34, r25	; 0x22
    2b1c:	89 a3       	std	Y+33, r24	; 0x21
    2b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b20:	9a a1       	ldd	r25, Y+34	; 0x22
    2b22:	9e 8f       	std	Y+30, r25	; 0x1e
    2b24:	8d 8f       	std	Y+29, r24	; 0x1d
    2b26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_displayCharacter+0x1ea>
    2b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b30:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	69 ad       	ldd	r22, Y+57	; 0x39
    2b36:	0e 94 01 10 	call	0x2002	; 0x2002 <GPIO_writePort>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e8       	ldi	r26, 0x80	; 128
    2b40:	bf e3       	ldi	r27, 0x3F	; 63
    2b42:	89 8f       	std	Y+25, r24	; 0x19
    2b44:	9a 8f       	std	Y+26, r25	; 0x1a
    2b46:	ab 8f       	std	Y+27, r26	; 0x1b
    2b48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a ef       	ldi	r20, 0xFA	; 250
    2b58:	54 e4       	ldi	r21, 0x44	; 68
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	8d 8b       	std	Y+21, r24	; 0x15
    2b64:	9e 8b       	std	Y+22, r25	; 0x16
    2b66:	af 8b       	std	Y+23, r26	; 0x17
    2b68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b70:	98 8d       	ldd	r25, Y+24	; 0x18
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e8       	ldi	r20, 0x80	; 128
    2b78:	5f e3       	ldi	r21, 0x3F	; 63
    2b7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7e:	88 23       	and	r24, r24
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c 8b       	std	Y+20, r25	; 0x14
    2b88:	8b 8b       	std	Y+19, r24	; 0x13
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	4c f5       	brge	.+82     	; 0x2bf6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2baa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e2       	ldi	r20, 0x20	; 32
    2bb2:	51 e4       	ldi	r21, 0x41	; 65
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9c 8b       	std	Y+20, r25	; 0x14
    2bca:	8b 8b       	std	Y+19, r24	; 0x13
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <LCD_displayCharacter+0x2ac>
    2bce:	88 ec       	ldi	r24, 0xC8	; 200
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	9a 8b       	std	Y+18, r25	; 0x12
    2bd4:	89 8b       	std	Y+17, r24	; 0x11
    2bd6:	89 89       	ldd	r24, Y+17	; 0x11
    2bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_displayCharacter+0x29a>
    2bde:	9a 8b       	std	Y+18, r25	; 0x12
    2be0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	8b 89       	ldd	r24, Y+19	; 0x13
    2be4:	9c 89       	ldd	r25, Y+20	; 0x14
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	9c 8b       	std	Y+20, r25	; 0x14
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <LCD_displayCharacter+0x28e>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9c 8b       	std	Y+20, r25	; 0x14
    2c08:	8b 8b       	std	Y+19, r24	; 0x13
    2c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0e:	98 8b       	std	Y+16, r25	; 0x10
    2c10:	8f 87       	std	Y+15, r24	; 0x0f
    2c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c14:	98 89       	ldd	r25, Y+16	; 0x10
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_displayCharacter+0x2d6>
    2c1a:	98 8b       	std	Y+16, r25	; 0x10
    2c1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c1e:	83 e0       	ldi	r24, 0x03	; 3
    2c20:	63 e0       	ldi	r22, 0x03	; 3
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <GPIO_writePin>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e8       	ldi	r26, 0x80	; 128
    2c2e:	bf e3       	ldi	r27, 0x3F	; 63
    2c30:	8b 87       	std	Y+11, r24	; 0x0b
    2c32:	9c 87       	std	Y+12, r25	; 0x0c
    2c34:	ad 87       	std	Y+13, r26	; 0x0d
    2c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a ef       	ldi	r20, 0xFA	; 250
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8f 83       	std	Y+7, r24	; 0x07
    2c52:	98 87       	std	Y+8, r25	; 0x08
    2c54:	a9 87       	std	Y+9, r26	; 0x09
    2c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_displayCharacter+0x39a>
    2cbc:	88 ec       	ldi	r24, 0xC8	; 200
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_displayCharacter+0x388>
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
    2cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_displayCharacter+0x37c>
    2ce2:	14 c0       	rjmp	.+40     	; 0x2d0c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_displayCharacter+0x3c4>
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d0c:	e9 96       	adiw	r28, 0x39	; 57
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <LCD_displayString+0x6>
    2d24:	0f 92       	push	r0
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	9b 83       	std	Y+3, r25	; 0x03
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d2e:	19 82       	std	Y+1, r1	; 0x01
    2d30:	0e c0       	rjmp	.+28     	; 0x2d4e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	e2 0f       	add	r30, r18
    2d40:	f3 1f       	adc	r31, r19
    2d42:	80 81       	ld	r24, Z
    2d44:	0e 94 a0 14 	call	0x2940	; 0x2940 <LCD_displayCharacter>
		i++;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	fc 01       	movw	r30, r24
    2d5a:	e2 0f       	add	r30, r18
    2d5c:	f3 1f       	adc	r31, r19
    2d5e:	80 81       	ld	r24, Z
    2d60:	88 23       	and	r24, r24
    2d62:	39 f7       	brne	.-50     	; 0x2d32 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	cf 91       	pop	r28
    2d6c:	df 91       	pop	r29
    2d6e:	08 95       	ret

00002d70 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <LCD_moveCursor+0x6>
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <LCD_moveCursor+0x8>
    2d78:	0f 92       	push	r0
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	8a 83       	std	Y+2, r24	; 0x02
    2d80:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	3d 83       	std	Y+5, r19	; 0x05
    2d8a:	2c 83       	std	Y+4, r18	; 0x04
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	91 05       	cpc	r25, r1
    2d94:	c1 f0       	breq	.+48     	; 0x2dc6 <LCD_moveCursor+0x56>
    2d96:	2c 81       	ldd	r18, Y+4	; 0x04
    2d98:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9a:	22 30       	cpi	r18, 0x02	; 2
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <LCD_moveCursor+0x3a>
    2da0:	8c 81       	ldd	r24, Y+4	; 0x04
    2da2:	9d 81       	ldd	r25, Y+5	; 0x05
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	61 f0       	breq	.+24     	; 0x2dc0 <LCD_moveCursor+0x50>
    2da8:	19 c0       	rjmp	.+50     	; 0x2ddc <LCD_moveCursor+0x6c>
    2daa:	2c 81       	ldd	r18, Y+4	; 0x04
    2dac:	3d 81       	ldd	r19, Y+5	; 0x05
    2dae:	22 30       	cpi	r18, 0x02	; 2
    2db0:	31 05       	cpc	r19, r1
    2db2:	69 f0       	breq	.+26     	; 0x2dce <LCD_moveCursor+0x5e>
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	9d 81       	ldd	r25, Y+5	; 0x05
    2db8:	83 30       	cpi	r24, 0x03	; 3
    2dba:	91 05       	cpc	r25, r1
    2dbc:	61 f0       	breq	.+24     	; 0x2dd6 <LCD_moveCursor+0x66>
    2dbe:	0e c0       	rjmp	.+28     	; 0x2ddc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	80 5c       	subi	r24, 0xC0	; 192
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	07 c0       	rjmp	.+14     	; 0x2ddc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	80 5f       	subi	r24, 0xF0	; 240
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	03 c0       	rjmp	.+6      	; 0x2ddc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	80 5b       	subi	r24, 0xB0	; 176
    2dda:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	80 68       	ori	r24, 0x80	; 128
    2de0:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendCommand>
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <LCD_displayStringRowColumn+0x6>
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <LCD_displayStringRowColumn+0x8>
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	6a 83       	std	Y+2, r22	; 0x02
    2e04:	5c 83       	std	Y+4, r21	; 0x04
    2e06:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e0c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
}
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	62 97       	sbiw	r28, 0x12	; 18
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	9a 8b       	std	Y+18, r25	; 0x12
    2e3c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e3e:	89 89       	ldd	r24, Y+17	; 0x11
    2e40:	9a 89       	ldd	r25, Y+18	; 0x12
    2e42:	9e 01       	movw	r18, r28
    2e44:	2f 5f       	subi	r18, 0xFF	; 255
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	b9 01       	movw	r22, r18
    2e4a:	4a e0       	ldi	r20, 0x0A	; 10
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <itoa>
   LCD_displayString(buff); /* Display the string */
    2e52:	ce 01       	movw	r24, r28
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <LCD_displayString>
}
    2e5a:	62 96       	adiw	r28, 0x12	; 18
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_sendCommand>
}
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Input: pointer to the configuration structure with type Timer1_ConfigType
 * Return: Void
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <Timer1_init+0x6>
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2e8e:	ef e4       	ldi	r30, 0x4F	; 79
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	8c e0       	ldi	r24, 0x0C	; 12
    2e94:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    2e96:	af e4       	ldi	r26, 0x4F	; 79
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	ef e4       	ldi	r30, 0x4F	; 79
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	98 2f       	mov	r25, r24
    2ea2:	9c 7f       	andi	r25, 0xFC	; 252
    2ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea8:	85 81       	ldd	r24, Z+5	; 0x05
    2eaa:	83 70       	andi	r24, 0x03	; 3
    2eac:	89 2b       	or	r24, r25
    2eae:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    2eb0:	ae e4       	ldi	r26, 0x4E	; 78
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	ee e4       	ldi	r30, 0x4E	; 78
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	28 2f       	mov	r18, r24
    2ebc:	27 7e       	andi	r18, 0xE7	; 231
    2ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec2:	85 81       	ldd	r24, Z+5	; 0x05
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	8c 70       	andi	r24, 0x0C	; 12
    2eca:	90 70       	andi	r25, 0x00	; 0
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	82 2b       	or	r24, r18
    2ed2:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    2ed4:	ac e4       	ldi	r26, 0x4C	; 76
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	fa 81       	ldd	r31, Y+2	; 0x02
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	11 96       	adiw	r26, 0x01	; 1
    2ee2:	9c 93       	st	X, r25
    2ee4:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    2ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eea:	85 81       	ldd	r24, Z+5	; 0x05
    2eec:	88 23       	and	r24, r24
    2eee:	29 f4       	brne	.+10     	; 0x2efa <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    2ef0:	e9 e5       	ldi	r30, 0x59	; 89
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	84 e0       	ldi	r24, 0x04	; 4
    2ef6:	80 83       	st	Z, r24
    2ef8:	12 c0       	rjmp	.+36     	; 0x2f1e <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	85 81       	ldd	r24, Z+5	; 0x05
    2f00:	84 30       	cpi	r24, 0x04	; 4
    2f02:	69 f4       	brne	.+26     	; 0x2f1e <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    2f04:	aa e4       	ldi	r26, 0x4A	; 74
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0c:	82 81       	ldd	r24, Z+2	; 0x02
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	11 96       	adiw	r26, 0x01	; 1
    2f12:	9c 93       	st	X, r25
    2f14:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    2f16:	e9 e5       	ldi	r30, 0x59	; 89
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 e1       	ldi	r24, 0x10	; 16
    2f1c:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    2f1e:	ae e4       	ldi	r26, 0x4E	; 78
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	ee e4       	ldi	r30, 0x4E	; 78
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	98 2f       	mov	r25, r24
    2f2a:	98 7f       	andi	r25, 0xF8	; 248
    2f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f30:	84 81       	ldd	r24, Z+4	; 0x04
    2f32:	89 2b       	or	r24, r25
    2f34:	8c 93       	st	X, r24
}
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <Timer1_deInit>:
 * Description: Function to disable the Timer1
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_deInit(void)
{
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0 ;
    2f48:	ef e4       	ldi	r30, 0x4F	; 79
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	10 82       	st	Z, r1

	TCCR1B = 0 ;
    2f4e:	ee e4       	ldi	r30, 0x4E	; 78
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	10 82       	st	Z, r1

	TIMSK = 0 ;
    2f54:	e9 e5       	ldi	r30, 0x59	; 89
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	10 82       	st	Z, r1

}
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <Timer1_setCallBack>:
 * Description: set the Call Back function address
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_setCallBack(void (*a_ptr)(void))
{
    2f60:	df 93       	push	r29
    2f62:	cf 93       	push	r28
    2f64:	00 d0       	rcall	.+0      	; 0x2f66 <Timer1_setCallBack+0x6>
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	9a 81       	ldd	r25, Y+2	; 0x02
    2f72:	90 93 0a 01 	sts	0x010A, r25
    2f76:	80 93 09 01 	sts	0x0109, r24
}
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <__vector_9>:

/*******************************************************************************
 *                    ISR (Interrupt Service Routines)                         *
 *******************************************************************************/
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    2f84:	1f 92       	push	r1
    2f86:	0f 92       	push	r0
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	0f 92       	push	r0
    2f8c:	11 24       	eor	r1, r1
    2f8e:	2f 93       	push	r18
    2f90:	3f 93       	push	r19
    2f92:	4f 93       	push	r20
    2f94:	5f 93       	push	r21
    2f96:	6f 93       	push	r22
    2f98:	7f 93       	push	r23
    2f9a:	8f 93       	push	r24
    2f9c:	9f 93       	push	r25
    2f9e:	af 93       	push	r26
    2fa0:	bf 93       	push	r27
    2fa2:	ef 93       	push	r30
    2fa4:	ff 93       	push	r31
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2fae:	80 91 09 01 	lds	r24, 0x0109
    2fb2:	90 91 0a 01 	lds	r25, 0x010A
    2fb6:	00 97       	sbiw	r24, 0x00	; 0
    2fb8:	29 f0       	breq	.+10     	; 0x2fc4 <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    2fba:	e0 91 09 01 	lds	r30, 0x0109
    2fbe:	f0 91 0a 01 	lds	r31, 0x010A
    2fc2:	09 95       	icall
	}
}
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	ff 91       	pop	r31
    2fca:	ef 91       	pop	r30
    2fcc:	bf 91       	pop	r27
    2fce:	af 91       	pop	r26
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	7f 91       	pop	r23
    2fd6:	6f 91       	pop	r22
    2fd8:	5f 91       	pop	r21
    2fda:	4f 91       	pop	r20
    2fdc:	3f 91       	pop	r19
    2fde:	2f 91       	pop	r18
    2fe0:	0f 90       	pop	r0
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	0f 90       	pop	r0
    2fe6:	1f 90       	pop	r1
    2fe8:	18 95       	reti

00002fea <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    2fea:	1f 92       	push	r1
    2fec:	0f 92       	push	r0
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	0f 92       	push	r0
    2ff2:	11 24       	eor	r1, r1
    2ff4:	2f 93       	push	r18
    2ff6:	3f 93       	push	r19
    2ff8:	4f 93       	push	r20
    2ffa:	5f 93       	push	r21
    2ffc:	6f 93       	push	r22
    2ffe:	7f 93       	push	r23
    3000:	8f 93       	push	r24
    3002:	9f 93       	push	r25
    3004:	af 93       	push	r26
    3006:	bf 93       	push	r27
    3008:	ef 93       	push	r30
    300a:	ff 93       	push	r31
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    3014:	80 91 09 01 	lds	r24, 0x0109
    3018:	90 91 0a 01 	lds	r25, 0x010A
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	29 f0       	breq	.+10     	; 0x302a <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    3020:	e0 91 09 01 	lds	r30, 0x0109
    3024:	f0 91 0a 01 	lds	r31, 0x010A
    3028:	09 95       	icall
	}
}
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	ff 91       	pop	r31
    3030:	ef 91       	pop	r30
    3032:	bf 91       	pop	r27
    3034:	af 91       	pop	r26
    3036:	9f 91       	pop	r25
    3038:	8f 91       	pop	r24
    303a:	7f 91       	pop	r23
    303c:	6f 91       	pop	r22
    303e:	5f 91       	pop	r21
    3040:	4f 91       	pop	r20
    3042:	3f 91       	pop	r19
    3044:	2f 91       	pop	r18
    3046:	0f 90       	pop	r0
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	0f 90       	pop	r0
    304c:	1f 90       	pop	r1
    304e:	18 95       	reti

00003050 <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    3050:	1f 92       	push	r1
    3052:	0f 92       	push	r0
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	0f 92       	push	r0
    3058:	11 24       	eor	r1, r1
    305a:	2f 93       	push	r18
    305c:	3f 93       	push	r19
    305e:	4f 93       	push	r20
    3060:	5f 93       	push	r21
    3062:	6f 93       	push	r22
    3064:	7f 93       	push	r23
    3066:	8f 93       	push	r24
    3068:	9f 93       	push	r25
    306a:	af 93       	push	r26
    306c:	bf 93       	push	r27
    306e:	ef 93       	push	r30
    3070:	ff 93       	push	r31
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    307a:	80 91 09 01 	lds	r24, 0x0109
    307e:	90 91 0a 01 	lds	r25, 0x010A
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	29 f0       	breq	.+10     	; 0x3090 <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    3086:	e0 91 09 01 	lds	r30, 0x0109
    308a:	f0 91 0a 01 	lds	r31, 0x010A
    308e:	09 95       	icall
	}
}
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	ff 91       	pop	r31
    3096:	ef 91       	pop	r30
    3098:	bf 91       	pop	r27
    309a:	af 91       	pop	r26
    309c:	9f 91       	pop	r25
    309e:	8f 91       	pop	r24
    30a0:	7f 91       	pop	r23
    30a2:	6f 91       	pop	r22
    30a4:	5f 91       	pop	r21
    30a6:	4f 91       	pop	r20
    30a8:	3f 91       	pop	r19
    30aa:	2f 91       	pop	r18
    30ac:	0f 90       	pop	r0
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	0f 90       	pop	r0
    30b2:	1f 90       	pop	r1
    30b4:	18 95       	reti

000030b6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <UART_init+0x6>
    30bc:	00 d0       	rcall	.+0      	; 0x30be <UART_init+0x8>
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	9c 83       	std	Y+4, r25	; 0x04
    30c4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr = 0 ; /* Variable For Baud Rate Register */
    30c6:	1a 82       	std	Y+2, r1	; 0x02
    30c8:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ; /* Double Speed of UART */
    30ca:	eb e2       	ldi	r30, 0x2B	; 43
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	80 83       	st	Z, r24
	
	UCSRB = (1<<TXEN) | (1<<RXEN) ; /* Enable Receive & Transmit */
    30d2:	ea e2       	ldi	r30, 0x2A	; 42
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	88 e1       	ldi	r24, 0x18	; 24
    30d8:	80 83       	st	Z, r24

	/* Configure UCSZ2 By Desired Data Bits */
	UCSRB = (UCSRB & 0xFB) | (GET_BIT(Config_Ptr->bit_data , 2)<<2) ;
    30da:	aa e2       	ldi	r26, 0x2A	; 42
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	ea e2       	ldi	r30, 0x2A	; 42
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	98 2f       	mov	r25, r24
    30e6:	9b 7f       	andi	r25, 0xFB	; 251
    30e8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ea:	fc 81       	ldd	r31, Y+4	; 0x04
    30ec:	80 81       	ld	r24, Z
    30ee:	84 70       	andi	r24, 0x04	; 4
    30f0:	89 2b       	or	r24, r25
    30f2:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL) ; /* Set This Bit to Write in UCSRC Reg. */
    30f4:	e0 e4       	ldi	r30, 0x40	; 64
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 e8       	ldi	r24, 0x80	; 128
    30fa:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity<<4) ; /* Configure Parity Bit */
    30fc:	a0 e4       	ldi	r26, 0x40	; 64
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e0 e4       	ldi	r30, 0x40	; 64
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	28 2f       	mov	r18, r24
    3108:	2f 7c       	andi	r18, 0xCF	; 207
    310a:	eb 81       	ldd	r30, Y+3	; 0x03
    310c:	fc 81       	ldd	r31, Y+4	; 0x04
    310e:	81 81       	ldd	r24, Z+1	; 0x01
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	82 95       	swap	r24
    3116:	92 95       	swap	r25
    3118:	90 7f       	andi	r25, 0xF0	; 240
    311a:	98 27       	eor	r25, r24
    311c:	80 7f       	andi	r24, 0xF0	; 240
    311e:	98 27       	eor	r25, r24
    3120:	82 2b       	or	r24, r18
    3122:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit<<3); /* Configure Stop Bit */
    3124:	a0 e4       	ldi	r26, 0x40	; 64
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e0 e4       	ldi	r30, 0x40	; 64
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	28 2f       	mov	r18, r24
    3130:	27 7f       	andi	r18, 0xF7	; 247
    3132:	eb 81       	ldd	r30, Y+3	; 0x03
    3134:	fc 81       	ldd	r31, Y+4	; 0x04
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	88 2f       	mov	r24, r24
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	82 2b       	or	r24, r18
    314a:	8c 93       	st	X, r24

	/* Configure UCSZ0:1 By Desired Data Bits */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->bit_data & 0x03)<< 1 ) ;
    314c:	a0 e4       	ldi	r26, 0x40	; 64
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	e0 e4       	ldi	r30, 0x40	; 64
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	28 2f       	mov	r18, r24
    3158:	29 7f       	andi	r18, 0xF9	; 249
    315a:	eb 81       	ldd	r30, Y+3	; 0x03
    315c:	fc 81       	ldd	r31, Y+4	; 0x04
    315e:	80 81       	ld	r24, Z
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	83 70       	andi	r24, 0x03	; 3
    3166:	90 70       	andi	r25, 0x00	; 0
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	82 2b       	or	r24, r18
    316e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr = (uint16)((F_CPU / (8UL * Config_Ptr->baud_rate)) - 1) ;
    3170:	eb 81       	ldd	r30, Y+3	; 0x03
    3172:	fc 81       	ldd	r31, Y+4	; 0x04
    3174:	83 81       	ldd	r24, Z+3	; 0x03
    3176:	94 81       	ldd	r25, Z+4	; 0x04
    3178:	a5 81       	ldd	r26, Z+5	; 0x05
    317a:	b6 81       	ldd	r27, Z+6	; 0x06
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	aa 1f       	adc	r26, r26
    3182:	bb 1f       	adc	r27, r27
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	aa 1f       	adc	r26, r26
    318a:	bb 1f       	adc	r27, r27
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	aa 1f       	adc	r26, r26
    3192:	bb 1f       	adc	r27, r27
    3194:	9c 01       	movw	r18, r24
    3196:	ad 01       	movw	r20, r26
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	92 e1       	ldi	r25, 0x12	; 18
    319c:	aa e7       	ldi	r26, 0x7A	; 122
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__udivmodsi4>
    31a8:	da 01       	movw	r26, r20
    31aa:	c9 01       	movw	r24, r18
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01

	/* Configure UBRR Reg with Desired Baud Rate */
	UBRRH = ubrr>>8 ;
    31b2:	e0 e4       	ldi	r30, 0x40	; 64
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	89 2f       	mov	r24, r25
    31bc:	99 27       	eor	r25, r25
    31be:	80 83       	st	Z, r24
	UBRRL = ubrr ;
    31c0:	e9 e2       	ldi	r30, 0x29	; 41
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	80 83       	st	Z, r24

}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31e2:	eb e2       	ldi	r30, 0x2B	; 43
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	80 72       	andi	r24, 0x20	; 32
    31ee:	90 70       	andi	r25, 0x00	; 0
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	b9 f3       	breq	.-18     	; 0x31e2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    31f4:	ec e2       	ldi	r30, 0x2C	; 44
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    31fc:	0f 90       	pop	r0
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    320c:	eb e2       	ldi	r30, 0x2B	; 43
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	88 23       	and	r24, r24
    3214:	dc f7       	brge	.-10     	; 0x320c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3216:	ec e2       	ldi	r30, 0x2C	; 44
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
}
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	00 d0       	rcall	.+0      	; 0x3228 <UART_sendString+0x6>
    3228:	0f 92       	push	r0
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	9b 83       	std	Y+3, r25	; 0x03
    3230:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3232:	19 82       	std	Y+1, r1	; 0x01
    3234:	0e c0       	rjmp	.+28     	; 0x3252 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	fc 01       	movw	r30, r24
    3242:	e2 0f       	add	r30, r18
    3244:	f3 1f       	adc	r31, r19
    3246:	80 81       	ld	r24, Z
    3248:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		i++;
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	28 2f       	mov	r18, r24
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	9b 81       	ldd	r25, Y+3	; 0x03
    325c:	fc 01       	movw	r30, r24
    325e:	e2 0f       	add	r30, r18
    3260:	f3 1f       	adc	r31, r19
    3262:	80 81       	ld	r24, Z
    3264:	88 23       	and	r24, r24
    3266:	39 f7       	brne	.-50     	; 0x3236 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	00 d0       	rcall	.+0      	; 0x327e <UART_receiveString+0xa>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3288:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	8c 01       	movw	r16, r24
    3296:	02 0f       	add	r16, r18
    3298:	13 1f       	adc	r17, r19
    329a:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    329e:	f8 01       	movw	r30, r16
    32a0:	80 83       	st	Z, r24
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	8c 01       	movw	r16, r24
    32b6:	02 0f       	add	r16, r18
    32b8:	13 1f       	adc	r17, r19
    32ba:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    32be:	f8 01       	movw	r30, r16
    32c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	80 81       	ld	r24, Z
    32d4:	83 32       	cpi	r24, 0x23	; 35
    32d6:	31 f7       	brne	.-52     	; 0x32a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	fc 01       	movw	r30, r24
    32e4:	e2 0f       	add	r30, r18
    32e6:	f3 1f       	adc	r31, r19
    32e8:	10 82       	st	Z, r1
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <__udivmodsi4>:
    32fa:	a1 e2       	ldi	r26, 0x21	; 33
    32fc:	1a 2e       	mov	r1, r26
    32fe:	aa 1b       	sub	r26, r26
    3300:	bb 1b       	sub	r27, r27
    3302:	fd 01       	movw	r30, r26
    3304:	0d c0       	rjmp	.+26     	; 0x3320 <__udivmodsi4_ep>

00003306 <__udivmodsi4_loop>:
    3306:	aa 1f       	adc	r26, r26
    3308:	bb 1f       	adc	r27, r27
    330a:	ee 1f       	adc	r30, r30
    330c:	ff 1f       	adc	r31, r31
    330e:	a2 17       	cp	r26, r18
    3310:	b3 07       	cpc	r27, r19
    3312:	e4 07       	cpc	r30, r20
    3314:	f5 07       	cpc	r31, r21
    3316:	20 f0       	brcs	.+8      	; 0x3320 <__udivmodsi4_ep>
    3318:	a2 1b       	sub	r26, r18
    331a:	b3 0b       	sbc	r27, r19
    331c:	e4 0b       	sbc	r30, r20
    331e:	f5 0b       	sbc	r31, r21

00003320 <__udivmodsi4_ep>:
    3320:	66 1f       	adc	r22, r22
    3322:	77 1f       	adc	r23, r23
    3324:	88 1f       	adc	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	1a 94       	dec	r1
    332a:	69 f7       	brne	.-38     	; 0x3306 <__udivmodsi4_loop>
    332c:	60 95       	com	r22
    332e:	70 95       	com	r23
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	9b 01       	movw	r18, r22
    3336:	ac 01       	movw	r20, r24
    3338:	bd 01       	movw	r22, r26
    333a:	cf 01       	movw	r24, r30
    333c:	08 95       	ret

0000333e <__prologue_saves__>:
    333e:	2f 92       	push	r2
    3340:	3f 92       	push	r3
    3342:	4f 92       	push	r4
    3344:	5f 92       	push	r5
    3346:	6f 92       	push	r6
    3348:	7f 92       	push	r7
    334a:	8f 92       	push	r8
    334c:	9f 92       	push	r9
    334e:	af 92       	push	r10
    3350:	bf 92       	push	r11
    3352:	cf 92       	push	r12
    3354:	df 92       	push	r13
    3356:	ef 92       	push	r14
    3358:	ff 92       	push	r15
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	ca 1b       	sub	r28, r26
    3368:	db 0b       	sbc	r29, r27
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	09 94       	ijmp

00003376 <__epilogue_restores__>:
    3376:	2a 88       	ldd	r2, Y+18	; 0x12
    3378:	39 88       	ldd	r3, Y+17	; 0x11
    337a:	48 88       	ldd	r4, Y+16	; 0x10
    337c:	5f 84       	ldd	r5, Y+15	; 0x0f
    337e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3380:	7d 84       	ldd	r7, Y+13	; 0x0d
    3382:	8c 84       	ldd	r8, Y+12	; 0x0c
    3384:	9b 84       	ldd	r9, Y+11	; 0x0b
    3386:	aa 84       	ldd	r10, Y+10	; 0x0a
    3388:	b9 84       	ldd	r11, Y+9	; 0x09
    338a:	c8 84       	ldd	r12, Y+8	; 0x08
    338c:	df 80       	ldd	r13, Y+7	; 0x07
    338e:	ee 80       	ldd	r14, Y+6	; 0x06
    3390:	fd 80       	ldd	r15, Y+5	; 0x05
    3392:	0c 81       	ldd	r16, Y+4	; 0x04
    3394:	1b 81       	ldd	r17, Y+3	; 0x03
    3396:	aa 81       	ldd	r26, Y+2	; 0x02
    3398:	b9 81       	ldd	r27, Y+1	; 0x01
    339a:	ce 0f       	add	r28, r30
    339c:	d1 1d       	adc	r29, r1
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	ed 01       	movw	r28, r26
    33aa:	08 95       	ret

000033ac <itoa>:
    33ac:	fb 01       	movw	r30, r22
    33ae:	9f 01       	movw	r18, r30
    33b0:	e8 94       	clt
    33b2:	42 30       	cpi	r20, 0x02	; 2
    33b4:	c4 f0       	brlt	.+48     	; 0x33e6 <itoa+0x3a>
    33b6:	45 32       	cpi	r20, 0x25	; 37
    33b8:	b4 f4       	brge	.+44     	; 0x33e6 <itoa+0x3a>
    33ba:	4a 30       	cpi	r20, 0x0A	; 10
    33bc:	29 f4       	brne	.+10     	; 0x33c8 <itoa+0x1c>
    33be:	97 fb       	bst	r25, 7
    33c0:	1e f4       	brtc	.+6      	; 0x33c8 <itoa+0x1c>
    33c2:	90 95       	com	r25
    33c4:	81 95       	neg	r24
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	64 2f       	mov	r22, r20
    33ca:	77 27       	eor	r23, r23
    33cc:	0e 94 07 1a 	call	0x340e	; 0x340e <__udivmodhi4>
    33d0:	80 5d       	subi	r24, 0xD0	; 208
    33d2:	8a 33       	cpi	r24, 0x3A	; 58
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <itoa+0x2c>
    33d6:	89 5d       	subi	r24, 0xD9	; 217
    33d8:	81 93       	st	Z+, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	a1 f7       	brne	.-24     	; 0x33c8 <itoa+0x1c>
    33e0:	16 f4       	brtc	.+4      	; 0x33e6 <itoa+0x3a>
    33e2:	5d e2       	ldi	r21, 0x2D	; 45
    33e4:	51 93       	st	Z+, r21
    33e6:	10 82       	st	Z, r1
    33e8:	c9 01       	movw	r24, r18
    33ea:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <strrev>

000033ee <strrev>:
    33ee:	dc 01       	movw	r26, r24
    33f0:	fc 01       	movw	r30, r24
    33f2:	67 2f       	mov	r22, r23
    33f4:	71 91       	ld	r23, Z+
    33f6:	77 23       	and	r23, r23
    33f8:	e1 f7       	brne	.-8      	; 0x33f2 <strrev+0x4>
    33fa:	32 97       	sbiw	r30, 0x02	; 2
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <strrev+0x18>
    33fe:	7c 91       	ld	r23, X
    3400:	6d 93       	st	X+, r22
    3402:	70 83       	st	Z, r23
    3404:	62 91       	ld	r22, -Z
    3406:	ae 17       	cp	r26, r30
    3408:	bf 07       	cpc	r27, r31
    340a:	c8 f3       	brcs	.-14     	; 0x33fe <strrev+0x10>
    340c:	08 95       	ret

0000340e <__udivmodhi4>:
    340e:	aa 1b       	sub	r26, r26
    3410:	bb 1b       	sub	r27, r27
    3412:	51 e1       	ldi	r21, 0x11	; 17
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <__udivmodhi4_ep>

00003416 <__udivmodhi4_loop>:
    3416:	aa 1f       	adc	r26, r26
    3418:	bb 1f       	adc	r27, r27
    341a:	a6 17       	cp	r26, r22
    341c:	b7 07       	cpc	r27, r23
    341e:	10 f0       	brcs	.+4      	; 0x3424 <__udivmodhi4_ep>
    3420:	a6 1b       	sub	r26, r22
    3422:	b7 0b       	sbc	r27, r23

00003424 <__udivmodhi4_ep>:
    3424:	88 1f       	adc	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	5a 95       	dec	r21
    342a:	a9 f7       	brne	.-22     	; 0x3416 <__udivmodhi4_loop>
    342c:	80 95       	com	r24
    342e:	90 95       	com	r25
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	08 95       	ret

00003436 <_exit>:
    3436:	f8 94       	cli

00003438 <__stop_program>:
    3438:	ff cf       	rjmp	.-2      	; 0x3438 <__stop_program>
