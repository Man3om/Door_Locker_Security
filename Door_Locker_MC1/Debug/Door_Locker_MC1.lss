
Door_Locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000571e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  0000571e  000057b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800108  00800108  0000585a  2**0
                  ALLOC
  3 .stab         00003ce4  00000000  00000000  0000585c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010be  00000000  00000000  00009540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a75e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c932  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000da33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000edfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 67 29 	jmp	0x52ce	; 0x52ce <__vector_7>
      20:	0c 94 9a 29 	jmp	0x5334	; 0x5334 <__vector_8>
      24:	0c 94 34 29 	jmp	0x5268	; 0x5268 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <main>
      8a:	0c 94 8d 2b 	jmp	0x571a	; 0x571a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 2b 	jmp	0x565a	; 0x565a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ef       	ldi	r22, 0xF2	; 242
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 35 2b 	jmp	0x566a	; 0x566a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 21 2b 	jmp	0x5642	; 0x5642 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3d 2b 	jmp	0x567a	; 0x567a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer>:

/*********************************************************************************
 *                            CallBack Function                                  *
 ********************************************************************************/
void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     ca6:	80 91 08 01 	lds	r24, 0x0108
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 08 01 	sts	0x0108, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <main>:

/*********************************************************************************
 *                            Application Code                                   *
 ********************************************************************************/
int main(void)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	cc 5c       	subi	r28, 0xCC	; 204
     cc4:	d1 40       	sbci	r29, 0x01	; 1
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0 , pass1[5] = {0} , pass2[5] = {0} ,i = 0 , status = 0;
     cd0:	fe 01       	movw	r30, r28
     cd2:	e5 55       	subi	r30, 0x55	; 85
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	10 82       	st	Z, r1
     cd8:	ce 01       	movw	r24, r28
     cda:	84 55       	subi	r24, 0x54	; 84
     cdc:	9e 4f       	sbci	r25, 0xFE	; 254
     cde:	25 e0       	ldi	r18, 0x05	; 5
     ce0:	fc 01       	movw	r30, r24
     ce2:	df 01       	movw	r26, r30
     ce4:	82 2f       	mov	r24, r18
     ce6:	1d 92       	st	X+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <main+0x30>
     cec:	ce 01       	movw	r24, r28
     cee:	8f 54       	subi	r24, 0x4F	; 79
     cf0:	9e 4f       	sbci	r25, 0xFE	; 254
     cf2:	25 e0       	ldi	r18, 0x05	; 5
     cf4:	fc 01       	movw	r30, r24
     cf6:	df 01       	movw	r26, r30
     cf8:	82 2f       	mov	r24, r18
     cfa:	1d 92       	st	X+, r1
     cfc:	8a 95       	dec	r24
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <main+0x44>
     d00:	fe 01       	movw	r30, r28
     d02:	e6 55       	subi	r30, 0x56	; 86
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	10 82       	st	Z, r1
     d08:	fe 01       	movw	r30, r28
     d0a:	e7 55       	subi	r30, 0x57	; 87
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	10 82       	st	Z, r1
	uint8 flag = 0 , count = 0 ;
     d10:	fe 01       	movw	r30, r28
     d12:	e8 55       	subi	r30, 0x58	; 88
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	10 82       	st	Z, r1
     d18:	fe 01       	movw	r30, r28
     d1a:	e9 55       	subi	r30, 0x59	; 89
     d1c:	fe 4f       	sbci	r31, 0xFE	; 254
     d1e:	10 82       	st	Z, r1

	SREG |= (1<<7); /* Enable Global Interrupt */
     d20:	af e5       	ldi	r26, 0x5F	; 95
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ef e5       	ldi	r30, 0x5F	; 95
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24

	/* Configure The UART & Timer1 With Desired Specifications */
	UART_ConfigType u_configure = {BIT8 , Disable , ONE_Stop , 9600};
     d2e:	ce 01       	movw	r24, r28
     d30:	8a 54       	subi	r24, 0x4A	; 74
     d32:	9e 4f       	sbci	r25, 0xFE	; 254
     d34:	cd 53       	subi	r28, 0x3D	; 61
     d36:	de 4f       	sbci	r29, 0xFE	; 254
     d38:	99 83       	std	Y+1, r25	; 0x01
     d3a:	88 83       	st	Y, r24
     d3c:	c3 5c       	subi	r28, 0xC3	; 195
     d3e:	d1 40       	sbci	r29, 0x01	; 1
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b1 e0       	ldi	r27, 0x01	; 1
     d44:	cb 53       	subi	r28, 0x3B	; 59
     d46:	de 4f       	sbci	r29, 0xFE	; 254
     d48:	b9 83       	std	Y+1, r27	; 0x01
     d4a:	a8 83       	st	Y, r26
     d4c:	c5 5c       	subi	r28, 0xC5	; 197
     d4e:	d1 40       	sbci	r29, 0x01	; 1
     d50:	b7 e0       	ldi	r27, 0x07	; 7
     d52:	c9 53       	subi	r28, 0x39	; 57
     d54:	de 4f       	sbci	r29, 0xFE	; 254
     d56:	b8 83       	st	Y, r27
     d58:	c7 5c       	subi	r28, 0xC7	; 199
     d5a:	d1 40       	sbci	r29, 0x01	; 1
     d5c:	cb 53       	subi	r28, 0x3B	; 59
     d5e:	de 4f       	sbci	r29, 0xFE	; 254
     d60:	e8 81       	ld	r30, Y
     d62:	f9 81       	ldd	r31, Y+1	; 0x01
     d64:	c5 5c       	subi	r28, 0xC5	; 197
     d66:	d1 40       	sbci	r29, 0x01	; 1
     d68:	00 80       	ld	r0, Z
     d6a:	cb 53       	subi	r28, 0x3B	; 59
     d6c:	de 4f       	sbci	r29, 0xFE	; 254
     d6e:	88 81       	ld	r24, Y
     d70:	99 81       	ldd	r25, Y+1	; 0x01
     d72:	c5 5c       	subi	r28, 0xC5	; 197
     d74:	d1 40       	sbci	r29, 0x01	; 1
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	cb 53       	subi	r28, 0x3B	; 59
     d7a:	de 4f       	sbci	r29, 0xFE	; 254
     d7c:	99 83       	std	Y+1, r25	; 0x01
     d7e:	88 83       	st	Y, r24
     d80:	c5 5c       	subi	r28, 0xC5	; 197
     d82:	d1 40       	sbci	r29, 0x01	; 1
     d84:	cd 53       	subi	r28, 0x3D	; 61
     d86:	de 4f       	sbci	r29, 0xFE	; 254
     d88:	a8 81       	ld	r26, Y
     d8a:	b9 81       	ldd	r27, Y+1	; 0x01
     d8c:	c3 5c       	subi	r28, 0xC3	; 195
     d8e:	d1 40       	sbci	r29, 0x01	; 1
     d90:	0c 92       	st	X, r0
     d92:	cd 53       	subi	r28, 0x3D	; 61
     d94:	de 4f       	sbci	r29, 0xFE	; 254
     d96:	e8 81       	ld	r30, Y
     d98:	f9 81       	ldd	r31, Y+1	; 0x01
     d9a:	c3 5c       	subi	r28, 0xC3	; 195
     d9c:	d1 40       	sbci	r29, 0x01	; 1
     d9e:	31 96       	adiw	r30, 0x01	; 1
     da0:	cd 53       	subi	r28, 0x3D	; 61
     da2:	de 4f       	sbci	r29, 0xFE	; 254
     da4:	f9 83       	std	Y+1, r31	; 0x01
     da6:	e8 83       	st	Y, r30
     da8:	c3 5c       	subi	r28, 0xC3	; 195
     daa:	d1 40       	sbci	r29, 0x01	; 1
     dac:	c9 53       	subi	r28, 0x39	; 57
     dae:	de 4f       	sbci	r29, 0xFE	; 254
     db0:	f8 81       	ld	r31, Y
     db2:	c7 5c       	subi	r28, 0xC7	; 199
     db4:	d1 40       	sbci	r29, 0x01	; 1
     db6:	f1 50       	subi	r31, 0x01	; 1
     db8:	c9 53       	subi	r28, 0x39	; 57
     dba:	de 4f       	sbci	r29, 0xFE	; 254
     dbc:	f8 83       	st	Y, r31
     dbe:	c7 5c       	subi	r28, 0xC7	; 199
     dc0:	d1 40       	sbci	r29, 0x01	; 1
     dc2:	c9 53       	subi	r28, 0x39	; 57
     dc4:	de 4f       	sbci	r29, 0xFE	; 254
     dc6:	88 81       	ld	r24, Y
     dc8:	c7 5c       	subi	r28, 0xC7	; 199
     dca:	d1 40       	sbci	r29, 0x01	; 1
     dcc:	88 23       	and	r24, r24
     dce:	31 f6       	brne	.-116    	; 0xd5c <main+0xa6>
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     dd0:	ce 01       	movw	r24, r28
     dd2:	83 54       	subi	r24, 0x43	; 67
     dd4:	9e 4f       	sbci	r25, 0xFE	; 254
     dd6:	c8 53       	subi	r28, 0x38	; 56
     dd8:	de 4f       	sbci	r29, 0xFE	; 254
     dda:	99 83       	std	Y+1, r25	; 0x01
     ddc:	88 83       	st	Y, r24
     dde:	c8 5c       	subi	r28, 0xC8	; 200
     de0:	d1 40       	sbci	r29, 0x01	; 1
     de2:	aa ef       	ldi	r26, 0xFA	; 250
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	c6 53       	subi	r28, 0x36	; 54
     de8:	de 4f       	sbci	r29, 0xFE	; 254
     dea:	b9 83       	std	Y+1, r27	; 0x01
     dec:	a8 83       	st	Y, r26
     dee:	ca 5c       	subi	r28, 0xCA	; 202
     df0:	d1 40       	sbci	r29, 0x01	; 1
     df2:	b6 e0       	ldi	r27, 0x06	; 6
     df4:	c4 53       	subi	r28, 0x34	; 52
     df6:	de 4f       	sbci	r29, 0xFE	; 254
     df8:	b8 83       	st	Y, r27
     dfa:	cc 5c       	subi	r28, 0xCC	; 204
     dfc:	d1 40       	sbci	r29, 0x01	; 1
     dfe:	c6 53       	subi	r28, 0x36	; 54
     e00:	de 4f       	sbci	r29, 0xFE	; 254
     e02:	e8 81       	ld	r30, Y
     e04:	f9 81       	ldd	r31, Y+1	; 0x01
     e06:	ca 5c       	subi	r28, 0xCA	; 202
     e08:	d1 40       	sbci	r29, 0x01	; 1
     e0a:	00 80       	ld	r0, Z
     e0c:	c6 53       	subi	r28, 0x36	; 54
     e0e:	de 4f       	sbci	r29, 0xFE	; 254
     e10:	88 81       	ld	r24, Y
     e12:	99 81       	ldd	r25, Y+1	; 0x01
     e14:	ca 5c       	subi	r28, 0xCA	; 202
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	c6 53       	subi	r28, 0x36	; 54
     e1c:	de 4f       	sbci	r29, 0xFE	; 254
     e1e:	99 83       	std	Y+1, r25	; 0x01
     e20:	88 83       	st	Y, r24
     e22:	ca 5c       	subi	r28, 0xCA	; 202
     e24:	d1 40       	sbci	r29, 0x01	; 1
     e26:	c8 53       	subi	r28, 0x38	; 56
     e28:	de 4f       	sbci	r29, 0xFE	; 254
     e2a:	a8 81       	ld	r26, Y
     e2c:	b9 81       	ldd	r27, Y+1	; 0x01
     e2e:	c8 5c       	subi	r28, 0xC8	; 200
     e30:	d1 40       	sbci	r29, 0x01	; 1
     e32:	0c 92       	st	X, r0
     e34:	c8 53       	subi	r28, 0x38	; 56
     e36:	de 4f       	sbci	r29, 0xFE	; 254
     e38:	e8 81       	ld	r30, Y
     e3a:	f9 81       	ldd	r31, Y+1	; 0x01
     e3c:	c8 5c       	subi	r28, 0xC8	; 200
     e3e:	d1 40       	sbci	r29, 0x01	; 1
     e40:	31 96       	adiw	r30, 0x01	; 1
     e42:	c8 53       	subi	r28, 0x38	; 56
     e44:	de 4f       	sbci	r29, 0xFE	; 254
     e46:	f9 83       	std	Y+1, r31	; 0x01
     e48:	e8 83       	st	Y, r30
     e4a:	c8 5c       	subi	r28, 0xC8	; 200
     e4c:	d1 40       	sbci	r29, 0x01	; 1
     e4e:	c4 53       	subi	r28, 0x34	; 52
     e50:	de 4f       	sbci	r29, 0xFE	; 254
     e52:	f8 81       	ld	r31, Y
     e54:	cc 5c       	subi	r28, 0xCC	; 204
     e56:	d1 40       	sbci	r29, 0x01	; 1
     e58:	f1 50       	subi	r31, 0x01	; 1
     e5a:	c4 53       	subi	r28, 0x34	; 52
     e5c:	de 4f       	sbci	r29, 0xFE	; 254
     e5e:	f8 83       	st	Y, r31
     e60:	cc 5c       	subi	r28, 0xCC	; 204
     e62:	d1 40       	sbci	r29, 0x01	; 1
     e64:	c4 53       	subi	r28, 0x34	; 52
     e66:	de 4f       	sbci	r29, 0xFE	; 254
     e68:	88 81       	ld	r24, Y
     e6a:	cc 5c       	subi	r28, 0xCC	; 204
     e6c:	d1 40       	sbci	r29, 0x01	; 1
     e6e:	88 23       	and	r24, r24
     e70:	31 f6       	brne	.-116    	; 0xdfe <main+0x148>

	/* Initialization Drivers */
	UART_init(&u_configure);
     e72:	ce 01       	movw	r24, r28
     e74:	8a 54       	subi	r24, 0x4A	; 74
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	0e 94 cd 29 	call	0x539a	; 0x539a <UART_init>
	LCD_init();
     e7c:	0e 94 87 23 	call	0x470e	; 0x470e <LCD_init>

	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
     e80:	8f e4       	ldi	r24, 0x4F	; 79
     e82:	96 e0       	ldi	r25, 0x06	; 6
     e84:	0e 94 22 29 	call	0x5244	; 0x5244 <Timer1_setCallBack>

	UART_recieveByte(); /* Waiting For MCU2 To be Ready */
     e88:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>

	while(1)
	{
		/* Create Password to The System */
		if(flag == 0)
     e8c:	fe 01       	movw	r30, r28
     e8e:	e8 55       	subi	r30, 0x58	; 88
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	80 81       	ld	r24, Z
     e94:	88 23       	and	r24, r24
     e96:	09 f0       	breq	.+2      	; 0xe9a <main+0x1e4>
     e98:	0a c6       	rjmp	.+3092   	; 0x1aae <main+0xdf8>
		{
			LCD_clearScreen();
     e9a:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
			LCD_displayString("PLZ Enter Pass:");
     e9e:	80 e6       	ldi	r24, 0x60	; 96
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
			LCD_moveCursor(1, 0);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	0e 94 2a 28 	call	0x5054	; 0x5054 <LCD_moveCursor>

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
     eae:	fe 01       	movw	r30, r28
     eb0:	e6 55       	subi	r30, 0x56	; 86
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	10 82       	st	Z, r1
     eb6:	d6 c0       	rjmp	.+428    	; 0x1064 <main+0x3ae>
			{
				key = KEYPAD_getPressedKey() ;
     eb8:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
     ebc:	fe 01       	movw	r30, r28
     ebe:	e5 55       	subi	r30, 0x55	; 85
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	80 83       	st	Z, r24
				pass1[i] = key ;
     ec4:	fe 01       	movw	r30, r28
     ec6:	e6 55       	subi	r30, 0x56	; 86
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	80 81       	ld	r24, Z
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	84 55       	subi	r24, 0x54	; 84
     ed4:	9e 4f       	sbci	r25, 0xFE	; 254
     ed6:	dc 01       	movw	r26, r24
     ed8:	a2 0f       	add	r26, r18
     eda:	b3 1f       	adc	r27, r19
     edc:	fe 01       	movw	r30, r28
     ede:	e5 55       	subi	r30, 0x55	; 85
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	80 81       	ld	r24, Z
     ee4:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     ee6:	8a e2       	ldi	r24, 0x2A	; 42
     ee8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
     eec:	fe 01       	movw	r30, r28
     eee:	ed 55       	subi	r30, 0x5D	; 93
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	aa ef       	ldi	r26, 0xFA	; 250
     ef8:	b3 e4       	ldi	r27, 0x43	; 67
     efa:	80 83       	st	Z, r24
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	a2 83       	std	Z+2, r26	; 0x02
     f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	8e 01       	movw	r16, r28
     f04:	01 56       	subi	r16, 0x61	; 97
     f06:	1e 4f       	sbci	r17, 0xFE	; 254
     f08:	fe 01       	movw	r30, r28
     f0a:	ed 55       	subi	r30, 0x5D	; 93
     f0c:	fe 4f       	sbci	r31, 0xFE	; 254
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	4a ef       	ldi	r20, 0xFA	; 250
     f1c:	54 e4       	ldi	r21, 0x44	; 68
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	f8 01       	movw	r30, r16
     f28:	80 83       	st	Z, r24
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	a2 83       	std	Z+2, r26	; 0x02
     f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f30:	fe 01       	movw	r30, r28
     f32:	e1 56       	subi	r30, 0x61	; 97
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f4a:	88 23       	and	r24, r24
     f4c:	44 f4       	brge	.+16     	; 0xf5e <main+0x2a8>
		__ticks = 1;
     f4e:	fe 01       	movw	r30, r28
     f50:	e3 56       	subi	r30, 0x63	; 99
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	64 c0       	rjmp	.+200    	; 0x1026 <main+0x370>
	else if (__tmp > 65535)
     f5e:	fe 01       	movw	r30, r28
     f60:	e1 56       	subi	r30, 0x61	; 97
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	3f ef       	ldi	r19, 0xFF	; 255
     f70:	4f e7       	ldi	r20, 0x7F	; 127
     f72:	57 e4       	ldi	r21, 0x47	; 71
     f74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f78:	18 16       	cp	r1, r24
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <main+0x2c8>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <main+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7e:	fe 01       	movw	r30, r28
     f80:	ed 55       	subi	r30, 0x5D	; 93
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e2       	ldi	r20, 0x20	; 32
     f92:	51 e4       	ldi	r21, 0x41	; 65
     f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	8e 01       	movw	r16, r28
     f9e:	03 56       	subi	r16, 0x63	; 99
     fa0:	1e 4f       	sbci	r17, 0xFE	; 254
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	f8 01       	movw	r30, r16
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	1f c0       	rjmp	.+62     	; 0xff4 <main+0x33e>
     fb6:	fe 01       	movw	r30, r28
     fb8:	e5 56       	subi	r30, 0x65	; 101
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc4:	fe 01       	movw	r30, r28
     fc6:	e5 56       	subi	r30, 0x65	; 101
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <main+0x318>
     fd2:	fe 01       	movw	r30, r28
     fd4:	e5 56       	subi	r30, 0x65	; 101
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fdc:	de 01       	movw	r26, r28
     fde:	a3 56       	subi	r26, 0x63	; 99
     fe0:	be 4f       	sbci	r27, 0xFE	; 254
     fe2:	fe 01       	movw	r30, r28
     fe4:	e3 56       	subi	r30, 0x63	; 99
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	9c 93       	st	X, r25
     ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	fe 01       	movw	r30, r28
     ff6:	e3 56       	subi	r30, 0x63	; 99
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	d1 f6       	brne	.-76     	; 0xfb6 <main+0x300>
    1002:	27 c0       	rjmp	.+78     	; 0x1052 <main+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	8e 01       	movw	r16, r28
    1006:	03 56       	subi	r16, 0x63	; 99
    1008:	1e 4f       	sbci	r17, 0xFE	; 254
    100a:	fe 01       	movw	r30, r28
    100c:	e1 56       	subi	r30, 0x61	; 97
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	f8 01       	movw	r30, r16
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
    1026:	de 01       	movw	r26, r28
    1028:	a7 56       	subi	r26, 0x67	; 103
    102a:	be 4f       	sbci	r27, 0xFE	; 254
    102c:	fe 01       	movw	r30, r28
    102e:	e3 56       	subi	r30, 0x63	; 99
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	8d 93       	st	X+, r24
    1038:	9c 93       	st	X, r25
    103a:	fe 01       	movw	r30, r28
    103c:	e7 56       	subi	r30, 0x67	; 103
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <main+0x38e>
    1048:	fe 01       	movw	r30, r28
    104a:	e7 56       	subi	r30, 0x67	; 103
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("PLZ Enter Pass:");
			LCD_moveCursor(1, 0);

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
    1052:	de 01       	movw	r26, r28
    1054:	a6 55       	subi	r26, 0x56	; 86
    1056:	be 4f       	sbci	r27, 0xFE	; 254
    1058:	fe 01       	movw	r30, r28
    105a:	e6 55       	subi	r30, 0x56	; 86
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	80 81       	ld	r24, Z
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	8c 93       	st	X, r24
    1064:	fe 01       	movw	r30, r28
    1066:	e6 55       	subi	r30, 0x56	; 86
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	80 81       	ld	r24, Z
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	08 f4       	brcc	.+2      	; 0x1072 <main+0x3bc>
    1070:	23 cf       	rjmp	.-442    	; 0xeb8 <main+0x202>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1072:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    1076:	fe 01       	movw	r30, r28
    1078:	e5 55       	subi	r30, 0x55	; 85
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	80 83       	st	Z, r24
    107e:	fe 01       	movw	r30, r28
    1080:	eb 56       	subi	r30, 0x6B	; 107
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	aa ef       	ldi	r26, 0xFA	; 250
    108a:	b3 e4       	ldi	r27, 0x43	; 67
    108c:	80 83       	st	Z, r24
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	a2 83       	std	Z+2, r26	; 0x02
    1092:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	8e 01       	movw	r16, r28
    1096:	0f 56       	subi	r16, 0x6F	; 111
    1098:	1e 4f       	sbci	r17, 0xFE	; 254
    109a:	fe 01       	movw	r30, r28
    109c:	eb 56       	subi	r30, 0x6B	; 107
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a ef       	ldi	r20, 0xFA	; 250
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 83       	st	Z, r24
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	a2 83       	std	Z+2, r26	; 0x02
    10c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c2:	fe 01       	movw	r30, r28
    10c4:	ef 56       	subi	r30, 0x6F	; 111
    10c6:	fe 4f       	sbci	r31, 0xFE	; 254
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	44 f4       	brge	.+16     	; 0x10f0 <main+0x43a>
		__ticks = 1;
    10e0:	fe 01       	movw	r30, r28
    10e2:	e1 57       	subi	r30, 0x71	; 113
    10e4:	fe 4f       	sbci	r31, 0xFE	; 254
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	80 83       	st	Z, r24
    10ee:	64 c0       	rjmp	.+200    	; 0x11b8 <main+0x502>
	else if (__tmp > 65535)
    10f0:	fe 01       	movw	r30, r28
    10f2:	ef 56       	subi	r30, 0x6F	; 111
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	3f ef       	ldi	r19, 0xFF	; 255
    1102:	4f e7       	ldi	r20, 0x7F	; 127
    1104:	57 e4       	ldi	r21, 0x47	; 71
    1106:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    110a:	18 16       	cp	r1, r24
    110c:	0c f0       	brlt	.+2      	; 0x1110 <main+0x45a>
    110e:	43 c0       	rjmp	.+134    	; 0x1196 <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1110:	fe 01       	movw	r30, r28
    1112:	eb 56       	subi	r30, 0x6B	; 107
    1114:	fe 4f       	sbci	r31, 0xFE	; 254
    1116:	60 81       	ld	r22, Z
    1118:	71 81       	ldd	r23, Z+1	; 0x01
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e2       	ldi	r20, 0x20	; 32
    1124:	51 e4       	ldi	r21, 0x41	; 65
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8e 01       	movw	r16, r28
    1130:	01 57       	subi	r16, 0x71	; 113
    1132:	1e 4f       	sbci	r17, 0xFE	; 254
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	f8 01       	movw	r30, r16
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
    1146:	1f c0       	rjmp	.+62     	; 0x1186 <main+0x4d0>
    1148:	fe 01       	movw	r30, r28
    114a:	e3 57       	subi	r30, 0x73	; 115
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	88 ec       	ldi	r24, 0xC8	; 200
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	80 83       	st	Z, r24
    1156:	fe 01       	movw	r30, r28
    1158:	e3 57       	subi	r30, 0x73	; 115
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <main+0x4aa>
    1164:	fe 01       	movw	r30, r28
    1166:	e3 57       	subi	r30, 0x73	; 115
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	de 01       	movw	r26, r28
    1170:	a1 57       	subi	r26, 0x71	; 113
    1172:	be 4f       	sbci	r27, 0xFE	; 254
    1174:	fe 01       	movw	r30, r28
    1176:	e1 57       	subi	r30, 0x71	; 113
    1178:	fe 4f       	sbci	r31, 0xFE	; 254
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	11 96       	adiw	r26, 0x01	; 1
    1182:	9c 93       	st	X, r25
    1184:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	fe 01       	movw	r30, r28
    1188:	e1 57       	subi	r30, 0x71	; 113
    118a:	fe 4f       	sbci	r31, 0xFE	; 254
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	d1 f6       	brne	.-76     	; 0x1148 <main+0x492>
    1194:	28 c0       	rjmp	.+80     	; 0x11e6 <main+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	8e 01       	movw	r16, r28
    1198:	01 57       	subi	r16, 0x71	; 113
    119a:	1e 4f       	sbci	r17, 0xFE	; 254
    119c:	fe 01       	movw	r30, r28
    119e:	ef 56       	subi	r30, 0x6F	; 111
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	f8 01       	movw	r30, r16
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	80 83       	st	Z, r24
    11b8:	de 01       	movw	r26, r28
    11ba:	a5 57       	subi	r26, 0x75	; 117
    11bc:	be 4f       	sbci	r27, 0xFE	; 254
    11be:	fe 01       	movw	r30, r28
    11c0:	e1 57       	subi	r30, 0x71	; 113
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	fe 01       	movw	r30, r28
    11d0:	e5 57       	subi	r30, 0x75	; 117
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <main+0x522>
    11dc:	fe 01       	movw	r30, r28
    11de:	e5 57       	subi	r30, 0x75	; 117
    11e0:	fe 4f       	sbci	r31, 0xFE	; 254
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    11e6:	fe 01       	movw	r30, r28
    11e8:	e5 55       	subi	r30, 0x55	; 85
    11ea:	fe 4f       	sbci	r31, 0xFE	; 254
    11ec:	80 81       	ld	r24, Z
    11ee:	8d 30       	cpi	r24, 0x0D	; 13
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <main+0x53e>
    11f2:	3f cf       	rjmp	.-386    	; 0x1072 <main+0x3bc>

			LCD_clearScreen();
    11f4:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    11f8:	80 e7       	ldi	r24, 0x70	; 112
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same Pass: ");
    1200:	21 e8       	ldi	r18, 0x81	; 129
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <LCD_displayStringRowColumn>

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    120e:	fe 01       	movw	r30, r28
    1210:	e6 55       	subi	r30, 0x56	; 86
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	10 82       	st	Z, r1
    1216:	d6 c0       	rjmp	.+428    	; 0x13c4 <main+0x70e>
			{
				key = KEYPAD_getPressedKey() ;
    1218:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    121c:	fe 01       	movw	r30, r28
    121e:	e5 55       	subi	r30, 0x55	; 85
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	80 83       	st	Z, r24
				pass2[i] = key ;
    1224:	fe 01       	movw	r30, r28
    1226:	e6 55       	subi	r30, 0x56	; 86
    1228:	fe 4f       	sbci	r31, 0xFE	; 254
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	ce 01       	movw	r24, r28
    1232:	8f 54       	subi	r24, 0x4F	; 79
    1234:	9e 4f       	sbci	r25, 0xFE	; 254
    1236:	dc 01       	movw	r26, r24
    1238:	a2 0f       	add	r26, r18
    123a:	b3 1f       	adc	r27, r19
    123c:	fe 01       	movw	r30, r28
    123e:	e5 55       	subi	r30, 0x55	; 85
    1240:	fe 4f       	sbci	r31, 0xFE	; 254
    1242:	80 81       	ld	r24, Z
    1244:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
    1246:	8a e2       	ldi	r24, 0x2A	; 42
    1248:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
    124c:	fe 01       	movw	r30, r28
    124e:	e9 57       	subi	r30, 0x79	; 121
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	aa ef       	ldi	r26, 0xFA	; 250
    1258:	b3 e4       	ldi	r27, 0x43	; 67
    125a:	80 83       	st	Z, r24
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	a2 83       	std	Z+2, r26	; 0x02
    1260:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	8e 01       	movw	r16, r28
    1264:	0d 57       	subi	r16, 0x7D	; 125
    1266:	1e 4f       	sbci	r17, 0xFE	; 254
    1268:	fe 01       	movw	r30, r28
    126a:	e9 57       	subi	r30, 0x79	; 121
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a ef       	ldi	r20, 0xFA	; 250
    127c:	54 e4       	ldi	r21, 0x44	; 68
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	f8 01       	movw	r30, r16
    1288:	80 83       	st	Z, r24
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	a2 83       	std	Z+2, r26	; 0x02
    128e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1290:	fe 01       	movw	r30, r28
    1292:	ed 57       	subi	r30, 0x7D	; 125
    1294:	fe 4f       	sbci	r31, 0xFE	; 254
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	44 f4       	brge	.+16     	; 0x12be <main+0x608>
		__ticks = 1;
    12ae:	fe 01       	movw	r30, r28
    12b0:	ef 57       	subi	r30, 0x7F	; 127
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	80 83       	st	Z, r24
    12bc:	64 c0       	rjmp	.+200    	; 0x1386 <main+0x6d0>
	else if (__tmp > 65535)
    12be:	fe 01       	movw	r30, r28
    12c0:	ed 57       	subi	r30, 0x7D	; 125
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	0c f0       	brlt	.+2      	; 0x12de <main+0x628>
    12dc:	43 c0       	rjmp	.+134    	; 0x1364 <main+0x6ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	fe 01       	movw	r30, r28
    12e0:	e9 57       	subi	r30, 0x79	; 121
    12e2:	fe 4f       	sbci	r31, 0xFE	; 254
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8e 01       	movw	r16, r28
    12fe:	0f 57       	subi	r16, 0x7F	; 127
    1300:	1e 4f       	sbci	r17, 0xFE	; 254
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	f8 01       	movw	r30, r16
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	80 83       	st	Z, r24
    1314:	1f c0       	rjmp	.+62     	; 0x1354 <main+0x69e>
    1316:	fe 01       	movw	r30, r28
    1318:	e1 58       	subi	r30, 0x81	; 129
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	88 ec       	ldi	r24, 0xC8	; 200
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	80 83       	st	Z, r24
    1324:	fe 01       	movw	r30, r28
    1326:	e1 58       	subi	r30, 0x81	; 129
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <main+0x678>
    1332:	fe 01       	movw	r30, r28
    1334:	e1 58       	subi	r30, 0x81	; 129
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	de 01       	movw	r26, r28
    133e:	af 57       	subi	r26, 0x7F	; 127
    1340:	be 4f       	sbci	r27, 0xFE	; 254
    1342:	fe 01       	movw	r30, r28
    1344:	ef 57       	subi	r30, 0x7F	; 127
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	9c 93       	st	X, r25
    1352:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	fe 01       	movw	r30, r28
    1356:	ef 57       	subi	r30, 0x7F	; 127
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	d1 f6       	brne	.-76     	; 0x1316 <main+0x660>
    1362:	27 c0       	rjmp	.+78     	; 0x13b2 <main+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1364:	8e 01       	movw	r16, r28
    1366:	0f 57       	subi	r16, 0x7F	; 127
    1368:	1e 4f       	sbci	r17, 0xFE	; 254
    136a:	fe 01       	movw	r30, r28
    136c:	ed 57       	subi	r30, 0x7D	; 125
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	f8 01       	movw	r30, r16
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	de 01       	movw	r26, r28
    1388:	a3 58       	subi	r26, 0x83	; 131
    138a:	be 4f       	sbci	r27, 0xFE	; 254
    138c:	fe 01       	movw	r30, r28
    138e:	ef 57       	subi	r30, 0x7F	; 127
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	8d 93       	st	X+, r24
    1398:	9c 93       	st	X, r25
    139a:	fe 01       	movw	r30, r28
    139c:	e3 58       	subi	r30, 0x83	; 131
    139e:	fe 4f       	sbci	r31, 0xFE	; 254
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <main+0x6ee>
    13a8:	fe 01       	movw	r30, r28
    13aa:	e3 58       	subi	r30, 0x83	; 131
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("Plz re-enter the");
			LCD_displayStringRowColumn(1, 0, "same Pass: ");

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    13b2:	de 01       	movw	r26, r28
    13b4:	a6 55       	subi	r26, 0x56	; 86
    13b6:	be 4f       	sbci	r27, 0xFE	; 254
    13b8:	fe 01       	movw	r30, r28
    13ba:	e6 55       	subi	r30, 0x56	; 86
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	80 81       	ld	r24, Z
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	8c 93       	st	X, r24
    13c4:	fe 01       	movw	r30, r28
    13c6:	e6 55       	subi	r30, 0x56	; 86
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	80 81       	ld	r24, Z
    13cc:	85 30       	cpi	r24, 0x05	; 5
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <main+0x71c>
    13d0:	23 cf       	rjmp	.-442    	; 0x1218 <main+0x562>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    13d2:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    13d6:	fe 01       	movw	r30, r28
    13d8:	e5 55       	subi	r30, 0x55	; 85
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	80 83       	st	Z, r24
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 58       	subi	r30, 0x87	; 135
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	aa ef       	ldi	r26, 0xFA	; 250
    13ea:	b3 e4       	ldi	r27, 0x43	; 67
    13ec:	80 83       	st	Z, r24
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	8e 01       	movw	r16, r28
    13f6:	0b 58       	subi	r16, 0x8B	; 139
    13f8:	1e 4f       	sbci	r17, 0xFE	; 254
    13fa:	fe 01       	movw	r30, r28
    13fc:	e7 58       	subi	r30, 0x87	; 135
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a ef       	ldi	r20, 0xFA	; 250
    140e:	54 e4       	ldi	r21, 0x44	; 68
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	f8 01       	movw	r30, r16
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1422:	fe 01       	movw	r30, r28
    1424:	eb 58       	subi	r30, 0x8B	; 139
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	44 f4       	brge	.+16     	; 0x1450 <main+0x79a>
		__ticks = 1;
    1440:	fe 01       	movw	r30, r28
    1442:	ed 58       	subi	r30, 0x8D	; 141
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	64 c0       	rjmp	.+200    	; 0x1518 <main+0x862>
	else if (__tmp > 65535)
    1450:	fe 01       	movw	r30, r28
    1452:	eb 58       	subi	r30, 0x8B	; 139
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	0c f0       	brlt	.+2      	; 0x1470 <main+0x7ba>
    146e:	43 c0       	rjmp	.+134    	; 0x14f6 <main+0x840>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	fe 01       	movw	r30, r28
    1472:	e7 58       	subi	r30, 0x87	; 135
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	60 81       	ld	r22, Z
    1478:	71 81       	ldd	r23, Z+1	; 0x01
    147a:	82 81       	ldd	r24, Z+2	; 0x02
    147c:	93 81       	ldd	r25, Z+3	; 0x03
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8e 01       	movw	r16, r28
    1490:	0d 58       	subi	r16, 0x8D	; 141
    1492:	1e 4f       	sbci	r17, 0xFE	; 254
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	f8 01       	movw	r30, r16
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	1f c0       	rjmp	.+62     	; 0x14e6 <main+0x830>
    14a8:	fe 01       	movw	r30, r28
    14aa:	ef 58       	subi	r30, 0x8F	; 143
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	88 ec       	ldi	r24, 0xC8	; 200
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
    14b6:	fe 01       	movw	r30, r28
    14b8:	ef 58       	subi	r30, 0x8F	; 143
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	80 81       	ld	r24, Z
    14be:	91 81       	ldd	r25, Z+1	; 0x01
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <main+0x80a>
    14c4:	fe 01       	movw	r30, r28
    14c6:	ef 58       	subi	r30, 0x8F	; 143
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	91 83       	std	Z+1, r25	; 0x01
    14cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ce:	de 01       	movw	r26, r28
    14d0:	ad 58       	subi	r26, 0x8D	; 141
    14d2:	be 4f       	sbci	r27, 0xFE	; 254
    14d4:	fe 01       	movw	r30, r28
    14d6:	ed 58       	subi	r30, 0x8D	; 141
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	11 96       	adiw	r26, 0x01	; 1
    14e2:	9c 93       	st	X, r25
    14e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e6:	fe 01       	movw	r30, r28
    14e8:	ed 58       	subi	r30, 0x8D	; 141
    14ea:	fe 4f       	sbci	r31, 0xFE	; 254
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	d1 f6       	brne	.-76     	; 0x14a8 <main+0x7f2>
    14f4:	28 c0       	rjmp	.+80     	; 0x1546 <main+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f6:	8e 01       	movw	r16, r28
    14f8:	0d 58       	subi	r16, 0x8D	; 141
    14fa:	1e 4f       	sbci	r17, 0xFE	; 254
    14fc:	fe 01       	movw	r30, r28
    14fe:	eb 58       	subi	r30, 0x8B	; 139
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	f8 01       	movw	r30, r16
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	80 83       	st	Z, r24
    1518:	de 01       	movw	r26, r28
    151a:	a1 59       	subi	r26, 0x91	; 145
    151c:	be 4f       	sbci	r27, 0xFE	; 254
    151e:	fe 01       	movw	r30, r28
    1520:	ed 58       	subi	r30, 0x8D	; 141
    1522:	fe 4f       	sbci	r31, 0xFE	; 254
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	11 96       	adiw	r26, 0x01	; 1
    152a:	9c 93       	st	X, r25
    152c:	8e 93       	st	-X, r24
    152e:	fe 01       	movw	r30, r28
    1530:	e1 59       	subi	r30, 0x91	; 145
    1532:	fe 4f       	sbci	r31, 0xFE	; 254
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <main+0x882>
    153c:	fe 01       	movw	r30, r28
    153e:	e1 59       	subi	r30, 0x91	; 145
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    1546:	fe 01       	movw	r30, r28
    1548:	e5 55       	subi	r30, 0x55	; 85
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	80 81       	ld	r24, Z
    154e:	8d 30       	cpi	r24, 0x0D	; 13
    1550:	09 f0       	breq	.+2      	; 0x1554 <main+0x89e>
    1552:	3f cf       	rjmp	.-386    	; 0x13d2 <main+0x71c>

			/* Send 2 Passwords To 2nd MCU */
			for(i = 0 ; i < 5 ; i++)
    1554:	fe 01       	movw	r30, r28
    1556:	e6 55       	subi	r30, 0x56	; 86
    1558:	fe 4f       	sbci	r31, 0xFE	; 254
    155a:	10 82       	st	Z, r1
    155c:	41 c1       	rjmp	.+642    	; 0x17e0 <main+0xb2a>
			{
				UART_sendByte(pass1[i]);
    155e:	fe 01       	movw	r30, r28
    1560:	e6 55       	subi	r30, 0x56	; 86
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	80 81       	ld	r24, Z
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	ce 01       	movw	r24, r28
    156c:	84 55       	subi	r24, 0x54	; 84
    156e:	9e 4f       	sbci	r25, 0xFE	; 254
    1570:	fc 01       	movw	r30, r24
    1572:	e2 0f       	add	r30, r18
    1574:	f3 1f       	adc	r31, r19
    1576:	80 81       	ld	r24, Z
    1578:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    157c:	fe 01       	movw	r30, r28
    157e:	e5 59       	subi	r30, 0x95	; 149
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a0 ea       	ldi	r26, 0xA0	; 160
    1588:	b1 e4       	ldi	r27, 0x41	; 65
    158a:	80 83       	st	Z, r24
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	a2 83       	std	Z+2, r26	; 0x02
    1590:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1592:	8e 01       	movw	r16, r28
    1594:	09 59       	subi	r16, 0x99	; 153
    1596:	1e 4f       	sbci	r17, 0xFE	; 254
    1598:	fe 01       	movw	r30, r28
    159a:	e5 59       	subi	r30, 0x95	; 149
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	2b ea       	ldi	r18, 0xAB	; 171
    15a8:	3a ea       	ldi	r19, 0xAA	; 170
    15aa:	4a e2       	ldi	r20, 0x2A	; 42
    15ac:	50 e4       	ldi	r21, 0x40	; 64
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	f8 01       	movw	r30, r16
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c0:	fe 01       	movw	r30, r28
    15c2:	e9 59       	subi	r30, 0x99	; 153
    15c4:	fe 4f       	sbci	r31, 0xFE	; 254
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	34 f4       	brge	.+12     	; 0x15ea <main+0x934>
		__ticks = 1;
    15de:	fe 01       	movw	r30, r28
    15e0:	ea 59       	subi	r30, 0x9A	; 154
    15e2:	fe 4f       	sbci	r31, 0xFE	; 254
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 83       	st	Z, r24
    15e8:	e0 c0       	rjmp	.+448    	; 0x17aa <main+0xaf4>
	else if (__tmp > 255)
    15ea:	fe 01       	movw	r30, r28
    15ec:	e9 59       	subi	r30, 0x99	; 153
    15ee:	fe 4f       	sbci	r31, 0xFE	; 254
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	0c f0       	brlt	.+2      	; 0x160a <main+0x954>
    1608:	c0 c0       	rjmp	.+384    	; 0x178a <main+0xad4>
	{
		_delay_ms(__us / 1000.0);
    160a:	fe 01       	movw	r30, r28
    160c:	e5 59       	subi	r30, 0x95	; 149
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	fe 01       	movw	r30, r28
    162a:	ee 59       	subi	r30, 0x9E	; 158
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	80 83       	st	Z, r24
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	a2 83       	std	Z+2, r26	; 0x02
    1634:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1636:	8e 01       	movw	r16, r28
    1638:	02 5a       	subi	r16, 0xA2	; 162
    163a:	1e 4f       	sbci	r17, 0xFE	; 254
    163c:	fe 01       	movw	r30, r28
    163e:	ee 59       	subi	r30, 0x9E	; 158
    1640:	fe 4f       	sbci	r31, 0xFE	; 254
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	f8 01       	movw	r30, r16
    165c:	80 83       	st	Z, r24
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	a2 83       	std	Z+2, r26	; 0x02
    1662:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1664:	fe 01       	movw	r30, r28
    1666:	e2 5a       	subi	r30, 0xA2	; 162
    1668:	fe 4f       	sbci	r31, 0xFE	; 254
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	44 f4       	brge	.+16     	; 0x1692 <main+0x9dc>
		__ticks = 1;
    1682:	fe 01       	movw	r30, r28
    1684:	e4 5a       	subi	r30, 0xA4	; 164
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
    1690:	64 c0       	rjmp	.+200    	; 0x175a <main+0xaa4>
	else if (__tmp > 65535)
    1692:	fe 01       	movw	r30, r28
    1694:	e2 5a       	subi	r30, 0xA2	; 162
    1696:	fe 4f       	sbci	r31, 0xFE	; 254
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	3f ef       	ldi	r19, 0xFF	; 255
    16a4:	4f e7       	ldi	r20, 0x7F	; 127
    16a6:	57 e4       	ldi	r21, 0x47	; 71
    16a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ac:	18 16       	cp	r1, r24
    16ae:	0c f0       	brlt	.+2      	; 0x16b2 <main+0x9fc>
    16b0:	43 c0       	rjmp	.+134    	; 0x1738 <main+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b2:	fe 01       	movw	r30, r28
    16b4:	ee 59       	subi	r30, 0x9E	; 158
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	51 e4       	ldi	r21, 0x41	; 65
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8e 01       	movw	r16, r28
    16d2:	04 5a       	subi	r16, 0xA4	; 164
    16d4:	1e 4f       	sbci	r17, 0xFE	; 254
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	f8 01       	movw	r30, r16
    16e4:	91 83       	std	Z+1, r25	; 0x01
    16e6:	80 83       	st	Z, r24
    16e8:	1f c0       	rjmp	.+62     	; 0x1728 <main+0xa72>
    16ea:	fe 01       	movw	r30, r28
    16ec:	e6 5a       	subi	r30, 0xA6	; 166
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	88 ec       	ldi	r24, 0xC8	; 200
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
    16f8:	fe 01       	movw	r30, r28
    16fa:	e6 5a       	subi	r30, 0xA6	; 166
    16fc:	fe 4f       	sbci	r31, 0xFE	; 254
    16fe:	80 81       	ld	r24, Z
    1700:	91 81       	ldd	r25, Z+1	; 0x01
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <main+0xa4c>
    1706:	fe 01       	movw	r30, r28
    1708:	e6 5a       	subi	r30, 0xA6	; 166
    170a:	fe 4f       	sbci	r31, 0xFE	; 254
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	de 01       	movw	r26, r28
    1712:	a4 5a       	subi	r26, 0xA4	; 164
    1714:	be 4f       	sbci	r27, 0xFE	; 254
    1716:	fe 01       	movw	r30, r28
    1718:	e4 5a       	subi	r30, 0xA4	; 164
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	11 96       	adiw	r26, 0x01	; 1
    1724:	9c 93       	st	X, r25
    1726:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	fe 01       	movw	r30, r28
    172a:	e4 5a       	subi	r30, 0xA4	; 164
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	d1 f6       	brne	.-76     	; 0x16ea <main+0xa34>
    1736:	4b c0       	rjmp	.+150    	; 0x17ce <main+0xb18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	8e 01       	movw	r16, r28
    173a:	04 5a       	subi	r16, 0xA4	; 164
    173c:	1e 4f       	sbci	r17, 0xFE	; 254
    173e:	fe 01       	movw	r30, r28
    1740:	e2 5a       	subi	r30, 0xA2	; 162
    1742:	fe 4f       	sbci	r31, 0xFE	; 254
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	de 01       	movw	r26, r28
    175c:	a8 5a       	subi	r26, 0xA8	; 168
    175e:	be 4f       	sbci	r27, 0xFE	; 254
    1760:	fe 01       	movw	r30, r28
    1762:	e4 5a       	subi	r30, 0xA4	; 164
    1764:	fe 4f       	sbci	r31, 0xFE	; 254
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
    176a:	11 96       	adiw	r26, 0x01	; 1
    176c:	9c 93       	st	X, r25
    176e:	8e 93       	st	-X, r24
    1770:	fe 01       	movw	r30, r28
    1772:	e8 5a       	subi	r30, 0xA8	; 168
    1774:	fe 4f       	sbci	r31, 0xFE	; 254
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <main+0xac4>
    177e:	fe 01       	movw	r30, r28
    1780:	e8 5a       	subi	r30, 0xA8	; 168
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	22 c0       	rjmp	.+68     	; 0x17ce <main+0xb18>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    178a:	8e 01       	movw	r16, r28
    178c:	0a 59       	subi	r16, 0x9A	; 154
    178e:	1e 4f       	sbci	r17, 0xFE	; 254
    1790:	fe 01       	movw	r30, r28
    1792:	e9 59       	subi	r30, 0x99	; 153
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	f8 01       	movw	r30, r16
    17a8:	80 83       	st	Z, r24
    17aa:	de 01       	movw	r26, r28
    17ac:	a9 5a       	subi	r26, 0xA9	; 169
    17ae:	be 4f       	sbci	r27, 0xFE	; 254
    17b0:	fe 01       	movw	r30, r28
    17b2:	ea 59       	subi	r30, 0x9A	; 154
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	80 81       	ld	r24, Z
    17b8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17ba:	fe 01       	movw	r30, r28
    17bc:	e9 5a       	subi	r30, 0xA9	; 169
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	80 81       	ld	r24, Z
    17c2:	8a 95       	dec	r24
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <main+0xb0c>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e9 5a       	subi	r30, 0xA9	; 169
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	80 83       	st	Z, r24
				key = KEYPAD_getPressedKey() ;
				_delay_ms(500);
			} while(key != 13);

			/* Send 2 Passwords To 2nd MCU */
			for(i = 0 ; i < 5 ; i++)
    17ce:	de 01       	movw	r26, r28
    17d0:	a6 55       	subi	r26, 0x56	; 86
    17d2:	be 4f       	sbci	r27, 0xFE	; 254
    17d4:	fe 01       	movw	r30, r28
    17d6:	e6 55       	subi	r30, 0x56	; 86
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	80 81       	ld	r24, Z
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
    17de:	8c 93       	st	X, r24
    17e0:	fe 01       	movw	r30, r28
    17e2:	e6 55       	subi	r30, 0x56	; 86
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	80 81       	ld	r24, Z
    17e8:	85 30       	cpi	r24, 0x05	; 5
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <main+0xb38>
    17ec:	b8 ce       	rjmp	.-656    	; 0x155e <main+0x8a8>
				UART_sendByte(pass1[i]);

				_delay_us(20);
			}

			for(i = 0 ; i < 5 ; i++)
    17ee:	fe 01       	movw	r30, r28
    17f0:	e6 55       	subi	r30, 0x56	; 86
    17f2:	fe 4f       	sbci	r31, 0xFE	; 254
    17f4:	10 82       	st	Z, r1
    17f6:	41 c1       	rjmp	.+642    	; 0x1a7a <main+0xdc4>
			{
				UART_sendByte(pass2[i]);
    17f8:	fe 01       	movw	r30, r28
    17fa:	e6 55       	subi	r30, 0x56	; 86
    17fc:	fe 4f       	sbci	r31, 0xFE	; 254
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	ce 01       	movw	r24, r28
    1806:	8f 54       	subi	r24, 0x4F	; 79
    1808:	9e 4f       	sbci	r25, 0xFE	; 254
    180a:	fc 01       	movw	r30, r24
    180c:	e2 0f       	add	r30, r18
    180e:	f3 1f       	adc	r31, r19
    1810:	80 81       	ld	r24, Z
    1812:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    1816:	fe 01       	movw	r30, r28
    1818:	ed 5a       	subi	r30, 0xAD	; 173
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 ea       	ldi	r26, 0xA0	; 160
    1822:	b1 e4       	ldi	r27, 0x41	; 65
    1824:	80 83       	st	Z, r24
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	a2 83       	std	Z+2, r26	; 0x02
    182a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    182c:	8e 01       	movw	r16, r28
    182e:	01 5b       	subi	r16, 0xB1	; 177
    1830:	1e 4f       	sbci	r17, 0xFE	; 254
    1832:	fe 01       	movw	r30, r28
    1834:	ed 5a       	subi	r30, 0xAD	; 173
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	2b ea       	ldi	r18, 0xAB	; 171
    1842:	3a ea       	ldi	r19, 0xAA	; 170
    1844:	4a e2       	ldi	r20, 0x2A	; 42
    1846:	50 e4       	ldi	r21, 0x40	; 64
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	f8 01       	movw	r30, r16
    1852:	80 83       	st	Z, r24
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	a2 83       	std	Z+2, r26	; 0x02
    1858:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    185a:	fe 01       	movw	r30, r28
    185c:	e1 5b       	subi	r30, 0xB1	; 177
    185e:	fe 4f       	sbci	r31, 0xFE	; 254
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e8       	ldi	r20, 0x80	; 128
    186e:	5f e3       	ldi	r21, 0x3F	; 63
    1870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1874:	88 23       	and	r24, r24
    1876:	34 f4       	brge	.+12     	; 0x1884 <main+0xbce>
		__ticks = 1;
    1878:	fe 01       	movw	r30, r28
    187a:	e2 5b       	subi	r30, 0xB2	; 178
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 83       	st	Z, r24
    1882:	e0 c0       	rjmp	.+448    	; 0x1a44 <main+0xd8e>
	else if (__tmp > 255)
    1884:	fe 01       	movw	r30, r28
    1886:	e1 5b       	subi	r30, 0xB1	; 177
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4f e7       	ldi	r20, 0x7F	; 127
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    189e:	18 16       	cp	r1, r24
    18a0:	0c f0       	brlt	.+2      	; 0x18a4 <main+0xbee>
    18a2:	c0 c0       	rjmp	.+384    	; 0x1a24 <main+0xd6e>
	{
		_delay_ms(__us / 1000.0);
    18a4:	fe 01       	movw	r30, r28
    18a6:	ed 5a       	subi	r30, 0xAD	; 173
    18a8:	fe 4f       	sbci	r31, 0xFE	; 254
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a e7       	ldi	r20, 0x7A	; 122
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	fe 01       	movw	r30, r28
    18c4:	e6 5b       	subi	r30, 0xB6	; 182
    18c6:	fe 4f       	sbci	r31, 0xFE	; 254
    18c8:	80 83       	st	Z, r24
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	a2 83       	std	Z+2, r26	; 0x02
    18ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	8e 01       	movw	r16, r28
    18d2:	0a 5b       	subi	r16, 0xBA	; 186
    18d4:	1e 4f       	sbci	r17, 0xFE	; 254
    18d6:	fe 01       	movw	r30, r28
    18d8:	e6 5b       	subi	r30, 0xB6	; 182
    18da:	fe 4f       	sbci	r31, 0xFE	; 254
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	f8 01       	movw	r30, r16
    18f6:	80 83       	st	Z, r24
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	a2 83       	std	Z+2, r26	; 0x02
    18fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fe:	fe 01       	movw	r30, r28
    1900:	ea 5b       	subi	r30, 0xBA	; 186
    1902:	fe 4f       	sbci	r31, 0xFE	; 254
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	44 f4       	brge	.+16     	; 0x192c <main+0xc76>
		__ticks = 1;
    191c:	fe 01       	movw	r30, r28
    191e:	ec 5b       	subi	r30, 0xBC	; 188
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	64 c0       	rjmp	.+200    	; 0x19f4 <main+0xd3e>
	else if (__tmp > 65535)
    192c:	fe 01       	movw	r30, r28
    192e:	ea 5b       	subi	r30, 0xBA	; 186
    1930:	fe 4f       	sbci	r31, 0xFE	; 254
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	0c f0       	brlt	.+2      	; 0x194c <main+0xc96>
    194a:	43 c0       	rjmp	.+134    	; 0x19d2 <main+0xd1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194c:	fe 01       	movw	r30, r28
    194e:	e6 5b       	subi	r30, 0xB6	; 182
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8e 01       	movw	r16, r28
    196c:	0c 5b       	subi	r16, 0xBC	; 188
    196e:	1e 4f       	sbci	r17, 0xFE	; 254
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	f8 01       	movw	r30, r16
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
    1982:	1f c0       	rjmp	.+62     	; 0x19c2 <main+0xd0c>
    1984:	fe 01       	movw	r30, r28
    1986:	ee 5b       	subi	r30, 0xBE	; 190
    1988:	fe 4f       	sbci	r31, 0xFE	; 254
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1992:	fe 01       	movw	r30, r28
    1994:	ee 5b       	subi	r30, 0xBE	; 190
    1996:	fe 4f       	sbci	r31, 0xFE	; 254
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <main+0xce6>
    19a0:	fe 01       	movw	r30, r28
    19a2:	ee 5b       	subi	r30, 0xBE	; 190
    19a4:	fe 4f       	sbci	r31, 0xFE	; 254
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19aa:	de 01       	movw	r26, r28
    19ac:	ac 5b       	subi	r26, 0xBC	; 188
    19ae:	be 4f       	sbci	r27, 0xFE	; 254
    19b0:	fe 01       	movw	r30, r28
    19b2:	ec 5b       	subi	r30, 0xBC	; 188
    19b4:	fe 4f       	sbci	r31, 0xFE	; 254
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	11 96       	adiw	r26, 0x01	; 1
    19be:	9c 93       	st	X, r25
    19c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c2:	fe 01       	movw	r30, r28
    19c4:	ec 5b       	subi	r30, 0xBC	; 188
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	d1 f6       	brne	.-76     	; 0x1984 <main+0xcce>
    19d0:	4b c0       	rjmp	.+150    	; 0x1a68 <main+0xdb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	8e 01       	movw	r16, r28
    19d4:	0c 5b       	subi	r16, 0xBC	; 188
    19d6:	1e 4f       	sbci	r17, 0xFE	; 254
    19d8:	fe 01       	movw	r30, r28
    19da:	ea 5b       	subi	r30, 0xBA	; 186
    19dc:	fe 4f       	sbci	r31, 0xFE	; 254
    19de:	60 81       	ld	r22, Z
    19e0:	71 81       	ldd	r23, Z+1	; 0x01
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	f8 01       	movw	r30, r16
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
    19f4:	de 01       	movw	r26, r28
    19f6:	a0 5c       	subi	r26, 0xC0	; 192
    19f8:	be 4f       	sbci	r27, 0xFE	; 254
    19fa:	fe 01       	movw	r30, r28
    19fc:	ec 5b       	subi	r30, 0xBC	; 188
    19fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	9c 93       	st	X, r25
    1a08:	8e 93       	st	-X, r24
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e0 5c       	subi	r30, 0xC0	; 192
    1a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <main+0xd5e>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e0 5c       	subi	r30, 0xC0	; 192
    1a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
    1a22:	22 c0       	rjmp	.+68     	; 0x1a68 <main+0xdb2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a24:	8e 01       	movw	r16, r28
    1a26:	02 5b       	subi	r16, 0xB2	; 178
    1a28:	1e 4f       	sbci	r17, 0xFE	; 254
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e1 5b       	subi	r30, 0xB1	; 177
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	f8 01       	movw	r30, r16
    1a42:	80 83       	st	Z, r24
    1a44:	de 01       	movw	r26, r28
    1a46:	a1 5c       	subi	r26, 0xC1	; 193
    1a48:	be 4f       	sbci	r27, 0xFE	; 254
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e2 5b       	subi	r30, 0xB2	; 178
    1a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a50:	80 81       	ld	r24, Z
    1a52:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a54:	fe 01       	movw	r30, r28
    1a56:	e1 5c       	subi	r30, 0xC1	; 193
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8a 95       	dec	r24
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <main+0xda6>
    1a60:	fe 01       	movw	r30, r28
    1a62:	e1 5c       	subi	r30, 0xC1	; 193
    1a64:	fe 4f       	sbci	r31, 0xFE	; 254
    1a66:	80 83       	st	Z, r24
				UART_sendByte(pass1[i]);

				_delay_us(20);
			}

			for(i = 0 ; i < 5 ; i++)
    1a68:	de 01       	movw	r26, r28
    1a6a:	a6 55       	subi	r26, 0x56	; 86
    1a6c:	be 4f       	sbci	r27, 0xFE	; 254
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e6 55       	subi	r30, 0x56	; 86
    1a72:	fe 4f       	sbci	r31, 0xFE	; 254
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	8c 93       	st	X, r24
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e6 55       	subi	r30, 0x56	; 86
    1a7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a80:	80 81       	ld	r24, Z
    1a82:	85 30       	cpi	r24, 0x05	; 5
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <main+0xdd2>
    1a86:	b8 ce       	rjmp	.-656    	; 0x17f8 <main+0xb42>
				UART_sendByte(pass2[i]);

				_delay_us(20);
			}

			status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    1a88:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e7 55       	subi	r30, 0x57	; 87
    1a90:	fe 4f       	sbci	r31, 0xFE	; 254
    1a92:	80 83       	st	Z, r24

			/* if 2 Passwords matched each other move to next phase */
			if(status == OK)
    1a94:	fe 01       	movw	r30, r28
    1a96:	e7 55       	subi	r30, 0x57	; 87
    1a98:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 31       	cpi	r24, 0x10	; 16
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <main+0xdec>
    1aa0:	f5 c9       	rjmp	.-3094   	; 0xe8c <main+0x1d6>
			{
				flag = 1;
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e8 55       	subi	r30, 0x58	; 88
    1aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24
    1aac:	ef c9       	rjmp	.-3106   	; 0xe8c <main+0x1d6>
			}
		}
		else if(flag == 1) /* Normal Phase Of System */
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e8 55       	subi	r30, 0x58	; 88
    1ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab4:	80 81       	ld	r24, Z
    1ab6:	81 30       	cpi	r24, 0x01	; 1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <main+0xe06>
    1aba:	e8 c9       	rjmp	.-3120   	; 0xe8c <main+0x1d6>
		{
			LCD_clearScreen();
    1abc:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    1ac0:	8d e8       	ldi	r24, 0x8D	; 141
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1ac8:	2b e9       	ldi	r18, 0x9B	; 155
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <LCD_displayStringRowColumn>

			/* Waiting User to press (+ or -) Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1ad6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    1ada:	fe 01       	movw	r30, r28
    1adc:	e5 55       	subi	r30, 0x55	; 85
    1ade:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae0:	80 83       	st	Z, r24
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e5 5c       	subi	r30, 0xC5	; 197
    1ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	aa ef       	ldi	r26, 0xFA	; 250
    1aee:	b3 e4       	ldi	r27, 0x43	; 67
    1af0:	80 83       	st	Z, r24
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	8e 01       	movw	r16, r28
    1afa:	09 5c       	subi	r16, 0xC9	; 201
    1afc:	1e 4f       	sbci	r17, 0xFE	; 254
    1afe:	fe 01       	movw	r30, r28
    1b00:	e5 5c       	subi	r30, 0xC5	; 197
    1b02:	fe 4f       	sbci	r31, 0xFE	; 254
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4a ef       	ldi	r20, 0xFA	; 250
    1b12:	54 e4       	ldi	r21, 0x44	; 68
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	a2 83       	std	Z+2, r26	; 0x02
    1b24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b26:	fe 01       	movw	r30, r28
    1b28:	e9 5c       	subi	r30, 0xC9	; 201
    1b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	44 f4       	brge	.+16     	; 0x1b54 <main+0xe9e>
		__ticks = 1;
    1b44:	fe 01       	movw	r30, r28
    1b46:	eb 5c       	subi	r30, 0xCB	; 203
    1b48:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	64 c0       	rjmp	.+200    	; 0x1c1c <main+0xf66>
	else if (__tmp > 65535)
    1b54:	fe 01       	movw	r30, r28
    1b56:	e9 5c       	subi	r30, 0xC9	; 201
    1b58:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <main+0xebe>
    1b72:	43 c0       	rjmp	.+134    	; 0x1bfa <main+0xf44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	fe 01       	movw	r30, r28
    1b76:	e5 5c       	subi	r30, 0xC5	; 197
    1b78:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	8e 01       	movw	r16, r28
    1b94:	0b 5c       	subi	r16, 0xCB	; 203
    1b96:	1e 4f       	sbci	r17, 0xFE	; 254
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	80 83       	st	Z, r24
    1baa:	1f c0       	rjmp	.+62     	; 0x1bea <main+0xf34>
    1bac:	fe 01       	movw	r30, r28
    1bae:	ed 5c       	subi	r30, 0xCD	; 205
    1bb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb2:	88 ec       	ldi	r24, 0xC8	; 200
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bba:	fe 01       	movw	r30, r28
    1bbc:	ed 5c       	subi	r30, 0xCD	; 205
    1bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc0:	80 81       	ld	r24, Z
    1bc2:	91 81       	ldd	r25, Z+1	; 0x01
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <main+0xf0e>
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ed 5c       	subi	r30, 0xCD	; 205
    1bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	de 01       	movw	r26, r28
    1bd4:	ab 5c       	subi	r26, 0xCB	; 203
    1bd6:	be 4f       	sbci	r27, 0xFE	; 254
    1bd8:	fe 01       	movw	r30, r28
    1bda:	eb 5c       	subi	r30, 0xCB	; 203
    1bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	11 96       	adiw	r26, 0x01	; 1
    1be6:	9c 93       	st	X, r25
    1be8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	fe 01       	movw	r30, r28
    1bec:	eb 5c       	subi	r30, 0xCB	; 203
    1bee:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf0:	80 81       	ld	r24, Z
    1bf2:	91 81       	ldd	r25, Z+1	; 0x01
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	d1 f6       	brne	.-76     	; 0x1bac <main+0xef6>
    1bf8:	28 c0       	rjmp	.+80     	; 0x1c4a <main+0xf94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	8e 01       	movw	r16, r28
    1bfc:	0b 5c       	subi	r16, 0xCB	; 203
    1bfe:	1e 4f       	sbci	r17, 0xFE	; 254
    1c00:	fe 01       	movw	r30, r28
    1c02:	e9 5c       	subi	r30, 0xC9	; 201
    1c04:	fe 4f       	sbci	r31, 0xFE	; 254
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
    1c1c:	de 01       	movw	r26, r28
    1c1e:	af 5c       	subi	r26, 0xCF	; 207
    1c20:	be 4f       	sbci	r27, 0xFE	; 254
    1c22:	fe 01       	movw	r30, r28
    1c24:	eb 5c       	subi	r30, 0xCB	; 203
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	11 96       	adiw	r26, 0x01	; 1
    1c2e:	9c 93       	st	X, r25
    1c30:	8e 93       	st	-X, r24
    1c32:	fe 01       	movw	r30, r28
    1c34:	ef 5c       	subi	r30, 0xCF	; 207
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <main+0xf86>
    1c40:	fe 01       	movw	r30, r28
    1c42:	ef 5c       	subi	r30, 0xCF	; 207
    1c44:	fe 4f       	sbci	r31, 0xFE	; 254
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	80 83       	st	Z, r24
				_delay_ms(500);
			} while((key != '+') && (key != '-'));
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e5 55       	subi	r30, 0x55	; 85
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	80 81       	ld	r24, Z
    1c52:	8b 32       	cpi	r24, 0x2B	; 43
    1c54:	39 f0       	breq	.+14     	; 0x1c64 <main+0xfae>
    1c56:	fe 01       	movw	r30, r28
    1c58:	e5 55       	subi	r30, 0x55	; 85
    1c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8d 32       	cpi	r24, 0x2D	; 45
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <main+0xfae>
    1c62:	39 cf       	rjmp	.-398    	; 0x1ad6 <main+0xe20>

			if(key == '+') /* User Choose Open The Door */
    1c64:	fe 01       	movw	r30, r28
    1c66:	e5 55       	subi	r30, 0x55	; 85
    1c68:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8b 32       	cpi	r24, 0x2B	; 43
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <main+0xfbe>
    1c70:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <main+0x219e>
			{
				LCD_clearScreen();
    1c74:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    1c78:	8b ea       	ldi	r24, 0xAB	; 171
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	60 e0       	ldi	r22, 0x00	; 0
    1c84:	0e 94 2a 28 	call	0x5054	; 0x5054 <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e6 55       	subi	r30, 0x56	; 86
    1c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8e:	10 82       	st	Z, r1
    1c90:	d6 c0       	rjmp	.+428    	; 0x1e3e <main+0x1188>
				{
					key = KEYPAD_getPressedKey() ;
    1c92:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    1c96:	fe 01       	movw	r30, r28
    1c98:	e5 55       	subi	r30, 0x55	; 85
    1c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9c:	80 83       	st	Z, r24
					pass1[i] = key ;
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e6 55       	subi	r30, 0x56	; 86
    1ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	ce 01       	movw	r24, r28
    1cac:	84 55       	subi	r24, 0x54	; 84
    1cae:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	a2 0f       	add	r26, r18
    1cb4:	b3 1f       	adc	r27, r19
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 55       	subi	r30, 0x55	; 85
    1cba:	fe 4f       	sbci	r31, 0xFE	; 254
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8c 93       	st	X, r24
					LCD_displayCharacter('*');
    1cc0:	8a e2       	ldi	r24, 0x2A	; 42
    1cc2:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e3 5d       	subi	r30, 0xD3	; 211
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	aa ef       	ldi	r26, 0xFA	; 250
    1cd2:	b3 e4       	ldi	r27, 0x43	; 67
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	8e 01       	movw	r16, r28
    1cde:	07 5d       	subi	r16, 0xD7	; 215
    1ce0:	1e 4f       	sbci	r17, 0xFE	; 254
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e3 5d       	subi	r30, 0xD3	; 211
    1ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	a2 83       	std	Z+2, r26	; 0x02
    1d08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e7 5d       	subi	r30, 0xD7	; 215
    1d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	44 f4       	brge	.+16     	; 0x1d38 <main+0x1082>
		__ticks = 1;
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e9 5d       	subi	r30, 0xD9	; 217
    1d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	64 c0       	rjmp	.+200    	; 0x1e00 <main+0x114a>
	else if (__tmp > 65535)
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e7 5d       	subi	r30, 0xD7	; 215
    1d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <main+0x10a2>
    1d56:	43 c0       	rjmp	.+134    	; 0x1dde <main+0x1128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e3 5d       	subi	r30, 0xD3	; 211
    1d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8e 01       	movw	r16, r28
    1d78:	09 5d       	subi	r16, 0xD9	; 217
    1d7a:	1e 4f       	sbci	r17, 0xFE	; 254
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	1f c0       	rjmp	.+62     	; 0x1dce <main+0x1118>
    1d90:	fe 01       	movw	r30, r28
    1d92:	eb 5d       	subi	r30, 0xDB	; 219
    1d94:	fe 4f       	sbci	r31, 0xFE	; 254
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	fe 01       	movw	r30, r28
    1da0:	eb 5d       	subi	r30, 0xDB	; 219
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <main+0x10f2>
    1dac:	fe 01       	movw	r30, r28
    1dae:	eb 5d       	subi	r30, 0xDB	; 219
    1db0:	fe 4f       	sbci	r31, 0xFE	; 254
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	de 01       	movw	r26, r28
    1db8:	a9 5d       	subi	r26, 0xD9	; 217
    1dba:	be 4f       	sbci	r27, 0xFE	; 254
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e9 5d       	subi	r30, 0xD9	; 217
    1dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	11 96       	adiw	r26, 0x01	; 1
    1dca:	9c 93       	st	X, r25
    1dcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e9 5d       	subi	r30, 0xD9	; 217
    1dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	d1 f6       	brne	.-76     	; 0x1d90 <main+0x10da>
    1ddc:	27 c0       	rjmp	.+78     	; 0x1e2c <main+0x1176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	8e 01       	movw	r16, r28
    1de0:	09 5d       	subi	r16, 0xD9	; 217
    1de2:	1e 4f       	sbci	r17, 0xFE	; 254
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 5d       	subi	r30, 0xD7	; 215
    1de8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	de 01       	movw	r26, r28
    1e02:	ad 5d       	subi	r26, 0xDD	; 221
    1e04:	be 4f       	sbci	r27, 0xFE	; 254
    1e06:	fe 01       	movw	r30, r28
    1e08:	e9 5d       	subi	r30, 0xD9	; 217
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	8d 93       	st	X+, r24
    1e12:	9c 93       	st	X, r25
    1e14:	fe 01       	movw	r30, r28
    1e16:	ed 5d       	subi	r30, 0xDD	; 221
    1e18:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <main+0x1168>
    1e22:	fe 01       	movw	r30, r28
    1e24:	ed 5d       	subi	r30, 0xDD	; 221
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1e2c:	de 01       	movw	r26, r28
    1e2e:	a6 55       	subi	r26, 0x56	; 86
    1e30:	be 4f       	sbci	r27, 0xFE	; 254
    1e32:	fe 01       	movw	r30, r28
    1e34:	e6 55       	subi	r30, 0x56	; 86
    1e36:	fe 4f       	sbci	r31, 0xFE	; 254
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	8c 93       	st	X, r24
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e6 55       	subi	r30, 0x56	; 86
    1e42:	fe 4f       	sbci	r31, 0xFE	; 254
    1e44:	80 81       	ld	r24, Z
    1e46:	85 30       	cpi	r24, 0x05	; 5
    1e48:	08 f4       	brcc	.+2      	; 0x1e4c <main+0x1196>
    1e4a:	23 cf       	rjmp	.-442    	; 0x1c92 <main+0xfdc>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    1e4c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    1e50:	fe 01       	movw	r30, r28
    1e52:	e5 55       	subi	r30, 0x55	; 85
    1e54:	fe 4f       	sbci	r31, 0xFE	; 254
    1e56:	80 83       	st	Z, r24
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e1 5e       	subi	r30, 0xE1	; 225
    1e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	aa ef       	ldi	r26, 0xFA	; 250
    1e64:	b3 e4       	ldi	r27, 0x43	; 67
    1e66:	80 83       	st	Z, r24
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	a2 83       	std	Z+2, r26	; 0x02
    1e6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	8e 01       	movw	r16, r28
    1e70:	05 5e       	subi	r16, 0xE5	; 229
    1e72:	1e 4f       	sbci	r17, 0xFE	; 254
    1e74:	fe 01       	movw	r30, r28
    1e76:	e1 5e       	subi	r30, 0xE1	; 225
    1e78:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a ef       	ldi	r20, 0xFA	; 250
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f8 01       	movw	r30, r16
    1e94:	80 83       	st	Z, r24
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	a2 83       	std	Z+2, r26	; 0x02
    1e9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e5 5e       	subi	r30, 0xE5	; 229
    1ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	44 f4       	brge	.+16     	; 0x1eca <main+0x1214>
		__ticks = 1;
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e7 5e       	subi	r30, 0xE7	; 231
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    1ec8:	64 c0       	rjmp	.+200    	; 0x1f92 <main+0x12dc>
	else if (__tmp > 65535)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e5 5e       	subi	r30, 0xE5	; 229
    1ece:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <main+0x1234>
    1ee8:	43 c0       	rjmp	.+134    	; 0x1f70 <main+0x12ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	fe 01       	movw	r30, r28
    1eec:	e1 5e       	subi	r30, 0xE1	; 225
    1eee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8e 01       	movw	r16, r28
    1f0a:	07 5e       	subi	r16, 0xE7	; 231
    1f0c:	1e 4f       	sbci	r17, 0xFE	; 254
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
    1f20:	1f c0       	rjmp	.+62     	; 0x1f60 <main+0x12aa>
    1f22:	fe 01       	movw	r30, r28
    1f24:	e9 5e       	subi	r30, 0xE9	; 233
    1f26:	fe 4f       	sbci	r31, 0xFE	; 254
    1f28:	88 ec       	ldi	r24, 0xC8	; 200
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	80 83       	st	Z, r24
    1f30:	fe 01       	movw	r30, r28
    1f32:	e9 5e       	subi	r30, 0xE9	; 233
    1f34:	fe 4f       	sbci	r31, 0xFE	; 254
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <main+0x1284>
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e9 5e       	subi	r30, 0xE9	; 233
    1f42:	fe 4f       	sbci	r31, 0xFE	; 254
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	de 01       	movw	r26, r28
    1f4a:	a7 5e       	subi	r26, 0xE7	; 231
    1f4c:	be 4f       	sbci	r27, 0xFE	; 254
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e7 5e       	subi	r30, 0xE7	; 231
    1f52:	fe 4f       	sbci	r31, 0xFE	; 254
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	11 96       	adiw	r26, 0x01	; 1
    1f5c:	9c 93       	st	X, r25
    1f5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	fe 01       	movw	r30, r28
    1f62:	e7 5e       	subi	r30, 0xE7	; 231
    1f64:	fe 4f       	sbci	r31, 0xFE	; 254
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	d1 f6       	brne	.-76     	; 0x1f22 <main+0x126c>
    1f6e:	28 c0       	rjmp	.+80     	; 0x1fc0 <main+0x130a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	8e 01       	movw	r16, r28
    1f72:	07 5e       	subi	r16, 0xE7	; 231
    1f74:	1e 4f       	sbci	r17, 0xFE	; 254
    1f76:	fe 01       	movw	r30, r28
    1f78:	e5 5e       	subi	r30, 0xE5	; 229
    1f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
    1f92:	de 01       	movw	r26, r28
    1f94:	ab 5e       	subi	r26, 0xEB	; 235
    1f96:	be 4f       	sbci	r27, 0xFE	; 254
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e7 5e       	subi	r30, 0xE7	; 231
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	11 96       	adiw	r26, 0x01	; 1
    1fa4:	9c 93       	st	X, r25
    1fa6:	8e 93       	st	-X, r24
    1fa8:	fe 01       	movw	r30, r28
    1faa:	eb 5e       	subi	r30, 0xEB	; 235
    1fac:	fe 4f       	sbci	r31, 0xFE	; 254
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <main+0x12fc>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	eb 5e       	subi	r30, 0xEB	; 235
    1fba:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e5 55       	subi	r30, 0x55	; 85
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8d 30       	cpi	r24, 0x0D	; 13
    1fca:	09 f0       	breq	.+2      	; 0x1fce <main+0x1318>
    1fcc:	3f cf       	rjmp	.-386    	; 0x1e4c <main+0x1196>

				UART_sendByte(CHECK); /* */
    1fce:	81 e1       	ldi	r24, 0x11	; 17
    1fd0:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ef 5e       	subi	r30, 0xEF	; 239
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe0:	b1 e4       	ldi	r27, 0x41	; 65
    1fe2:	80 83       	st	Z, r24
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	a2 83       	std	Z+2, r26	; 0x02
    1fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fea:	8e 01       	movw	r16, r28
    1fec:	03 5f       	subi	r16, 0xF3	; 243
    1fee:	1e 4f       	sbci	r17, 0xFE	; 254
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ef 5e       	subi	r30, 0xEF	; 239
    1ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	2b ea       	ldi	r18, 0xAB	; 171
    2000:	3a ea       	ldi	r19, 0xAA	; 170
    2002:	4a e2       	ldi	r20, 0x2A	; 42
    2004:	50 e4       	ldi	r21, 0x40	; 64
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	f8 01       	movw	r30, r16
    2010:	80 83       	st	Z, r24
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	a2 83       	std	Z+2, r26	; 0x02
    2016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2018:	fe 01       	movw	r30, r28
    201a:	e3 5f       	subi	r30, 0xF3	; 243
    201c:	fe 4f       	sbci	r31, 0xFE	; 254
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	34 f4       	brge	.+12     	; 0x2042 <main+0x138c>
		__ticks = 1;
    2036:	fe 01       	movw	r30, r28
    2038:	e4 5f       	subi	r30, 0xF4	; 244
    203a:	fe 4f       	sbci	r31, 0xFE	; 254
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	80 83       	st	Z, r24
    2040:	e0 c0       	rjmp	.+448    	; 0x2202 <main+0x154c>
	else if (__tmp > 255)
    2042:	fe 01       	movw	r30, r28
    2044:	e3 5f       	subi	r30, 0xF3	; 243
    2046:	fe 4f       	sbci	r31, 0xFE	; 254
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	53 e4       	ldi	r21, 0x43	; 67
    2058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	0c f0       	brlt	.+2      	; 0x2062 <main+0x13ac>
    2060:	c0 c0       	rjmp	.+384    	; 0x21e2 <main+0x152c>
	{
		_delay_ms(__us / 1000.0);
    2062:	fe 01       	movw	r30, r28
    2064:	ef 5e       	subi	r30, 0xEF	; 239
    2066:	fe 4f       	sbci	r31, 0xFE	; 254
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a e7       	ldi	r20, 0x7A	; 122
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	fe 01       	movw	r30, r28
    2082:	e8 5f       	subi	r30, 0xF8	; 248
    2084:	fe 4f       	sbci	r31, 0xFE	; 254
    2086:	80 83       	st	Z, r24
    2088:	91 83       	std	Z+1, r25	; 0x01
    208a:	a2 83       	std	Z+2, r26	; 0x02
    208c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	8e 01       	movw	r16, r28
    2090:	0c 5f       	subi	r16, 0xFC	; 252
    2092:	1e 4f       	sbci	r17, 0xFE	; 254
    2094:	fe 01       	movw	r30, r28
    2096:	e8 5f       	subi	r30, 0xF8	; 248
    2098:	fe 4f       	sbci	r31, 0xFE	; 254
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4a ef       	ldi	r20, 0xFA	; 250
    20a8:	54 e4       	ldi	r21, 0x44	; 68
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	f8 01       	movw	r30, r16
    20b4:	80 83       	st	Z, r24
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	a2 83       	std	Z+2, r26	; 0x02
    20ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20bc:	fe 01       	movw	r30, r28
    20be:	ec 5f       	subi	r30, 0xFC	; 252
    20c0:	fe 4f       	sbci	r31, 0xFE	; 254
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	93 81       	ldd	r25, Z+3	; 0x03
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	44 f4       	brge	.+16     	; 0x20ea <main+0x1434>
		__ticks = 1;
    20da:	fe 01       	movw	r30, r28
    20dc:	ee 5f       	subi	r30, 0xFE	; 254
    20de:	fe 4f       	sbci	r31, 0xFE	; 254
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
    20e8:	64 c0       	rjmp	.+200    	; 0x21b2 <main+0x14fc>
	else if (__tmp > 65535)
    20ea:	fe 01       	movw	r30, r28
    20ec:	ec 5f       	subi	r30, 0xFC	; 252
    20ee:	fe 4f       	sbci	r31, 0xFE	; 254
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2104:	18 16       	cp	r1, r24
    2106:	0c f0       	brlt	.+2      	; 0x210a <main+0x1454>
    2108:	43 c0       	rjmp	.+134    	; 0x2190 <main+0x14da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	fe 01       	movw	r30, r28
    210c:	e8 5f       	subi	r30, 0xF8	; 248
    210e:	fe 4f       	sbci	r31, 0xFE	; 254
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	8e 01       	movw	r16, r28
    212a:	0e 5f       	subi	r16, 0xFE	; 254
    212c:	1e 4f       	sbci	r17, 0xFE	; 254
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	f8 01       	movw	r30, r16
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
    2140:	1f c0       	rjmp	.+62     	; 0x2180 <main+0x14ca>
    2142:	fe 01       	movw	r30, r28
    2144:	e0 50       	subi	r30, 0x00	; 0
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	88 ec       	ldi	r24, 0xC8	; 200
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	fe 01       	movw	r30, r28
    2152:	e0 50       	subi	r30, 0x00	; 0
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <main+0x14a4>
    215e:	fe 01       	movw	r30, r28
    2160:	e0 50       	subi	r30, 0x00	; 0
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	de 01       	movw	r26, r28
    216a:	ae 5f       	subi	r26, 0xFE	; 254
    216c:	be 4f       	sbci	r27, 0xFE	; 254
    216e:	fe 01       	movw	r30, r28
    2170:	ee 5f       	subi	r30, 0xFE	; 254
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	9c 93       	st	X, r25
    217e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	fe 01       	movw	r30, r28
    2182:	ee 5f       	subi	r30, 0xFE	; 254
    2184:	fe 4f       	sbci	r31, 0xFE	; 254
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	d1 f6       	brne	.-76     	; 0x2142 <main+0x148c>
    218e:	4b c0       	rjmp	.+150    	; 0x2226 <main+0x1570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	8e 01       	movw	r16, r28
    2192:	0e 5f       	subi	r16, 0xFE	; 254
    2194:	1e 4f       	sbci	r17, 0xFE	; 254
    2196:	fe 01       	movw	r30, r28
    2198:	ec 5f       	subi	r30, 0xFC	; 252
    219a:	fe 4f       	sbci	r31, 0xFE	; 254
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	de 01       	movw	r26, r28
    21b4:	a2 50       	subi	r26, 0x02	; 2
    21b6:	bf 4f       	sbci	r27, 0xFF	; 255
    21b8:	fe 01       	movw	r30, r28
    21ba:	ee 5f       	subi	r30, 0xFE	; 254
    21bc:	fe 4f       	sbci	r31, 0xFE	; 254
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	11 96       	adiw	r26, 0x01	; 1
    21c4:	9c 93       	st	X, r25
    21c6:	8e 93       	st	-X, r24
    21c8:	fe 01       	movw	r30, r28
    21ca:	e2 50       	subi	r30, 0x02	; 2
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <main+0x151c>
    21d6:	fe 01       	movw	r30, r28
    21d8:	e2 50       	subi	r30, 0x02	; 2
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	80 83       	st	Z, r24
    21e0:	22 c0       	rjmp	.+68     	; 0x2226 <main+0x1570>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e2:	8e 01       	movw	r16, r28
    21e4:	04 5f       	subi	r16, 0xF4	; 244
    21e6:	1e 4f       	sbci	r17, 0xFE	; 254
    21e8:	fe 01       	movw	r30, r28
    21ea:	e3 5f       	subi	r30, 0xF3	; 243
    21ec:	fe 4f       	sbci	r31, 0xFE	; 254
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	80 83       	st	Z, r24
    2202:	de 01       	movw	r26, r28
    2204:	a3 50       	subi	r26, 0x03	; 3
    2206:	bf 4f       	sbci	r27, 0xFF	; 255
    2208:	fe 01       	movw	r30, r28
    220a:	e4 5f       	subi	r30, 0xF4	; 244
    220c:	fe 4f       	sbci	r31, 0xFE	; 254
    220e:	80 81       	ld	r24, Z
    2210:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2212:	fe 01       	movw	r30, r28
    2214:	e3 50       	subi	r30, 0x03	; 3
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	8a 95       	dec	r24
    221c:	f1 f7       	brne	.-4      	; 0x221a <main+0x1564>
    221e:	fe 01       	movw	r30, r28
    2220:	e3 50       	subi	r30, 0x03	; 3
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 83       	st	Z, r24

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    2226:	fe 01       	movw	r30, r28
    2228:	e6 55       	subi	r30, 0x56	; 86
    222a:	fe 4f       	sbci	r31, 0xFE	; 254
    222c:	10 82       	st	Z, r1
    222e:	41 c1       	rjmp	.+642    	; 0x24b2 <main+0x17fc>
				{
					UART_sendByte(pass1[i]);
    2230:	fe 01       	movw	r30, r28
    2232:	e6 55       	subi	r30, 0x56	; 86
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	80 81       	ld	r24, Z
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	ce 01       	movw	r24, r28
    223e:	84 55       	subi	r24, 0x54	; 84
    2240:	9e 4f       	sbci	r25, 0xFE	; 254
    2242:	fc 01       	movw	r30, r24
    2244:	e2 0f       	add	r30, r18
    2246:	f3 1f       	adc	r31, r19
    2248:	80 81       	ld	r24, Z
    224a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    224e:	fe 01       	movw	r30, r28
    2250:	e7 50       	subi	r30, 0x07	; 7
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 ea       	ldi	r26, 0xA0	; 160
    225a:	b1 e4       	ldi	r27, 0x41	; 65
    225c:	80 83       	st	Z, r24
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	a2 83       	std	Z+2, r26	; 0x02
    2262:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2264:	8e 01       	movw	r16, r28
    2266:	0b 50       	subi	r16, 0x0B	; 11
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	fe 01       	movw	r30, r28
    226c:	e7 50       	subi	r30, 0x07	; 7
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	2b ea       	ldi	r18, 0xAB	; 171
    227a:	3a ea       	ldi	r19, 0xAA	; 170
    227c:	4a e2       	ldi	r20, 0x2A	; 42
    227e:	50 e4       	ldi	r21, 0x40	; 64
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	f8 01       	movw	r30, r16
    228a:	80 83       	st	Z, r24
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	a2 83       	std	Z+2, r26	; 0x02
    2290:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2292:	fe 01       	movw	r30, r28
    2294:	eb 50       	subi	r30, 0x0B	; 11
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e8       	ldi	r20, 0x80	; 128
    22a6:	5f e3       	ldi	r21, 0x3F	; 63
    22a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	34 f4       	brge	.+12     	; 0x22bc <main+0x1606>
		__ticks = 1;
    22b0:	fe 01       	movw	r30, r28
    22b2:	ec 50       	subi	r30, 0x0C	; 12
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	80 83       	st	Z, r24
    22ba:	e0 c0       	rjmp	.+448    	; 0x247c <main+0x17c6>
	else if (__tmp > 255)
    22bc:	fe 01       	movw	r30, r28
    22be:	eb 50       	subi	r30, 0x0B	; 11
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	53 e4       	ldi	r21, 0x43	; 67
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	0c f0       	brlt	.+2      	; 0x22dc <main+0x1626>
    22da:	c0 c0       	rjmp	.+384    	; 0x245c <main+0x17a6>
	{
		_delay_ms(__us / 1000.0);
    22dc:	fe 01       	movw	r30, r28
    22de:	e7 50       	subi	r30, 0x07	; 7
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a e7       	ldi	r20, 0x7A	; 122
    22f0:	54 e4       	ldi	r21, 0x44	; 68
    22f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	fe 01       	movw	r30, r28
    22fc:	e0 51       	subi	r30, 0x10	; 16
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 83       	st	Z, r24
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	a2 83       	std	Z+2, r26	; 0x02
    2306:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	8e 01       	movw	r16, r28
    230a:	04 51       	subi	r16, 0x14	; 20
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	fe 01       	movw	r30, r28
    2310:	e0 51       	subi	r30, 0x10	; 16
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	4a ef       	ldi	r20, 0xFA	; 250
    2322:	54 e4       	ldi	r21, 0x44	; 68
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	80 83       	st	Z, r24
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	a2 83       	std	Z+2, r26	; 0x02
    2334:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2336:	fe 01       	movw	r30, r28
    2338:	e4 51       	subi	r30, 0x14	; 20
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	44 f4       	brge	.+16     	; 0x2364 <main+0x16ae>
		__ticks = 1;
    2354:	fe 01       	movw	r30, r28
    2356:	e6 51       	subi	r30, 0x16	; 22
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
    2362:	64 c0       	rjmp	.+200    	; 0x242c <main+0x1776>
	else if (__tmp > 65535)
    2364:	fe 01       	movw	r30, r28
    2366:	e4 51       	subi	r30, 0x14	; 20
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	0c f0       	brlt	.+2      	; 0x2384 <main+0x16ce>
    2382:	43 c0       	rjmp	.+134    	; 0x240a <main+0x1754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2384:	fe 01       	movw	r30, r28
    2386:	e0 51       	subi	r30, 0x10	; 16
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8e 01       	movw	r16, r28
    23a4:	06 51       	subi	r16, 0x16	; 22
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	f8 01       	movw	r30, r16
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
    23ba:	1f c0       	rjmp	.+62     	; 0x23fa <main+0x1744>
    23bc:	fe 01       	movw	r30, r28
    23be:	e8 51       	subi	r30, 0x18	; 24
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	88 ec       	ldi	r24, 0xC8	; 200
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ca:	fe 01       	movw	r30, r28
    23cc:	e8 51       	subi	r30, 0x18	; 24
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <main+0x171e>
    23d8:	fe 01       	movw	r30, r28
    23da:	e8 51       	subi	r30, 0x18	; 24
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e2:	de 01       	movw	r26, r28
    23e4:	a6 51       	subi	r26, 0x16	; 22
    23e6:	bf 4f       	sbci	r27, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e6 51       	subi	r30, 0x16	; 22
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	11 96       	adiw	r26, 0x01	; 1
    23f6:	9c 93       	st	X, r25
    23f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	fe 01       	movw	r30, r28
    23fc:	e6 51       	subi	r30, 0x16	; 22
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	d1 f6       	brne	.-76     	; 0x23bc <main+0x1706>
    2408:	4b c0       	rjmp	.+150    	; 0x24a0 <main+0x17ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	8e 01       	movw	r16, r28
    240c:	06 51       	subi	r16, 0x16	; 22
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	fe 01       	movw	r30, r28
    2412:	e4 51       	subi	r30, 0x14	; 20
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	f8 01       	movw	r30, r16
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	de 01       	movw	r26, r28
    242e:	aa 51       	subi	r26, 0x1A	; 26
    2430:	bf 4f       	sbci	r27, 0xFF	; 255
    2432:	fe 01       	movw	r30, r28
    2434:	e6 51       	subi	r30, 0x16	; 22
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	9c 93       	st	X, r25
    2440:	8e 93       	st	-X, r24
    2442:	fe 01       	movw	r30, r28
    2444:	ea 51       	subi	r30, 0x1A	; 26
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <main+0x1796>
    2450:	fe 01       	movw	r30, r28
    2452:	ea 51       	subi	r30, 0x1A	; 26
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	22 c0       	rjmp	.+68     	; 0x24a0 <main+0x17ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    245c:	8e 01       	movw	r16, r28
    245e:	0c 50       	subi	r16, 0x0C	; 12
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	eb 50       	subi	r30, 0x0B	; 11
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	f8 01       	movw	r30, r16
    247a:	80 83       	st	Z, r24
    247c:	de 01       	movw	r26, r28
    247e:	ab 51       	subi	r26, 0x1B	; 27
    2480:	bf 4f       	sbci	r27, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	ec 50       	subi	r30, 0x0C	; 12
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    248c:	fe 01       	movw	r30, r28
    248e:	eb 51       	subi	r30, 0x1B	; 27
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	8a 95       	dec	r24
    2496:	f1 f7       	brne	.-4      	; 0x2494 <main+0x17de>
    2498:	fe 01       	movw	r30, r28
    249a:	eb 51       	subi	r30, 0x1B	; 27
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 83       	st	Z, r24
				UART_sendByte(CHECK); /* */

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    24a0:	de 01       	movw	r26, r28
    24a2:	a6 55       	subi	r26, 0x56	; 86
    24a4:	be 4f       	sbci	r27, 0xFE	; 254
    24a6:	fe 01       	movw	r30, r28
    24a8:	e6 55       	subi	r30, 0x56	; 86
    24aa:	fe 4f       	sbci	r31, 0xFE	; 254
    24ac:	80 81       	ld	r24, Z
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	8c 93       	st	X, r24
    24b2:	fe 01       	movw	r30, r28
    24b4:	e6 55       	subi	r30, 0x56	; 86
    24b6:	fe 4f       	sbci	r31, 0xFE	; 254
    24b8:	80 81       	ld	r24, Z
    24ba:	85 30       	cpi	r24, 0x05	; 5
    24bc:	08 f4       	brcc	.+2      	; 0x24c0 <main+0x180a>
    24be:	b8 ce       	rjmp	.-656    	; 0x2230 <main+0x157a>
					UART_sendByte(pass1[i]);

					_delay_us(20);
				}

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    24c0:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    24c4:	fe 01       	movw	r30, r28
    24c6:	e7 55       	subi	r30, 0x57	; 87
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	80 83       	st	Z, r24

				while(1)
				{
					if (status == OK) /* Right Password */
    24cc:	fe 01       	movw	r30, r28
    24ce:	e7 55       	subi	r30, 0x57	; 87
    24d0:	fe 4f       	sbci	r31, 0xFE	; 254
    24d2:	80 81       	ld	r24, Z
    24d4:	80 31       	cpi	r24, 0x10	; 16
    24d6:	09 f0       	breq	.+2      	; 0x24da <main+0x1824>
    24d8:	4a c0       	rjmp	.+148    	; 0x256e <main+0x18b8>
					{
						/* Door Unlocking */
						UART_sendByte(UNLOCK);
    24da:	82 e1       	ldi	r24, 0x12	; 18
    24dc:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
						LCD_clearScreen();
    24e0:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    24e4:	2b eb       	ldi	r18, 0xBB	; 187
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	a9 01       	movw	r20, r18
    24ee:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    24f2:	ce 01       	movw	r24, r28
    24f4:	83 54       	subi	r24, 0x43	; 67
    24f6:	9e 4f       	sbci	r25, 0xFE	; 254
    24f8:	0e 94 b2 28 	call	0x5164	; 0x5164 <Timer1_init>
						while(g_count != 15); /* Waiting For 15 Seconds */
    24fc:	80 91 08 01 	lds	r24, 0x0108
    2500:	8f 30       	cpi	r24, 0x0F	; 15
    2502:	e1 f7       	brne	.-8      	; 0x24fc <main+0x1846>
						Timer1_deInit();
    2504:	0e 94 12 29 	call	0x5224	; 0x5224 <Timer1_deInit>
						g_count = 0 ;
    2508:	10 92 08 01 	sts	0x0108, r1

						/* Door Holding */
						LCD_clearScreen();
    250c:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Holding");
    2510:	2a ec       	ldi	r18, 0xCA	; 202
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	a9 01       	movw	r20, r18
    251a:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    251e:	ce 01       	movw	r24, r28
    2520:	83 54       	subi	r24, 0x43	; 67
    2522:	9e 4f       	sbci	r25, 0xFE	; 254
    2524:	0e 94 b2 28 	call	0x5164	; 0x5164 <Timer1_init>
						while(g_count != 3); /* Waiting For 3 Seconds */
    2528:	80 91 08 01 	lds	r24, 0x0108
    252c:	83 30       	cpi	r24, 0x03	; 3
    252e:	e1 f7       	brne	.-8      	; 0x2528 <main+0x1872>
						Timer1_deInit();
    2530:	0e 94 12 29 	call	0x5224	; 0x5224 <Timer1_deInit>
						g_count = 0 ;
    2534:	10 92 08 01 	sts	0x0108, r1

						/* Door locking */
						UART_sendByte(LOCK);
    2538:	83 e1       	ldi	r24, 0x13	; 19
    253a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
						LCD_clearScreen();
    253e:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Locking");
    2542:	27 ed       	ldi	r18, 0xD7	; 215
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	61 e0       	ldi	r22, 0x01	; 1
    254a:	a9 01       	movw	r20, r18
    254c:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    2550:	ce 01       	movw	r24, r28
    2552:	83 54       	subi	r24, 0x43	; 67
    2554:	9e 4f       	sbci	r25, 0xFE	; 254
    2556:	0e 94 b2 28 	call	0x5164	; 0x5164 <Timer1_init>
						while(g_count != 15); /* Waiting For 15 Seconds */
    255a:	80 91 08 01 	lds	r24, 0x0108
    255e:	8f 30       	cpi	r24, 0x0F	; 15
    2560:	e1 f7       	brne	.-8      	; 0x255a <main+0x18a4>
						Timer1_deInit();
    2562:	0e 94 12 29 	call	0x5224	; 0x5224 <Timer1_deInit>
						g_count = 0 ;
    2566:	10 92 08 01 	sts	0x0108, r1
    256a:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>

						break;
					}
					else if(status == ERROR) /* Wrong Password */
    256e:	fe 01       	movw	r30, r28
    2570:	e7 55       	subi	r30, 0x57	; 87
    2572:	fe 4f       	sbci	r31, 0xFE	; 254
    2574:	80 81       	ld	r24, Z
    2576:	88 23       	and	r24, r24
    2578:	09 f0       	breq	.+2      	; 0x257c <main+0x18c6>
    257a:	a8 cf       	rjmp	.-176    	; 0x24cc <main+0x1816>
					{
						count = 0 ;
    257c:	fe 01       	movw	r30, r28
    257e:	e9 55       	subi	r30, 0x59	; 89
    2580:	fe 4f       	sbci	r31, 0xFE	; 254
    2582:	10 82       	st	Z, r1

						do
						{
							count++;
    2584:	de 01       	movw	r26, r28
    2586:	a9 55       	subi	r26, 0x59	; 89
    2588:	be 4f       	sbci	r27, 0xFE	; 254
    258a:	fe 01       	movw	r30, r28
    258c:	e9 55       	subi	r30, 0x59	; 89
    258e:	fe 4f       	sbci	r31, 0xFE	; 254
    2590:	80 81       	ld	r24, Z
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	8c 93       	st	X, r24

							LCD_clearScreen();
    2596:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
							LCD_displayString("PLZ Enter Pass:");
    259a:	80 e6       	ldi	r24, 0x60	; 96
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
							LCD_moveCursor(1, 0);
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	0e 94 2a 28 	call	0x5054	; 0x5054 <LCD_moveCursor>

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    25aa:	fe 01       	movw	r30, r28
    25ac:	e6 55       	subi	r30, 0x56	; 86
    25ae:	fe 4f       	sbci	r31, 0xFE	; 254
    25b0:	10 82       	st	Z, r1
    25b2:	d6 c0       	rjmp	.+428    	; 0x2760 <main+0x1aaa>
							{
								key = KEYPAD_getPressedKey() ;
    25b4:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    25b8:	fe 01       	movw	r30, r28
    25ba:	e5 55       	subi	r30, 0x55	; 85
    25bc:	fe 4f       	sbci	r31, 0xFE	; 254
    25be:	80 83       	st	Z, r24
								pass1[i] = key ;
    25c0:	fe 01       	movw	r30, r28
    25c2:	e6 55       	subi	r30, 0x56	; 86
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	80 81       	ld	r24, Z
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	ce 01       	movw	r24, r28
    25ce:	84 55       	subi	r24, 0x54	; 84
    25d0:	9e 4f       	sbci	r25, 0xFE	; 254
    25d2:	dc 01       	movw	r26, r24
    25d4:	a2 0f       	add	r26, r18
    25d6:	b3 1f       	adc	r27, r19
    25d8:	fe 01       	movw	r30, r28
    25da:	e5 55       	subi	r30, 0x55	; 85
    25dc:	fe 4f       	sbci	r31, 0xFE	; 254
    25de:	80 81       	ld	r24, Z
    25e0:	8c 93       	st	X, r24
								LCD_displayCharacter('*');
    25e2:	8a e2       	ldi	r24, 0x2A	; 42
    25e4:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
    25e8:	fe 01       	movw	r30, r28
    25ea:	ef 51       	subi	r30, 0x1F	; 31
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	aa ef       	ldi	r26, 0xFA	; 250
    25f4:	b3 e4       	ldi	r27, 0x43	; 67
    25f6:	80 83       	st	Z, r24
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	a2 83       	std	Z+2, r26	; 0x02
    25fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	8e 01       	movw	r16, r28
    2600:	03 52       	subi	r16, 0x23	; 35
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	fe 01       	movw	r30, r28
    2606:	ef 51       	subi	r30, 0x1F	; 31
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a ef       	ldi	r20, 0xFA	; 250
    2618:	54 e4       	ldi	r21, 0x44	; 68
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	80 83       	st	Z, r24
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	a2 83       	std	Z+2, r26	; 0x02
    262a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    262c:	fe 01       	movw	r30, r28
    262e:	e3 52       	subi	r30, 0x23	; 35
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	44 f4       	brge	.+16     	; 0x265a <main+0x19a4>
		__ticks = 1;
    264a:	fe 01       	movw	r30, r28
    264c:	e5 52       	subi	r30, 0x25	; 37
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	64 c0       	rjmp	.+200    	; 0x2722 <main+0x1a6c>
	else if (__tmp > 65535)
    265a:	fe 01       	movw	r30, r28
    265c:	e3 52       	subi	r30, 0x23	; 35
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	0c f0       	brlt	.+2      	; 0x267a <main+0x19c4>
    2678:	43 c0       	rjmp	.+134    	; 0x2700 <main+0x1a4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	fe 01       	movw	r30, r28
    267c:	ef 51       	subi	r30, 0x1F	; 31
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	60 81       	ld	r22, Z
    2682:	71 81       	ldd	r23, Z+1	; 0x01
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8e 01       	movw	r16, r28
    269a:	05 52       	subi	r16, 0x25	; 37
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	f8 01       	movw	r30, r16
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
    26b0:	1f c0       	rjmp	.+62     	; 0x26f0 <main+0x1a3a>
    26b2:	fe 01       	movw	r30, r28
    26b4:	e7 52       	subi	r30, 0x27	; 39
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	88 ec       	ldi	r24, 0xC8	; 200
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26c0:	fe 01       	movw	r30, r28
    26c2:	e7 52       	subi	r30, 0x27	; 39
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <main+0x1a14>
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 52       	subi	r30, 0x27	; 39
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	de 01       	movw	r26, r28
    26da:	a5 52       	subi	r26, 0x25	; 37
    26dc:	bf 4f       	sbci	r27, 0xFF	; 255
    26de:	fe 01       	movw	r30, r28
    26e0:	e5 52       	subi	r30, 0x25	; 37
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	11 96       	adiw	r26, 0x01	; 1
    26ec:	9c 93       	st	X, r25
    26ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	fe 01       	movw	r30, r28
    26f2:	e5 52       	subi	r30, 0x25	; 37
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	d1 f6       	brne	.-76     	; 0x26b2 <main+0x19fc>
    26fe:	27 c0       	rjmp	.+78     	; 0x274e <main+0x1a98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	8e 01       	movw	r16, r28
    2702:	05 52       	subi	r16, 0x25	; 37
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	fe 01       	movw	r30, r28
    2708:	e3 52       	subi	r30, 0x23	; 35
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	93 81       	ldd	r25, Z+3	; 0x03
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	de 01       	movw	r26, r28
    2724:	a9 52       	subi	r26, 0x29	; 41
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	e5 52       	subi	r30, 0x25	; 37
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	8d 93       	st	X+, r24
    2734:	9c 93       	st	X, r25
    2736:	fe 01       	movw	r30, r28
    2738:	e9 52       	subi	r30, 0x29	; 41
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <main+0x1a8a>
    2744:	fe 01       	movw	r30, r28
    2746:	e9 52       	subi	r30, 0x29	; 41
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
							LCD_clearScreen();
							LCD_displayString("PLZ Enter Pass:");
							LCD_moveCursor(1, 0);

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    274e:	de 01       	movw	r26, r28
    2750:	a6 55       	subi	r26, 0x56	; 86
    2752:	be 4f       	sbci	r27, 0xFE	; 254
    2754:	fe 01       	movw	r30, r28
    2756:	e6 55       	subi	r30, 0x56	; 86
    2758:	fe 4f       	sbci	r31, 0xFE	; 254
    275a:	80 81       	ld	r24, Z
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	8c 93       	st	X, r24
    2760:	fe 01       	movw	r30, r28
    2762:	e6 55       	subi	r30, 0x56	; 86
    2764:	fe 4f       	sbci	r31, 0xFE	; 254
    2766:	80 81       	ld	r24, Z
    2768:	85 30       	cpi	r24, 0x05	; 5
    276a:	08 f4       	brcc	.+2      	; 0x276e <main+0x1ab8>
    276c:	23 cf       	rjmp	.-442    	; 0x25b4 <main+0x18fe>
							}

							/* Waiting User to press The Enter Button */
							do
							{
								key = KEYPAD_getPressedKey() ;
    276e:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    2772:	fe 01       	movw	r30, r28
    2774:	e5 55       	subi	r30, 0x55	; 85
    2776:	fe 4f       	sbci	r31, 0xFE	; 254
    2778:	80 83       	st	Z, r24
    277a:	fe 01       	movw	r30, r28
    277c:	ed 52       	subi	r30, 0x2D	; 45
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	aa ef       	ldi	r26, 0xFA	; 250
    2786:	b3 e4       	ldi	r27, 0x43	; 67
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	8e 01       	movw	r16, r28
    2792:	01 53       	subi	r16, 0x31	; 49
    2794:	1f 4f       	sbci	r17, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	ed 52       	subi	r30, 0x2D	; 45
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a ef       	ldi	r20, 0xFA	; 250
    27aa:	54 e4       	ldi	r21, 0x44	; 68
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	f8 01       	movw	r30, r16
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27be:	fe 01       	movw	r30, r28
    27c0:	e1 53       	subi	r30, 0x31	; 49
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e8       	ldi	r20, 0x80	; 128
    27d2:	5f e3       	ldi	r21, 0x3F	; 63
    27d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d8:	88 23       	and	r24, r24
    27da:	44 f4       	brge	.+16     	; 0x27ec <main+0x1b36>
		__ticks = 1;
    27dc:	fe 01       	movw	r30, r28
    27de:	e3 53       	subi	r30, 0x33	; 51
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	64 c0       	rjmp	.+200    	; 0x28b4 <main+0x1bfe>
	else if (__tmp > 65535)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e1 53       	subi	r30, 0x31	; 49
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	3f ef       	ldi	r19, 0xFF	; 255
    27fe:	4f e7       	ldi	r20, 0x7F	; 127
    2800:	57 e4       	ldi	r21, 0x47	; 71
    2802:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2806:	18 16       	cp	r1, r24
    2808:	0c f0       	brlt	.+2      	; 0x280c <main+0x1b56>
    280a:	43 c0       	rjmp	.+134    	; 0x2892 <main+0x1bdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	fe 01       	movw	r30, r28
    280e:	ed 52       	subi	r30, 0x2D	; 45
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8e 01       	movw	r16, r28
    282c:	03 53       	subi	r16, 0x33	; 51
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
    2842:	1f c0       	rjmp	.+62     	; 0x2882 <main+0x1bcc>
    2844:	fe 01       	movw	r30, r28
    2846:	e5 53       	subi	r30, 0x35	; 53
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	88 ec       	ldi	r24, 0xC8	; 200
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	fe 01       	movw	r30, r28
    2854:	e5 53       	subi	r30, 0x35	; 53
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <main+0x1ba6>
    2860:	fe 01       	movw	r30, r28
    2862:	e5 53       	subi	r30, 0x35	; 53
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	de 01       	movw	r26, r28
    286c:	a3 53       	subi	r26, 0x33	; 51
    286e:	bf 4f       	sbci	r27, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	e3 53       	subi	r30, 0x33	; 51
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	11 96       	adiw	r26, 0x01	; 1
    287e:	9c 93       	st	X, r25
    2880:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2882:	fe 01       	movw	r30, r28
    2884:	e3 53       	subi	r30, 0x33	; 51
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	91 81       	ldd	r25, Z+1	; 0x01
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	d1 f6       	brne	.-76     	; 0x2844 <main+0x1b8e>
    2890:	28 c0       	rjmp	.+80     	; 0x28e2 <main+0x1c2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2892:	8e 01       	movw	r16, r28
    2894:	03 53       	subi	r16, 0x33	; 51
    2896:	1f 4f       	sbci	r17, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	e1 53       	subi	r30, 0x31	; 49
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	f8 01       	movw	r30, r16
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	de 01       	movw	r26, r28
    28b6:	a7 53       	subi	r26, 0x37	; 55
    28b8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	e3 53       	subi	r30, 0x33	; 51
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	91 81       	ldd	r25, Z+1	; 0x01
    28c4:	11 96       	adiw	r26, 0x01	; 1
    28c6:	9c 93       	st	X, r25
    28c8:	8e 93       	st	-X, r24
    28ca:	fe 01       	movw	r30, r28
    28cc:	e7 53       	subi	r30, 0x37	; 55
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <main+0x1c1e>
    28d8:	fe 01       	movw	r30, r28
    28da:	e7 53       	subi	r30, 0x37	; 55
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
								_delay_ms(500);
							} while(key != 13);
    28e2:	fe 01       	movw	r30, r28
    28e4:	e5 55       	subi	r30, 0x55	; 85
    28e6:	fe 4f       	sbci	r31, 0xFE	; 254
    28e8:	80 81       	ld	r24, Z
    28ea:	8d 30       	cpi	r24, 0x0D	; 13
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <main+0x1c3a>
    28ee:	3f cf       	rjmp	.-386    	; 0x276e <main+0x1ab8>

							UART_sendByte(CHECK); /* */
    28f0:	81 e1       	ldi	r24, 0x11	; 17
    28f2:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    28f6:	fe 01       	movw	r30, r28
    28f8:	eb 53       	subi	r30, 0x3B	; 59
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 ea       	ldi	r26, 0xA0	; 160
    2902:	b1 e4       	ldi	r27, 0x41	; 65
    2904:	80 83       	st	Z, r24
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	a2 83       	std	Z+2, r26	; 0x02
    290a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    290c:	8e 01       	movw	r16, r28
    290e:	0f 53       	subi	r16, 0x3F	; 63
    2910:	1f 4f       	sbci	r17, 0xFF	; 255
    2912:	fe 01       	movw	r30, r28
    2914:	eb 53       	subi	r30, 0x3B	; 59
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	2b ea       	ldi	r18, 0xAB	; 171
    2922:	3a ea       	ldi	r19, 0xAA	; 170
    2924:	4a e2       	ldi	r20, 0x2A	; 42
    2926:	50 e4       	ldi	r21, 0x40	; 64
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	f8 01       	movw	r30, r16
    2932:	80 83       	st	Z, r24
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	a2 83       	std	Z+2, r26	; 0x02
    2938:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    293a:	fe 01       	movw	r30, r28
    293c:	ef 53       	subi	r30, 0x3F	; 63
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	34 f4       	brge	.+12     	; 0x2964 <main+0x1cae>
		__ticks = 1;
    2958:	fe 01       	movw	r30, r28
    295a:	e0 54       	subi	r30, 0x40	; 64
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	80 83       	st	Z, r24
    2962:	e0 c0       	rjmp	.+448    	; 0x2b24 <main+0x1e6e>
	else if (__tmp > 255)
    2964:	fe 01       	movw	r30, r28
    2966:	ef 53       	subi	r30, 0x3F	; 63
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	53 e4       	ldi	r21, 0x43	; 67
    297a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <main+0x1cce>
    2982:	c0 c0       	rjmp	.+384    	; 0x2b04 <main+0x1e4e>
	{
		_delay_ms(__us / 1000.0);
    2984:	fe 01       	movw	r30, r28
    2986:	eb 53       	subi	r30, 0x3B	; 59
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	4a e7       	ldi	r20, 0x7A	; 122
    2998:	54 e4       	ldi	r21, 0x44	; 68
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	fe 01       	movw	r30, r28
    29a4:	e4 54       	subi	r30, 0x44	; 68
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 83       	st	Z, r24
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	a2 83       	std	Z+2, r26	; 0x02
    29ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b0:	8e 01       	movw	r16, r28
    29b2:	08 54       	subi	r16, 0x48	; 72
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	fe 01       	movw	r30, r28
    29b8:	e4 54       	subi	r30, 0x44	; 68
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a ef       	ldi	r20, 0xFA	; 250
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	f8 01       	movw	r30, r16
    29d6:	80 83       	st	Z, r24
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	a2 83       	std	Z+2, r26	; 0x02
    29dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29de:	fe 01       	movw	r30, r28
    29e0:	e8 54       	subi	r30, 0x48	; 72
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	44 f4       	brge	.+16     	; 0x2a0c <main+0x1d56>
		__ticks = 1;
    29fc:	fe 01       	movw	r30, r28
    29fe:	ea 54       	subi	r30, 0x4A	; 74
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
    2a0a:	64 c0       	rjmp	.+200    	; 0x2ad4 <main+0x1e1e>
	else if (__tmp > 65535)
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e8 54       	subi	r30, 0x48	; 72
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	60 81       	ld	r22, Z
    2a14:	71 81       	ldd	r23, Z+1	; 0x01
    2a16:	82 81       	ldd	r24, Z+2	; 0x02
    2a18:	93 81       	ldd	r25, Z+3	; 0x03
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	3f ef       	ldi	r19, 0xFF	; 255
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	57 e4       	ldi	r21, 0x47	; 71
    2a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	0c f0       	brlt	.+2      	; 0x2a2c <main+0x1d76>
    2a2a:	43 c0       	rjmp	.+134    	; 0x2ab2 <main+0x1dfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e4 54       	subi	r30, 0x44	; 68
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e2       	ldi	r20, 0x20	; 32
    2a40:	51 e4       	ldi	r21, 0x41	; 65
    2a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	0a 54       	subi	r16, 0x4A	; 74
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	bc 01       	movw	r22, r24
    2a52:	cd 01       	movw	r24, r26
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	1f c0       	rjmp	.+62     	; 0x2aa2 <main+0x1dec>
    2a64:	fe 01       	movw	r30, r28
    2a66:	ec 54       	subi	r30, 0x4C	; 76
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	88 ec       	ldi	r24, 0xC8	; 200
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
    2a72:	fe 01       	movw	r30, r28
    2a74:	ec 54       	subi	r30, 0x4C	; 76
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	91 81       	ldd	r25, Z+1	; 0x01
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <main+0x1dc6>
    2a80:	fe 01       	movw	r30, r28
    2a82:	ec 54       	subi	r30, 0x4C	; 76
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8a:	de 01       	movw	r26, r28
    2a8c:	aa 54       	subi	r26, 0x4A	; 74
    2a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	ea 54       	subi	r30, 0x4A	; 74
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	11 96       	adiw	r26, 0x01	; 1
    2a9e:	9c 93       	st	X, r25
    2aa0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ea 54       	subi	r30, 0x4A	; 74
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	80 81       	ld	r24, Z
    2aaa:	91 81       	ldd	r25, Z+1	; 0x01
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	d1 f6       	brne	.-76     	; 0x2a64 <main+0x1dae>
    2ab0:	4b c0       	rjmp	.+150    	; 0x2b48 <main+0x1e92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab2:	8e 01       	movw	r16, r28
    2ab4:	0a 54       	subi	r16, 0x4A	; 74
    2ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e8 54       	subi	r30, 0x48	; 72
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	f8 01       	movw	r30, r16
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
    2ad4:	de 01       	movw	r26, r28
    2ad6:	ae 54       	subi	r26, 0x4E	; 78
    2ad8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ada:	fe 01       	movw	r30, r28
    2adc:	ea 54       	subi	r30, 0x4A	; 74
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	11 96       	adiw	r26, 0x01	; 1
    2ae6:	9c 93       	st	X, r25
    2ae8:	8e 93       	st	-X, r24
    2aea:	fe 01       	movw	r30, r28
    2aec:	ee 54       	subi	r30, 0x4E	; 78
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <main+0x1e3e>
    2af8:	fe 01       	movw	r30, r28
    2afa:	ee 54       	subi	r30, 0x4E	; 78
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
    2b02:	22 c0       	rjmp	.+68     	; 0x2b48 <main+0x1e92>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b04:	8e 01       	movw	r16, r28
    2b06:	00 54       	subi	r16, 0x40	; 64
    2b08:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	ef 53       	subi	r30, 0x3F	; 63
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	f8 01       	movw	r30, r16
    2b22:	80 83       	st	Z, r24
    2b24:	de 01       	movw	r26, r28
    2b26:	af 54       	subi	r26, 0x4F	; 79
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e0 54       	subi	r30, 0x40	; 64
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b34:	fe 01       	movw	r30, r28
    2b36:	ef 54       	subi	r30, 0x4F	; 79
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8a 95       	dec	r24
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <main+0x1e86>
    2b40:	fe 01       	movw	r30, r28
    2b42:	ef 54       	subi	r30, 0x4F	; 79
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 83       	st	Z, r24

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e6 55       	subi	r30, 0x56	; 86
    2b4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4e:	10 82       	st	Z, r1
    2b50:	41 c1       	rjmp	.+642    	; 0x2dd4 <main+0x211e>
							{
								UART_sendByte(pass1[i]);
    2b52:	fe 01       	movw	r30, r28
    2b54:	e6 55       	subi	r30, 0x56	; 86
    2b56:	fe 4f       	sbci	r31, 0xFE	; 254
    2b58:	80 81       	ld	r24, Z
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	ce 01       	movw	r24, r28
    2b60:	84 55       	subi	r24, 0x54	; 84
    2b62:	9e 4f       	sbci	r25, 0xFE	; 254
    2b64:	fc 01       	movw	r30, r24
    2b66:	e2 0f       	add	r30, r18
    2b68:	f3 1f       	adc	r31, r19
    2b6a:	80 81       	ld	r24, Z
    2b6c:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    2b70:	fe 01       	movw	r30, r28
    2b72:	e3 55       	subi	r30, 0x53	; 83
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b7c:	b1 e4       	ldi	r27, 0x41	; 65
    2b7e:	80 83       	st	Z, r24
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	a2 83       	std	Z+2, r26	; 0x02
    2b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b86:	8e 01       	movw	r16, r28
    2b88:	07 55       	subi	r16, 0x57	; 87
    2b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e3 55       	subi	r30, 0x53	; 83
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	60 81       	ld	r22, Z
    2b94:	71 81       	ldd	r23, Z+1	; 0x01
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	93 81       	ldd	r25, Z+3	; 0x03
    2b9a:	2b ea       	ldi	r18, 0xAB	; 171
    2b9c:	3a ea       	ldi	r19, 0xAA	; 170
    2b9e:	4a e2       	ldi	r20, 0x2A	; 42
    2ba0:	50 e4       	ldi	r21, 0x40	; 64
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	f8 01       	movw	r30, r16
    2bac:	80 83       	st	Z, r24
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	a2 83       	std	Z+2, r26	; 0x02
    2bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e7 55       	subi	r30, 0x57	; 87
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	60 81       	ld	r22, Z
    2bbc:	71 81       	ldd	r23, Z+1	; 0x01
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	93 81       	ldd	r25, Z+3	; 0x03
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	34 f4       	brge	.+12     	; 0x2bde <main+0x1f28>
		__ticks = 1;
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e8 55       	subi	r30, 0x58	; 88
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 83       	st	Z, r24
    2bdc:	e0 c0       	rjmp	.+448    	; 0x2d9e <main+0x20e8>
	else if (__tmp > 255)
    2bde:	fe 01       	movw	r30, r28
    2be0:	e7 55       	subi	r30, 0x57	; 87
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	53 e4       	ldi	r21, 0x43	; 67
    2bf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	0c f0       	brlt	.+2      	; 0x2bfe <main+0x1f48>
    2bfc:	c0 c0       	rjmp	.+384    	; 0x2d7e <main+0x20c8>
	{
		_delay_ms(__us / 1000.0);
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e3 55       	subi	r30, 0x53	; 83
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	4a e7       	ldi	r20, 0x7A	; 122
    2c12:	54 e4       	ldi	r21, 0x44	; 68
    2c14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ec 55       	subi	r30, 0x5C	; 92
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	a2 83       	std	Z+2, r26	; 0x02
    2c28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	8e 01       	movw	r16, r28
    2c2c:	00 56       	subi	r16, 0x60	; 96
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	fe 01       	movw	r30, r28
    2c32:	ec 55       	subi	r30, 0x5C	; 92
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	60 81       	ld	r22, Z
    2c38:	71 81       	ldd	r23, Z+1	; 0x01
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	93 81       	ldd	r25, Z+3	; 0x03
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a ef       	ldi	r20, 0xFA	; 250
    2c44:	54 e4       	ldi	r21, 0x44	; 68
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	f8 01       	movw	r30, r16
    2c50:	80 83       	st	Z, r24
    2c52:	91 83       	std	Z+1, r25	; 0x01
    2c54:	a2 83       	std	Z+2, r26	; 0x02
    2c56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e0 56       	subi	r30, 0x60	; 96
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	44 f4       	brge	.+16     	; 0x2c86 <main+0x1fd0>
		__ticks = 1;
    2c76:	fe 01       	movw	r30, r28
    2c78:	e2 56       	subi	r30, 0x62	; 98
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    2c84:	64 c0       	rjmp	.+200    	; 0x2d4e <main+0x2098>
	else if (__tmp > 65535)
    2c86:	fe 01       	movw	r30, r28
    2c88:	e0 56       	subi	r30, 0x60	; 96
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	60 81       	ld	r22, Z
    2c8e:	71 81       	ldd	r23, Z+1	; 0x01
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	0c f0       	brlt	.+2      	; 0x2ca6 <main+0x1ff0>
    2ca4:	43 c0       	rjmp	.+134    	; 0x2d2c <main+0x2076>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ec 55       	subi	r30, 0x5C	; 92
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e2       	ldi	r20, 0x20	; 32
    2cba:	51 e4       	ldi	r21, 0x41	; 65
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8e 01       	movw	r16, r28
    2cc6:	02 56       	subi	r16, 0x62	; 98
    2cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	f8 01       	movw	r30, r16
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	80 83       	st	Z, r24
    2cdc:	1f c0       	rjmp	.+62     	; 0x2d1c <main+0x2066>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e4 56       	subi	r30, 0x64	; 100
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	88 ec       	ldi	r24, 0xC8	; 200
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cec:	fe 01       	movw	r30, r28
    2cee:	e4 56       	subi	r30, 0x64	; 100
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0x2040>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e4 56       	subi	r30, 0x64	; 100
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d04:	de 01       	movw	r26, r28
    2d06:	a2 56       	subi	r26, 0x62	; 98
    2d08:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e2 56       	subi	r30, 0x62	; 98
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	9c 93       	st	X, r25
    2d1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e2 56       	subi	r30, 0x62	; 98
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	d1 f6       	brne	.-76     	; 0x2cde <main+0x2028>
    2d2a:	4b c0       	rjmp	.+150    	; 0x2dc2 <main+0x210c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	8e 01       	movw	r16, r28
    2d2e:	02 56       	subi	r16, 0x62	; 98
    2d30:	1f 4f       	sbci	r17, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	e0 56       	subi	r30, 0x60	; 96
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	f8 01       	movw	r30, r16
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	de 01       	movw	r26, r28
    2d50:	a6 56       	subi	r26, 0x66	; 102
    2d52:	bf 4f       	sbci	r27, 0xFF	; 255
    2d54:	fe 01       	movw	r30, r28
    2d56:	e2 56       	subi	r30, 0x62	; 98
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	9c 93       	st	X, r25
    2d62:	8e 93       	st	-X, r24
    2d64:	fe 01       	movw	r30, r28
    2d66:	e6 56       	subi	r30, 0x66	; 102
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <main+0x20b8>
    2d72:	fe 01       	movw	r30, r28
    2d74:	e6 56       	subi	r30, 0x66	; 102
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	22 c0       	rjmp	.+68     	; 0x2dc2 <main+0x210c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d7e:	8e 01       	movw	r16, r28
    2d80:	08 55       	subi	r16, 0x58	; 88
    2d82:	1f 4f       	sbci	r17, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	e7 55       	subi	r30, 0x57	; 87
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	60 81       	ld	r22, Z
    2d8c:	71 81       	ldd	r23, Z+1	; 0x01
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	80 83       	st	Z, r24
    2d9e:	de 01       	movw	r26, r28
    2da0:	a7 56       	subi	r26, 0x67	; 103
    2da2:	bf 4f       	sbci	r27, 0xFF	; 255
    2da4:	fe 01       	movw	r30, r28
    2da6:	e8 55       	subi	r30, 0x58	; 88
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	80 81       	ld	r24, Z
    2dac:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dae:	fe 01       	movw	r30, r28
    2db0:	e7 56       	subi	r30, 0x67	; 103
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	8a 95       	dec	r24
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <main+0x2100>
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e7 56       	subi	r30, 0x67	; 103
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 83       	st	Z, r24
							UART_sendByte(CHECK); /* */

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    2dc2:	de 01       	movw	r26, r28
    2dc4:	a6 55       	subi	r26, 0x56	; 86
    2dc6:	be 4f       	sbci	r27, 0xFE	; 254
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e6 55       	subi	r30, 0x56	; 86
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	80 81       	ld	r24, Z
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	8c 93       	st	X, r24
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e6 55       	subi	r30, 0x56	; 86
    2dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dda:	80 81       	ld	r24, Z
    2ddc:	85 30       	cpi	r24, 0x05	; 5
    2dde:	08 f4       	brcc	.+2      	; 0x2de2 <main+0x212c>
    2de0:	b8 ce       	rjmp	.-656    	; 0x2b52 <main+0x1e9c>
								UART_sendByte(pass1[i]);

								_delay_us(20);
							}

							status = UART_recieveByte();
    2de2:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    2de6:	fe 01       	movw	r30, r28
    2de8:	e7 55       	subi	r30, 0x57	; 87
    2dea:	fe 4f       	sbci	r31, 0xFE	; 254
    2dec:	80 83       	st	Z, r24

						}while((count != 2) && (status == ERROR));
    2dee:	fe 01       	movw	r30, r28
    2df0:	e9 55       	subi	r30, 0x59	; 89
    2df2:	fe 4f       	sbci	r31, 0xFE	; 254
    2df4:	80 81       	ld	r24, Z
    2df6:	82 30       	cpi	r24, 0x02	; 2
    2df8:	39 f0       	breq	.+14     	; 0x2e08 <main+0x2152>
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e7 55       	subi	r30, 0x57	; 87
    2dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2e00:	80 81       	ld	r24, Z
    2e02:	88 23       	and	r24, r24
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <main+0x2152>
    2e06:	be cb       	rjmp	.-2180   	; 0x2584 <main+0x18ce>

						if((count == 2) && (status == ERROR))
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e9 55       	subi	r30, 0x59	; 89
    2e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0e:	80 81       	ld	r24, Z
    2e10:	82 30       	cpi	r24, 0x02	; 2
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <main+0x2160>
    2e14:	5b cb       	rjmp	.-2378   	; 0x24cc <main+0x1816>
    2e16:	fe 01       	movw	r30, r28
    2e18:	e7 55       	subi	r30, 0x57	; 87
    2e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 23       	and	r24, r24
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <main+0x216e>
    2e22:	54 cb       	rjmp	.-2392   	; 0x24cc <main+0x1816>
						{
							UART_sendByte(BUZZER);
    2e24:	84 e1       	ldi	r24, 0x14	; 20
    2e26:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
							LCD_clearScreen();
    2e2a:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
							LCD_displayString("System Locked");
    2e2e:	84 ee       	ldi	r24, 0xE4	; 228
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
							Timer1_init(&t_configure); /* Start Timer */
    2e36:	ce 01       	movw	r24, r28
    2e38:	83 54       	subi	r24, 0x43	; 67
    2e3a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e3c:	0e 94 b2 28 	call	0x5164	; 0x5164 <Timer1_init>
							while(g_count != 60); /* Waiting For 60 Seconds */
    2e40:	80 91 08 01 	lds	r24, 0x0108
    2e44:	8c 33       	cpi	r24, 0x3C	; 60
    2e46:	e1 f7       	brne	.-8      	; 0x2e40 <main+0x218a>
							Timer1_deInit();
    2e48:	0e 94 12 29 	call	0x5224	; 0x5224 <Timer1_deInit>
							g_count = 0 ;
    2e4c:	10 92 08 01 	sts	0x0108, r1
    2e50:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>
							break;
						}
					}
				}
			}
			else if(key == '-') /* User Choose Change The Password */
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 55       	subi	r30, 0x55	; 85
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8d 32       	cpi	r24, 0x2D	; 45
    2e5e:	11 f0       	breq	.+4      	; 0x2e64 <main+0x21ae>
    2e60:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>
			{
				LCD_clearScreen();
    2e64:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    2e68:	8b ea       	ldi	r24, 0xAB	; 171
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
				LCD_moveCursor(1, 0);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	0e 94 2a 28 	call	0x5054	; 0x5054 <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e6 55       	subi	r30, 0x56	; 86
    2e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7e:	10 82       	st	Z, r1
    2e80:	d6 c0       	rjmp	.+428    	; 0x302e <main+0x2378>
				{
					key = KEYPAD_getPressedKey() ;
    2e82:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    2e86:	fe 01       	movw	r30, r28
    2e88:	e5 55       	subi	r30, 0x55	; 85
    2e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8c:	80 83       	st	Z, r24
					pass1[i] = key ;
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e6 55       	subi	r30, 0x56	; 86
    2e92:	fe 4f       	sbci	r31, 0xFE	; 254
    2e94:	80 81       	ld	r24, Z
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	ce 01       	movw	r24, r28
    2e9c:	84 55       	subi	r24, 0x54	; 84
    2e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	a2 0f       	add	r26, r18
    2ea4:	b3 1f       	adc	r27, r19
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e5 55       	subi	r30, 0x55	; 85
    2eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    2eac:	80 81       	ld	r24, Z
    2eae:	8c 93       	st	X, r24
					LCD_displayCharacter('*');
    2eb0:	8a e2       	ldi	r24, 0x2A	; 42
    2eb2:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	eb 56       	subi	r30, 0x6B	; 107
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	aa ef       	ldi	r26, 0xFA	; 250
    2ec2:	b3 e4       	ldi	r27, 0x43	; 67
    2ec4:	80 83       	st	Z, r24
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	a2 83       	std	Z+2, r26	; 0x02
    2eca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ecc:	8e 01       	movw	r16, r28
    2ece:	0f 56       	subi	r16, 0x6F	; 111
    2ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	eb 56       	subi	r30, 0x6B	; 107
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	4a ef       	ldi	r20, 0xFA	; 250
    2ee6:	54 e4       	ldi	r21, 0x44	; 68
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	f8 01       	movw	r30, r16
    2ef2:	80 83       	st	Z, r24
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	a2 83       	std	Z+2, r26	; 0x02
    2ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2efa:	fe 01       	movw	r30, r28
    2efc:	ef 56       	subi	r30, 0x6F	; 111
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	60 81       	ld	r22, Z
    2f02:	71 81       	ldd	r23, Z+1	; 0x01
    2f04:	82 81       	ldd	r24, Z+2	; 0x02
    2f06:	93 81       	ldd	r25, Z+3	; 0x03
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	44 f4       	brge	.+16     	; 0x2f28 <main+0x2272>
		__ticks = 1;
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e1 57       	subi	r30, 0x71	; 113
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	80 83       	st	Z, r24
    2f26:	64 c0       	rjmp	.+200    	; 0x2ff0 <main+0x233a>
	else if (__tmp > 65535)
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ef 56       	subi	r30, 0x6F	; 111
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	0c f0       	brlt	.+2      	; 0x2f48 <main+0x2292>
    2f46:	43 c0       	rjmp	.+134    	; 0x2fce <main+0x2318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f48:	fe 01       	movw	r30, r28
    2f4a:	eb 56       	subi	r30, 0x6B	; 107
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	8e 01       	movw	r16, r28
    2f68:	01 57       	subi	r16, 0x71	; 113
    2f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	f8 01       	movw	r30, r16
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	1f c0       	rjmp	.+62     	; 0x2fbe <main+0x2308>
    2f80:	fe 01       	movw	r30, r28
    2f82:	e3 57       	subi	r30, 0x73	; 115
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	88 ec       	ldi	r24, 0xC8	; 200
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e3 57       	subi	r30, 0x73	; 115
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <main+0x22e2>
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e3 57       	subi	r30, 0x73	; 115
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa6:	de 01       	movw	r26, r28
    2fa8:	a1 57       	subi	r26, 0x71	; 113
    2faa:	bf 4f       	sbci	r27, 0xFF	; 255
    2fac:	fe 01       	movw	r30, r28
    2fae:	e1 57       	subi	r30, 0x71	; 113
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 81       	ld	r24, Z
    2fb4:	91 81       	ldd	r25, Z+1	; 0x01
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	11 96       	adiw	r26, 0x01	; 1
    2fba:	9c 93       	st	X, r25
    2fbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e1 57       	subi	r30, 0x71	; 113
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	80 81       	ld	r24, Z
    2fc6:	91 81       	ldd	r25, Z+1	; 0x01
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	d1 f6       	brne	.-76     	; 0x2f80 <main+0x22ca>
    2fcc:	27 c0       	rjmp	.+78     	; 0x301c <main+0x2366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fce:	8e 01       	movw	r16, r28
    2fd0:	01 57       	subi	r16, 0x71	; 113
    2fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ef 56       	subi	r30, 0x6F	; 111
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	f8 01       	movw	r30, r16
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	80 83       	st	Z, r24
    2ff0:	de 01       	movw	r26, r28
    2ff2:	a5 57       	subi	r26, 0x75	; 117
    2ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e1 57       	subi	r30, 0x71	; 113
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	8d 93       	st	X+, r24
    3002:	9c 93       	st	X, r25
    3004:	fe 01       	movw	r30, r28
    3006:	e5 57       	subi	r30, 0x75	; 117
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <main+0x2358>
    3012:	fe 01       	movw	r30, r28
    3014:	e5 57       	subi	r30, 0x75	; 117
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    301c:	de 01       	movw	r26, r28
    301e:	a6 55       	subi	r26, 0x56	; 86
    3020:	be 4f       	sbci	r27, 0xFE	; 254
    3022:	fe 01       	movw	r30, r28
    3024:	e6 55       	subi	r30, 0x56	; 86
    3026:	fe 4f       	sbci	r31, 0xFE	; 254
    3028:	80 81       	ld	r24, Z
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	8c 93       	st	X, r24
    302e:	fe 01       	movw	r30, r28
    3030:	e6 55       	subi	r30, 0x56	; 86
    3032:	fe 4f       	sbci	r31, 0xFE	; 254
    3034:	80 81       	ld	r24, Z
    3036:	85 30       	cpi	r24, 0x05	; 5
    3038:	08 f4       	brcc	.+2      	; 0x303c <main+0x2386>
    303a:	23 cf       	rjmp	.-442    	; 0x2e82 <main+0x21cc>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    303c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    3040:	fe 01       	movw	r30, r28
    3042:	e5 55       	subi	r30, 0x55	; 85
    3044:	fe 4f       	sbci	r31, 0xFE	; 254
    3046:	80 83       	st	Z, r24
    3048:	fe 01       	movw	r30, r28
    304a:	e9 57       	subi	r30, 0x79	; 121
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	aa ef       	ldi	r26, 0xFA	; 250
    3054:	b3 e4       	ldi	r27, 0x43	; 67
    3056:	80 83       	st	Z, r24
    3058:	91 83       	std	Z+1, r25	; 0x01
    305a:	a2 83       	std	Z+2, r26	; 0x02
    305c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305e:	8e 01       	movw	r16, r28
    3060:	0d 57       	subi	r16, 0x7D	; 125
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	fe 01       	movw	r30, r28
    3066:	e9 57       	subi	r30, 0x79	; 121
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	4a ef       	ldi	r20, 0xFA	; 250
    3078:	54 e4       	ldi	r21, 0x44	; 68
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	f8 01       	movw	r30, r16
    3084:	80 83       	st	Z, r24
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	a2 83       	std	Z+2, r26	; 0x02
    308a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    308c:	fe 01       	movw	r30, r28
    308e:	ed 57       	subi	r30, 0x7D	; 125
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	60 81       	ld	r22, Z
    3094:	71 81       	ldd	r23, Z+1	; 0x01
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	44 f4       	brge	.+16     	; 0x30ba <main+0x2404>
		__ticks = 1;
    30aa:	fe 01       	movw	r30, r28
    30ac:	ef 57       	subi	r30, 0x7F	; 127
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
    30b8:	64 c0       	rjmp	.+200    	; 0x3182 <main+0x24cc>
	else if (__tmp > 65535)
    30ba:	fe 01       	movw	r30, r28
    30bc:	ed 57       	subi	r30, 0x7D	; 125
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	60 81       	ld	r22, Z
    30c2:	71 81       	ldd	r23, Z+1	; 0x01
    30c4:	82 81       	ldd	r24, Z+2	; 0x02
    30c6:	93 81       	ldd	r25, Z+3	; 0x03
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	3f ef       	ldi	r19, 0xFF	; 255
    30cc:	4f e7       	ldi	r20, 0x7F	; 127
    30ce:	57 e4       	ldi	r21, 0x47	; 71
    30d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d4:	18 16       	cp	r1, r24
    30d6:	0c f0       	brlt	.+2      	; 0x30da <main+0x2424>
    30d8:	43 c0       	rjmp	.+134    	; 0x3160 <main+0x24aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30da:	fe 01       	movw	r30, r28
    30dc:	e9 57       	subi	r30, 0x79	; 121
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	60 81       	ld	r22, Z
    30e2:	71 81       	ldd	r23, Z+1	; 0x01
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	93 81       	ldd	r25, Z+3	; 0x03
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	51 e4       	ldi	r21, 0x41	; 65
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8e 01       	movw	r16, r28
    30fa:	0f 57       	subi	r16, 0x7F	; 127
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	f8 01       	movw	r30, r16
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
    3110:	1f c0       	rjmp	.+62     	; 0x3150 <main+0x249a>
    3112:	fe 01       	movw	r30, r28
    3114:	e1 58       	subi	r30, 0x81	; 129
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	88 ec       	ldi	r24, 0xC8	; 200
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	80 83       	st	Z, r24
    3120:	fe 01       	movw	r30, r28
    3122:	e1 58       	subi	r30, 0x81	; 129
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <main+0x2474>
    312e:	fe 01       	movw	r30, r28
    3130:	e1 58       	subi	r30, 0x81	; 129
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	de 01       	movw	r26, r28
    313a:	af 57       	subi	r26, 0x7F	; 127
    313c:	bf 4f       	sbci	r27, 0xFF	; 255
    313e:	fe 01       	movw	r30, r28
    3140:	ef 57       	subi	r30, 0x7F	; 127
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	91 81       	ldd	r25, Z+1	; 0x01
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	11 96       	adiw	r26, 0x01	; 1
    314c:	9c 93       	st	X, r25
    314e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3150:	fe 01       	movw	r30, r28
    3152:	ef 57       	subi	r30, 0x7F	; 127
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 81       	ld	r24, Z
    3158:	91 81       	ldd	r25, Z+1	; 0x01
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	d1 f6       	brne	.-76     	; 0x3112 <main+0x245c>
    315e:	28 c0       	rjmp	.+80     	; 0x31b0 <main+0x24fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3160:	8e 01       	movw	r16, r28
    3162:	0f 57       	subi	r16, 0x7F	; 127
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	fe 01       	movw	r30, r28
    3168:	ed 57       	subi	r30, 0x7D	; 125
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	f8 01       	movw	r30, r16
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
    3182:	de 01       	movw	r26, r28
    3184:	a3 58       	subi	r26, 0x83	; 131
    3186:	bf 4f       	sbci	r27, 0xFF	; 255
    3188:	fe 01       	movw	r30, r28
    318a:	ef 57       	subi	r30, 0x7F	; 127
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	11 96       	adiw	r26, 0x01	; 1
    3194:	9c 93       	st	X, r25
    3196:	8e 93       	st	-X, r24
    3198:	fe 01       	movw	r30, r28
    319a:	e3 58       	subi	r30, 0x83	; 131
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <main+0x24ec>
    31a6:	fe 01       	movw	r30, r28
    31a8:	e3 58       	subi	r30, 0x83	; 131
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    31b0:	fe 01       	movw	r30, r28
    31b2:	e5 55       	subi	r30, 0x55	; 85
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	80 81       	ld	r24, Z
    31b8:	8d 30       	cpi	r24, 0x0D	; 13
    31ba:	09 f0       	breq	.+2      	; 0x31be <main+0x2508>
    31bc:	3f cf       	rjmp	.-386    	; 0x303c <main+0x2386>

				UART_sendByte(CHECK); /* */
    31be:	81 e1       	ldi	r24, 0x11	; 17
    31c0:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    31c4:	fe 01       	movw	r30, r28
    31c6:	e7 58       	subi	r30, 0x87	; 135
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 ea       	ldi	r26, 0xA0	; 160
    31d0:	b1 e4       	ldi	r27, 0x41	; 65
    31d2:	80 83       	st	Z, r24
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	a2 83       	std	Z+2, r26	; 0x02
    31d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31da:	8e 01       	movw	r16, r28
    31dc:	0b 58       	subi	r16, 0x8B	; 139
    31de:	1f 4f       	sbci	r17, 0xFF	; 255
    31e0:	fe 01       	movw	r30, r28
    31e2:	e7 58       	subi	r30, 0x87	; 135
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	2b ea       	ldi	r18, 0xAB	; 171
    31f0:	3a ea       	ldi	r19, 0xAA	; 170
    31f2:	4a e2       	ldi	r20, 0x2A	; 42
    31f4:	50 e4       	ldi	r21, 0x40	; 64
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	f8 01       	movw	r30, r16
    3200:	80 83       	st	Z, r24
    3202:	91 83       	std	Z+1, r25	; 0x01
    3204:	a2 83       	std	Z+2, r26	; 0x02
    3206:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3208:	fe 01       	movw	r30, r28
    320a:	eb 58       	subi	r30, 0x8B	; 139
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	60 81       	ld	r22, Z
    3210:	71 81       	ldd	r23, Z+1	; 0x01
    3212:	82 81       	ldd	r24, Z+2	; 0x02
    3214:	93 81       	ldd	r25, Z+3	; 0x03
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e8       	ldi	r20, 0x80	; 128
    321c:	5f e3       	ldi	r21, 0x3F	; 63
    321e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3222:	88 23       	and	r24, r24
    3224:	34 f4       	brge	.+12     	; 0x3232 <main+0x257c>
		__ticks = 1;
    3226:	fe 01       	movw	r30, r28
    3228:	ec 58       	subi	r30, 0x8C	; 140
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	80 83       	st	Z, r24
    3230:	e0 c0       	rjmp	.+448    	; 0x33f2 <main+0x273c>
	else if (__tmp > 255)
    3232:	fe 01       	movw	r30, r28
    3234:	eb 58       	subi	r30, 0x8B	; 139
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	60 81       	ld	r22, Z
    323a:	71 81       	ldd	r23, Z+1	; 0x01
    323c:	82 81       	ldd	r24, Z+2	; 0x02
    323e:	93 81       	ldd	r25, Z+3	; 0x03
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	53 e4       	ldi	r21, 0x43	; 67
    3248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324c:	18 16       	cp	r1, r24
    324e:	0c f0       	brlt	.+2      	; 0x3252 <main+0x259c>
    3250:	c0 c0       	rjmp	.+384    	; 0x33d2 <main+0x271c>
	{
		_delay_ms(__us / 1000.0);
    3252:	fe 01       	movw	r30, r28
    3254:	e7 58       	subi	r30, 0x87	; 135
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	60 81       	ld	r22, Z
    325a:	71 81       	ldd	r23, Z+1	; 0x01
    325c:	82 81       	ldd	r24, Z+2	; 0x02
    325e:	93 81       	ldd	r25, Z+3	; 0x03
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	4a e7       	ldi	r20, 0x7A	; 122
    3266:	54 e4       	ldi	r21, 0x44	; 68
    3268:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	fe 01       	movw	r30, r28
    3272:	e0 59       	subi	r30, 0x90	; 144
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 83       	st	Z, r24
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	a2 83       	std	Z+2, r26	; 0x02
    327c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    327e:	8e 01       	movw	r16, r28
    3280:	04 59       	subi	r16, 0x94	; 148
    3282:	1f 4f       	sbci	r17, 0xFF	; 255
    3284:	fe 01       	movw	r30, r28
    3286:	e0 59       	subi	r30, 0x90	; 144
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	4a ef       	ldi	r20, 0xFA	; 250
    3298:	54 e4       	ldi	r21, 0x44	; 68
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	f8 01       	movw	r30, r16
    32a4:	80 83       	st	Z, r24
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	a2 83       	std	Z+2, r26	; 0x02
    32aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ac:	fe 01       	movw	r30, r28
    32ae:	e4 59       	subi	r30, 0x94	; 148
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e8       	ldi	r20, 0x80	; 128
    32c0:	5f e3       	ldi	r21, 0x3F	; 63
    32c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c6:	88 23       	and	r24, r24
    32c8:	44 f4       	brge	.+16     	; 0x32da <main+0x2624>
		__ticks = 1;
    32ca:	fe 01       	movw	r30, r28
    32cc:	e6 59       	subi	r30, 0x96	; 150
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	64 c0       	rjmp	.+200    	; 0x33a2 <main+0x26ec>
	else if (__tmp > 65535)
    32da:	fe 01       	movw	r30, r28
    32dc:	e4 59       	subi	r30, 0x94	; 148
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	3f ef       	ldi	r19, 0xFF	; 255
    32ec:	4f e7       	ldi	r20, 0x7F	; 127
    32ee:	57 e4       	ldi	r21, 0x47	; 71
    32f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f4:	18 16       	cp	r1, r24
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <main+0x2644>
    32f8:	43 c0       	rjmp	.+134    	; 0x3380 <main+0x26ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fa:	fe 01       	movw	r30, r28
    32fc:	e0 59       	subi	r30, 0x90	; 144
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	60 81       	ld	r22, Z
    3302:	71 81       	ldd	r23, Z+1	; 0x01
    3304:	82 81       	ldd	r24, Z+2	; 0x02
    3306:	93 81       	ldd	r25, Z+3	; 0x03
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	51 e4       	ldi	r21, 0x41	; 65
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	8e 01       	movw	r16, r28
    331a:	06 59       	subi	r16, 0x96	; 150
    331c:	1f 4f       	sbci	r17, 0xFF	; 255
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	f8 01       	movw	r30, r16
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
    3330:	1f c0       	rjmp	.+62     	; 0x3370 <main+0x26ba>
    3332:	fe 01       	movw	r30, r28
    3334:	e8 59       	subi	r30, 0x98	; 152
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	88 ec       	ldi	r24, 0xC8	; 200
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	91 83       	std	Z+1, r25	; 0x01
    333e:	80 83       	st	Z, r24
    3340:	fe 01       	movw	r30, r28
    3342:	e8 59       	subi	r30, 0x98	; 152
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 81       	ld	r24, Z
    3348:	91 81       	ldd	r25, Z+1	; 0x01
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	f1 f7       	brne	.-4      	; 0x334a <main+0x2694>
    334e:	fe 01       	movw	r30, r28
    3350:	e8 59       	subi	r30, 0x98	; 152
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3358:	de 01       	movw	r26, r28
    335a:	a6 59       	subi	r26, 0x96	; 150
    335c:	bf 4f       	sbci	r27, 0xFF	; 255
    335e:	fe 01       	movw	r30, r28
    3360:	e6 59       	subi	r30, 0x96	; 150
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	91 81       	ldd	r25, Z+1	; 0x01
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	11 96       	adiw	r26, 0x01	; 1
    336c:	9c 93       	st	X, r25
    336e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3370:	fe 01       	movw	r30, r28
    3372:	e6 59       	subi	r30, 0x96	; 150
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	d1 f6       	brne	.-76     	; 0x3332 <main+0x267c>
    337e:	4b c0       	rjmp	.+150    	; 0x3416 <main+0x2760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3380:	8e 01       	movw	r16, r28
    3382:	06 59       	subi	r16, 0x96	; 150
    3384:	1f 4f       	sbci	r17, 0xFF	; 255
    3386:	fe 01       	movw	r30, r28
    3388:	e4 59       	subi	r30, 0x94	; 148
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	60 81       	ld	r22, Z
    338e:	71 81       	ldd	r23, Z+1	; 0x01
    3390:	82 81       	ldd	r24, Z+2	; 0x02
    3392:	93 81       	ldd	r25, Z+3	; 0x03
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	f8 01       	movw	r30, r16
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
    33a2:	de 01       	movw	r26, r28
    33a4:	aa 59       	subi	r26, 0x9A	; 154
    33a6:	bf 4f       	sbci	r27, 0xFF	; 255
    33a8:	fe 01       	movw	r30, r28
    33aa:	e6 59       	subi	r30, 0x96	; 150
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	80 81       	ld	r24, Z
    33b0:	91 81       	ldd	r25, Z+1	; 0x01
    33b2:	11 96       	adiw	r26, 0x01	; 1
    33b4:	9c 93       	st	X, r25
    33b6:	8e 93       	st	-X, r24
    33b8:	fe 01       	movw	r30, r28
    33ba:	ea 59       	subi	r30, 0x9A	; 154
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <main+0x270c>
    33c6:	fe 01       	movw	r30, r28
    33c8:	ea 59       	subi	r30, 0x9A	; 154
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	80 83       	st	Z, r24
    33d0:	22 c0       	rjmp	.+68     	; 0x3416 <main+0x2760>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33d2:	8e 01       	movw	r16, r28
    33d4:	0c 58       	subi	r16, 0x8C	; 140
    33d6:	1f 4f       	sbci	r17, 0xFF	; 255
    33d8:	fe 01       	movw	r30, r28
    33da:	eb 58       	subi	r30, 0x8B	; 139
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	f8 01       	movw	r30, r16
    33f0:	80 83       	st	Z, r24
    33f2:	de 01       	movw	r26, r28
    33f4:	ab 59       	subi	r26, 0x9B	; 155
    33f6:	bf 4f       	sbci	r27, 0xFF	; 255
    33f8:	fe 01       	movw	r30, r28
    33fa:	ec 58       	subi	r30, 0x8C	; 140
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	80 81       	ld	r24, Z
    3400:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3402:	fe 01       	movw	r30, r28
    3404:	eb 59       	subi	r30, 0x9B	; 155
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 81       	ld	r24, Z
    340a:	8a 95       	dec	r24
    340c:	f1 f7       	brne	.-4      	; 0x340a <main+0x2754>
    340e:	fe 01       	movw	r30, r28
    3410:	eb 59       	subi	r30, 0x9B	; 155
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 83       	st	Z, r24

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    3416:	fe 01       	movw	r30, r28
    3418:	e6 55       	subi	r30, 0x56	; 86
    341a:	fe 4f       	sbci	r31, 0xFE	; 254
    341c:	10 82       	st	Z, r1
    341e:	41 c1       	rjmp	.+642    	; 0x36a2 <main+0x29ec>
				{
					UART_sendByte(pass1[i]);
    3420:	fe 01       	movw	r30, r28
    3422:	e6 55       	subi	r30, 0x56	; 86
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	80 81       	ld	r24, Z
    3428:	28 2f       	mov	r18, r24
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	ce 01       	movw	r24, r28
    342e:	84 55       	subi	r24, 0x54	; 84
    3430:	9e 4f       	sbci	r25, 0xFE	; 254
    3432:	fc 01       	movw	r30, r24
    3434:	e2 0f       	add	r30, r18
    3436:	f3 1f       	adc	r31, r19
    3438:	80 81       	ld	r24, Z
    343a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    343e:	fe 01       	movw	r30, r28
    3440:	ef 59       	subi	r30, 0x9F	; 159
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	a0 ea       	ldi	r26, 0xA0	; 160
    344a:	b1 e4       	ldi	r27, 0x41	; 65
    344c:	80 83       	st	Z, r24
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	a2 83       	std	Z+2, r26	; 0x02
    3452:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3454:	8e 01       	movw	r16, r28
    3456:	03 5a       	subi	r16, 0xA3	; 163
    3458:	1f 4f       	sbci	r17, 0xFF	; 255
    345a:	fe 01       	movw	r30, r28
    345c:	ef 59       	subi	r30, 0x9F	; 159
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	93 81       	ldd	r25, Z+3	; 0x03
    3468:	2b ea       	ldi	r18, 0xAB	; 171
    346a:	3a ea       	ldi	r19, 0xAA	; 170
    346c:	4a e2       	ldi	r20, 0x2A	; 42
    346e:	50 e4       	ldi	r21, 0x40	; 64
    3470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	80 83       	st	Z, r24
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	a2 83       	std	Z+2, r26	; 0x02
    3480:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3482:	fe 01       	movw	r30, r28
    3484:	e3 5a       	subi	r30, 0xA3	; 163
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e8       	ldi	r20, 0x80	; 128
    3496:	5f e3       	ldi	r21, 0x3F	; 63
    3498:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    349c:	88 23       	and	r24, r24
    349e:	34 f4       	brge	.+12     	; 0x34ac <main+0x27f6>
		__ticks = 1;
    34a0:	fe 01       	movw	r30, r28
    34a2:	e4 5a       	subi	r30, 0xA4	; 164
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	80 83       	st	Z, r24
    34aa:	e0 c0       	rjmp	.+448    	; 0x366c <main+0x29b6>
	else if (__tmp > 255)
    34ac:	fe 01       	movw	r30, r28
    34ae:	e3 5a       	subi	r30, 0xA3	; 163
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	60 81       	ld	r22, Z
    34b4:	71 81       	ldd	r23, Z+1	; 0x01
    34b6:	82 81       	ldd	r24, Z+2	; 0x02
    34b8:	93 81       	ldd	r25, Z+3	; 0x03
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	53 e4       	ldi	r21, 0x43	; 67
    34c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	0c f0       	brlt	.+2      	; 0x34cc <main+0x2816>
    34ca:	c0 c0       	rjmp	.+384    	; 0x364c <main+0x2996>
	{
		_delay_ms(__us / 1000.0);
    34cc:	fe 01       	movw	r30, r28
    34ce:	ef 59       	subi	r30, 0x9F	; 159
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4a e7       	ldi	r20, 0x7A	; 122
    34e0:	54 e4       	ldi	r21, 0x44	; 68
    34e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	fe 01       	movw	r30, r28
    34ec:	e8 5a       	subi	r30, 0xA8	; 168
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	80 83       	st	Z, r24
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	a2 83       	std	Z+2, r26	; 0x02
    34f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f8:	8e 01       	movw	r16, r28
    34fa:	0c 5a       	subi	r16, 0xAC	; 172
    34fc:	1f 4f       	sbci	r17, 0xFF	; 255
    34fe:	fe 01       	movw	r30, r28
    3500:	e8 5a       	subi	r30, 0xA8	; 168
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	60 81       	ld	r22, Z
    3506:	71 81       	ldd	r23, Z+1	; 0x01
    3508:	82 81       	ldd	r24, Z+2	; 0x02
    350a:	93 81       	ldd	r25, Z+3	; 0x03
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4a ef       	ldi	r20, 0xFA	; 250
    3512:	54 e4       	ldi	r21, 0x44	; 68
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	f8 01       	movw	r30, r16
    351e:	80 83       	st	Z, r24
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	a2 83       	std	Z+2, r26	; 0x02
    3524:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3526:	fe 01       	movw	r30, r28
    3528:	ec 5a       	subi	r30, 0xAC	; 172
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	60 81       	ld	r22, Z
    352e:	71 81       	ldd	r23, Z+1	; 0x01
    3530:	82 81       	ldd	r24, Z+2	; 0x02
    3532:	93 81       	ldd	r25, Z+3	; 0x03
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e8       	ldi	r20, 0x80	; 128
    353a:	5f e3       	ldi	r21, 0x3F	; 63
    353c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3540:	88 23       	and	r24, r24
    3542:	44 f4       	brge	.+16     	; 0x3554 <main+0x289e>
		__ticks = 1;
    3544:	fe 01       	movw	r30, r28
    3546:	ee 5a       	subi	r30, 0xAE	; 174
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	80 83       	st	Z, r24
    3552:	64 c0       	rjmp	.+200    	; 0x361c <main+0x2966>
	else if (__tmp > 65535)
    3554:	fe 01       	movw	r30, r28
    3556:	ec 5a       	subi	r30, 0xAC	; 172
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	60 81       	ld	r22, Z
    355c:	71 81       	ldd	r23, Z+1	; 0x01
    355e:	82 81       	ldd	r24, Z+2	; 0x02
    3560:	93 81       	ldd	r25, Z+3	; 0x03
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	3f ef       	ldi	r19, 0xFF	; 255
    3566:	4f e7       	ldi	r20, 0x7F	; 127
    3568:	57 e4       	ldi	r21, 0x47	; 71
    356a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    356e:	18 16       	cp	r1, r24
    3570:	0c f0       	brlt	.+2      	; 0x3574 <main+0x28be>
    3572:	43 c0       	rjmp	.+134    	; 0x35fa <main+0x2944>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3574:	fe 01       	movw	r30, r28
    3576:	e8 5a       	subi	r30, 0xA8	; 168
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	60 81       	ld	r22, Z
    357c:	71 81       	ldd	r23, Z+1	; 0x01
    357e:	82 81       	ldd	r24, Z+2	; 0x02
    3580:	93 81       	ldd	r25, Z+3	; 0x03
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e2       	ldi	r20, 0x20	; 32
    3588:	51 e4       	ldi	r21, 0x41	; 65
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	8e 01       	movw	r16, r28
    3594:	0e 5a       	subi	r16, 0xAE	; 174
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	f8 01       	movw	r30, r16
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
    35aa:	1f c0       	rjmp	.+62     	; 0x35ea <main+0x2934>
    35ac:	fe 01       	movw	r30, r28
    35ae:	e0 5b       	subi	r30, 0xB0	; 176
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	88 ec       	ldi	r24, 0xC8	; 200
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ba:	fe 01       	movw	r30, r28
    35bc:	e0 5b       	subi	r30, 0xB0	; 176
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	80 81       	ld	r24, Z
    35c2:	91 81       	ldd	r25, Z+1	; 0x01
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	f1 f7       	brne	.-4      	; 0x35c4 <main+0x290e>
    35c8:	fe 01       	movw	r30, r28
    35ca:	e0 5b       	subi	r30, 0xB0	; 176
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	de 01       	movw	r26, r28
    35d4:	ae 5a       	subi	r26, 0xAE	; 174
    35d6:	bf 4f       	sbci	r27, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	ee 5a       	subi	r30, 0xAE	; 174
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	11 96       	adiw	r26, 0x01	; 1
    35e6:	9c 93       	st	X, r25
    35e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	fe 01       	movw	r30, r28
    35ec:	ee 5a       	subi	r30, 0xAE	; 174
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	80 81       	ld	r24, Z
    35f2:	91 81       	ldd	r25, Z+1	; 0x01
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	d1 f6       	brne	.-76     	; 0x35ac <main+0x28f6>
    35f8:	4b c0       	rjmp	.+150    	; 0x3690 <main+0x29da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fa:	8e 01       	movw	r16, r28
    35fc:	0e 5a       	subi	r16, 0xAE	; 174
    35fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3600:	fe 01       	movw	r30, r28
    3602:	ec 5a       	subi	r30, 0xAC	; 172
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	60 81       	ld	r22, Z
    3608:	71 81       	ldd	r23, Z+1	; 0x01
    360a:	82 81       	ldd	r24, Z+2	; 0x02
    360c:	93 81       	ldd	r25, Z+3	; 0x03
    360e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	f8 01       	movw	r30, r16
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	80 83       	st	Z, r24
    361c:	de 01       	movw	r26, r28
    361e:	a2 5b       	subi	r26, 0xB2	; 178
    3620:	bf 4f       	sbci	r27, 0xFF	; 255
    3622:	fe 01       	movw	r30, r28
    3624:	ee 5a       	subi	r30, 0xAE	; 174
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	91 81       	ldd	r25, Z+1	; 0x01
    362c:	11 96       	adiw	r26, 0x01	; 1
    362e:	9c 93       	st	X, r25
    3630:	8e 93       	st	-X, r24
    3632:	fe 01       	movw	r30, r28
    3634:	e2 5b       	subi	r30, 0xB2	; 178
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	f1 f7       	brne	.-4      	; 0x363c <main+0x2986>
    3640:	fe 01       	movw	r30, r28
    3642:	e2 5b       	subi	r30, 0xB2	; 178
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
    364a:	22 c0       	rjmp	.+68     	; 0x3690 <main+0x29da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    364c:	8e 01       	movw	r16, r28
    364e:	04 5a       	subi	r16, 0xA4	; 164
    3650:	1f 4f       	sbci	r17, 0xFF	; 255
    3652:	fe 01       	movw	r30, r28
    3654:	e3 5a       	subi	r30, 0xA3	; 163
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	f8 01       	movw	r30, r16
    366a:	80 83       	st	Z, r24
    366c:	de 01       	movw	r26, r28
    366e:	a3 5b       	subi	r26, 0xB3	; 179
    3670:	bf 4f       	sbci	r27, 0xFF	; 255
    3672:	fe 01       	movw	r30, r28
    3674:	e4 5a       	subi	r30, 0xA4	; 164
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 81       	ld	r24, Z
    367a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    367c:	fe 01       	movw	r30, r28
    367e:	e3 5b       	subi	r30, 0xB3	; 179
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 81       	ld	r24, Z
    3684:	8a 95       	dec	r24
    3686:	f1 f7       	brne	.-4      	; 0x3684 <main+0x29ce>
    3688:	fe 01       	movw	r30, r28
    368a:	e3 5b       	subi	r30, 0xB3	; 179
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 83       	st	Z, r24
				UART_sendByte(CHECK); /* */

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    3690:	de 01       	movw	r26, r28
    3692:	a6 55       	subi	r26, 0x56	; 86
    3694:	be 4f       	sbci	r27, 0xFE	; 254
    3696:	fe 01       	movw	r30, r28
    3698:	e6 55       	subi	r30, 0x56	; 86
    369a:	fe 4f       	sbci	r31, 0xFE	; 254
    369c:	80 81       	ld	r24, Z
    369e:	8f 5f       	subi	r24, 0xFF	; 255
    36a0:	8c 93       	st	X, r24
    36a2:	fe 01       	movw	r30, r28
    36a4:	e6 55       	subi	r30, 0x56	; 86
    36a6:	fe 4f       	sbci	r31, 0xFE	; 254
    36a8:	80 81       	ld	r24, Z
    36aa:	85 30       	cpi	r24, 0x05	; 5
    36ac:	08 f4       	brcc	.+2      	; 0x36b0 <main+0x29fa>
    36ae:	b8 ce       	rjmp	.-656    	; 0x3420 <main+0x276a>
					UART_sendByte(pass1[i]);

					_delay_us(20);
				}

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    36b0:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    36b4:	fe 01       	movw	r30, r28
    36b6:	e7 55       	subi	r30, 0x57	; 87
    36b8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ba:	80 83       	st	Z, r24

				while(1)
				{
					if(status == OK) /* Right Password */
    36bc:	fe 01       	movw	r30, r28
    36be:	e7 55       	subi	r30, 0x57	; 87
    36c0:	fe 4f       	sbci	r31, 0xFE	; 254
    36c2:	80 81       	ld	r24, Z
    36c4:	80 31       	cpi	r24, 0x10	; 16
    36c6:	49 f4       	brne	.+18     	; 0x36da <main+0x2a24>
					{
						flag = 0 ;
    36c8:	fe 01       	movw	r30, r28
    36ca:	e8 55       	subi	r30, 0x58	; 88
    36cc:	fe 4f       	sbci	r31, 0xFE	; 254
    36ce:	10 82       	st	Z, r1
						UART_sendByte(CR_PASS);
    36d0:	85 e1       	ldi	r24, 0x15	; 21
    36d2:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    36d6:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>
						break;
					}
					else /* Wrong Password */
					{
						count = 0 ;
    36da:	fe 01       	movw	r30, r28
    36dc:	e9 55       	subi	r30, 0x59	; 89
    36de:	fe 4f       	sbci	r31, 0xFE	; 254
    36e0:	10 82       	st	Z, r1

						do
						{
							count++;
    36e2:	de 01       	movw	r26, r28
    36e4:	a9 55       	subi	r26, 0x59	; 89
    36e6:	be 4f       	sbci	r27, 0xFE	; 254
    36e8:	fe 01       	movw	r30, r28
    36ea:	e9 55       	subi	r30, 0x59	; 89
    36ec:	fe 4f       	sbci	r31, 0xFE	; 254
    36ee:	80 81       	ld	r24, Z
    36f0:	8f 5f       	subi	r24, 0xFF	; 255
    36f2:	8c 93       	st	X, r24

							LCD_clearScreen();
    36f4:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
							LCD_displayString("PLZ Enter Pass:");
    36f8:	80 e6       	ldi	r24, 0x60	; 96
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
							LCD_moveCursor(1, 0);
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	60 e0       	ldi	r22, 0x00	; 0
    3704:	0e 94 2a 28 	call	0x5054	; 0x5054 <LCD_moveCursor>

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    3708:	fe 01       	movw	r30, r28
    370a:	e6 55       	subi	r30, 0x56	; 86
    370c:	fe 4f       	sbci	r31, 0xFE	; 254
    370e:	10 82       	st	Z, r1
    3710:	d3 c0       	rjmp	.+422    	; 0x38b8 <main+0x2c02>
							{
								key = KEYPAD_getPressedKey() ;
    3712:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    3716:	fe 01       	movw	r30, r28
    3718:	e5 55       	subi	r30, 0x55	; 85
    371a:	fe 4f       	sbci	r31, 0xFE	; 254
    371c:	80 83       	st	Z, r24
								pass1[i] = key ;
    371e:	fe 01       	movw	r30, r28
    3720:	e6 55       	subi	r30, 0x56	; 86
    3722:	fe 4f       	sbci	r31, 0xFE	; 254
    3724:	80 81       	ld	r24, Z
    3726:	28 2f       	mov	r18, r24
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	ce 01       	movw	r24, r28
    372c:	84 55       	subi	r24, 0x54	; 84
    372e:	9e 4f       	sbci	r25, 0xFE	; 254
    3730:	dc 01       	movw	r26, r24
    3732:	a2 0f       	add	r26, r18
    3734:	b3 1f       	adc	r27, r19
    3736:	fe 01       	movw	r30, r28
    3738:	e5 55       	subi	r30, 0x55	; 85
    373a:	fe 4f       	sbci	r31, 0xFE	; 254
    373c:	80 81       	ld	r24, Z
    373e:	8c 93       	st	X, r24
								LCD_displayCharacter('*');
    3740:	8a e2       	ldi	r24, 0x2A	; 42
    3742:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
    3746:	fe 01       	movw	r30, r28
    3748:	e7 5b       	subi	r30, 0xB7	; 183
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	aa ef       	ldi	r26, 0xFA	; 250
    3752:	b3 e4       	ldi	r27, 0x43	; 67
    3754:	80 83       	st	Z, r24
    3756:	91 83       	std	Z+1, r25	; 0x01
    3758:	a2 83       	std	Z+2, r26	; 0x02
    375a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375c:	8e 01       	movw	r16, r28
    375e:	0b 5b       	subi	r16, 0xBB	; 187
    3760:	1f 4f       	sbci	r17, 0xFF	; 255
    3762:	fe 01       	movw	r30, r28
    3764:	e7 5b       	subi	r30, 0xB7	; 183
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	60 81       	ld	r22, Z
    376a:	71 81       	ldd	r23, Z+1	; 0x01
    376c:	82 81       	ldd	r24, Z+2	; 0x02
    376e:	93 81       	ldd	r25, Z+3	; 0x03
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	4a ef       	ldi	r20, 0xFA	; 250
    3776:	54 e4       	ldi	r21, 0x44	; 68
    3778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	f8 01       	movw	r30, r16
    3782:	80 83       	st	Z, r24
    3784:	91 83       	std	Z+1, r25	; 0x01
    3786:	a2 83       	std	Z+2, r26	; 0x02
    3788:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    378a:	fe 01       	movw	r30, r28
    378c:	eb 5b       	subi	r30, 0xBB	; 187
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	93 81       	ldd	r25, Z+3	; 0x03
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e8       	ldi	r20, 0x80	; 128
    379e:	5f e3       	ldi	r21, 0x3F	; 63
    37a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37a4:	88 23       	and	r24, r24
    37a6:	44 f4       	brge	.+16     	; 0x37b8 <main+0x2b02>
		__ticks = 1;
    37a8:	fe 01       	movw	r30, r28
    37aa:	ed 5b       	subi	r30, 0xBD	; 189
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	80 83       	st	Z, r24
    37b6:	64 c0       	rjmp	.+200    	; 0x3880 <main+0x2bca>
	else if (__tmp > 65535)
    37b8:	fe 01       	movw	r30, r28
    37ba:	eb 5b       	subi	r30, 0xBB	; 187
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	60 81       	ld	r22, Z
    37c0:	71 81       	ldd	r23, Z+1	; 0x01
    37c2:	82 81       	ldd	r24, Z+2	; 0x02
    37c4:	93 81       	ldd	r25, Z+3	; 0x03
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	3f ef       	ldi	r19, 0xFF	; 255
    37ca:	4f e7       	ldi	r20, 0x7F	; 127
    37cc:	57 e4       	ldi	r21, 0x47	; 71
    37ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d2:	18 16       	cp	r1, r24
    37d4:	0c f0       	brlt	.+2      	; 0x37d8 <main+0x2b22>
    37d6:	43 c0       	rjmp	.+134    	; 0x385e <main+0x2ba8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d8:	fe 01       	movw	r30, r28
    37da:	e7 5b       	subi	r30, 0xB7	; 183
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e2       	ldi	r20, 0x20	; 32
    37ec:	51 e4       	ldi	r21, 0x41	; 65
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	8e 01       	movw	r16, r28
    37f8:	0d 5b       	subi	r16, 0xBD	; 189
    37fa:	1f 4f       	sbci	r17, 0xFF	; 255
    37fc:	bc 01       	movw	r22, r24
    37fe:	cd 01       	movw	r24, r26
    3800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	f8 01       	movw	r30, r16
    380a:	91 83       	std	Z+1, r25	; 0x01
    380c:	80 83       	st	Z, r24
    380e:	1f c0       	rjmp	.+62     	; 0x384e <main+0x2b98>
    3810:	fe 01       	movw	r30, r28
    3812:	ef 5b       	subi	r30, 0xBF	; 191
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	88 ec       	ldi	r24, 0xC8	; 200
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	91 83       	std	Z+1, r25	; 0x01
    381c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    381e:	fe 01       	movw	r30, r28
    3820:	ef 5b       	subi	r30, 0xBF	; 191
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <main+0x2b72>
    382c:	fe 01       	movw	r30, r28
    382e:	ef 5b       	subi	r30, 0xBF	; 191
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3836:	de 01       	movw	r26, r28
    3838:	ad 5b       	subi	r26, 0xBD	; 189
    383a:	bf 4f       	sbci	r27, 0xFF	; 255
    383c:	fe 01       	movw	r30, r28
    383e:	ed 5b       	subi	r30, 0xBD	; 189
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	11 96       	adiw	r26, 0x01	; 1
    384a:	9c 93       	st	X, r25
    384c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384e:	fe 01       	movw	r30, r28
    3850:	ed 5b       	subi	r30, 0xBD	; 189
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	00 97       	sbiw	r24, 0x00	; 0
    385a:	d1 f6       	brne	.-76     	; 0x3810 <main+0x2b5a>
    385c:	24 c0       	rjmp	.+72     	; 0x38a6 <main+0x2bf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385e:	8e 01       	movw	r16, r28
    3860:	0d 5b       	subi	r16, 0xBD	; 189
    3862:	1f 4f       	sbci	r17, 0xFF	; 255
    3864:	fe 01       	movw	r30, r28
    3866:	eb 5b       	subi	r30, 0xBB	; 187
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	60 81       	ld	r22, Z
    386c:	71 81       	ldd	r23, Z+1	; 0x01
    386e:	82 81       	ldd	r24, Z+2	; 0x02
    3870:	93 81       	ldd	r25, Z+3	; 0x03
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	f8 01       	movw	r30, r16
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	80 83       	st	Z, r24
    3880:	fe 01       	movw	r30, r28
    3882:	ed 5b       	subi	r30, 0xBD	; 189
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	91 81       	ldd	r25, Z+1	; 0x01
    388a:	fe 01       	movw	r30, r28
    388c:	ff 96       	adiw	r30, 0x3f	; 63
    388e:	91 83       	std	Z+1, r25	; 0x01
    3890:	80 83       	st	Z, r24
    3892:	fe 01       	movw	r30, r28
    3894:	ff 96       	adiw	r30, 0x3f	; 63
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <main+0x2be4>
    389e:	fe 01       	movw	r30, r28
    38a0:	ff 96       	adiw	r30, 0x3f	; 63
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	80 83       	st	Z, r24
							LCD_clearScreen();
							LCD_displayString("PLZ Enter Pass:");
							LCD_moveCursor(1, 0);

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    38a6:	de 01       	movw	r26, r28
    38a8:	a6 55       	subi	r26, 0x56	; 86
    38aa:	be 4f       	sbci	r27, 0xFE	; 254
    38ac:	fe 01       	movw	r30, r28
    38ae:	e6 55       	subi	r30, 0x56	; 86
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	80 81       	ld	r24, Z
    38b4:	8f 5f       	subi	r24, 0xFF	; 255
    38b6:	8c 93       	st	X, r24
    38b8:	fe 01       	movw	r30, r28
    38ba:	e6 55       	subi	r30, 0x56	; 86
    38bc:	fe 4f       	sbci	r31, 0xFE	; 254
    38be:	80 81       	ld	r24, Z
    38c0:	85 30       	cpi	r24, 0x05	; 5
    38c2:	08 f4       	brcc	.+2      	; 0x38c6 <main+0x2c10>
    38c4:	26 cf       	rjmp	.-436    	; 0x3712 <main+0x2a5c>
							}

							/* Waiting User to press The Enter Button */
							do
							{
								key = KEYPAD_getPressedKey() ;
    38c6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <KEYPAD_getPressedKey>
    38ca:	fe 01       	movw	r30, r28
    38cc:	e5 55       	subi	r30, 0x55	; 85
    38ce:	fe 4f       	sbci	r31, 0xFE	; 254
    38d0:	80 83       	st	Z, r24
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	aa ef       	ldi	r26, 0xFA	; 250
    38d8:	b3 e4       	ldi	r27, 0x43	; 67
    38da:	8b af       	std	Y+59, r24	; 0x3b
    38dc:	9c af       	std	Y+60, r25	; 0x3c
    38de:	ad af       	std	Y+61, r26	; 0x3d
    38e0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	6b ad       	ldd	r22, Y+59	; 0x3b
    38e4:	7c ad       	ldd	r23, Y+60	; 0x3c
    38e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    38e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	4a ef       	ldi	r20, 0xFA	; 250
    38f0:	54 e4       	ldi	r21, 0x44	; 68
    38f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	8f ab       	std	Y+55, r24	; 0x37
    38fc:	98 af       	std	Y+56, r25	; 0x38
    38fe:	a9 af       	std	Y+57, r26	; 0x39
    3900:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3902:	6f a9       	ldd	r22, Y+55	; 0x37
    3904:	78 ad       	ldd	r23, Y+56	; 0x38
    3906:	89 ad       	ldd	r24, Y+57	; 0x39
    3908:	9a ad       	ldd	r25, Y+58	; 0x3a
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e8       	ldi	r20, 0x80	; 128
    3910:	5f e3       	ldi	r21, 0x3F	; 63
    3912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3916:	88 23       	and	r24, r24
    3918:	2c f4       	brge	.+10     	; 0x3924 <main+0x2c6e>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	9e ab       	std	Y+54, r25	; 0x36
    3920:	8d ab       	std	Y+53, r24	; 0x35
    3922:	3f c0       	rjmp	.+126    	; 0x39a2 <main+0x2cec>
	else if (__tmp > 65535)
    3924:	6f a9       	ldd	r22, Y+55	; 0x37
    3926:	78 ad       	ldd	r23, Y+56	; 0x38
    3928:	89 ad       	ldd	r24, Y+57	; 0x39
    392a:	9a ad       	ldd	r25, Y+58	; 0x3a
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	3f ef       	ldi	r19, 0xFF	; 255
    3930:	4f e7       	ldi	r20, 0x7F	; 127
    3932:	57 e4       	ldi	r21, 0x47	; 71
    3934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3938:	18 16       	cp	r1, r24
    393a:	4c f5       	brge	.+82     	; 0x398e <main+0x2cd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	6b ad       	ldd	r22, Y+59	; 0x3b
    393e:	7c ad       	ldd	r23, Y+60	; 0x3c
    3940:	8d ad       	ldd	r24, Y+61	; 0x3d
    3942:	9e ad       	ldd	r25, Y+62	; 0x3e
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e2       	ldi	r20, 0x20	; 32
    394a:	51 e4       	ldi	r21, 0x41	; 65
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9e ab       	std	Y+54, r25	; 0x36
    3962:	8d ab       	std	Y+53, r24	; 0x35
    3964:	0f c0       	rjmp	.+30     	; 0x3984 <main+0x2cce>
    3966:	88 ec       	ldi	r24, 0xC8	; 200
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	9c ab       	std	Y+52, r25	; 0x34
    396c:	8b ab       	std	Y+51, r24	; 0x33
    396e:	8b a9       	ldd	r24, Y+51	; 0x33
    3970:	9c a9       	ldd	r25, Y+52	; 0x34
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <main+0x2cbc>
    3976:	9c ab       	std	Y+52, r25	; 0x34
    3978:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	8d a9       	ldd	r24, Y+53	; 0x35
    397c:	9e a9       	ldd	r25, Y+54	; 0x36
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	9e ab       	std	Y+54, r25	; 0x36
    3982:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3984:	8d a9       	ldd	r24, Y+53	; 0x35
    3986:	9e a9       	ldd	r25, Y+54	; 0x36
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	69 f7       	brne	.-38     	; 0x3966 <main+0x2cb0>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <main+0x2d00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398e:	6f a9       	ldd	r22, Y+55	; 0x37
    3990:	78 ad       	ldd	r23, Y+56	; 0x38
    3992:	89 ad       	ldd	r24, Y+57	; 0x39
    3994:	9a ad       	ldd	r25, Y+58	; 0x3a
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	9e ab       	std	Y+54, r25	; 0x36
    39a0:	8d ab       	std	Y+53, r24	; 0x35
    39a2:	8d a9       	ldd	r24, Y+53	; 0x35
    39a4:	9e a9       	ldd	r25, Y+54	; 0x36
    39a6:	9a ab       	std	Y+50, r25	; 0x32
    39a8:	89 ab       	std	Y+49, r24	; 0x31
    39aa:	89 a9       	ldd	r24, Y+49	; 0x31
    39ac:	9a a9       	ldd	r25, Y+50	; 0x32
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <main+0x2cf8>
    39b2:	9a ab       	std	Y+50, r25	; 0x32
    39b4:	89 ab       	std	Y+49, r24	; 0x31
								_delay_ms(500);
							} while(key != 13);
    39b6:	fe 01       	movw	r30, r28
    39b8:	e5 55       	subi	r30, 0x55	; 85
    39ba:	fe 4f       	sbci	r31, 0xFE	; 254
    39bc:	80 81       	ld	r24, Z
    39be:	8d 30       	cpi	r24, 0x0D	; 13
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <main+0x2d0e>
    39c2:	81 cf       	rjmp	.-254    	; 0x38c6 <main+0x2c10>

							UART_sendByte(CHECK); /* */
    39c4:	81 e1       	ldi	r24, 0x11	; 17
    39c6:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	a0 ea       	ldi	r26, 0xA0	; 160
    39d0:	b1 e4       	ldi	r27, 0x41	; 65
    39d2:	8d a7       	std	Y+45, r24	; 0x2d
    39d4:	9e a7       	std	Y+46, r25	; 0x2e
    39d6:	af a7       	std	Y+47, r26	; 0x2f
    39d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39da:	6d a5       	ldd	r22, Y+45	; 0x2d
    39dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    39de:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e0:	98 a9       	ldd	r25, Y+48	; 0x30
    39e2:	2b ea       	ldi	r18, 0xAB	; 171
    39e4:	3a ea       	ldi	r19, 0xAA	; 170
    39e6:	4a e2       	ldi	r20, 0x2A	; 42
    39e8:	50 e4       	ldi	r21, 0x40	; 64
    39ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	89 a7       	std	Y+41, r24	; 0x29
    39f4:	9a a7       	std	Y+42, r25	; 0x2a
    39f6:	ab a7       	std	Y+43, r26	; 0x2b
    39f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    39fa:	69 a5       	ldd	r22, Y+41	; 0x29
    39fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    39fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a00:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e8       	ldi	r20, 0x80	; 128
    3a08:	5f e3       	ldi	r21, 0x3F	; 63
    3a0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0e:	88 23       	and	r24, r24
    3a10:	1c f4       	brge	.+6      	; 0x3a18 <main+0x2d62>
		__ticks = 1;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	88 a7       	std	Y+40, r24	; 0x28
    3a16:	91 c0       	rjmp	.+290    	; 0x3b3a <main+0x2e84>
	else if (__tmp > 255)
    3a18:	69 a5       	ldd	r22, Y+41	; 0x29
    3a1a:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4f e7       	ldi	r20, 0x7F	; 127
    3a26:	53 e4       	ldi	r21, 0x43	; 67
    3a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a2c:	18 16       	cp	r1, r24
    3a2e:	0c f0       	brlt	.+2      	; 0x3a32 <main+0x2d7c>
    3a30:	7b c0       	rjmp	.+246    	; 0x3b28 <main+0x2e72>
	{
		_delay_ms(__us / 1000.0);
    3a32:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a34:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a38:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	4a e7       	ldi	r20, 0x7A	; 122
    3a40:	54 e4       	ldi	r21, 0x44	; 68
    3a42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	8c a3       	std	Y+36, r24	; 0x24
    3a4c:	9d a3       	std	Y+37, r25	; 0x25
    3a4e:	ae a3       	std	Y+38, r26	; 0x26
    3a50:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a52:	6c a1       	ldd	r22, Y+36	; 0x24
    3a54:	7d a1       	ldd	r23, Y+37	; 0x25
    3a56:	8e a1       	ldd	r24, Y+38	; 0x26
    3a58:	9f a1       	ldd	r25, Y+39	; 0x27
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	4a ef       	ldi	r20, 0xFA	; 250
    3a60:	54 e4       	ldi	r21, 0x44	; 68
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	88 a3       	std	Y+32, r24	; 0x20
    3a6c:	99 a3       	std	Y+33, r25	; 0x21
    3a6e:	aa a3       	std	Y+34, r26	; 0x22
    3a70:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3a72:	68 a1       	ldd	r22, Y+32	; 0x20
    3a74:	79 a1       	ldd	r23, Y+33	; 0x21
    3a76:	8a a1       	ldd	r24, Y+34	; 0x22
    3a78:	9b a1       	ldd	r25, Y+35	; 0x23
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e8       	ldi	r20, 0x80	; 128
    3a80:	5f e3       	ldi	r21, 0x3F	; 63
    3a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a86:	88 23       	and	r24, r24
    3a88:	2c f4       	brge	.+10     	; 0x3a94 <main+0x2dde>
		__ticks = 1;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9f 8f       	std	Y+31, r25	; 0x1f
    3a90:	8e 8f       	std	Y+30, r24	; 0x1e
    3a92:	3f c0       	rjmp	.+126    	; 0x3b12 <main+0x2e5c>
	else if (__tmp > 65535)
    3a94:	68 a1       	ldd	r22, Y+32	; 0x20
    3a96:	79 a1       	ldd	r23, Y+33	; 0x21
    3a98:	8a a1       	ldd	r24, Y+34	; 0x22
    3a9a:	9b a1       	ldd	r25, Y+35	; 0x23
    3a9c:	20 e0       	ldi	r18, 0x00	; 0
    3a9e:	3f ef       	ldi	r19, 0xFF	; 255
    3aa0:	4f e7       	ldi	r20, 0x7F	; 127
    3aa2:	57 e4       	ldi	r21, 0x47	; 71
    3aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa8:	18 16       	cp	r1, r24
    3aaa:	4c f5       	brge	.+82     	; 0x3afe <main+0x2e48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aac:	6c a1       	ldd	r22, Y+36	; 0x24
    3aae:	7d a1       	ldd	r23, Y+37	; 0x25
    3ab0:	8e a1       	ldd	r24, Y+38	; 0x26
    3ab2:	9f a1       	ldd	r25, Y+39	; 0x27
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e2       	ldi	r20, 0x20	; 32
    3aba:	51 e4       	ldi	r21, 0x41	; 65
    3abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	bc 01       	movw	r22, r24
    3ac6:	cd 01       	movw	r24, r26
    3ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	9f 8f       	std	Y+31, r25	; 0x1f
    3ad2:	8e 8f       	std	Y+30, r24	; 0x1e
    3ad4:	0f c0       	rjmp	.+30     	; 0x3af4 <main+0x2e3e>
    3ad6:	88 ec       	ldi	r24, 0xC8	; 200
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	9d 8f       	std	Y+29, r25	; 0x1d
    3adc:	8c 8f       	std	Y+28, r24	; 0x1c
    3ade:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ae0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <main+0x2e2c>
    3ae6:	9d 8f       	std	Y+29, r25	; 0x1d
    3ae8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	9f 8f       	std	Y+31, r25	; 0x1f
    3af2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3af6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	69 f7       	brne	.-38     	; 0x3ad6 <main+0x2e20>
    3afc:	24 c0       	rjmp	.+72     	; 0x3b46 <main+0x2e90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afe:	68 a1       	ldd	r22, Y+32	; 0x20
    3b00:	79 a1       	ldd	r23, Y+33	; 0x21
    3b02:	8a a1       	ldd	r24, Y+34	; 0x22
    3b04:	9b a1       	ldd	r25, Y+35	; 0x23
    3b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	9f 8f       	std	Y+31, r25	; 0x1f
    3b10:	8e 8f       	std	Y+30, r24	; 0x1e
    3b12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b14:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b16:	9b 8f       	std	Y+27, r25	; 0x1b
    3b18:	8a 8f       	std	Y+26, r24	; 0x1a
    3b1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <main+0x2e68>
    3b22:	9b 8f       	std	Y+27, r25	; 0x1b
    3b24:	8a 8f       	std	Y+26, r24	; 0x1a
    3b26:	0f c0       	rjmp	.+30     	; 0x3b46 <main+0x2e90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b28:	69 a5       	ldd	r22, Y+41	; 0x29
    3b2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	88 a7       	std	Y+40, r24	; 0x28
    3b3a:	88 a5       	ldd	r24, Y+40	; 0x28
    3b3c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b3e:	89 8d       	ldd	r24, Y+25	; 0x19
    3b40:	8a 95       	dec	r24
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <main+0x2e8a>
    3b44:	89 8f       	std	Y+25, r24	; 0x19

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    3b46:	fe 01       	movw	r30, r28
    3b48:	e6 55       	subi	r30, 0x56	; 86
    3b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4c:	10 82       	st	Z, r1
    3b4e:	d6 c0       	rjmp	.+428    	; 0x3cfc <main+0x3046>
							{
								UART_sendByte(pass1[i]);
    3b50:	fe 01       	movw	r30, r28
    3b52:	e6 55       	subi	r30, 0x56	; 86
    3b54:	fe 4f       	sbci	r31, 0xFE	; 254
    3b56:	80 81       	ld	r24, Z
    3b58:	28 2f       	mov	r18, r24
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	ce 01       	movw	r24, r28
    3b5e:	84 55       	subi	r24, 0x54	; 84
    3b60:	9e 4f       	sbci	r25, 0xFE	; 254
    3b62:	fc 01       	movw	r30, r24
    3b64:	e2 0f       	add	r30, r18
    3b66:	f3 1f       	adc	r31, r19
    3b68:	80 81       	ld	r24, Z
    3b6a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	a0 ea       	ldi	r26, 0xA0	; 160
    3b74:	b1 e4       	ldi	r27, 0x41	; 65
    3b76:	8d 8b       	std	Y+21, r24	; 0x15
    3b78:	9e 8b       	std	Y+22, r25	; 0x16
    3b7a:	af 8b       	std	Y+23, r26	; 0x17
    3b7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b80:	7e 89       	ldd	r23, Y+22	; 0x16
    3b82:	8f 89       	ldd	r24, Y+23	; 0x17
    3b84:	98 8d       	ldd	r25, Y+24	; 0x18
    3b86:	2b ea       	ldi	r18, 0xAB	; 171
    3b88:	3a ea       	ldi	r19, 0xAA	; 170
    3b8a:	4a e2       	ldi	r20, 0x2A	; 42
    3b8c:	50 e4       	ldi	r21, 0x40	; 64
    3b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	89 8b       	std	Y+17, r24	; 0x11
    3b98:	9a 8b       	std	Y+18, r25	; 0x12
    3b9a:	ab 8b       	std	Y+19, r26	; 0x13
    3b9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3b9e:	69 89       	ldd	r22, Y+17	; 0x11
    3ba0:	7a 89       	ldd	r23, Y+18	; 0x12
    3ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e8       	ldi	r20, 0x80	; 128
    3bac:	5f e3       	ldi	r21, 0x3F	; 63
    3bae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb2:	88 23       	and	r24, r24
    3bb4:	1c f4       	brge	.+6      	; 0x3bbc <main+0x2f06>
		__ticks = 1;
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	88 8b       	std	Y+16, r24	; 0x10
    3bba:	91 c0       	rjmp	.+290    	; 0x3cde <main+0x3028>
	else if (__tmp > 255)
    3bbc:	69 89       	ldd	r22, Y+17	; 0x11
    3bbe:	7a 89       	ldd	r23, Y+18	; 0x12
    3bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	4f e7       	ldi	r20, 0x7F	; 127
    3bca:	53 e4       	ldi	r21, 0x43	; 67
    3bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd0:	18 16       	cp	r1, r24
    3bd2:	0c f0       	brlt	.+2      	; 0x3bd6 <main+0x2f20>
    3bd4:	7b c0       	rjmp	.+246    	; 0x3ccc <main+0x3016>
	{
		_delay_ms(__us / 1000.0);
    3bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bda:	8f 89       	ldd	r24, Y+23	; 0x17
    3bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	4a e7       	ldi	r20, 0x7A	; 122
    3be4:	54 e4       	ldi	r21, 0x44	; 68
    3be6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	8c 87       	std	Y+12, r24	; 0x0c
    3bf0:	9d 87       	std	Y+13, r25	; 0x0d
    3bf2:	ae 87       	std	Y+14, r26	; 0x0e
    3bf4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	6c 85       	ldd	r22, Y+12	; 0x0c
    3bf8:	7d 85       	ldd	r23, Y+13	; 0x0d
    3bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	4a ef       	ldi	r20, 0xFA	; 250
    3c04:	54 e4       	ldi	r21, 0x44	; 68
    3c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	88 87       	std	Y+8, r24	; 0x08
    3c10:	99 87       	std	Y+9, r25	; 0x09
    3c12:	aa 87       	std	Y+10, r26	; 0x0a
    3c14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3c16:	68 85       	ldd	r22, Y+8	; 0x08
    3c18:	79 85       	ldd	r23, Y+9	; 0x09
    3c1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e8       	ldi	r20, 0x80	; 128
    3c24:	5f e3       	ldi	r21, 0x3F	; 63
    3c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c2a:	88 23       	and	r24, r24
    3c2c:	2c f4       	brge	.+10     	; 0x3c38 <main+0x2f82>
		__ticks = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9f 83       	std	Y+7, r25	; 0x07
    3c34:	8e 83       	std	Y+6, r24	; 0x06
    3c36:	3f c0       	rjmp	.+126    	; 0x3cb6 <main+0x3000>
	else if (__tmp > 65535)
    3c38:	68 85       	ldd	r22, Y+8	; 0x08
    3c3a:	79 85       	ldd	r23, Y+9	; 0x09
    3c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	4c f5       	brge	.+82     	; 0x3ca2 <main+0x2fec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c52:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c54:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c56:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	51 e4       	ldi	r21, 0x41	; 65
    3c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	9f 83       	std	Y+7, r25	; 0x07
    3c76:	8e 83       	std	Y+6, r24	; 0x06
    3c78:	0f c0       	rjmp	.+30     	; 0x3c98 <main+0x2fe2>
    3c7a:	88 ec       	ldi	r24, 0xC8	; 200
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	9d 83       	std	Y+5, r25	; 0x05
    3c80:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c82:	8c 81       	ldd	r24, Y+4	; 0x04
    3c84:	9d 81       	ldd	r25, Y+5	; 0x05
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <main+0x2fd0>
    3c8a:	9d 83       	std	Y+5, r25	; 0x05
    3c8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c90:	9f 81       	ldd	r25, Y+7	; 0x07
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	9f 83       	std	Y+7, r25	; 0x07
    3c96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c98:	8e 81       	ldd	r24, Y+6	; 0x06
    3c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c9c:	00 97       	sbiw	r24, 0x00	; 0
    3c9e:	69 f7       	brne	.-38     	; 0x3c7a <main+0x2fc4>
    3ca0:	24 c0       	rjmp	.+72     	; 0x3cea <main+0x3034>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca2:	68 85       	ldd	r22, Y+8	; 0x08
    3ca4:	79 85       	ldd	r23, Y+9	; 0x09
    3ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9f 83       	std	Y+7, r25	; 0x07
    3cb4:	8e 83       	std	Y+6, r24	; 0x06
    3cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    3cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    3cba:	9b 83       	std	Y+3, r25	; 0x03
    3cbc:	8a 83       	std	Y+2, r24	; 0x02
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <main+0x300c>
    3cc6:	9b 83       	std	Y+3, r25	; 0x03
    3cc8:	8a 83       	std	Y+2, r24	; 0x02
    3cca:	0f c0       	rjmp	.+30     	; 0x3cea <main+0x3034>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ccc:	69 89       	ldd	r22, Y+17	; 0x11
    3cce:	7a 89       	ldd	r23, Y+18	; 0x12
    3cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	88 8b       	std	Y+16, r24	; 0x10
    3cde:	88 89       	ldd	r24, Y+16	; 0x10
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	8a 95       	dec	r24
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <main+0x302e>
    3ce8:	89 83       	std	Y+1, r24	; 0x01
							UART_sendByte(CHECK); /* */

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    3cea:	de 01       	movw	r26, r28
    3cec:	a6 55       	subi	r26, 0x56	; 86
    3cee:	be 4f       	sbci	r27, 0xFE	; 254
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	e6 55       	subi	r30, 0x56	; 86
    3cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf6:	80 81       	ld	r24, Z
    3cf8:	8f 5f       	subi	r24, 0xFF	; 255
    3cfa:	8c 93       	st	X, r24
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e6 55       	subi	r30, 0x56	; 86
    3d00:	fe 4f       	sbci	r31, 0xFE	; 254
    3d02:	80 81       	ld	r24, Z
    3d04:	85 30       	cpi	r24, 0x05	; 5
    3d06:	08 f4       	brcc	.+2      	; 0x3d0a <main+0x3054>
    3d08:	23 cf       	rjmp	.-442    	; 0x3b50 <main+0x2e9a>
								UART_sendByte(pass1[i]);

								_delay_us(20);
							}

							status = UART_recieveByte();
    3d0a:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    3d0e:	fe 01       	movw	r30, r28
    3d10:	e7 55       	subi	r30, 0x57	; 87
    3d12:	fe 4f       	sbci	r31, 0xFE	; 254
    3d14:	80 83       	st	Z, r24

						}while((count != 2) && (status == ERROR));
    3d16:	fe 01       	movw	r30, r28
    3d18:	e9 55       	subi	r30, 0x59	; 89
    3d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1c:	80 81       	ld	r24, Z
    3d1e:	82 30       	cpi	r24, 0x02	; 2
    3d20:	39 f0       	breq	.+14     	; 0x3d30 <main+0x307a>
    3d22:	fe 01       	movw	r30, r28
    3d24:	e7 55       	subi	r30, 0x57	; 87
    3d26:	fe 4f       	sbci	r31, 0xFE	; 254
    3d28:	80 81       	ld	r24, Z
    3d2a:	88 23       	and	r24, r24
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <main+0x307a>
    3d2e:	d9 cc       	rjmp	.-1614   	; 0x36e2 <main+0x2a2c>

						if((count == 2) && (status == ERROR))
    3d30:	fe 01       	movw	r30, r28
    3d32:	e9 55       	subi	r30, 0x59	; 89
    3d34:	fe 4f       	sbci	r31, 0xFE	; 254
    3d36:	80 81       	ld	r24, Z
    3d38:	82 30       	cpi	r24, 0x02	; 2
    3d3a:	09 f0       	breq	.+2      	; 0x3d3e <main+0x3088>
    3d3c:	bf cc       	rjmp	.-1666   	; 0x36bc <main+0x2a06>
    3d3e:	fe 01       	movw	r30, r28
    3d40:	e7 55       	subi	r30, 0x57	; 87
    3d42:	fe 4f       	sbci	r31, 0xFE	; 254
    3d44:	80 81       	ld	r24, Z
    3d46:	88 23       	and	r24, r24
    3d48:	09 f0       	breq	.+2      	; 0x3d4c <main+0x3096>
    3d4a:	b8 cc       	rjmp	.-1680   	; 0x36bc <main+0x2a06>
						{
							UART_sendByte(BUZZER);
    3d4c:	84 e1       	ldi	r24, 0x14	; 20
    3d4e:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
							LCD_clearScreen();
    3d52:	0e 94 a8 28 	call	0x5150	; 0x5150 <LCD_clearScreen>
							LCD_displayString("System Locked");
    3d56:	84 ee       	ldi	r24, 0xE4	; 228
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
							Timer1_init(&t_configure); /* Start Timer */
    3d5e:	ce 01       	movw	r24, r28
    3d60:	83 54       	subi	r24, 0x43	; 67
    3d62:	9e 4f       	sbci	r25, 0xFE	; 254
    3d64:	0e 94 b2 28 	call	0x5164	; 0x5164 <Timer1_init>
							while(g_count != 60); /* Waiting For 60 Seconds */
    3d68:	80 91 08 01 	lds	r24, 0x0108
    3d6c:	8c 33       	cpi	r24, 0x3C	; 60
    3d6e:	e1 f7       	brne	.-8      	; 0x3d68 <main+0x30b2>
							Timer1_deInit();
    3d70:	0e 94 12 29 	call	0x5224	; 0x5224 <Timer1_deInit>
							g_count = 0 ;
    3d74:	10 92 08 01 	sts	0x0108, r1
    3d78:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>

00003d7c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    3d7c:	df 93       	push	r29
    3d7e:	cf 93       	push	r28
    3d80:	00 d0       	rcall	.+0      	; 0x3d82 <GPIO_setupPinDirection+0x6>
    3d82:	00 d0       	rcall	.+0      	; 0x3d84 <GPIO_setupPinDirection+0x8>
    3d84:	0f 92       	push	r0
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	89 83       	std	Y+1, r24	; 0x01
    3d8c:	6a 83       	std	Y+2, r22	; 0x02
    3d8e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	88 30       	cpi	r24, 0x08	; 8
    3d94:	08 f0       	brcs	.+2      	; 0x3d98 <GPIO_setupPinDirection+0x1c>
    3d96:	d5 c0       	rjmp	.+426    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	84 30       	cpi	r24, 0x04	; 4
    3d9c:	08 f0       	brcs	.+2      	; 0x3da0 <GPIO_setupPinDirection+0x24>
    3d9e:	d1 c0       	rjmp	.+418    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	3d 83       	std	Y+5, r19	; 0x05
    3da8:	2c 83       	std	Y+4, r18	; 0x04
    3daa:	8c 81       	ldd	r24, Y+4	; 0x04
    3dac:	9d 81       	ldd	r25, Y+5	; 0x05
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	91 05       	cpc	r25, r1
    3db2:	09 f4       	brne	.+2      	; 0x3db6 <GPIO_setupPinDirection+0x3a>
    3db4:	43 c0       	rjmp	.+134    	; 0x3e3c <GPIO_setupPinDirection+0xc0>
    3db6:	2c 81       	ldd	r18, Y+4	; 0x04
    3db8:	3d 81       	ldd	r19, Y+5	; 0x05
    3dba:	22 30       	cpi	r18, 0x02	; 2
    3dbc:	31 05       	cpc	r19, r1
    3dbe:	2c f4       	brge	.+10     	; 0x3dca <GPIO_setupPinDirection+0x4e>
    3dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc4:	00 97       	sbiw	r24, 0x00	; 0
    3dc6:	71 f0       	breq	.+28     	; 0x3de4 <GPIO_setupPinDirection+0x68>
    3dc8:	bc c0       	rjmp	.+376    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
    3dca:	2c 81       	ldd	r18, Y+4	; 0x04
    3dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    3dce:	22 30       	cpi	r18, 0x02	; 2
    3dd0:	31 05       	cpc	r19, r1
    3dd2:	09 f4       	brne	.+2      	; 0x3dd6 <GPIO_setupPinDirection+0x5a>
    3dd4:	5f c0       	rjmp	.+190    	; 0x3e94 <GPIO_setupPinDirection+0x118>
    3dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dda:	83 30       	cpi	r24, 0x03	; 3
    3ddc:	91 05       	cpc	r25, r1
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <GPIO_setupPinDirection+0x66>
    3de0:	85 c0       	rjmp	.+266    	; 0x3eec <GPIO_setupPinDirection+0x170>
    3de2:	af c0       	rjmp	.+350    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	81 30       	cpi	r24, 0x01	; 1
    3de8:	a1 f4       	brne	.+40     	; 0x3e12 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    3dea:	aa e3       	ldi	r26, 0x3A	; 58
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	ea e3       	ldi	r30, 0x3A	; 58
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	48 2f       	mov	r20, r24
    3df6:	8a 81       	ldd	r24, Y+2	; 0x02
    3df8:	28 2f       	mov	r18, r24
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	02 2e       	mov	r0, r18
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <GPIO_setupPinDirection+0x8c>
    3e04:	88 0f       	add	r24, r24
    3e06:	99 1f       	adc	r25, r25
    3e08:	0a 94       	dec	r0
    3e0a:	e2 f7       	brpl	.-8      	; 0x3e04 <GPIO_setupPinDirection+0x88>
    3e0c:	84 2b       	or	r24, r20
    3e0e:	8c 93       	st	X, r24
    3e10:	98 c0       	rjmp	.+304    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3e12:	aa e3       	ldi	r26, 0x3A	; 58
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	ea e3       	ldi	r30, 0x3A	; 58
    3e18:	f0 e0       	ldi	r31, 0x00	; 0
    3e1a:	80 81       	ld	r24, Z
    3e1c:	48 2f       	mov	r20, r24
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	28 2f       	mov	r18, r24
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	02 2e       	mov	r0, r18
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <GPIO_setupPinDirection+0xb4>
    3e2c:	88 0f       	add	r24, r24
    3e2e:	99 1f       	adc	r25, r25
    3e30:	0a 94       	dec	r0
    3e32:	e2 f7       	brpl	.-8      	; 0x3e2c <GPIO_setupPinDirection+0xb0>
    3e34:	80 95       	com	r24
    3e36:	84 23       	and	r24, r20
    3e38:	8c 93       	st	X, r24
    3e3a:	83 c0       	rjmp	.+262    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	81 30       	cpi	r24, 0x01	; 1
    3e40:	a1 f4       	brne	.+40     	; 0x3e6a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3e42:	a7 e3       	ldi	r26, 0x37	; 55
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	e7 e3       	ldi	r30, 0x37	; 55
    3e48:	f0 e0       	ldi	r31, 0x00	; 0
    3e4a:	80 81       	ld	r24, Z
    3e4c:	48 2f       	mov	r20, r24
    3e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e50:	28 2f       	mov	r18, r24
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	02 2e       	mov	r0, r18
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <GPIO_setupPinDirection+0xe4>
    3e5c:	88 0f       	add	r24, r24
    3e5e:	99 1f       	adc	r25, r25
    3e60:	0a 94       	dec	r0
    3e62:	e2 f7       	brpl	.-8      	; 0x3e5c <GPIO_setupPinDirection+0xe0>
    3e64:	84 2b       	or	r24, r20
    3e66:	8c 93       	st	X, r24
    3e68:	6c c0       	rjmp	.+216    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3e6a:	a7 e3       	ldi	r26, 0x37	; 55
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	e7 e3       	ldi	r30, 0x37	; 55
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	80 81       	ld	r24, Z
    3e74:	48 2f       	mov	r20, r24
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	28 2f       	mov	r18, r24
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	02 2e       	mov	r0, r18
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <GPIO_setupPinDirection+0x10c>
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	0a 94       	dec	r0
    3e8a:	e2 f7       	brpl	.-8      	; 0x3e84 <GPIO_setupPinDirection+0x108>
    3e8c:	80 95       	com	r24
    3e8e:	84 23       	and	r24, r20
    3e90:	8c 93       	st	X, r24
    3e92:	57 c0       	rjmp	.+174    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3e94:	8b 81       	ldd	r24, Y+3	; 0x03
    3e96:	81 30       	cpi	r24, 0x01	; 1
    3e98:	a1 f4       	brne	.+40     	; 0x3ec2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    3e9a:	a4 e3       	ldi	r26, 0x34	; 52
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	e4 e3       	ldi	r30, 0x34	; 52
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	48 2f       	mov	r20, r24
    3ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	02 2e       	mov	r0, r18
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <GPIO_setupPinDirection+0x13c>
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	0a 94       	dec	r0
    3eba:	e2 f7       	brpl	.-8      	; 0x3eb4 <GPIO_setupPinDirection+0x138>
    3ebc:	84 2b       	or	r24, r20
    3ebe:	8c 93       	st	X, r24
    3ec0:	40 c0       	rjmp	.+128    	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    3ec2:	a4 e3       	ldi	r26, 0x34	; 52
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	e4 e3       	ldi	r30, 0x34	; 52
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
    3ecc:	48 2f       	mov	r20, r24
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	28 2f       	mov	r18, r24
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	02 2e       	mov	r0, r18
    3eda:	02 c0       	rjmp	.+4      	; 0x3ee0 <GPIO_setupPinDirection+0x164>
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	0a 94       	dec	r0
    3ee2:	e2 f7       	brpl	.-8      	; 0x3edc <GPIO_setupPinDirection+0x160>
    3ee4:	80 95       	com	r24
    3ee6:	84 23       	and	r24, r20
    3ee8:	8c 93       	st	X, r24
    3eea:	2b c0       	rjmp	.+86     	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    3eec:	8b 81       	ldd	r24, Y+3	; 0x03
    3eee:	81 30       	cpi	r24, 0x01	; 1
    3ef0:	a1 f4       	brne	.+40     	; 0x3f1a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3ef2:	a1 e3       	ldi	r26, 0x31	; 49
    3ef4:	b0 e0       	ldi	r27, 0x00	; 0
    3ef6:	e1 e3       	ldi	r30, 0x31	; 49
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	80 81       	ld	r24, Z
    3efc:	48 2f       	mov	r20, r24
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	28 2f       	mov	r18, r24
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	02 2e       	mov	r0, r18
    3f0a:	02 c0       	rjmp	.+4      	; 0x3f10 <GPIO_setupPinDirection+0x194>
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	0a 94       	dec	r0
    3f12:	e2 f7       	brpl	.-8      	; 0x3f0c <GPIO_setupPinDirection+0x190>
    3f14:	84 2b       	or	r24, r20
    3f16:	8c 93       	st	X, r24
    3f18:	14 c0       	rjmp	.+40     	; 0x3f42 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    3f1a:	a1 e3       	ldi	r26, 0x31	; 49
    3f1c:	b0 e0       	ldi	r27, 0x00	; 0
    3f1e:	e1 e3       	ldi	r30, 0x31	; 49
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	80 81       	ld	r24, Z
    3f24:	48 2f       	mov	r20, r24
    3f26:	8a 81       	ldd	r24, Y+2	; 0x02
    3f28:	28 2f       	mov	r18, r24
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	02 2e       	mov	r0, r18
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <GPIO_setupPinDirection+0x1bc>
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	0a 94       	dec	r0
    3f3a:	e2 f7       	brpl	.-8      	; 0x3f34 <GPIO_setupPinDirection+0x1b8>
    3f3c:	80 95       	com	r24
    3f3e:	84 23       	and	r24, r20
    3f40:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	cf 91       	pop	r28
    3f4e:	df 91       	pop	r29
    3f50:	08 95       	ret

00003f52 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3f52:	df 93       	push	r29
    3f54:	cf 93       	push	r28
    3f56:	00 d0       	rcall	.+0      	; 0x3f58 <GPIO_writePin+0x6>
    3f58:	00 d0       	rcall	.+0      	; 0x3f5a <GPIO_writePin+0x8>
    3f5a:	0f 92       	push	r0
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	6a 83       	std	Y+2, r22	; 0x02
    3f64:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3f66:	8a 81       	ldd	r24, Y+2	; 0x02
    3f68:	88 30       	cpi	r24, 0x08	; 8
    3f6a:	08 f0       	brcs	.+2      	; 0x3f6e <GPIO_writePin+0x1c>
    3f6c:	d5 c0       	rjmp	.+426    	; 0x4118 <GPIO_writePin+0x1c6>
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	84 30       	cpi	r24, 0x04	; 4
    3f72:	08 f0       	brcs	.+2      	; 0x3f76 <GPIO_writePin+0x24>
    3f74:	d1 c0       	rjmp	.+418    	; 0x4118 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    3f76:	89 81       	ldd	r24, Y+1	; 0x01
    3f78:	28 2f       	mov	r18, r24
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	3d 83       	std	Y+5, r19	; 0x05
    3f7e:	2c 83       	std	Y+4, r18	; 0x04
    3f80:	8c 81       	ldd	r24, Y+4	; 0x04
    3f82:	9d 81       	ldd	r25, Y+5	; 0x05
    3f84:	81 30       	cpi	r24, 0x01	; 1
    3f86:	91 05       	cpc	r25, r1
    3f88:	09 f4       	brne	.+2      	; 0x3f8c <GPIO_writePin+0x3a>
    3f8a:	43 c0       	rjmp	.+134    	; 0x4012 <GPIO_writePin+0xc0>
    3f8c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f8e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f90:	22 30       	cpi	r18, 0x02	; 2
    3f92:	31 05       	cpc	r19, r1
    3f94:	2c f4       	brge	.+10     	; 0x3fa0 <GPIO_writePin+0x4e>
    3f96:	8c 81       	ldd	r24, Y+4	; 0x04
    3f98:	9d 81       	ldd	r25, Y+5	; 0x05
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	71 f0       	breq	.+28     	; 0x3fba <GPIO_writePin+0x68>
    3f9e:	bc c0       	rjmp	.+376    	; 0x4118 <GPIO_writePin+0x1c6>
    3fa0:	2c 81       	ldd	r18, Y+4	; 0x04
    3fa2:	3d 81       	ldd	r19, Y+5	; 0x05
    3fa4:	22 30       	cpi	r18, 0x02	; 2
    3fa6:	31 05       	cpc	r19, r1
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <GPIO_writePin+0x5a>
    3faa:	5f c0       	rjmp	.+190    	; 0x406a <GPIO_writePin+0x118>
    3fac:	8c 81       	ldd	r24, Y+4	; 0x04
    3fae:	9d 81       	ldd	r25, Y+5	; 0x05
    3fb0:	83 30       	cpi	r24, 0x03	; 3
    3fb2:	91 05       	cpc	r25, r1
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <GPIO_writePin+0x66>
    3fb6:	85 c0       	rjmp	.+266    	; 0x40c2 <GPIO_writePin+0x170>
    3fb8:	af c0       	rjmp	.+350    	; 0x4118 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	81 30       	cpi	r24, 0x01	; 1
    3fbe:	a1 f4       	brne	.+40     	; 0x3fe8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    3fc0:	ab e3       	ldi	r26, 0x3B	; 59
    3fc2:	b0 e0       	ldi	r27, 0x00	; 0
    3fc4:	eb e3       	ldi	r30, 0x3B	; 59
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	80 81       	ld	r24, Z
    3fca:	48 2f       	mov	r20, r24
    3fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fce:	28 2f       	mov	r18, r24
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	02 2e       	mov	r0, r18
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <GPIO_writePin+0x8c>
    3fda:	88 0f       	add	r24, r24
    3fdc:	99 1f       	adc	r25, r25
    3fde:	0a 94       	dec	r0
    3fe0:	e2 f7       	brpl	.-8      	; 0x3fda <GPIO_writePin+0x88>
    3fe2:	84 2b       	or	r24, r20
    3fe4:	8c 93       	st	X, r24
    3fe6:	98 c0       	rjmp	.+304    	; 0x4118 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    3fe8:	ab e3       	ldi	r26, 0x3B	; 59
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	eb e3       	ldi	r30, 0x3B	; 59
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	48 2f       	mov	r20, r24
    3ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff6:	28 2f       	mov	r18, r24
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	02 2e       	mov	r0, r18
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <GPIO_writePin+0xb4>
    4002:	88 0f       	add	r24, r24
    4004:	99 1f       	adc	r25, r25
    4006:	0a 94       	dec	r0
    4008:	e2 f7       	brpl	.-8      	; 0x4002 <GPIO_writePin+0xb0>
    400a:	80 95       	com	r24
    400c:	84 23       	and	r24, r20
    400e:	8c 93       	st	X, r24
    4010:	83 c0       	rjmp	.+262    	; 0x4118 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	81 30       	cpi	r24, 0x01	; 1
    4016:	a1 f4       	brne	.+40     	; 0x4040 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    4018:	a8 e3       	ldi	r26, 0x38	; 56
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	e8 e3       	ldi	r30, 0x38	; 56
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	48 2f       	mov	r20, r24
    4024:	8a 81       	ldd	r24, Y+2	; 0x02
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	02 2e       	mov	r0, r18
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <GPIO_writePin+0xe4>
    4032:	88 0f       	add	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	0a 94       	dec	r0
    4038:	e2 f7       	brpl	.-8      	; 0x4032 <GPIO_writePin+0xe0>
    403a:	84 2b       	or	r24, r20
    403c:	8c 93       	st	X, r24
    403e:	6c c0       	rjmp	.+216    	; 0x4118 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    4040:	a8 e3       	ldi	r26, 0x38	; 56
    4042:	b0 e0       	ldi	r27, 0x00	; 0
    4044:	e8 e3       	ldi	r30, 0x38	; 56
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	80 81       	ld	r24, Z
    404a:	48 2f       	mov	r20, r24
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
    404e:	28 2f       	mov	r18, r24
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	02 2e       	mov	r0, r18
    4058:	02 c0       	rjmp	.+4      	; 0x405e <GPIO_writePin+0x10c>
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	0a 94       	dec	r0
    4060:	e2 f7       	brpl	.-8      	; 0x405a <GPIO_writePin+0x108>
    4062:	80 95       	com	r24
    4064:	84 23       	and	r24, r20
    4066:	8c 93       	st	X, r24
    4068:	57 c0       	rjmp	.+174    	; 0x4118 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    406a:	8b 81       	ldd	r24, Y+3	; 0x03
    406c:	81 30       	cpi	r24, 0x01	; 1
    406e:	a1 f4       	brne	.+40     	; 0x4098 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    4070:	a5 e3       	ldi	r26, 0x35	; 53
    4072:	b0 e0       	ldi	r27, 0x00	; 0
    4074:	e5 e3       	ldi	r30, 0x35	; 53
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	80 81       	ld	r24, Z
    407a:	48 2f       	mov	r20, r24
    407c:	8a 81       	ldd	r24, Y+2	; 0x02
    407e:	28 2f       	mov	r18, r24
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	81 e0       	ldi	r24, 0x01	; 1
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	02 2e       	mov	r0, r18
    4088:	02 c0       	rjmp	.+4      	; 0x408e <GPIO_writePin+0x13c>
    408a:	88 0f       	add	r24, r24
    408c:	99 1f       	adc	r25, r25
    408e:	0a 94       	dec	r0
    4090:	e2 f7       	brpl	.-8      	; 0x408a <GPIO_writePin+0x138>
    4092:	84 2b       	or	r24, r20
    4094:	8c 93       	st	X, r24
    4096:	40 c0       	rjmp	.+128    	; 0x4118 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    4098:	a5 e3       	ldi	r26, 0x35	; 53
    409a:	b0 e0       	ldi	r27, 0x00	; 0
    409c:	e5 e3       	ldi	r30, 0x35	; 53
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	80 81       	ld	r24, Z
    40a2:	48 2f       	mov	r20, r24
    40a4:	8a 81       	ldd	r24, Y+2	; 0x02
    40a6:	28 2f       	mov	r18, r24
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	02 2e       	mov	r0, r18
    40b0:	02 c0       	rjmp	.+4      	; 0x40b6 <GPIO_writePin+0x164>
    40b2:	88 0f       	add	r24, r24
    40b4:	99 1f       	adc	r25, r25
    40b6:	0a 94       	dec	r0
    40b8:	e2 f7       	brpl	.-8      	; 0x40b2 <GPIO_writePin+0x160>
    40ba:	80 95       	com	r24
    40bc:	84 23       	and	r24, r20
    40be:	8c 93       	st	X, r24
    40c0:	2b c0       	rjmp	.+86     	; 0x4118 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    40c2:	8b 81       	ldd	r24, Y+3	; 0x03
    40c4:	81 30       	cpi	r24, 0x01	; 1
    40c6:	a1 f4       	brne	.+40     	; 0x40f0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    40c8:	a2 e3       	ldi	r26, 0x32	; 50
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	e2 e3       	ldi	r30, 0x32	; 50
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	80 81       	ld	r24, Z
    40d2:	48 2f       	mov	r20, r24
    40d4:	8a 81       	ldd	r24, Y+2	; 0x02
    40d6:	28 2f       	mov	r18, r24
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	02 2e       	mov	r0, r18
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <GPIO_writePin+0x194>
    40e2:	88 0f       	add	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	0a 94       	dec	r0
    40e8:	e2 f7       	brpl	.-8      	; 0x40e2 <GPIO_writePin+0x190>
    40ea:	84 2b       	or	r24, r20
    40ec:	8c 93       	st	X, r24
    40ee:	14 c0       	rjmp	.+40     	; 0x4118 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    40f0:	a2 e3       	ldi	r26, 0x32	; 50
    40f2:	b0 e0       	ldi	r27, 0x00	; 0
    40f4:	e2 e3       	ldi	r30, 0x32	; 50
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	80 81       	ld	r24, Z
    40fa:	48 2f       	mov	r20, r24
    40fc:	8a 81       	ldd	r24, Y+2	; 0x02
    40fe:	28 2f       	mov	r18, r24
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	02 2e       	mov	r0, r18
    4108:	02 c0       	rjmp	.+4      	; 0x410e <GPIO_writePin+0x1bc>
    410a:	88 0f       	add	r24, r24
    410c:	99 1f       	adc	r25, r25
    410e:	0a 94       	dec	r0
    4110:	e2 f7       	brpl	.-8      	; 0x410a <GPIO_writePin+0x1b8>
    4112:	80 95       	com	r24
    4114:	84 23       	and	r24, r20
    4116:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    4128:	df 93       	push	r29
    412a:	cf 93       	push	r28
    412c:	00 d0       	rcall	.+0      	; 0x412e <GPIO_readPin+0x6>
    412e:	00 d0       	rcall	.+0      	; 0x4130 <GPIO_readPin+0x8>
    4130:	0f 92       	push	r0
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	8a 83       	std	Y+2, r24	; 0x02
    4138:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    413a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    413c:	8b 81       	ldd	r24, Y+3	; 0x03
    413e:	88 30       	cpi	r24, 0x08	; 8
    4140:	08 f0       	brcs	.+2      	; 0x4144 <GPIO_readPin+0x1c>
    4142:	84 c0       	rjmp	.+264    	; 0x424c <GPIO_readPin+0x124>
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	84 30       	cpi	r24, 0x04	; 4
    4148:	08 f0       	brcs	.+2      	; 0x414c <GPIO_readPin+0x24>
    414a:	80 c0       	rjmp	.+256    	; 0x424c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    414c:	8a 81       	ldd	r24, Y+2	; 0x02
    414e:	28 2f       	mov	r18, r24
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	3d 83       	std	Y+5, r19	; 0x05
    4154:	2c 83       	std	Y+4, r18	; 0x04
    4156:	4c 81       	ldd	r20, Y+4	; 0x04
    4158:	5d 81       	ldd	r21, Y+5	; 0x05
    415a:	41 30       	cpi	r20, 0x01	; 1
    415c:	51 05       	cpc	r21, r1
    415e:	79 f1       	breq	.+94     	; 0x41be <GPIO_readPin+0x96>
    4160:	8c 81       	ldd	r24, Y+4	; 0x04
    4162:	9d 81       	ldd	r25, Y+5	; 0x05
    4164:	82 30       	cpi	r24, 0x02	; 2
    4166:	91 05       	cpc	r25, r1
    4168:	34 f4       	brge	.+12     	; 0x4176 <GPIO_readPin+0x4e>
    416a:	2c 81       	ldd	r18, Y+4	; 0x04
    416c:	3d 81       	ldd	r19, Y+5	; 0x05
    416e:	21 15       	cp	r18, r1
    4170:	31 05       	cpc	r19, r1
    4172:	69 f0       	breq	.+26     	; 0x418e <GPIO_readPin+0x66>
    4174:	6b c0       	rjmp	.+214    	; 0x424c <GPIO_readPin+0x124>
    4176:	4c 81       	ldd	r20, Y+4	; 0x04
    4178:	5d 81       	ldd	r21, Y+5	; 0x05
    417a:	42 30       	cpi	r20, 0x02	; 2
    417c:	51 05       	cpc	r21, r1
    417e:	b9 f1       	breq	.+110    	; 0x41ee <GPIO_readPin+0xc6>
    4180:	8c 81       	ldd	r24, Y+4	; 0x04
    4182:	9d 81       	ldd	r25, Y+5	; 0x05
    4184:	83 30       	cpi	r24, 0x03	; 3
    4186:	91 05       	cpc	r25, r1
    4188:	09 f4       	brne	.+2      	; 0x418c <GPIO_readPin+0x64>
    418a:	49 c0       	rjmp	.+146    	; 0x421e <GPIO_readPin+0xf6>
    418c:	5f c0       	rjmp	.+190    	; 0x424c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    418e:	e9 e3       	ldi	r30, 0x39	; 57
    4190:	f0 e0       	ldi	r31, 0x00	; 0
    4192:	80 81       	ld	r24, Z
    4194:	28 2f       	mov	r18, r24
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	8b 81       	ldd	r24, Y+3	; 0x03
    419a:	88 2f       	mov	r24, r24
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	a9 01       	movw	r20, r18
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <GPIO_readPin+0x7e>
    41a2:	55 95       	asr	r21
    41a4:	47 95       	ror	r20
    41a6:	8a 95       	dec	r24
    41a8:	e2 f7       	brpl	.-8      	; 0x41a2 <GPIO_readPin+0x7a>
    41aa:	ca 01       	movw	r24, r20
    41ac:	81 70       	andi	r24, 0x01	; 1
    41ae:	90 70       	andi	r25, 0x00	; 0
    41b0:	88 23       	and	r24, r24
    41b2:	19 f0       	breq	.+6      	; 0x41ba <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	89 83       	std	Y+1, r24	; 0x01
    41b8:	49 c0       	rjmp	.+146    	; 0x424c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    41ba:	19 82       	std	Y+1, r1	; 0x01
    41bc:	47 c0       	rjmp	.+142    	; 0x424c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    41be:	e6 e3       	ldi	r30, 0x36	; 54
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ca:	88 2f       	mov	r24, r24
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	a9 01       	movw	r20, r18
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <GPIO_readPin+0xae>
    41d2:	55 95       	asr	r21
    41d4:	47 95       	ror	r20
    41d6:	8a 95       	dec	r24
    41d8:	e2 f7       	brpl	.-8      	; 0x41d2 <GPIO_readPin+0xaa>
    41da:	ca 01       	movw	r24, r20
    41dc:	81 70       	andi	r24, 0x01	; 1
    41de:	90 70       	andi	r25, 0x00	; 0
    41e0:	88 23       	and	r24, r24
    41e2:	19 f0       	breq	.+6      	; 0x41ea <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	89 83       	std	Y+1, r24	; 0x01
    41e8:	31 c0       	rjmp	.+98     	; 0x424c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    41ea:	19 82       	std	Y+1, r1	; 0x01
    41ec:	2f c0       	rjmp	.+94     	; 0x424c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    41ee:	e3 e3       	ldi	r30, 0x33	; 51
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	80 81       	ld	r24, Z
    41f4:	28 2f       	mov	r18, r24
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	8b 81       	ldd	r24, Y+3	; 0x03
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	a9 01       	movw	r20, r18
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <GPIO_readPin+0xde>
    4202:	55 95       	asr	r21
    4204:	47 95       	ror	r20
    4206:	8a 95       	dec	r24
    4208:	e2 f7       	brpl	.-8      	; 0x4202 <GPIO_readPin+0xda>
    420a:	ca 01       	movw	r24, r20
    420c:	81 70       	andi	r24, 0x01	; 1
    420e:	90 70       	andi	r25, 0x00	; 0
    4210:	88 23       	and	r24, r24
    4212:	19 f0       	breq	.+6      	; 0x421a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	89 83       	std	Y+1, r24	; 0x01
    4218:	19 c0       	rjmp	.+50     	; 0x424c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    421a:	19 82       	std	Y+1, r1	; 0x01
    421c:	17 c0       	rjmp	.+46     	; 0x424c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    421e:	e0 e3       	ldi	r30, 0x30	; 48
    4220:	f0 e0       	ldi	r31, 0x00	; 0
    4222:	80 81       	ld	r24, Z
    4224:	28 2f       	mov	r18, r24
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	8b 81       	ldd	r24, Y+3	; 0x03
    422a:	88 2f       	mov	r24, r24
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	a9 01       	movw	r20, r18
    4230:	02 c0       	rjmp	.+4      	; 0x4236 <GPIO_readPin+0x10e>
    4232:	55 95       	asr	r21
    4234:	47 95       	ror	r20
    4236:	8a 95       	dec	r24
    4238:	e2 f7       	brpl	.-8      	; 0x4232 <GPIO_readPin+0x10a>
    423a:	ca 01       	movw	r24, r20
    423c:	81 70       	andi	r24, 0x01	; 1
    423e:	90 70       	andi	r25, 0x00	; 0
    4240:	88 23       	and	r24, r24
    4242:	19 f0       	breq	.+6      	; 0x424a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	01 c0       	rjmp	.+2      	; 0x424c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    424a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    424c:	89 81       	ldd	r24, Y+1	; 0x01
}
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	cf 91       	pop	r28
    425a:	df 91       	pop	r29
    425c:	08 95       	ret

0000425e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    425e:	df 93       	push	r29
    4260:	cf 93       	push	r28
    4262:	00 d0       	rcall	.+0      	; 0x4264 <GPIO_setupPortDirection+0x6>
    4264:	00 d0       	rcall	.+0      	; 0x4266 <GPIO_setupPortDirection+0x8>
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	84 30       	cpi	r24, 0x04	; 4
    4272:	90 f5       	brcc	.+100    	; 0x42d8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	28 2f       	mov	r18, r24
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	3c 83       	std	Y+4, r19	; 0x04
    427c:	2b 83       	std	Y+3, r18	; 0x03
    427e:	8b 81       	ldd	r24, Y+3	; 0x03
    4280:	9c 81       	ldd	r25, Y+4	; 0x04
    4282:	81 30       	cpi	r24, 0x01	; 1
    4284:	91 05       	cpc	r25, r1
    4286:	d1 f0       	breq	.+52     	; 0x42bc <GPIO_setupPortDirection+0x5e>
    4288:	2b 81       	ldd	r18, Y+3	; 0x03
    428a:	3c 81       	ldd	r19, Y+4	; 0x04
    428c:	22 30       	cpi	r18, 0x02	; 2
    428e:	31 05       	cpc	r19, r1
    4290:	2c f4       	brge	.+10     	; 0x429c <GPIO_setupPortDirection+0x3e>
    4292:	8b 81       	ldd	r24, Y+3	; 0x03
    4294:	9c 81       	ldd	r25, Y+4	; 0x04
    4296:	00 97       	sbiw	r24, 0x00	; 0
    4298:	61 f0       	breq	.+24     	; 0x42b2 <GPIO_setupPortDirection+0x54>
    429a:	1e c0       	rjmp	.+60     	; 0x42d8 <GPIO_setupPortDirection+0x7a>
    429c:	2b 81       	ldd	r18, Y+3	; 0x03
    429e:	3c 81       	ldd	r19, Y+4	; 0x04
    42a0:	22 30       	cpi	r18, 0x02	; 2
    42a2:	31 05       	cpc	r19, r1
    42a4:	81 f0       	breq	.+32     	; 0x42c6 <GPIO_setupPortDirection+0x68>
    42a6:	8b 81       	ldd	r24, Y+3	; 0x03
    42a8:	9c 81       	ldd	r25, Y+4	; 0x04
    42aa:	83 30       	cpi	r24, 0x03	; 3
    42ac:	91 05       	cpc	r25, r1
    42ae:	81 f0       	breq	.+32     	; 0x42d0 <GPIO_setupPortDirection+0x72>
    42b0:	13 c0       	rjmp	.+38     	; 0x42d8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    42b2:	ea e3       	ldi	r30, 0x3A	; 58
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	8a 81       	ldd	r24, Y+2	; 0x02
    42b8:	80 83       	st	Z, r24
    42ba:	0e c0       	rjmp	.+28     	; 0x42d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    42bc:	e7 e3       	ldi	r30, 0x37	; 55
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	8a 81       	ldd	r24, Y+2	; 0x02
    42c2:	80 83       	st	Z, r24
    42c4:	09 c0       	rjmp	.+18     	; 0x42d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    42c6:	e4 e3       	ldi	r30, 0x34	; 52
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	8a 81       	ldd	r24, Y+2	; 0x02
    42cc:	80 83       	st	Z, r24
    42ce:	04 c0       	rjmp	.+8      	; 0x42d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    42d0:	e1 e3       	ldi	r30, 0x31	; 49
    42d2:	f0 e0       	ldi	r31, 0x00	; 0
    42d4:	8a 81       	ldd	r24, Y+2	; 0x02
    42d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	cf 91       	pop	r28
    42e2:	df 91       	pop	r29
    42e4:	08 95       	ret

000042e6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    42e6:	df 93       	push	r29
    42e8:	cf 93       	push	r28
    42ea:	00 d0       	rcall	.+0      	; 0x42ec <GPIO_writePort+0x6>
    42ec:	00 d0       	rcall	.+0      	; 0x42ee <GPIO_writePort+0x8>
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	89 83       	std	Y+1, r24	; 0x01
    42f4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	84 30       	cpi	r24, 0x04	; 4
    42fa:	90 f5       	brcc	.+100    	; 0x4360 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    42fc:	89 81       	ldd	r24, Y+1	; 0x01
    42fe:	28 2f       	mov	r18, r24
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	3c 83       	std	Y+4, r19	; 0x04
    4304:	2b 83       	std	Y+3, r18	; 0x03
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	9c 81       	ldd	r25, Y+4	; 0x04
    430a:	81 30       	cpi	r24, 0x01	; 1
    430c:	91 05       	cpc	r25, r1
    430e:	d1 f0       	breq	.+52     	; 0x4344 <GPIO_writePort+0x5e>
    4310:	2b 81       	ldd	r18, Y+3	; 0x03
    4312:	3c 81       	ldd	r19, Y+4	; 0x04
    4314:	22 30       	cpi	r18, 0x02	; 2
    4316:	31 05       	cpc	r19, r1
    4318:	2c f4       	brge	.+10     	; 0x4324 <GPIO_writePort+0x3e>
    431a:	8b 81       	ldd	r24, Y+3	; 0x03
    431c:	9c 81       	ldd	r25, Y+4	; 0x04
    431e:	00 97       	sbiw	r24, 0x00	; 0
    4320:	61 f0       	breq	.+24     	; 0x433a <GPIO_writePort+0x54>
    4322:	1e c0       	rjmp	.+60     	; 0x4360 <GPIO_writePort+0x7a>
    4324:	2b 81       	ldd	r18, Y+3	; 0x03
    4326:	3c 81       	ldd	r19, Y+4	; 0x04
    4328:	22 30       	cpi	r18, 0x02	; 2
    432a:	31 05       	cpc	r19, r1
    432c:	81 f0       	breq	.+32     	; 0x434e <GPIO_writePort+0x68>
    432e:	8b 81       	ldd	r24, Y+3	; 0x03
    4330:	9c 81       	ldd	r25, Y+4	; 0x04
    4332:	83 30       	cpi	r24, 0x03	; 3
    4334:	91 05       	cpc	r25, r1
    4336:	81 f0       	breq	.+32     	; 0x4358 <GPIO_writePort+0x72>
    4338:	13 c0       	rjmp	.+38     	; 0x4360 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    433a:	eb e3       	ldi	r30, 0x3B	; 59
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	8a 81       	ldd	r24, Y+2	; 0x02
    4340:	80 83       	st	Z, r24
    4342:	0e c0       	rjmp	.+28     	; 0x4360 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    4344:	e8 e3       	ldi	r30, 0x38	; 56
    4346:	f0 e0       	ldi	r31, 0x00	; 0
    4348:	8a 81       	ldd	r24, Y+2	; 0x02
    434a:	80 83       	st	Z, r24
    434c:	09 c0       	rjmp	.+18     	; 0x4360 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    434e:	e5 e3       	ldi	r30, 0x35	; 53
    4350:	f0 e0       	ldi	r31, 0x00	; 0
    4352:	8a 81       	ldd	r24, Y+2	; 0x02
    4354:	80 83       	st	Z, r24
    4356:	04 c0       	rjmp	.+8      	; 0x4360 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    4358:	e2 e3       	ldi	r30, 0x32	; 50
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	8a 81       	ldd	r24, Y+2	; 0x02
    435e:	80 83       	st	Z, r24
			break;
		}
	}
}
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	08 95       	ret

0000436e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    436e:	df 93       	push	r29
    4370:	cf 93       	push	r28
    4372:	00 d0       	rcall	.+0      	; 0x4374 <GPIO_readPort+0x6>
    4374:	00 d0       	rcall	.+0      	; 0x4376 <GPIO_readPort+0x8>
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    437c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    437e:	8a 81       	ldd	r24, Y+2	; 0x02
    4380:	84 30       	cpi	r24, 0x04	; 4
    4382:	90 f5       	brcc	.+100    	; 0x43e8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    4384:	8a 81       	ldd	r24, Y+2	; 0x02
    4386:	28 2f       	mov	r18, r24
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	3c 83       	std	Y+4, r19	; 0x04
    438c:	2b 83       	std	Y+3, r18	; 0x03
    438e:	8b 81       	ldd	r24, Y+3	; 0x03
    4390:	9c 81       	ldd	r25, Y+4	; 0x04
    4392:	81 30       	cpi	r24, 0x01	; 1
    4394:	91 05       	cpc	r25, r1
    4396:	d1 f0       	breq	.+52     	; 0x43cc <GPIO_readPort+0x5e>
    4398:	2b 81       	ldd	r18, Y+3	; 0x03
    439a:	3c 81       	ldd	r19, Y+4	; 0x04
    439c:	22 30       	cpi	r18, 0x02	; 2
    439e:	31 05       	cpc	r19, r1
    43a0:	2c f4       	brge	.+10     	; 0x43ac <GPIO_readPort+0x3e>
    43a2:	8b 81       	ldd	r24, Y+3	; 0x03
    43a4:	9c 81       	ldd	r25, Y+4	; 0x04
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	61 f0       	breq	.+24     	; 0x43c2 <GPIO_readPort+0x54>
    43aa:	1e c0       	rjmp	.+60     	; 0x43e8 <GPIO_readPort+0x7a>
    43ac:	2b 81       	ldd	r18, Y+3	; 0x03
    43ae:	3c 81       	ldd	r19, Y+4	; 0x04
    43b0:	22 30       	cpi	r18, 0x02	; 2
    43b2:	31 05       	cpc	r19, r1
    43b4:	81 f0       	breq	.+32     	; 0x43d6 <GPIO_readPort+0x68>
    43b6:	8b 81       	ldd	r24, Y+3	; 0x03
    43b8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ba:	83 30       	cpi	r24, 0x03	; 3
    43bc:	91 05       	cpc	r25, r1
    43be:	81 f0       	breq	.+32     	; 0x43e0 <GPIO_readPort+0x72>
    43c0:	13 c0       	rjmp	.+38     	; 0x43e8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    43c2:	e9 e3       	ldi	r30, 0x39	; 57
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	80 81       	ld	r24, Z
    43c8:	89 83       	std	Y+1, r24	; 0x01
    43ca:	0e c0       	rjmp	.+28     	; 0x43e8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    43cc:	e6 e3       	ldi	r30, 0x36	; 54
    43ce:	f0 e0       	ldi	r31, 0x00	; 0
    43d0:	80 81       	ld	r24, Z
    43d2:	89 83       	std	Y+1, r24	; 0x01
    43d4:	09 c0       	rjmp	.+18     	; 0x43e8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    43d6:	e3 e3       	ldi	r30, 0x33	; 51
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	89 83       	std	Y+1, r24	; 0x01
    43de:	04 c0       	rjmp	.+8      	; 0x43e8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    43e0:	e0 e3       	ldi	r30, 0x30	; 48
    43e2:	f0 e0       	ldi	r31, 0x00	; 0
    43e4:	80 81       	ld	r24, Z
    43e6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    4400:	60 97       	sbiw	r28, 0x10	; 16
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	60 e0       	ldi	r22, 0x00	; 0
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	61 e0       	ldi	r22, 0x01	; 1
    441a:	40 e0       	ldi	r20, 0x00	; 0
    441c:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	62 e0       	ldi	r22, 0x02	; 2
    4424:	40 e0       	ldi	r20, 0x00	; 0
    4426:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	63 e0       	ldi	r22, 0x03	; 3
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	64 e0       	ldi	r22, 0x04	; 4
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	65 e0       	ldi	r22, 0x05	; 5
    4442:	40 e0       	ldi	r20, 0x00	; 0
    4444:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	66 e0       	ldi	r22, 0x06	; 6
    444c:	40 e0       	ldi	r20, 0x00	; 0
    444e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	67 e0       	ldi	r22, 0x07	; 7
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    445c:	1f 86       	std	Y+15, r1	; 0x0f
    445e:	ab c0       	rjmp	.+342    	; 0x45b6 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	6f 85       	ldd	r22, Y+15	; 0x0f
    4464:	41 e0       	ldi	r20, 0x01	; 1
    4466:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	6f 85       	ldd	r22, Y+15	; 0x0f
    446e:	40 e0       	ldi	r20, 0x00	; 0
    4470:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    4474:	18 8a       	std	Y+16, r1	; 0x10
    4476:	22 c0       	rjmp	.+68     	; 0x44bc <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    4478:	88 89       	ldd	r24, Y+16	; 0x10
    447a:	98 2f       	mov	r25, r24
    447c:	9c 5f       	subi	r25, 0xFC	; 252
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	69 2f       	mov	r22, r25
    4482:	0e 94 94 20 	call	0x4128	; 0x4128 <GPIO_readPin>
    4486:	88 23       	and	r24, r24
    4488:	b1 f4       	brne	.+44     	; 0x44b6 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    448a:	8f 85       	ldd	r24, Y+15	; 0x0f
    448c:	88 2f       	mov	r24, r24
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	88 0f       	add	r24, r24
    4492:	99 1f       	adc	r25, r25
    4494:	88 0f       	add	r24, r24
    4496:	99 1f       	adc	r25, r25
    4498:	98 2f       	mov	r25, r24
    449a:	88 89       	ldd	r24, Y+16	; 0x10
    449c:	89 0f       	add	r24, r25
    449e:	8f 5f       	subi	r24, 0xFF	; 255
    44a0:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    44a4:	60 96       	adiw	r28, 0x10	; 16
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    44b6:	88 89       	ldd	r24, Y+16	; 0x10
    44b8:	8f 5f       	subi	r24, 0xFF	; 255
    44ba:	88 8b       	std	Y+16, r24	; 0x10
    44bc:	88 89       	ldd	r24, Y+16	; 0x10
    44be:	84 30       	cpi	r24, 0x04	; 4
    44c0:	d8 f2       	brcs	.-74     	; 0x4478 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    44c6:	40 e0       	ldi	r20, 0x00	; 0
    44c8:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	a0 ea       	ldi	r26, 0xA0	; 160
    44d2:	b0 e4       	ldi	r27, 0x40	; 64
    44d4:	8b 87       	std	Y+11, r24	; 0x0b
    44d6:	9c 87       	std	Y+12, r25	; 0x0c
    44d8:	ad 87       	std	Y+13, r26	; 0x0d
    44da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    44de:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	4a ef       	ldi	r20, 0xFA	; 250
    44ea:	54 e4       	ldi	r21, 0x44	; 68
    44ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	8f 83       	std	Y+7, r24	; 0x07
    44f6:	98 87       	std	Y+8, r25	; 0x08
    44f8:	a9 87       	std	Y+9, r26	; 0x09
    44fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44fc:	6f 81       	ldd	r22, Y+7	; 0x07
    44fe:	78 85       	ldd	r23, Y+8	; 0x08
    4500:	89 85       	ldd	r24, Y+9	; 0x09
    4502:	9a 85       	ldd	r25, Y+10	; 0x0a
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	40 e8       	ldi	r20, 0x80	; 128
    450a:	5f e3       	ldi	r21, 0x3F	; 63
    450c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4510:	88 23       	and	r24, r24
    4512:	2c f4       	brge	.+10     	; 0x451e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	9e 83       	std	Y+6, r25	; 0x06
    451a:	8d 83       	std	Y+5, r24	; 0x05
    451c:	3f c0       	rjmp	.+126    	; 0x459c <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    451e:	6f 81       	ldd	r22, Y+7	; 0x07
    4520:	78 85       	ldd	r23, Y+8	; 0x08
    4522:	89 85       	ldd	r24, Y+9	; 0x09
    4524:	9a 85       	ldd	r25, Y+10	; 0x0a
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	3f ef       	ldi	r19, 0xFF	; 255
    452a:	4f e7       	ldi	r20, 0x7F	; 127
    452c:	57 e4       	ldi	r21, 0x47	; 71
    452e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4532:	18 16       	cp	r1, r24
    4534:	4c f5       	brge	.+82     	; 0x4588 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4536:	6b 85       	ldd	r22, Y+11	; 0x0b
    4538:	7c 85       	ldd	r23, Y+12	; 0x0c
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	9e 85       	ldd	r25, Y+14	; 0x0e
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e2       	ldi	r20, 0x20	; 32
    4544:	51 e4       	ldi	r21, 0x41	; 65
    4546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	bc 01       	movw	r22, r24
    4550:	cd 01       	movw	r24, r26
    4552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	9e 83       	std	Y+6, r25	; 0x06
    455c:	8d 83       	std	Y+5, r24	; 0x05
    455e:	0f c0       	rjmp	.+30     	; 0x457e <KEYPAD_getPressedKey+0x186>
    4560:	88 ec       	ldi	r24, 0xC8	; 200
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	9c 83       	std	Y+4, r25	; 0x04
    4566:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4568:	8b 81       	ldd	r24, Y+3	; 0x03
    456a:	9c 81       	ldd	r25, Y+4	; 0x04
    456c:	01 97       	sbiw	r24, 0x01	; 1
    456e:	f1 f7       	brne	.-4      	; 0x456c <KEYPAD_getPressedKey+0x174>
    4570:	9c 83       	std	Y+4, r25	; 0x04
    4572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4574:	8d 81       	ldd	r24, Y+5	; 0x05
    4576:	9e 81       	ldd	r25, Y+6	; 0x06
    4578:	01 97       	sbiw	r24, 0x01	; 1
    457a:	9e 83       	std	Y+6, r25	; 0x06
    457c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457e:	8d 81       	ldd	r24, Y+5	; 0x05
    4580:	9e 81       	ldd	r25, Y+6	; 0x06
    4582:	00 97       	sbiw	r24, 0x00	; 0
    4584:	69 f7       	brne	.-38     	; 0x4560 <KEYPAD_getPressedKey+0x168>
    4586:	14 c0       	rjmp	.+40     	; 0x45b0 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4588:	6f 81       	ldd	r22, Y+7	; 0x07
    458a:	78 85       	ldd	r23, Y+8	; 0x08
    458c:	89 85       	ldd	r24, Y+9	; 0x09
    458e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	9e 83       	std	Y+6, r25	; 0x06
    459a:	8d 83       	std	Y+5, r24	; 0x05
    459c:	8d 81       	ldd	r24, Y+5	; 0x05
    459e:	9e 81       	ldd	r25, Y+6	; 0x06
    45a0:	9a 83       	std	Y+2, r25	; 0x02
    45a2:	89 83       	std	Y+1, r24	; 0x01
    45a4:	89 81       	ldd	r24, Y+1	; 0x01
    45a6:	9a 81       	ldd	r25, Y+2	; 0x02
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	f1 f7       	brne	.-4      	; 0x45a8 <KEYPAD_getPressedKey+0x1b0>
    45ac:	9a 83       	std	Y+2, r25	; 0x02
    45ae:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    45b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45b2:	8f 5f       	subi	r24, 0xFF	; 255
    45b4:	8f 87       	std	Y+15, r24	; 0x0f
    45b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45b8:	84 30       	cpi	r24, 0x04	; 4
    45ba:	08 f4       	brcc	.+2      	; 0x45be <KEYPAD_getPressedKey+0x1c6>
    45bc:	51 cf       	rjmp	.-350    	; 0x4460 <KEYPAD_getPressedKey+0x68>
    45be:	4e cf       	rjmp	.-356    	; 0x445c <KEYPAD_getPressedKey+0x64>

000045c0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    45c0:	df 93       	push	r29
    45c2:	cf 93       	push	r28
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    45c6:	00 d0       	rcall	.+0      	; 0x45c8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
    45cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    45ce:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    45d0:	8a 81       	ldd	r24, Y+2	; 0x02
    45d2:	28 2f       	mov	r18, r24
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	3c 83       	std	Y+4, r19	; 0x04
    45d8:	2b 83       	std	Y+3, r18	; 0x03
    45da:	8b 81       	ldd	r24, Y+3	; 0x03
    45dc:	9c 81       	ldd	r25, Y+4	; 0x04
    45de:	88 30       	cpi	r24, 0x08	; 8
    45e0:	91 05       	cpc	r25, r1
    45e2:	09 f4       	brne	.+2      	; 0x45e6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    45e4:	70 c0       	rjmp	.+224    	; 0x46c6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    45e6:	2b 81       	ldd	r18, Y+3	; 0x03
    45e8:	3c 81       	ldd	r19, Y+4	; 0x04
    45ea:	29 30       	cpi	r18, 0x09	; 9
    45ec:	31 05       	cpc	r19, r1
    45ee:	5c f5       	brge	.+86     	; 0x4646 <KEYPAD_4x4_adjustKeyNumber+0x86>
    45f0:	8b 81       	ldd	r24, Y+3	; 0x03
    45f2:	9c 81       	ldd	r25, Y+4	; 0x04
    45f4:	84 30       	cpi	r24, 0x04	; 4
    45f6:	91 05       	cpc	r25, r1
    45f8:	09 f4       	brne	.+2      	; 0x45fc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    45fa:	59 c0       	rjmp	.+178    	; 0x46ae <KEYPAD_4x4_adjustKeyNumber+0xee>
    45fc:	2b 81       	ldd	r18, Y+3	; 0x03
    45fe:	3c 81       	ldd	r19, Y+4	; 0x04
    4600:	25 30       	cpi	r18, 0x05	; 5
    4602:	31 05       	cpc	r19, r1
    4604:	9c f4       	brge	.+38     	; 0x462c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    4606:	8b 81       	ldd	r24, Y+3	; 0x03
    4608:	9c 81       	ldd	r25, Y+4	; 0x04
    460a:	82 30       	cpi	r24, 0x02	; 2
    460c:	91 05       	cpc	r25, r1
    460e:	09 f4       	brne	.+2      	; 0x4612 <KEYPAD_4x4_adjustKeyNumber+0x52>
    4610:	48 c0       	rjmp	.+144    	; 0x46a2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    4612:	2b 81       	ldd	r18, Y+3	; 0x03
    4614:	3c 81       	ldd	r19, Y+4	; 0x04
    4616:	23 30       	cpi	r18, 0x03	; 3
    4618:	31 05       	cpc	r19, r1
    461a:	0c f0       	brlt	.+2      	; 0x461e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    461c:	45 c0       	rjmp	.+138    	; 0x46a8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    461e:	8b 81       	ldd	r24, Y+3	; 0x03
    4620:	9c 81       	ldd	r25, Y+4	; 0x04
    4622:	81 30       	cpi	r24, 0x01	; 1
    4624:	91 05       	cpc	r25, r1
    4626:	09 f4       	brne	.+2      	; 0x462a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    4628:	39 c0       	rjmp	.+114    	; 0x469c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    462a:	67 c0       	rjmp	.+206    	; 0x46fa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    462c:	2b 81       	ldd	r18, Y+3	; 0x03
    462e:	3c 81       	ldd	r19, Y+4	; 0x04
    4630:	26 30       	cpi	r18, 0x06	; 6
    4632:	31 05       	cpc	r19, r1
    4634:	09 f4       	brne	.+2      	; 0x4638 <KEYPAD_4x4_adjustKeyNumber+0x78>
    4636:	41 c0       	rjmp	.+130    	; 0x46ba <KEYPAD_4x4_adjustKeyNumber+0xfa>
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	9c 81       	ldd	r25, Y+4	; 0x04
    463c:	87 30       	cpi	r24, 0x07	; 7
    463e:	91 05       	cpc	r25, r1
    4640:	0c f0       	brlt	.+2      	; 0x4644 <KEYPAD_4x4_adjustKeyNumber+0x84>
    4642:	3e c0       	rjmp	.+124    	; 0x46c0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    4644:	37 c0       	rjmp	.+110    	; 0x46b4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    4646:	2b 81       	ldd	r18, Y+3	; 0x03
    4648:	3c 81       	ldd	r19, Y+4	; 0x04
    464a:	2c 30       	cpi	r18, 0x0C	; 12
    464c:	31 05       	cpc	r19, r1
    464e:	09 f4       	brne	.+2      	; 0x4652 <KEYPAD_4x4_adjustKeyNumber+0x92>
    4650:	46 c0       	rjmp	.+140    	; 0x46de <KEYPAD_4x4_adjustKeyNumber+0x11e>
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	8d 30       	cpi	r24, 0x0D	; 13
    4658:	91 05       	cpc	r25, r1
    465a:	5c f4       	brge	.+22     	; 0x4672 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    465c:	2b 81       	ldd	r18, Y+3	; 0x03
    465e:	3c 81       	ldd	r19, Y+4	; 0x04
    4660:	2a 30       	cpi	r18, 0x0A	; 10
    4662:	31 05       	cpc	r19, r1
    4664:	b1 f1       	breq	.+108    	; 0x46d2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    4666:	8b 81       	ldd	r24, Y+3	; 0x03
    4668:	9c 81       	ldd	r25, Y+4	; 0x04
    466a:	8b 30       	cpi	r24, 0x0B	; 11
    466c:	91 05       	cpc	r25, r1
    466e:	a4 f5       	brge	.+104    	; 0x46d8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    4670:	2d c0       	rjmp	.+90     	; 0x46cc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    4672:	2b 81       	ldd	r18, Y+3	; 0x03
    4674:	3c 81       	ldd	r19, Y+4	; 0x04
    4676:	2e 30       	cpi	r18, 0x0E	; 14
    4678:	31 05       	cpc	r19, r1
    467a:	b9 f1       	breq	.+110    	; 0x46ea <KEYPAD_4x4_adjustKeyNumber+0x12a>
    467c:	8b 81       	ldd	r24, Y+3	; 0x03
    467e:	9c 81       	ldd	r25, Y+4	; 0x04
    4680:	8e 30       	cpi	r24, 0x0E	; 14
    4682:	91 05       	cpc	r25, r1
    4684:	7c f1       	brlt	.+94     	; 0x46e4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    4686:	2b 81       	ldd	r18, Y+3	; 0x03
    4688:	3c 81       	ldd	r19, Y+4	; 0x04
    468a:	2f 30       	cpi	r18, 0x0F	; 15
    468c:	31 05       	cpc	r19, r1
    468e:	79 f1       	breq	.+94     	; 0x46ee <KEYPAD_4x4_adjustKeyNumber+0x12e>
    4690:	8b 81       	ldd	r24, Y+3	; 0x03
    4692:	9c 81       	ldd	r25, Y+4	; 0x04
    4694:	80 31       	cpi	r24, 0x10	; 16
    4696:	91 05       	cpc	r25, r1
    4698:	69 f1       	breq	.+90     	; 0x46f4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    469a:	2f c0       	rjmp	.+94     	; 0x46fa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    469c:	87 e0       	ldi	r24, 0x07	; 7
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	2e c0       	rjmp	.+92     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    46a2:	88 e0       	ldi	r24, 0x08	; 8
    46a4:	89 83       	std	Y+1, r24	; 0x01
    46a6:	2b c0       	rjmp	.+86     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    46a8:	89 e0       	ldi	r24, 0x09	; 9
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	28 c0       	rjmp	.+80     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    46ae:	8f e2       	ldi	r24, 0x2F	; 47
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	25 c0       	rjmp	.+74     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    46b4:	84 e0       	ldi	r24, 0x04	; 4
    46b6:	89 83       	std	Y+1, r24	; 0x01
    46b8:	22 c0       	rjmp	.+68     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    46ba:	85 e0       	ldi	r24, 0x05	; 5
    46bc:	89 83       	std	Y+1, r24	; 0x01
    46be:	1f c0       	rjmp	.+62     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    46c0:	86 e0       	ldi	r24, 0x06	; 6
    46c2:	89 83       	std	Y+1, r24	; 0x01
    46c4:	1c c0       	rjmp	.+56     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    46c6:	8a e2       	ldi	r24, 0x2A	; 42
    46c8:	89 83       	std	Y+1, r24	; 0x01
    46ca:	19 c0       	rjmp	.+50     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	16 c0       	rjmp	.+44     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    46d2:	82 e0       	ldi	r24, 0x02	; 2
    46d4:	89 83       	std	Y+1, r24	; 0x01
    46d6:	13 c0       	rjmp	.+38     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    46d8:	83 e0       	ldi	r24, 0x03	; 3
    46da:	89 83       	std	Y+1, r24	; 0x01
    46dc:	10 c0       	rjmp	.+32     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    46de:	8d e2       	ldi	r24, 0x2D	; 45
    46e0:	89 83       	std	Y+1, r24	; 0x01
    46e2:	0d c0       	rjmp	.+26     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    46e4:	8d e0       	ldi	r24, 0x0D	; 13
    46e6:	89 83       	std	Y+1, r24	; 0x01
    46e8:	0a c0       	rjmp	.+20     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    46ea:	19 82       	std	Y+1, r1	; 0x01
    46ec:	08 c0       	rjmp	.+16     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    46ee:	8d e3       	ldi	r24, 0x3D	; 61
    46f0:	89 83       	std	Y+1, r24	; 0x01
    46f2:	05 c0       	rjmp	.+10     	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    46f4:	8b e2       	ldi	r24, 0x2B	; 43
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    46fa:	8a 81       	ldd	r24, Y+2	; 0x02
    46fc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    46fe:	89 81       	ldd	r24, Y+1	; 0x01
} 
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	0f 90       	pop	r0
    4708:	cf 91       	pop	r28
    470a:	df 91       	pop	r29
    470c:	08 95       	ret

0000470e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    470e:	df 93       	push	r29
    4710:	cf 93       	push	r28
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	2e 97       	sbiw	r28, 0x0e	; 14
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	de bf       	out	0x3e, r29	; 62
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    4722:	83 e0       	ldi	r24, 0x03	; 3
    4724:	62 e0       	ldi	r22, 0x02	; 2
    4726:	41 e0       	ldi	r20, 0x01	; 1
    4728:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    472c:	83 e0       	ldi	r24, 0x03	; 3
    472e:	63 e0       	ldi	r22, 0x03	; 3
    4730:	41 e0       	ldi	r20, 0x01	; 1
    4732:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <GPIO_setupPinDirection>
    4736:	80 e0       	ldi	r24, 0x00	; 0
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	a0 ea       	ldi	r26, 0xA0	; 160
    473c:	b1 e4       	ldi	r27, 0x41	; 65
    473e:	8b 87       	std	Y+11, r24	; 0x0b
    4740:	9c 87       	std	Y+12, r25	; 0x0c
    4742:	ad 87       	std	Y+13, r26	; 0x0d
    4744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4746:	6b 85       	ldd	r22, Y+11	; 0x0b
    4748:	7c 85       	ldd	r23, Y+12	; 0x0c
    474a:	8d 85       	ldd	r24, Y+13	; 0x0d
    474c:	9e 85       	ldd	r25, Y+14	; 0x0e
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	4a ef       	ldi	r20, 0xFA	; 250
    4754:	54 e4       	ldi	r21, 0x44	; 68
    4756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	8f 83       	std	Y+7, r24	; 0x07
    4760:	98 87       	std	Y+8, r25	; 0x08
    4762:	a9 87       	std	Y+9, r26	; 0x09
    4764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4766:	6f 81       	ldd	r22, Y+7	; 0x07
    4768:	78 85       	ldd	r23, Y+8	; 0x08
    476a:	89 85       	ldd	r24, Y+9	; 0x09
    476c:	9a 85       	ldd	r25, Y+10	; 0x0a
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	40 e8       	ldi	r20, 0x80	; 128
    4774:	5f e3       	ldi	r21, 0x3F	; 63
    4776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    477a:	88 23       	and	r24, r24
    477c:	2c f4       	brge	.+10     	; 0x4788 <LCD_init+0x7a>
		__ticks = 1;
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	9e 83       	std	Y+6, r25	; 0x06
    4784:	8d 83       	std	Y+5, r24	; 0x05
    4786:	3f c0       	rjmp	.+126    	; 0x4806 <LCD_init+0xf8>
	else if (__tmp > 65535)
    4788:	6f 81       	ldd	r22, Y+7	; 0x07
    478a:	78 85       	ldd	r23, Y+8	; 0x08
    478c:	89 85       	ldd	r24, Y+9	; 0x09
    478e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	3f ef       	ldi	r19, 0xFF	; 255
    4794:	4f e7       	ldi	r20, 0x7F	; 127
    4796:	57 e4       	ldi	r21, 0x47	; 71
    4798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    479c:	18 16       	cp	r1, r24
    479e:	4c f5       	brge	.+82     	; 0x47f2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	40 e2       	ldi	r20, 0x20	; 32
    47ae:	51 e4       	ldi	r21, 0x41	; 65
    47b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	bc 01       	movw	r22, r24
    47ba:	cd 01       	movw	r24, r26
    47bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c0:	dc 01       	movw	r26, r24
    47c2:	cb 01       	movw	r24, r22
    47c4:	9e 83       	std	Y+6, r25	; 0x06
    47c6:	8d 83       	std	Y+5, r24	; 0x05
    47c8:	0f c0       	rjmp	.+30     	; 0x47e8 <LCD_init+0xda>
    47ca:	88 ec       	ldi	r24, 0xC8	; 200
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	9c 83       	std	Y+4, r25	; 0x04
    47d0:	8b 83       	std	Y+3, r24	; 0x03
    47d2:	8b 81       	ldd	r24, Y+3	; 0x03
    47d4:	9c 81       	ldd	r25, Y+4	; 0x04
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	f1 f7       	brne	.-4      	; 0x47d6 <LCD_init+0xc8>
    47da:	9c 83       	std	Y+4, r25	; 0x04
    47dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47de:	8d 81       	ldd	r24, Y+5	; 0x05
    47e0:	9e 81       	ldd	r25, Y+6	; 0x06
    47e2:	01 97       	sbiw	r24, 0x01	; 1
    47e4:	9e 83       	std	Y+6, r25	; 0x06
    47e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ea:	9e 81       	ldd	r25, Y+6	; 0x06
    47ec:	00 97       	sbiw	r24, 0x00	; 0
    47ee:	69 f7       	brne	.-38     	; 0x47ca <LCD_init+0xbc>
    47f0:	14 c0       	rjmp	.+40     	; 0x481a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f2:	6f 81       	ldd	r22, Y+7	; 0x07
    47f4:	78 85       	ldd	r23, Y+8	; 0x08
    47f6:	89 85       	ldd	r24, Y+9	; 0x09
    47f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	9e 83       	std	Y+6, r25	; 0x06
    4804:	8d 83       	std	Y+5, r24	; 0x05
    4806:	8d 81       	ldd	r24, Y+5	; 0x05
    4808:	9e 81       	ldd	r25, Y+6	; 0x06
    480a:	9a 83       	std	Y+2, r25	; 0x02
    480c:	89 83       	std	Y+1, r24	; 0x01
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	01 97       	sbiw	r24, 0x01	; 1
    4814:	f1 f7       	brne	.-4      	; 0x4812 <LCD_init+0x104>
    4816:	9a 83       	std	Y+2, r25	; 0x02
    4818:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    481a:	82 e0       	ldi	r24, 0x02	; 2
    481c:	6f ef       	ldi	r22, 0xFF	; 255
    481e:	0e 94 2f 21 	call	0x425e	; 0x425e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    4822:	88 e3       	ldi	r24, 0x38	; 56
    4824:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    4828:	8c e0       	ldi	r24, 0x0C	; 12
    482a:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_sendCommand>
}
    4834:	2e 96       	adiw	r28, 0x0e	; 14
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	cf 91       	pop	r28
    4842:	df 91       	pop	r29
    4844:	08 95       	ret

00004846 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    4846:	df 93       	push	r29
    4848:	cf 93       	push	r28
    484a:	cd b7       	in	r28, 0x3d	; 61
    484c:	de b7       	in	r29, 0x3e	; 62
    484e:	e9 97       	sbiw	r28, 0x39	; 57
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	f8 94       	cli
    4854:	de bf       	out	0x3e, r29	; 62
    4856:	0f be       	out	0x3f, r0	; 63
    4858:	cd bf       	out	0x3d, r28	; 61
    485a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    485c:	83 e0       	ldi	r24, 0x03	; 3
    485e:	62 e0       	ldi	r22, 0x02	; 2
    4860:	40 e0       	ldi	r20, 0x00	; 0
    4862:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	a0 e8       	ldi	r26, 0x80	; 128
    486c:	bf e3       	ldi	r27, 0x3F	; 63
    486e:	8d ab       	std	Y+53, r24	; 0x35
    4870:	9e ab       	std	Y+54, r25	; 0x36
    4872:	af ab       	std	Y+55, r26	; 0x37
    4874:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4876:	6d a9       	ldd	r22, Y+53	; 0x35
    4878:	7e a9       	ldd	r23, Y+54	; 0x36
    487a:	8f a9       	ldd	r24, Y+55	; 0x37
    487c:	98 ad       	ldd	r25, Y+56	; 0x38
    487e:	20 e0       	ldi	r18, 0x00	; 0
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	4a ef       	ldi	r20, 0xFA	; 250
    4884:	54 e4       	ldi	r21, 0x44	; 68
    4886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    488a:	dc 01       	movw	r26, r24
    488c:	cb 01       	movw	r24, r22
    488e:	89 ab       	std	Y+49, r24	; 0x31
    4890:	9a ab       	std	Y+50, r25	; 0x32
    4892:	ab ab       	std	Y+51, r26	; 0x33
    4894:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4896:	69 a9       	ldd	r22, Y+49	; 0x31
    4898:	7a a9       	ldd	r23, Y+50	; 0x32
    489a:	8b a9       	ldd	r24, Y+51	; 0x33
    489c:	9c a9       	ldd	r25, Y+52	; 0x34
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 e8       	ldi	r20, 0x80	; 128
    48a4:	5f e3       	ldi	r21, 0x3F	; 63
    48a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48aa:	88 23       	and	r24, r24
    48ac:	2c f4       	brge	.+10     	; 0x48b8 <LCD_sendCommand+0x72>
		__ticks = 1;
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	98 ab       	std	Y+48, r25	; 0x30
    48b4:	8f a7       	std	Y+47, r24	; 0x2f
    48b6:	3f c0       	rjmp	.+126    	; 0x4936 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    48b8:	69 a9       	ldd	r22, Y+49	; 0x31
    48ba:	7a a9       	ldd	r23, Y+50	; 0x32
    48bc:	8b a9       	ldd	r24, Y+51	; 0x33
    48be:	9c a9       	ldd	r25, Y+52	; 0x34
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	3f ef       	ldi	r19, 0xFF	; 255
    48c4:	4f e7       	ldi	r20, 0x7F	; 127
    48c6:	57 e4       	ldi	r21, 0x47	; 71
    48c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48cc:	18 16       	cp	r1, r24
    48ce:	4c f5       	brge	.+82     	; 0x4922 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48d0:	6d a9       	ldd	r22, Y+53	; 0x35
    48d2:	7e a9       	ldd	r23, Y+54	; 0x36
    48d4:	8f a9       	ldd	r24, Y+55	; 0x37
    48d6:	98 ad       	ldd	r25, Y+56	; 0x38
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	40 e2       	ldi	r20, 0x20	; 32
    48de:	51 e4       	ldi	r21, 0x41	; 65
    48e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	bc 01       	movw	r22, r24
    48ea:	cd 01       	movw	r24, r26
    48ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	98 ab       	std	Y+48, r25	; 0x30
    48f6:	8f a7       	std	Y+47, r24	; 0x2f
    48f8:	0f c0       	rjmp	.+30     	; 0x4918 <LCD_sendCommand+0xd2>
    48fa:	88 ec       	ldi	r24, 0xC8	; 200
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	9e a7       	std	Y+46, r25	; 0x2e
    4900:	8d a7       	std	Y+45, r24	; 0x2d
    4902:	8d a5       	ldd	r24, Y+45	; 0x2d
    4904:	9e a5       	ldd	r25, Y+46	; 0x2e
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	f1 f7       	brne	.-4      	; 0x4906 <LCD_sendCommand+0xc0>
    490a:	9e a7       	std	Y+46, r25	; 0x2e
    490c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    490e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4910:	98 a9       	ldd	r25, Y+48	; 0x30
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	98 ab       	std	Y+48, r25	; 0x30
    4916:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4918:	8f a5       	ldd	r24, Y+47	; 0x2f
    491a:	98 a9       	ldd	r25, Y+48	; 0x30
    491c:	00 97       	sbiw	r24, 0x00	; 0
    491e:	69 f7       	brne	.-38     	; 0x48fa <LCD_sendCommand+0xb4>
    4920:	14 c0       	rjmp	.+40     	; 0x494a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4922:	69 a9       	ldd	r22, Y+49	; 0x31
    4924:	7a a9       	ldd	r23, Y+50	; 0x32
    4926:	8b a9       	ldd	r24, Y+51	; 0x33
    4928:	9c a9       	ldd	r25, Y+52	; 0x34
    492a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	98 ab       	std	Y+48, r25	; 0x30
    4934:	8f a7       	std	Y+47, r24	; 0x2f
    4936:	8f a5       	ldd	r24, Y+47	; 0x2f
    4938:	98 a9       	ldd	r25, Y+48	; 0x30
    493a:	9c a7       	std	Y+44, r25	; 0x2c
    493c:	8b a7       	std	Y+43, r24	; 0x2b
    493e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4940:	9c a5       	ldd	r25, Y+44	; 0x2c
    4942:	01 97       	sbiw	r24, 0x01	; 1
    4944:	f1 f7       	brne	.-4      	; 0x4942 <LCD_sendCommand+0xfc>
    4946:	9c a7       	std	Y+44, r25	; 0x2c
    4948:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    494a:	83 e0       	ldi	r24, 0x03	; 3
    494c:	63 e0       	ldi	r22, 0x03	; 3
    494e:	41 e0       	ldi	r20, 0x01	; 1
    4950:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	a0 e8       	ldi	r26, 0x80	; 128
    495a:	bf e3       	ldi	r27, 0x3F	; 63
    495c:	8f a3       	std	Y+39, r24	; 0x27
    495e:	98 a7       	std	Y+40, r25	; 0x28
    4960:	a9 a7       	std	Y+41, r26	; 0x29
    4962:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4964:	6f a1       	ldd	r22, Y+39	; 0x27
    4966:	78 a5       	ldd	r23, Y+40	; 0x28
    4968:	89 a5       	ldd	r24, Y+41	; 0x29
    496a:	9a a5       	ldd	r25, Y+42	; 0x2a
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	4a ef       	ldi	r20, 0xFA	; 250
    4972:	54 e4       	ldi	r21, 0x44	; 68
    4974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	8b a3       	std	Y+35, r24	; 0x23
    497e:	9c a3       	std	Y+36, r25	; 0x24
    4980:	ad a3       	std	Y+37, r26	; 0x25
    4982:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4984:	6b a1       	ldd	r22, Y+35	; 0x23
    4986:	7c a1       	ldd	r23, Y+36	; 0x24
    4988:	8d a1       	ldd	r24, Y+37	; 0x25
    498a:	9e a1       	ldd	r25, Y+38	; 0x26
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	40 e8       	ldi	r20, 0x80	; 128
    4992:	5f e3       	ldi	r21, 0x3F	; 63
    4994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4998:	88 23       	and	r24, r24
    499a:	2c f4       	brge	.+10     	; 0x49a6 <LCD_sendCommand+0x160>
		__ticks = 1;
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	9a a3       	std	Y+34, r25	; 0x22
    49a2:	89 a3       	std	Y+33, r24	; 0x21
    49a4:	3f c0       	rjmp	.+126    	; 0x4a24 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    49a6:	6b a1       	ldd	r22, Y+35	; 0x23
    49a8:	7c a1       	ldd	r23, Y+36	; 0x24
    49aa:	8d a1       	ldd	r24, Y+37	; 0x25
    49ac:	9e a1       	ldd	r25, Y+38	; 0x26
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	3f ef       	ldi	r19, 0xFF	; 255
    49b2:	4f e7       	ldi	r20, 0x7F	; 127
    49b4:	57 e4       	ldi	r21, 0x47	; 71
    49b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ba:	18 16       	cp	r1, r24
    49bc:	4c f5       	brge	.+82     	; 0x4a10 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49be:	6f a1       	ldd	r22, Y+39	; 0x27
    49c0:	78 a5       	ldd	r23, Y+40	; 0x28
    49c2:	89 a5       	ldd	r24, Y+41	; 0x29
    49c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	40 e2       	ldi	r20, 0x20	; 32
    49cc:	51 e4       	ldi	r21, 0x41	; 65
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	bc 01       	movw	r22, r24
    49d8:	cd 01       	movw	r24, r26
    49da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	9a a3       	std	Y+34, r25	; 0x22
    49e4:	89 a3       	std	Y+33, r24	; 0x21
    49e6:	0f c0       	rjmp	.+30     	; 0x4a06 <LCD_sendCommand+0x1c0>
    49e8:	88 ec       	ldi	r24, 0xC8	; 200
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	98 a3       	std	Y+32, r25	; 0x20
    49ee:	8f 8f       	std	Y+31, r24	; 0x1f
    49f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49f2:	98 a1       	ldd	r25, Y+32	; 0x20
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	f1 f7       	brne	.-4      	; 0x49f4 <LCD_sendCommand+0x1ae>
    49f8:	98 a3       	std	Y+32, r25	; 0x20
    49fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49fc:	89 a1       	ldd	r24, Y+33	; 0x21
    49fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	9a a3       	std	Y+34, r25	; 0x22
    4a04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a06:	89 a1       	ldd	r24, Y+33	; 0x21
    4a08:	9a a1       	ldd	r25, Y+34	; 0x22
    4a0a:	00 97       	sbiw	r24, 0x00	; 0
    4a0c:	69 f7       	brne	.-38     	; 0x49e8 <LCD_sendCommand+0x1a2>
    4a0e:	14 c0       	rjmp	.+40     	; 0x4a38 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a10:	6b a1       	ldd	r22, Y+35	; 0x23
    4a12:	7c a1       	ldd	r23, Y+36	; 0x24
    4a14:	8d a1       	ldd	r24, Y+37	; 0x25
    4a16:	9e a1       	ldd	r25, Y+38	; 0x26
    4a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	9a a3       	std	Y+34, r25	; 0x22
    4a22:	89 a3       	std	Y+33, r24	; 0x21
    4a24:	89 a1       	ldd	r24, Y+33	; 0x21
    4a26:	9a a1       	ldd	r25, Y+34	; 0x22
    4a28:	9e 8f       	std	Y+30, r25	; 0x1e
    4a2a:	8d 8f       	std	Y+29, r24	; 0x1d
    4a2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a30:	01 97       	sbiw	r24, 0x01	; 1
    4a32:	f1 f7       	brne	.-4      	; 0x4a30 <LCD_sendCommand+0x1ea>
    4a34:	9e 8f       	std	Y+30, r25	; 0x1e
    4a36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    4a38:	82 e0       	ldi	r24, 0x02	; 2
    4a3a:	69 ad       	ldd	r22, Y+57	; 0x39
    4a3c:	0e 94 73 21 	call	0x42e6	; 0x42e6 <GPIO_writePort>
    4a40:	80 e0       	ldi	r24, 0x00	; 0
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	a0 e8       	ldi	r26, 0x80	; 128
    4a46:	bf e3       	ldi	r27, 0x3F	; 63
    4a48:	89 8f       	std	Y+25, r24	; 0x19
    4a4a:	9a 8f       	std	Y+26, r25	; 0x1a
    4a4c:	ab 8f       	std	Y+27, r26	; 0x1b
    4a4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a50:	69 8d       	ldd	r22, Y+25	; 0x19
    4a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	4a ef       	ldi	r20, 0xFA	; 250
    4a5e:	54 e4       	ldi	r21, 0x44	; 68
    4a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	8d 8b       	std	Y+21, r24	; 0x15
    4a6a:	9e 8b       	std	Y+22, r25	; 0x16
    4a6c:	af 8b       	std	Y+23, r26	; 0x17
    4a6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a70:	6d 89       	ldd	r22, Y+21	; 0x15
    4a72:	7e 89       	ldd	r23, Y+22	; 0x16
    4a74:	8f 89       	ldd	r24, Y+23	; 0x17
    4a76:	98 8d       	ldd	r25, Y+24	; 0x18
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	40 e8       	ldi	r20, 0x80	; 128
    4a7e:	5f e3       	ldi	r21, 0x3F	; 63
    4a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a84:	88 23       	and	r24, r24
    4a86:	2c f4       	brge	.+10     	; 0x4a92 <LCD_sendCommand+0x24c>
		__ticks = 1;
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	9c 8b       	std	Y+20, r25	; 0x14
    4a8e:	8b 8b       	std	Y+19, r24	; 0x13
    4a90:	3f c0       	rjmp	.+126    	; 0x4b10 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    4a92:	6d 89       	ldd	r22, Y+21	; 0x15
    4a94:	7e 89       	ldd	r23, Y+22	; 0x16
    4a96:	8f 89       	ldd	r24, Y+23	; 0x17
    4a98:	98 8d       	ldd	r25, Y+24	; 0x18
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	3f ef       	ldi	r19, 0xFF	; 255
    4a9e:	4f e7       	ldi	r20, 0x7F	; 127
    4aa0:	57 e4       	ldi	r21, 0x47	; 71
    4aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa6:	18 16       	cp	r1, r24
    4aa8:	4c f5       	brge	.+82     	; 0x4afc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    4aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	40 e2       	ldi	r20, 0x20	; 32
    4ab8:	51 e4       	ldi	r21, 0x41	; 65
    4aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	9c 8b       	std	Y+20, r25	; 0x14
    4ad0:	8b 8b       	std	Y+19, r24	; 0x13
    4ad2:	0f c0       	rjmp	.+30     	; 0x4af2 <LCD_sendCommand+0x2ac>
    4ad4:	88 ec       	ldi	r24, 0xC8	; 200
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	9a 8b       	std	Y+18, r25	; 0x12
    4ada:	89 8b       	std	Y+17, r24	; 0x11
    4adc:	89 89       	ldd	r24, Y+17	; 0x11
    4ade:	9a 89       	ldd	r25, Y+18	; 0x12
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <LCD_sendCommand+0x29a>
    4ae4:	9a 8b       	std	Y+18, r25	; 0x12
    4ae6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    4aea:	9c 89       	ldd	r25, Y+20	; 0x14
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	9c 8b       	std	Y+20, r25	; 0x14
    4af0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af2:	8b 89       	ldd	r24, Y+19	; 0x13
    4af4:	9c 89       	ldd	r25, Y+20	; 0x14
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	69 f7       	brne	.-38     	; 0x4ad4 <LCD_sendCommand+0x28e>
    4afa:	14 c0       	rjmp	.+40     	; 0x4b24 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afc:	6d 89       	ldd	r22, Y+21	; 0x15
    4afe:	7e 89       	ldd	r23, Y+22	; 0x16
    4b00:	8f 89       	ldd	r24, Y+23	; 0x17
    4b02:	98 8d       	ldd	r25, Y+24	; 0x18
    4b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b08:	dc 01       	movw	r26, r24
    4b0a:	cb 01       	movw	r24, r22
    4b0c:	9c 8b       	std	Y+20, r25	; 0x14
    4b0e:	8b 8b       	std	Y+19, r24	; 0x13
    4b10:	8b 89       	ldd	r24, Y+19	; 0x13
    4b12:	9c 89       	ldd	r25, Y+20	; 0x14
    4b14:	98 8b       	std	Y+16, r25	; 0x10
    4b16:	8f 87       	std	Y+15, r24	; 0x0f
    4b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b1a:	98 89       	ldd	r25, Y+16	; 0x10
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	f1 f7       	brne	.-4      	; 0x4b1c <LCD_sendCommand+0x2d6>
    4b20:	98 8b       	std	Y+16, r25	; 0x10
    4b22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4b24:	83 e0       	ldi	r24, 0x03	; 3
    4b26:	63 e0       	ldi	r22, 0x03	; 3
    4b28:	40 e0       	ldi	r20, 0x00	; 0
    4b2a:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	a0 e8       	ldi	r26, 0x80	; 128
    4b34:	bf e3       	ldi	r27, 0x3F	; 63
    4b36:	8b 87       	std	Y+11, r24	; 0x0b
    4b38:	9c 87       	std	Y+12, r25	; 0x0c
    4b3a:	ad 87       	std	Y+13, r26	; 0x0d
    4b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	4a ef       	ldi	r20, 0xFA	; 250
    4b4c:	54 e4       	ldi	r21, 0x44	; 68
    4b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b52:	dc 01       	movw	r26, r24
    4b54:	cb 01       	movw	r24, r22
    4b56:	8f 83       	std	Y+7, r24	; 0x07
    4b58:	98 87       	std	Y+8, r25	; 0x08
    4b5a:	a9 87       	std	Y+9, r26	; 0x09
    4b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b60:	78 85       	ldd	r23, Y+8	; 0x08
    4b62:	89 85       	ldd	r24, Y+9	; 0x09
    4b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	40 e8       	ldi	r20, 0x80	; 128
    4b6c:	5f e3       	ldi	r21, 0x3F	; 63
    4b6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b72:	88 23       	and	r24, r24
    4b74:	2c f4       	brge	.+10     	; 0x4b80 <LCD_sendCommand+0x33a>
		__ticks = 1;
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	9e 83       	std	Y+6, r25	; 0x06
    4b7c:	8d 83       	std	Y+5, r24	; 0x05
    4b7e:	3f c0       	rjmp	.+126    	; 0x4bfe <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    4b80:	6f 81       	ldd	r22, Y+7	; 0x07
    4b82:	78 85       	ldd	r23, Y+8	; 0x08
    4b84:	89 85       	ldd	r24, Y+9	; 0x09
    4b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	3f ef       	ldi	r19, 0xFF	; 255
    4b8c:	4f e7       	ldi	r20, 0x7F	; 127
    4b8e:	57 e4       	ldi	r21, 0x47	; 71
    4b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b94:	18 16       	cp	r1, r24
    4b96:	4c f5       	brge	.+82     	; 0x4bea <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	40 e2       	ldi	r20, 0x20	; 32
    4ba6:	51 e4       	ldi	r21, 0x41	; 65
    4ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	bc 01       	movw	r22, r24
    4bb2:	cd 01       	movw	r24, r26
    4bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	9e 83       	std	Y+6, r25	; 0x06
    4bbe:	8d 83       	std	Y+5, r24	; 0x05
    4bc0:	0f c0       	rjmp	.+30     	; 0x4be0 <LCD_sendCommand+0x39a>
    4bc2:	88 ec       	ldi	r24, 0xC8	; 200
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	9c 83       	std	Y+4, r25	; 0x04
    4bc8:	8b 83       	std	Y+3, r24	; 0x03
    4bca:	8b 81       	ldd	r24, Y+3	; 0x03
    4bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    4bce:	01 97       	sbiw	r24, 0x01	; 1
    4bd0:	f1 f7       	brne	.-4      	; 0x4bce <LCD_sendCommand+0x388>
    4bd2:	9c 83       	std	Y+4, r25	; 0x04
    4bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	9e 83       	std	Y+6, r25	; 0x06
    4bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be0:	8d 81       	ldd	r24, Y+5	; 0x05
    4be2:	9e 81       	ldd	r25, Y+6	; 0x06
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	69 f7       	brne	.-38     	; 0x4bc2 <LCD_sendCommand+0x37c>
    4be8:	14 c0       	rjmp	.+40     	; 0x4c12 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bea:	6f 81       	ldd	r22, Y+7	; 0x07
    4bec:	78 85       	ldd	r23, Y+8	; 0x08
    4bee:	89 85       	ldd	r24, Y+9	; 0x09
    4bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf6:	dc 01       	movw	r26, r24
    4bf8:	cb 01       	movw	r24, r22
    4bfa:	9e 83       	std	Y+6, r25	; 0x06
    4bfc:	8d 83       	std	Y+5, r24	; 0x05
    4bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4c00:	9e 81       	ldd	r25, Y+6	; 0x06
    4c02:	9a 83       	std	Y+2, r25	; 0x02
    4c04:	89 83       	std	Y+1, r24	; 0x01
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
    4c0c:	f1 f7       	brne	.-4      	; 0x4c0a <LCD_sendCommand+0x3c4>
    4c0e:	9a 83       	std	Y+2, r25	; 0x02
    4c10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4c12:	e9 96       	adiw	r28, 0x39	; 57
    4c14:	0f b6       	in	r0, 0x3f	; 63
    4c16:	f8 94       	cli
    4c18:	de bf       	out	0x3e, r29	; 62
    4c1a:	0f be       	out	0x3f, r0	; 63
    4c1c:	cd bf       	out	0x3d, r28	; 61
    4c1e:	cf 91       	pop	r28
    4c20:	df 91       	pop	r29
    4c22:	08 95       	ret

00004c24 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    4c24:	df 93       	push	r29
    4c26:	cf 93       	push	r28
    4c28:	cd b7       	in	r28, 0x3d	; 61
    4c2a:	de b7       	in	r29, 0x3e	; 62
    4c2c:	e9 97       	sbiw	r28, 0x39	; 57
    4c2e:	0f b6       	in	r0, 0x3f	; 63
    4c30:	f8 94       	cli
    4c32:	de bf       	out	0x3e, r29	; 62
    4c34:	0f be       	out	0x3f, r0	; 63
    4c36:	cd bf       	out	0x3d, r28	; 61
    4c38:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    4c3a:	83 e0       	ldi	r24, 0x03	; 3
    4c3c:	62 e0       	ldi	r22, 0x02	; 2
    4c3e:	41 e0       	ldi	r20, 0x01	; 1
    4c40:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>
    4c44:	80 e0       	ldi	r24, 0x00	; 0
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	a0 e8       	ldi	r26, 0x80	; 128
    4c4a:	bf e3       	ldi	r27, 0x3F	; 63
    4c4c:	8d ab       	std	Y+53, r24	; 0x35
    4c4e:	9e ab       	std	Y+54, r25	; 0x36
    4c50:	af ab       	std	Y+55, r26	; 0x37
    4c52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c54:	6d a9       	ldd	r22, Y+53	; 0x35
    4c56:	7e a9       	ldd	r23, Y+54	; 0x36
    4c58:	8f a9       	ldd	r24, Y+55	; 0x37
    4c5a:	98 ad       	ldd	r25, Y+56	; 0x38
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	4a ef       	ldi	r20, 0xFA	; 250
    4c62:	54 e4       	ldi	r21, 0x44	; 68
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	89 ab       	std	Y+49, r24	; 0x31
    4c6e:	9a ab       	std	Y+50, r25	; 0x32
    4c70:	ab ab       	std	Y+51, r26	; 0x33
    4c72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c74:	69 a9       	ldd	r22, Y+49	; 0x31
    4c76:	7a a9       	ldd	r23, Y+50	; 0x32
    4c78:	8b a9       	ldd	r24, Y+51	; 0x33
    4c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	40 e8       	ldi	r20, 0x80	; 128
    4c82:	5f e3       	ldi	r21, 0x3F	; 63
    4c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c88:	88 23       	and	r24, r24
    4c8a:	2c f4       	brge	.+10     	; 0x4c96 <LCD_displayCharacter+0x72>
		__ticks = 1;
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	98 ab       	std	Y+48, r25	; 0x30
    4c92:	8f a7       	std	Y+47, r24	; 0x2f
    4c94:	3f c0       	rjmp	.+126    	; 0x4d14 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    4c96:	69 a9       	ldd	r22, Y+49	; 0x31
    4c98:	7a a9       	ldd	r23, Y+50	; 0x32
    4c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    4c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	3f ef       	ldi	r19, 0xFF	; 255
    4ca2:	4f e7       	ldi	r20, 0x7F	; 127
    4ca4:	57 e4       	ldi	r21, 0x47	; 71
    4ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4caa:	18 16       	cp	r1, r24
    4cac:	4c f5       	brge	.+82     	; 0x4d00 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cae:	6d a9       	ldd	r22, Y+53	; 0x35
    4cb0:	7e a9       	ldd	r23, Y+54	; 0x36
    4cb2:	8f a9       	ldd	r24, Y+55	; 0x37
    4cb4:	98 ad       	ldd	r25, Y+56	; 0x38
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	40 e2       	ldi	r20, 0x20	; 32
    4cbc:	51 e4       	ldi	r21, 0x41	; 65
    4cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc2:	dc 01       	movw	r26, r24
    4cc4:	cb 01       	movw	r24, r22
    4cc6:	bc 01       	movw	r22, r24
    4cc8:	cd 01       	movw	r24, r26
    4cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cce:	dc 01       	movw	r26, r24
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	98 ab       	std	Y+48, r25	; 0x30
    4cd4:	8f a7       	std	Y+47, r24	; 0x2f
    4cd6:	0f c0       	rjmp	.+30     	; 0x4cf6 <LCD_displayCharacter+0xd2>
    4cd8:	88 ec       	ldi	r24, 0xC8	; 200
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	9e a7       	std	Y+46, r25	; 0x2e
    4cde:	8d a7       	std	Y+45, r24	; 0x2d
    4ce0:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ce2:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ce4:	01 97       	sbiw	r24, 0x01	; 1
    4ce6:	f1 f7       	brne	.-4      	; 0x4ce4 <LCD_displayCharacter+0xc0>
    4ce8:	9e a7       	std	Y+46, r25	; 0x2e
    4cea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cee:	98 a9       	ldd	r25, Y+48	; 0x30
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	98 ab       	std	Y+48, r25	; 0x30
    4cf4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cf8:	98 a9       	ldd	r25, Y+48	; 0x30
    4cfa:	00 97       	sbiw	r24, 0x00	; 0
    4cfc:	69 f7       	brne	.-38     	; 0x4cd8 <LCD_displayCharacter+0xb4>
    4cfe:	14 c0       	rjmp	.+40     	; 0x4d28 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d00:	69 a9       	ldd	r22, Y+49	; 0x31
    4d02:	7a a9       	ldd	r23, Y+50	; 0x32
    4d04:	8b a9       	ldd	r24, Y+51	; 0x33
    4d06:	9c a9       	ldd	r25, Y+52	; 0x34
    4d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d0c:	dc 01       	movw	r26, r24
    4d0e:	cb 01       	movw	r24, r22
    4d10:	98 ab       	std	Y+48, r25	; 0x30
    4d12:	8f a7       	std	Y+47, r24	; 0x2f
    4d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d16:	98 a9       	ldd	r25, Y+48	; 0x30
    4d18:	9c a7       	std	Y+44, r25	; 0x2c
    4d1a:	8b a7       	std	Y+43, r24	; 0x2b
    4d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d20:	01 97       	sbiw	r24, 0x01	; 1
    4d22:	f1 f7       	brne	.-4      	; 0x4d20 <LCD_displayCharacter+0xfc>
    4d24:	9c a7       	std	Y+44, r25	; 0x2c
    4d26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    4d28:	83 e0       	ldi	r24, 0x03	; 3
    4d2a:	63 e0       	ldi	r22, 0x03	; 3
    4d2c:	41 e0       	ldi	r20, 0x01	; 1
    4d2e:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	a0 e8       	ldi	r26, 0x80	; 128
    4d38:	bf e3       	ldi	r27, 0x3F	; 63
    4d3a:	8f a3       	std	Y+39, r24	; 0x27
    4d3c:	98 a7       	std	Y+40, r25	; 0x28
    4d3e:	a9 a7       	std	Y+41, r26	; 0x29
    4d40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d42:	6f a1       	ldd	r22, Y+39	; 0x27
    4d44:	78 a5       	ldd	r23, Y+40	; 0x28
    4d46:	89 a5       	ldd	r24, Y+41	; 0x29
    4d48:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d4a:	20 e0       	ldi	r18, 0x00	; 0
    4d4c:	30 e0       	ldi	r19, 0x00	; 0
    4d4e:	4a ef       	ldi	r20, 0xFA	; 250
    4d50:	54 e4       	ldi	r21, 0x44	; 68
    4d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22
    4d5a:	8b a3       	std	Y+35, r24	; 0x23
    4d5c:	9c a3       	std	Y+36, r25	; 0x24
    4d5e:	ad a3       	std	Y+37, r26	; 0x25
    4d60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d62:	6b a1       	ldd	r22, Y+35	; 0x23
    4d64:	7c a1       	ldd	r23, Y+36	; 0x24
    4d66:	8d a1       	ldd	r24, Y+37	; 0x25
    4d68:	9e a1       	ldd	r25, Y+38	; 0x26
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	40 e8       	ldi	r20, 0x80	; 128
    4d70:	5f e3       	ldi	r21, 0x3F	; 63
    4d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d76:	88 23       	and	r24, r24
    4d78:	2c f4       	brge	.+10     	; 0x4d84 <LCD_displayCharacter+0x160>
		__ticks = 1;
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	9a a3       	std	Y+34, r25	; 0x22
    4d80:	89 a3       	std	Y+33, r24	; 0x21
    4d82:	3f c0       	rjmp	.+126    	; 0x4e02 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    4d84:	6b a1       	ldd	r22, Y+35	; 0x23
    4d86:	7c a1       	ldd	r23, Y+36	; 0x24
    4d88:	8d a1       	ldd	r24, Y+37	; 0x25
    4d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	3f ef       	ldi	r19, 0xFF	; 255
    4d90:	4f e7       	ldi	r20, 0x7F	; 127
    4d92:	57 e4       	ldi	r21, 0x47	; 71
    4d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d98:	18 16       	cp	r1, r24
    4d9a:	4c f5       	brge	.+82     	; 0x4dee <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    4d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    4da0:	89 a5       	ldd	r24, Y+41	; 0x29
    4da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	40 e2       	ldi	r20, 0x20	; 32
    4daa:	51 e4       	ldi	r21, 0x41	; 65
    4dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	bc 01       	movw	r22, r24
    4db6:	cd 01       	movw	r24, r26
    4db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	9a a3       	std	Y+34, r25	; 0x22
    4dc2:	89 a3       	std	Y+33, r24	; 0x21
    4dc4:	0f c0       	rjmp	.+30     	; 0x4de4 <LCD_displayCharacter+0x1c0>
    4dc6:	88 ec       	ldi	r24, 0xC8	; 200
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	98 a3       	std	Y+32, r25	; 0x20
    4dcc:	8f 8f       	std	Y+31, r24	; 0x1f
    4dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dd0:	98 a1       	ldd	r25, Y+32	; 0x20
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	f1 f7       	brne	.-4      	; 0x4dd2 <LCD_displayCharacter+0x1ae>
    4dd6:	98 a3       	std	Y+32, r25	; 0x20
    4dd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dda:	89 a1       	ldd	r24, Y+33	; 0x21
    4ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	9a a3       	std	Y+34, r25	; 0x22
    4de2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de4:	89 a1       	ldd	r24, Y+33	; 0x21
    4de6:	9a a1       	ldd	r25, Y+34	; 0x22
    4de8:	00 97       	sbiw	r24, 0x00	; 0
    4dea:	69 f7       	brne	.-38     	; 0x4dc6 <LCD_displayCharacter+0x1a2>
    4dec:	14 c0       	rjmp	.+40     	; 0x4e16 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dee:	6b a1       	ldd	r22, Y+35	; 0x23
    4df0:	7c a1       	ldd	r23, Y+36	; 0x24
    4df2:	8d a1       	ldd	r24, Y+37	; 0x25
    4df4:	9e a1       	ldd	r25, Y+38	; 0x26
    4df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	cb 01       	movw	r24, r22
    4dfe:	9a a3       	std	Y+34, r25	; 0x22
    4e00:	89 a3       	std	Y+33, r24	; 0x21
    4e02:	89 a1       	ldd	r24, Y+33	; 0x21
    4e04:	9a a1       	ldd	r25, Y+34	; 0x22
    4e06:	9e 8f       	std	Y+30, r25	; 0x1e
    4e08:	8d 8f       	std	Y+29, r24	; 0x1d
    4e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e0e:	01 97       	sbiw	r24, 0x01	; 1
    4e10:	f1 f7       	brne	.-4      	; 0x4e0e <LCD_displayCharacter+0x1ea>
    4e12:	9e 8f       	std	Y+30, r25	; 0x1e
    4e14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    4e16:	82 e0       	ldi	r24, 0x02	; 2
    4e18:	69 ad       	ldd	r22, Y+57	; 0x39
    4e1a:	0e 94 73 21 	call	0x42e6	; 0x42e6 <GPIO_writePort>
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	a0 e8       	ldi	r26, 0x80	; 128
    4e24:	bf e3       	ldi	r27, 0x3F	; 63
    4e26:	89 8f       	std	Y+25, r24	; 0x19
    4e28:	9a 8f       	std	Y+26, r25	; 0x1a
    4e2a:	ab 8f       	std	Y+27, r26	; 0x1b
    4e2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e36:	20 e0       	ldi	r18, 0x00	; 0
    4e38:	30 e0       	ldi	r19, 0x00	; 0
    4e3a:	4a ef       	ldi	r20, 0xFA	; 250
    4e3c:	54 e4       	ldi	r21, 0x44	; 68
    4e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	8d 8b       	std	Y+21, r24	; 0x15
    4e48:	9e 8b       	std	Y+22, r25	; 0x16
    4e4a:	af 8b       	std	Y+23, r26	; 0x17
    4e4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4e50:	7e 89       	ldd	r23, Y+22	; 0x16
    4e52:	8f 89       	ldd	r24, Y+23	; 0x17
    4e54:	98 8d       	ldd	r25, Y+24	; 0x18
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	40 e8       	ldi	r20, 0x80	; 128
    4e5c:	5f e3       	ldi	r21, 0x3F	; 63
    4e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e62:	88 23       	and	r24, r24
    4e64:	2c f4       	brge	.+10     	; 0x4e70 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	9c 8b       	std	Y+20, r25	; 0x14
    4e6c:	8b 8b       	std	Y+19, r24	; 0x13
    4e6e:	3f c0       	rjmp	.+126    	; 0x4eee <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    4e70:	6d 89       	ldd	r22, Y+21	; 0x15
    4e72:	7e 89       	ldd	r23, Y+22	; 0x16
    4e74:	8f 89       	ldd	r24, Y+23	; 0x17
    4e76:	98 8d       	ldd	r25, Y+24	; 0x18
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	3f ef       	ldi	r19, 0xFF	; 255
    4e7c:	4f e7       	ldi	r20, 0x7F	; 127
    4e7e:	57 e4       	ldi	r21, 0x47	; 71
    4e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e84:	18 16       	cp	r1, r24
    4e86:	4c f5       	brge	.+82     	; 0x4eda <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e88:	69 8d       	ldd	r22, Y+25	; 0x19
    4e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e90:	20 e0       	ldi	r18, 0x00	; 0
    4e92:	30 e0       	ldi	r19, 0x00	; 0
    4e94:	40 e2       	ldi	r20, 0x20	; 32
    4e96:	51 e4       	ldi	r21, 0x41	; 65
    4e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	cb 01       	movw	r24, r22
    4ea0:	bc 01       	movw	r22, r24
    4ea2:	cd 01       	movw	r24, r26
    4ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	9c 8b       	std	Y+20, r25	; 0x14
    4eae:	8b 8b       	std	Y+19, r24	; 0x13
    4eb0:	0f c0       	rjmp	.+30     	; 0x4ed0 <LCD_displayCharacter+0x2ac>
    4eb2:	88 ec       	ldi	r24, 0xC8	; 200
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	9a 8b       	std	Y+18, r25	; 0x12
    4eb8:	89 8b       	std	Y+17, r24	; 0x11
    4eba:	89 89       	ldd	r24, Y+17	; 0x11
    4ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    4ebe:	01 97       	sbiw	r24, 0x01	; 1
    4ec0:	f1 f7       	brne	.-4      	; 0x4ebe <LCD_displayCharacter+0x29a>
    4ec2:	9a 8b       	std	Y+18, r25	; 0x12
    4ec4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    4eca:	01 97       	sbiw	r24, 0x01	; 1
    4ecc:	9c 8b       	std	Y+20, r25	; 0x14
    4ece:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ed4:	00 97       	sbiw	r24, 0x00	; 0
    4ed6:	69 f7       	brne	.-38     	; 0x4eb2 <LCD_displayCharacter+0x28e>
    4ed8:	14 c0       	rjmp	.+40     	; 0x4f02 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eda:	6d 89       	ldd	r22, Y+21	; 0x15
    4edc:	7e 89       	ldd	r23, Y+22	; 0x16
    4ede:	8f 89       	ldd	r24, Y+23	; 0x17
    4ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	cb 01       	movw	r24, r22
    4eea:	9c 8b       	std	Y+20, r25	; 0x14
    4eec:	8b 8b       	std	Y+19, r24	; 0x13
    4eee:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef2:	98 8b       	std	Y+16, r25	; 0x10
    4ef4:	8f 87       	std	Y+15, r24	; 0x0f
    4ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ef8:	98 89       	ldd	r25, Y+16	; 0x10
    4efa:	01 97       	sbiw	r24, 0x01	; 1
    4efc:	f1 f7       	brne	.-4      	; 0x4efa <LCD_displayCharacter+0x2d6>
    4efe:	98 8b       	std	Y+16, r25	; 0x10
    4f00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4f02:	83 e0       	ldi	r24, 0x03	; 3
    4f04:	63 e0       	ldi	r22, 0x03	; 3
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <GPIO_writePin>
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	a0 e8       	ldi	r26, 0x80	; 128
    4f12:	bf e3       	ldi	r27, 0x3F	; 63
    4f14:	8b 87       	std	Y+11, r24	; 0x0b
    4f16:	9c 87       	std	Y+12, r25	; 0x0c
    4f18:	ad 87       	std	Y+13, r26	; 0x0d
    4f1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	4a ef       	ldi	r20, 0xFA	; 250
    4f2a:	54 e4       	ldi	r21, 0x44	; 68
    4f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	8f 83       	std	Y+7, r24	; 0x07
    4f36:	98 87       	std	Y+8, r25	; 0x08
    4f38:	a9 87       	std	Y+9, r26	; 0x09
    4f3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f3e:	78 85       	ldd	r23, Y+8	; 0x08
    4f40:	89 85       	ldd	r24, Y+9	; 0x09
    4f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f44:	20 e0       	ldi	r18, 0x00	; 0
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	40 e8       	ldi	r20, 0x80	; 128
    4f4a:	5f e3       	ldi	r21, 0x3F	; 63
    4f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f50:	88 23       	and	r24, r24
    4f52:	2c f4       	brge	.+10     	; 0x4f5e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	9e 83       	std	Y+6, r25	; 0x06
    4f5a:	8d 83       	std	Y+5, r24	; 0x05
    4f5c:	3f c0       	rjmp	.+126    	; 0x4fdc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    4f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f60:	78 85       	ldd	r23, Y+8	; 0x08
    4f62:	89 85       	ldd	r24, Y+9	; 0x09
    4f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	3f ef       	ldi	r19, 0xFF	; 255
    4f6a:	4f e7       	ldi	r20, 0x7F	; 127
    4f6c:	57 e4       	ldi	r21, 0x47	; 71
    4f6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f72:	18 16       	cp	r1, r24
    4f74:	4c f5       	brge	.+82     	; 0x4fc8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	40 e2       	ldi	r20, 0x20	; 32
    4f84:	51 e4       	ldi	r21, 0x41	; 65
    4f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	bc 01       	movw	r22, r24
    4f90:	cd 01       	movw	r24, r26
    4f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	9e 83       	std	Y+6, r25	; 0x06
    4f9c:	8d 83       	std	Y+5, r24	; 0x05
    4f9e:	0f c0       	rjmp	.+30     	; 0x4fbe <LCD_displayCharacter+0x39a>
    4fa0:	88 ec       	ldi	r24, 0xC8	; 200
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9c 83       	std	Y+4, r25	; 0x04
    4fa6:	8b 83       	std	Y+3, r24	; 0x03
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4faa:	9c 81       	ldd	r25, Y+4	; 0x04
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <LCD_displayCharacter+0x388>
    4fb0:	9c 83       	std	Y+4, r25	; 0x04
    4fb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb8:	01 97       	sbiw	r24, 0x01	; 1
    4fba:	9e 83       	std	Y+6, r25	; 0x06
    4fbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc2:	00 97       	sbiw	r24, 0x00	; 0
    4fc4:	69 f7       	brne	.-38     	; 0x4fa0 <LCD_displayCharacter+0x37c>
    4fc6:	14 c0       	rjmp	.+40     	; 0x4ff0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    4fca:	78 85       	ldd	r23, Y+8	; 0x08
    4fcc:	89 85       	ldd	r24, Y+9	; 0x09
    4fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	9e 83       	std	Y+6, r25	; 0x06
    4fda:	8d 83       	std	Y+5, r24	; 0x05
    4fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4fde:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe0:	9a 83       	std	Y+2, r25	; 0x02
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <LCD_displayCharacter+0x3c4>
    4fec:	9a 83       	std	Y+2, r25	; 0x02
    4fee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4ff0:	e9 96       	adiw	r28, 0x39	; 57
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	de bf       	out	0x3e, r29	; 62
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	cf 91       	pop	r28
    4ffe:	df 91       	pop	r29
    5000:	08 95       	ret

00005002 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    5002:	df 93       	push	r29
    5004:	cf 93       	push	r28
    5006:	00 d0       	rcall	.+0      	; 0x5008 <LCD_displayString+0x6>
    5008:	0f 92       	push	r0
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
    500e:	9b 83       	std	Y+3, r25	; 0x03
    5010:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5012:	19 82       	std	Y+1, r1	; 0x01
    5014:	0e c0       	rjmp	.+28     	; 0x5032 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    5016:	89 81       	ldd	r24, Y+1	; 0x01
    5018:	28 2f       	mov	r18, r24
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	8a 81       	ldd	r24, Y+2	; 0x02
    501e:	9b 81       	ldd	r25, Y+3	; 0x03
    5020:	fc 01       	movw	r30, r24
    5022:	e2 0f       	add	r30, r18
    5024:	f3 1f       	adc	r31, r19
    5026:	80 81       	ld	r24, Z
    5028:	0e 94 12 26 	call	0x4c24	; 0x4c24 <LCD_displayCharacter>
		i++;
    502c:	89 81       	ldd	r24, Y+1	; 0x01
    502e:	8f 5f       	subi	r24, 0xFF	; 255
    5030:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    5032:	89 81       	ldd	r24, Y+1	; 0x01
    5034:	28 2f       	mov	r18, r24
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	8a 81       	ldd	r24, Y+2	; 0x02
    503a:	9b 81       	ldd	r25, Y+3	; 0x03
    503c:	fc 01       	movw	r30, r24
    503e:	e2 0f       	add	r30, r18
    5040:	f3 1f       	adc	r31, r19
    5042:	80 81       	ld	r24, Z
    5044:	88 23       	and	r24, r24
    5046:	39 f7       	brne	.-50     	; 0x5016 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    5048:	0f 90       	pop	r0
    504a:	0f 90       	pop	r0
    504c:	0f 90       	pop	r0
    504e:	cf 91       	pop	r28
    5050:	df 91       	pop	r29
    5052:	08 95       	ret

00005054 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    5054:	df 93       	push	r29
    5056:	cf 93       	push	r28
    5058:	00 d0       	rcall	.+0      	; 0x505a <LCD_moveCursor+0x6>
    505a:	00 d0       	rcall	.+0      	; 0x505c <LCD_moveCursor+0x8>
    505c:	0f 92       	push	r0
    505e:	cd b7       	in	r28, 0x3d	; 61
    5060:	de b7       	in	r29, 0x3e	; 62
    5062:	8a 83       	std	Y+2, r24	; 0x02
    5064:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    5066:	8a 81       	ldd	r24, Y+2	; 0x02
    5068:	28 2f       	mov	r18, r24
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	3d 83       	std	Y+5, r19	; 0x05
    506e:	2c 83       	std	Y+4, r18	; 0x04
    5070:	8c 81       	ldd	r24, Y+4	; 0x04
    5072:	9d 81       	ldd	r25, Y+5	; 0x05
    5074:	81 30       	cpi	r24, 0x01	; 1
    5076:	91 05       	cpc	r25, r1
    5078:	c1 f0       	breq	.+48     	; 0x50aa <LCD_moveCursor+0x56>
    507a:	2c 81       	ldd	r18, Y+4	; 0x04
    507c:	3d 81       	ldd	r19, Y+5	; 0x05
    507e:	22 30       	cpi	r18, 0x02	; 2
    5080:	31 05       	cpc	r19, r1
    5082:	2c f4       	brge	.+10     	; 0x508e <LCD_moveCursor+0x3a>
    5084:	8c 81       	ldd	r24, Y+4	; 0x04
    5086:	9d 81       	ldd	r25, Y+5	; 0x05
    5088:	00 97       	sbiw	r24, 0x00	; 0
    508a:	61 f0       	breq	.+24     	; 0x50a4 <LCD_moveCursor+0x50>
    508c:	19 c0       	rjmp	.+50     	; 0x50c0 <LCD_moveCursor+0x6c>
    508e:	2c 81       	ldd	r18, Y+4	; 0x04
    5090:	3d 81       	ldd	r19, Y+5	; 0x05
    5092:	22 30       	cpi	r18, 0x02	; 2
    5094:	31 05       	cpc	r19, r1
    5096:	69 f0       	breq	.+26     	; 0x50b2 <LCD_moveCursor+0x5e>
    5098:	8c 81       	ldd	r24, Y+4	; 0x04
    509a:	9d 81       	ldd	r25, Y+5	; 0x05
    509c:	83 30       	cpi	r24, 0x03	; 3
    509e:	91 05       	cpc	r25, r1
    50a0:	61 f0       	breq	.+24     	; 0x50ba <LCD_moveCursor+0x66>
    50a2:	0e c0       	rjmp	.+28     	; 0x50c0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    50a4:	8b 81       	ldd	r24, Y+3	; 0x03
    50a6:	89 83       	std	Y+1, r24	; 0x01
    50a8:	0b c0       	rjmp	.+22     	; 0x50c0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    50aa:	8b 81       	ldd	r24, Y+3	; 0x03
    50ac:	80 5c       	subi	r24, 0xC0	; 192
    50ae:	89 83       	std	Y+1, r24	; 0x01
    50b0:	07 c0       	rjmp	.+14     	; 0x50c0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    50b2:	8b 81       	ldd	r24, Y+3	; 0x03
    50b4:	80 5f       	subi	r24, 0xF0	; 240
    50b6:	89 83       	std	Y+1, r24	; 0x01
    50b8:	03 c0       	rjmp	.+6      	; 0x50c0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    50ba:	8b 81       	ldd	r24, Y+3	; 0x03
    50bc:	80 5b       	subi	r24, 0xB0	; 176
    50be:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    50c0:	89 81       	ldd	r24, Y+1	; 0x01
    50c2:	80 68       	ori	r24, 0x80	; 128
    50c4:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_sendCommand>
}
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
    50d0:	0f 90       	pop	r0
    50d2:	cf 91       	pop	r28
    50d4:	df 91       	pop	r29
    50d6:	08 95       	ret

000050d8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    50d8:	df 93       	push	r29
    50da:	cf 93       	push	r28
    50dc:	00 d0       	rcall	.+0      	; 0x50de <LCD_displayStringRowColumn+0x6>
    50de:	00 d0       	rcall	.+0      	; 0x50e0 <LCD_displayStringRowColumn+0x8>
    50e0:	cd b7       	in	r28, 0x3d	; 61
    50e2:	de b7       	in	r29, 0x3e	; 62
    50e4:	89 83       	std	Y+1, r24	; 0x01
    50e6:	6a 83       	std	Y+2, r22	; 0x02
    50e8:	5c 83       	std	Y+4, r21	; 0x04
    50ea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    50ec:	89 81       	ldd	r24, Y+1	; 0x01
    50ee:	6a 81       	ldd	r22, Y+2	; 0x02
    50f0:	0e 94 2a 28 	call	0x5054	; 0x5054 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    50f4:	8b 81       	ldd	r24, Y+3	; 0x03
    50f6:	9c 81       	ldd	r25, Y+4	; 0x04
    50f8:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
}
    50fc:	0f 90       	pop	r0
    50fe:	0f 90       	pop	r0
    5100:	0f 90       	pop	r0
    5102:	0f 90       	pop	r0
    5104:	cf 91       	pop	r28
    5106:	df 91       	pop	r29
    5108:	08 95       	ret

0000510a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    510a:	df 93       	push	r29
    510c:	cf 93       	push	r28
    510e:	cd b7       	in	r28, 0x3d	; 61
    5110:	de b7       	in	r29, 0x3e	; 62
    5112:	62 97       	sbiw	r28, 0x12	; 18
    5114:	0f b6       	in	r0, 0x3f	; 63
    5116:	f8 94       	cli
    5118:	de bf       	out	0x3e, r29	; 62
    511a:	0f be       	out	0x3f, r0	; 63
    511c:	cd bf       	out	0x3d, r28	; 61
    511e:	9a 8b       	std	Y+18, r25	; 0x12
    5120:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    5122:	89 89       	ldd	r24, Y+17	; 0x11
    5124:	9a 89       	ldd	r25, Y+18	; 0x12
    5126:	9e 01       	movw	r18, r28
    5128:	2f 5f       	subi	r18, 0xFF	; 255
    512a:	3f 4f       	sbci	r19, 0xFF	; 255
    512c:	b9 01       	movw	r22, r18
    512e:	4a e0       	ldi	r20, 0x0A	; 10
    5130:	50 e0       	ldi	r21, 0x00	; 0
    5132:	0e 94 48 2b 	call	0x5690	; 0x5690 <itoa>
   LCD_displayString(buff); /* Display the string */
    5136:	ce 01       	movw	r24, r28
    5138:	01 96       	adiw	r24, 0x01	; 1
    513a:	0e 94 01 28 	call	0x5002	; 0x5002 <LCD_displayString>
}
    513e:	62 96       	adiw	r28, 0x12	; 18
    5140:	0f b6       	in	r0, 0x3f	; 63
    5142:	f8 94       	cli
    5144:	de bf       	out	0x3e, r29	; 62
    5146:	0f be       	out	0x3f, r0	; 63
    5148:	cd bf       	out	0x3d, r28	; 61
    514a:	cf 91       	pop	r28
    514c:	df 91       	pop	r29
    514e:	08 95       	ret

00005150 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    5150:	df 93       	push	r29
    5152:	cf 93       	push	r28
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	0e 94 23 24 	call	0x4846	; 0x4846 <LCD_sendCommand>
}
    515e:	cf 91       	pop	r28
    5160:	df 91       	pop	r29
    5162:	08 95       	ret

00005164 <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Input: pointer to the configuration structure with type Timer1_ConfigType
 * Return: Void
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    5164:	df 93       	push	r29
    5166:	cf 93       	push	r28
    5168:	00 d0       	rcall	.+0      	; 0x516a <Timer1_init+0x6>
    516a:	cd b7       	in	r28, 0x3d	; 61
    516c:	de b7       	in	r29, 0x3e	; 62
    516e:	9a 83       	std	Y+2, r25	; 0x02
    5170:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    5172:	ef e4       	ldi	r30, 0x4F	; 79
    5174:	f0 e0       	ldi	r31, 0x00	; 0
    5176:	8c e0       	ldi	r24, 0x0C	; 12
    5178:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    517a:	af e4       	ldi	r26, 0x4F	; 79
    517c:	b0 e0       	ldi	r27, 0x00	; 0
    517e:	ef e4       	ldi	r30, 0x4F	; 79
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	80 81       	ld	r24, Z
    5184:	98 2f       	mov	r25, r24
    5186:	9c 7f       	andi	r25, 0xFC	; 252
    5188:	e9 81       	ldd	r30, Y+1	; 0x01
    518a:	fa 81       	ldd	r31, Y+2	; 0x02
    518c:	85 81       	ldd	r24, Z+5	; 0x05
    518e:	83 70       	andi	r24, 0x03	; 3
    5190:	89 2b       	or	r24, r25
    5192:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    5194:	ae e4       	ldi	r26, 0x4E	; 78
    5196:	b0 e0       	ldi	r27, 0x00	; 0
    5198:	ee e4       	ldi	r30, 0x4E	; 78
    519a:	f0 e0       	ldi	r31, 0x00	; 0
    519c:	80 81       	ld	r24, Z
    519e:	28 2f       	mov	r18, r24
    51a0:	27 7e       	andi	r18, 0xE7	; 231
    51a2:	e9 81       	ldd	r30, Y+1	; 0x01
    51a4:	fa 81       	ldd	r31, Y+2	; 0x02
    51a6:	85 81       	ldd	r24, Z+5	; 0x05
    51a8:	88 2f       	mov	r24, r24
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	8c 70       	andi	r24, 0x0C	; 12
    51ae:	90 70       	andi	r25, 0x00	; 0
    51b0:	88 0f       	add	r24, r24
    51b2:	99 1f       	adc	r25, r25
    51b4:	82 2b       	or	r24, r18
    51b6:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    51b8:	ac e4       	ldi	r26, 0x4C	; 76
    51ba:	b0 e0       	ldi	r27, 0x00	; 0
    51bc:	e9 81       	ldd	r30, Y+1	; 0x01
    51be:	fa 81       	ldd	r31, Y+2	; 0x02
    51c0:	80 81       	ld	r24, Z
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	11 96       	adiw	r26, 0x01	; 1
    51c6:	9c 93       	st	X, r25
    51c8:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    51ca:	e9 81       	ldd	r30, Y+1	; 0x01
    51cc:	fa 81       	ldd	r31, Y+2	; 0x02
    51ce:	85 81       	ldd	r24, Z+5	; 0x05
    51d0:	88 23       	and	r24, r24
    51d2:	29 f4       	brne	.+10     	; 0x51de <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    51d4:	e9 e5       	ldi	r30, 0x59	; 89
    51d6:	f0 e0       	ldi	r31, 0x00	; 0
    51d8:	84 e0       	ldi	r24, 0x04	; 4
    51da:	80 83       	st	Z, r24
    51dc:	12 c0       	rjmp	.+36     	; 0x5202 <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    51de:	e9 81       	ldd	r30, Y+1	; 0x01
    51e0:	fa 81       	ldd	r31, Y+2	; 0x02
    51e2:	85 81       	ldd	r24, Z+5	; 0x05
    51e4:	84 30       	cpi	r24, 0x04	; 4
    51e6:	69 f4       	brne	.+26     	; 0x5202 <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    51e8:	aa e4       	ldi	r26, 0x4A	; 74
    51ea:	b0 e0       	ldi	r27, 0x00	; 0
    51ec:	e9 81       	ldd	r30, Y+1	; 0x01
    51ee:	fa 81       	ldd	r31, Y+2	; 0x02
    51f0:	82 81       	ldd	r24, Z+2	; 0x02
    51f2:	93 81       	ldd	r25, Z+3	; 0x03
    51f4:	11 96       	adiw	r26, 0x01	; 1
    51f6:	9c 93       	st	X, r25
    51f8:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    51fa:	e9 e5       	ldi	r30, 0x59	; 89
    51fc:	f0 e0       	ldi	r31, 0x00	; 0
    51fe:	80 e1       	ldi	r24, 0x10	; 16
    5200:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    5202:	ae e4       	ldi	r26, 0x4E	; 78
    5204:	b0 e0       	ldi	r27, 0x00	; 0
    5206:	ee e4       	ldi	r30, 0x4E	; 78
    5208:	f0 e0       	ldi	r31, 0x00	; 0
    520a:	80 81       	ld	r24, Z
    520c:	98 2f       	mov	r25, r24
    520e:	98 7f       	andi	r25, 0xF8	; 248
    5210:	e9 81       	ldd	r30, Y+1	; 0x01
    5212:	fa 81       	ldd	r31, Y+2	; 0x02
    5214:	84 81       	ldd	r24, Z+4	; 0x04
    5216:	89 2b       	or	r24, r25
    5218:	8c 93       	st	X, r24
}
    521a:	0f 90       	pop	r0
    521c:	0f 90       	pop	r0
    521e:	cf 91       	pop	r28
    5220:	df 91       	pop	r29
    5222:	08 95       	ret

00005224 <Timer1_deInit>:
 * Description: Function to disable the Timer1
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_deInit(void)
{
    5224:	df 93       	push	r29
    5226:	cf 93       	push	r28
    5228:	cd b7       	in	r28, 0x3d	; 61
    522a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0 ;
    522c:	ef e4       	ldi	r30, 0x4F	; 79
    522e:	f0 e0       	ldi	r31, 0x00	; 0
    5230:	10 82       	st	Z, r1

	TCCR1B = 0 ;
    5232:	ee e4       	ldi	r30, 0x4E	; 78
    5234:	f0 e0       	ldi	r31, 0x00	; 0
    5236:	10 82       	st	Z, r1

	TIMSK = 0 ;
    5238:	e9 e5       	ldi	r30, 0x59	; 89
    523a:	f0 e0       	ldi	r31, 0x00	; 0
    523c:	10 82       	st	Z, r1

}
    523e:	cf 91       	pop	r28
    5240:	df 91       	pop	r29
    5242:	08 95       	ret

00005244 <Timer1_setCallBack>:
 * Description: set the Call Back function address
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_setCallBack(void (*a_ptr)(void))
{
    5244:	df 93       	push	r29
    5246:	cf 93       	push	r28
    5248:	00 d0       	rcall	.+0      	; 0x524a <Timer1_setCallBack+0x6>
    524a:	cd b7       	in	r28, 0x3d	; 61
    524c:	de b7       	in	r29, 0x3e	; 62
    524e:	9a 83       	std	Y+2, r25	; 0x02
    5250:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    5252:	89 81       	ldd	r24, Y+1	; 0x01
    5254:	9a 81       	ldd	r25, Y+2	; 0x02
    5256:	90 93 0a 01 	sts	0x010A, r25
    525a:	80 93 09 01 	sts	0x0109, r24
}
    525e:	0f 90       	pop	r0
    5260:	0f 90       	pop	r0
    5262:	cf 91       	pop	r28
    5264:	df 91       	pop	r29
    5266:	08 95       	ret

00005268 <__vector_9>:

/*******************************************************************************
 *                    ISR (Interrupt Service Routines)                         *
 *******************************************************************************/
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    5268:	1f 92       	push	r1
    526a:	0f 92       	push	r0
    526c:	0f b6       	in	r0, 0x3f	; 63
    526e:	0f 92       	push	r0
    5270:	11 24       	eor	r1, r1
    5272:	2f 93       	push	r18
    5274:	3f 93       	push	r19
    5276:	4f 93       	push	r20
    5278:	5f 93       	push	r21
    527a:	6f 93       	push	r22
    527c:	7f 93       	push	r23
    527e:	8f 93       	push	r24
    5280:	9f 93       	push	r25
    5282:	af 93       	push	r26
    5284:	bf 93       	push	r27
    5286:	ef 93       	push	r30
    5288:	ff 93       	push	r31
    528a:	df 93       	push	r29
    528c:	cf 93       	push	r28
    528e:	cd b7       	in	r28, 0x3d	; 61
    5290:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    5292:	80 91 09 01 	lds	r24, 0x0109
    5296:	90 91 0a 01 	lds	r25, 0x010A
    529a:	00 97       	sbiw	r24, 0x00	; 0
    529c:	29 f0       	breq	.+10     	; 0x52a8 <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    529e:	e0 91 09 01 	lds	r30, 0x0109
    52a2:	f0 91 0a 01 	lds	r31, 0x010A
    52a6:	09 95       	icall
	}
}
    52a8:	cf 91       	pop	r28
    52aa:	df 91       	pop	r29
    52ac:	ff 91       	pop	r31
    52ae:	ef 91       	pop	r30
    52b0:	bf 91       	pop	r27
    52b2:	af 91       	pop	r26
    52b4:	9f 91       	pop	r25
    52b6:	8f 91       	pop	r24
    52b8:	7f 91       	pop	r23
    52ba:	6f 91       	pop	r22
    52bc:	5f 91       	pop	r21
    52be:	4f 91       	pop	r20
    52c0:	3f 91       	pop	r19
    52c2:	2f 91       	pop	r18
    52c4:	0f 90       	pop	r0
    52c6:	0f be       	out	0x3f, r0	; 63
    52c8:	0f 90       	pop	r0
    52ca:	1f 90       	pop	r1
    52cc:	18 95       	reti

000052ce <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    52ce:	1f 92       	push	r1
    52d0:	0f 92       	push	r0
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	0f 92       	push	r0
    52d6:	11 24       	eor	r1, r1
    52d8:	2f 93       	push	r18
    52da:	3f 93       	push	r19
    52dc:	4f 93       	push	r20
    52de:	5f 93       	push	r21
    52e0:	6f 93       	push	r22
    52e2:	7f 93       	push	r23
    52e4:	8f 93       	push	r24
    52e6:	9f 93       	push	r25
    52e8:	af 93       	push	r26
    52ea:	bf 93       	push	r27
    52ec:	ef 93       	push	r30
    52ee:	ff 93       	push	r31
    52f0:	df 93       	push	r29
    52f2:	cf 93       	push	r28
    52f4:	cd b7       	in	r28, 0x3d	; 61
    52f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    52f8:	80 91 09 01 	lds	r24, 0x0109
    52fc:	90 91 0a 01 	lds	r25, 0x010A
    5300:	00 97       	sbiw	r24, 0x00	; 0
    5302:	29 f0       	breq	.+10     	; 0x530e <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    5304:	e0 91 09 01 	lds	r30, 0x0109
    5308:	f0 91 0a 01 	lds	r31, 0x010A
    530c:	09 95       	icall
	}
}
    530e:	cf 91       	pop	r28
    5310:	df 91       	pop	r29
    5312:	ff 91       	pop	r31
    5314:	ef 91       	pop	r30
    5316:	bf 91       	pop	r27
    5318:	af 91       	pop	r26
    531a:	9f 91       	pop	r25
    531c:	8f 91       	pop	r24
    531e:	7f 91       	pop	r23
    5320:	6f 91       	pop	r22
    5322:	5f 91       	pop	r21
    5324:	4f 91       	pop	r20
    5326:	3f 91       	pop	r19
    5328:	2f 91       	pop	r18
    532a:	0f 90       	pop	r0
    532c:	0f be       	out	0x3f, r0	; 63
    532e:	0f 90       	pop	r0
    5330:	1f 90       	pop	r1
    5332:	18 95       	reti

00005334 <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    5334:	1f 92       	push	r1
    5336:	0f 92       	push	r0
    5338:	0f b6       	in	r0, 0x3f	; 63
    533a:	0f 92       	push	r0
    533c:	11 24       	eor	r1, r1
    533e:	2f 93       	push	r18
    5340:	3f 93       	push	r19
    5342:	4f 93       	push	r20
    5344:	5f 93       	push	r21
    5346:	6f 93       	push	r22
    5348:	7f 93       	push	r23
    534a:	8f 93       	push	r24
    534c:	9f 93       	push	r25
    534e:	af 93       	push	r26
    5350:	bf 93       	push	r27
    5352:	ef 93       	push	r30
    5354:	ff 93       	push	r31
    5356:	df 93       	push	r29
    5358:	cf 93       	push	r28
    535a:	cd b7       	in	r28, 0x3d	; 61
    535c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    535e:	80 91 09 01 	lds	r24, 0x0109
    5362:	90 91 0a 01 	lds	r25, 0x010A
    5366:	00 97       	sbiw	r24, 0x00	; 0
    5368:	29 f0       	breq	.+10     	; 0x5374 <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    536a:	e0 91 09 01 	lds	r30, 0x0109
    536e:	f0 91 0a 01 	lds	r31, 0x010A
    5372:	09 95       	icall
	}
}
    5374:	cf 91       	pop	r28
    5376:	df 91       	pop	r29
    5378:	ff 91       	pop	r31
    537a:	ef 91       	pop	r30
    537c:	bf 91       	pop	r27
    537e:	af 91       	pop	r26
    5380:	9f 91       	pop	r25
    5382:	8f 91       	pop	r24
    5384:	7f 91       	pop	r23
    5386:	6f 91       	pop	r22
    5388:	5f 91       	pop	r21
    538a:	4f 91       	pop	r20
    538c:	3f 91       	pop	r19
    538e:	2f 91       	pop	r18
    5390:	0f 90       	pop	r0
    5392:	0f be       	out	0x3f, r0	; 63
    5394:	0f 90       	pop	r0
    5396:	1f 90       	pop	r1
    5398:	18 95       	reti

0000539a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    539a:	df 93       	push	r29
    539c:	cf 93       	push	r28
    539e:	00 d0       	rcall	.+0      	; 0x53a0 <UART_init+0x6>
    53a0:	00 d0       	rcall	.+0      	; 0x53a2 <UART_init+0x8>
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	9c 83       	std	Y+4, r25	; 0x04
    53a8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr = 0 ; /* Variable For Baud Rate Register */
    53aa:	1a 82       	std	Y+2, r1	; 0x02
    53ac:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ; /* Double Speed of UART */
    53ae:	eb e2       	ldi	r30, 0x2B	; 43
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	82 e0       	ldi	r24, 0x02	; 2
    53b4:	80 83       	st	Z, r24
	
	UCSRB = (1<<TXEN) | (1<<RXEN) ; /* Enable Receive & Transmit */
    53b6:	ea e2       	ldi	r30, 0x2A	; 42
    53b8:	f0 e0       	ldi	r31, 0x00	; 0
    53ba:	88 e1       	ldi	r24, 0x18	; 24
    53bc:	80 83       	st	Z, r24

	/* Configure UCSZ2 By Desired Data Bits */
	UCSRB = (UCSRB & 0xFB) | (GET_BIT(Config_Ptr->bit_data , 2)<<2) ;
    53be:	aa e2       	ldi	r26, 0x2A	; 42
    53c0:	b0 e0       	ldi	r27, 0x00	; 0
    53c2:	ea e2       	ldi	r30, 0x2A	; 42
    53c4:	f0 e0       	ldi	r31, 0x00	; 0
    53c6:	80 81       	ld	r24, Z
    53c8:	98 2f       	mov	r25, r24
    53ca:	9b 7f       	andi	r25, 0xFB	; 251
    53cc:	eb 81       	ldd	r30, Y+3	; 0x03
    53ce:	fc 81       	ldd	r31, Y+4	; 0x04
    53d0:	80 81       	ld	r24, Z
    53d2:	84 70       	andi	r24, 0x04	; 4
    53d4:	89 2b       	or	r24, r25
    53d6:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL) ; /* Set This Bit to Write in UCSRC Reg. */
    53d8:	e0 e4       	ldi	r30, 0x40	; 64
    53da:	f0 e0       	ldi	r31, 0x00	; 0
    53dc:	80 e8       	ldi	r24, 0x80	; 128
    53de:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity<<4) ; /* Configure Parity Bit */
    53e0:	a0 e4       	ldi	r26, 0x40	; 64
    53e2:	b0 e0       	ldi	r27, 0x00	; 0
    53e4:	e0 e4       	ldi	r30, 0x40	; 64
    53e6:	f0 e0       	ldi	r31, 0x00	; 0
    53e8:	80 81       	ld	r24, Z
    53ea:	28 2f       	mov	r18, r24
    53ec:	2f 7c       	andi	r18, 0xCF	; 207
    53ee:	eb 81       	ldd	r30, Y+3	; 0x03
    53f0:	fc 81       	ldd	r31, Y+4	; 0x04
    53f2:	81 81       	ldd	r24, Z+1	; 0x01
    53f4:	88 2f       	mov	r24, r24
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	82 95       	swap	r24
    53fa:	92 95       	swap	r25
    53fc:	90 7f       	andi	r25, 0xF0	; 240
    53fe:	98 27       	eor	r25, r24
    5400:	80 7f       	andi	r24, 0xF0	; 240
    5402:	98 27       	eor	r25, r24
    5404:	82 2b       	or	r24, r18
    5406:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit<<3); /* Configure Stop Bit */
    5408:	a0 e4       	ldi	r26, 0x40	; 64
    540a:	b0 e0       	ldi	r27, 0x00	; 0
    540c:	e0 e4       	ldi	r30, 0x40	; 64
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	80 81       	ld	r24, Z
    5412:	28 2f       	mov	r18, r24
    5414:	27 7f       	andi	r18, 0xF7	; 247
    5416:	eb 81       	ldd	r30, Y+3	; 0x03
    5418:	fc 81       	ldd	r31, Y+4	; 0x04
    541a:	82 81       	ldd	r24, Z+2	; 0x02
    541c:	88 2f       	mov	r24, r24
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	88 0f       	add	r24, r24
    5422:	99 1f       	adc	r25, r25
    5424:	88 0f       	add	r24, r24
    5426:	99 1f       	adc	r25, r25
    5428:	88 0f       	add	r24, r24
    542a:	99 1f       	adc	r25, r25
    542c:	82 2b       	or	r24, r18
    542e:	8c 93       	st	X, r24

	/* Configure UCSZ0:1 By Desired Data Bits */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->bit_data & 0x03)<< 1 ) ;
    5430:	a0 e4       	ldi	r26, 0x40	; 64
    5432:	b0 e0       	ldi	r27, 0x00	; 0
    5434:	e0 e4       	ldi	r30, 0x40	; 64
    5436:	f0 e0       	ldi	r31, 0x00	; 0
    5438:	80 81       	ld	r24, Z
    543a:	28 2f       	mov	r18, r24
    543c:	29 7f       	andi	r18, 0xF9	; 249
    543e:	eb 81       	ldd	r30, Y+3	; 0x03
    5440:	fc 81       	ldd	r31, Y+4	; 0x04
    5442:	80 81       	ld	r24, Z
    5444:	88 2f       	mov	r24, r24
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	83 70       	andi	r24, 0x03	; 3
    544a:	90 70       	andi	r25, 0x00	; 0
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	82 2b       	or	r24, r18
    5452:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr = (uint16)((F_CPU / (8UL * Config_Ptr->baud_rate)) - 1) ;
    5454:	eb 81       	ldd	r30, Y+3	; 0x03
    5456:	fc 81       	ldd	r31, Y+4	; 0x04
    5458:	83 81       	ldd	r24, Z+3	; 0x03
    545a:	94 81       	ldd	r25, Z+4	; 0x04
    545c:	a5 81       	ldd	r26, Z+5	; 0x05
    545e:	b6 81       	ldd	r27, Z+6	; 0x06
    5460:	88 0f       	add	r24, r24
    5462:	99 1f       	adc	r25, r25
    5464:	aa 1f       	adc	r26, r26
    5466:	bb 1f       	adc	r27, r27
    5468:	88 0f       	add	r24, r24
    546a:	99 1f       	adc	r25, r25
    546c:	aa 1f       	adc	r26, r26
    546e:	bb 1f       	adc	r27, r27
    5470:	88 0f       	add	r24, r24
    5472:	99 1f       	adc	r25, r25
    5474:	aa 1f       	adc	r26, r26
    5476:	bb 1f       	adc	r27, r27
    5478:	9c 01       	movw	r18, r24
    547a:	ad 01       	movw	r20, r26
    547c:	80 e0       	ldi	r24, 0x00	; 0
    547e:	92 e1       	ldi	r25, 0x12	; 18
    5480:	aa e7       	ldi	r26, 0x7A	; 122
    5482:	b0 e0       	ldi	r27, 0x00	; 0
    5484:	bc 01       	movw	r22, r24
    5486:	cd 01       	movw	r24, r26
    5488:	0e 94 ef 2a 	call	0x55de	; 0x55de <__udivmodsi4>
    548c:	da 01       	movw	r26, r20
    548e:	c9 01       	movw	r24, r18
    5490:	01 97       	sbiw	r24, 0x01	; 1
    5492:	9a 83       	std	Y+2, r25	; 0x02
    5494:	89 83       	std	Y+1, r24	; 0x01

	/* Configure UBRR Reg with Desired Baud Rate */
	UBRRH = ubrr>>8 ;
    5496:	e0 e4       	ldi	r30, 0x40	; 64
    5498:	f0 e0       	ldi	r31, 0x00	; 0
    549a:	89 81       	ldd	r24, Y+1	; 0x01
    549c:	9a 81       	ldd	r25, Y+2	; 0x02
    549e:	89 2f       	mov	r24, r25
    54a0:	99 27       	eor	r25, r25
    54a2:	80 83       	st	Z, r24
	UBRRL = ubrr ;
    54a4:	e9 e2       	ldi	r30, 0x29	; 41
    54a6:	f0 e0       	ldi	r31, 0x00	; 0
    54a8:	89 81       	ldd	r24, Y+1	; 0x01
    54aa:	80 83       	st	Z, r24

}
    54ac:	0f 90       	pop	r0
    54ae:	0f 90       	pop	r0
    54b0:	0f 90       	pop	r0
    54b2:	0f 90       	pop	r0
    54b4:	cf 91       	pop	r28
    54b6:	df 91       	pop	r29
    54b8:	08 95       	ret

000054ba <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    54ba:	df 93       	push	r29
    54bc:	cf 93       	push	r28
    54be:	0f 92       	push	r0
    54c0:	cd b7       	in	r28, 0x3d	; 61
    54c2:	de b7       	in	r29, 0x3e	; 62
    54c4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    54c6:	eb e2       	ldi	r30, 0x2B	; 43
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	80 81       	ld	r24, Z
    54cc:	88 2f       	mov	r24, r24
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	80 72       	andi	r24, 0x20	; 32
    54d2:	90 70       	andi	r25, 0x00	; 0
    54d4:	00 97       	sbiw	r24, 0x00	; 0
    54d6:	b9 f3       	breq	.-18     	; 0x54c6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    54d8:	ec e2       	ldi	r30, 0x2C	; 44
    54da:	f0 e0       	ldi	r31, 0x00	; 0
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
    54de:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    54e0:	0f 90       	pop	r0
    54e2:	cf 91       	pop	r28
    54e4:	df 91       	pop	r29
    54e6:	08 95       	ret

000054e8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    54e8:	df 93       	push	r29
    54ea:	cf 93       	push	r28
    54ec:	cd b7       	in	r28, 0x3d	; 61
    54ee:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    54f0:	eb e2       	ldi	r30, 0x2B	; 43
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	80 81       	ld	r24, Z
    54f6:	88 23       	and	r24, r24
    54f8:	dc f7       	brge	.-10     	; 0x54f0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    54fa:	ec e2       	ldi	r30, 0x2C	; 44
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	80 81       	ld	r24, Z
}
    5500:	cf 91       	pop	r28
    5502:	df 91       	pop	r29
    5504:	08 95       	ret

00005506 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    5506:	df 93       	push	r29
    5508:	cf 93       	push	r28
    550a:	00 d0       	rcall	.+0      	; 0x550c <UART_sendString+0x6>
    550c:	0f 92       	push	r0
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
    5512:	9b 83       	std	Y+3, r25	; 0x03
    5514:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5516:	19 82       	std	Y+1, r1	; 0x01
    5518:	0e c0       	rjmp	.+28     	; 0x5536 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    551a:	89 81       	ldd	r24, Y+1	; 0x01
    551c:	28 2f       	mov	r18, r24
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	8a 81       	ldd	r24, Y+2	; 0x02
    5522:	9b 81       	ldd	r25, Y+3	; 0x03
    5524:	fc 01       	movw	r30, r24
    5526:	e2 0f       	add	r30, r18
    5528:	f3 1f       	adc	r31, r19
    552a:	80 81       	ld	r24, Z
    552c:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <UART_sendByte>
		i++;
    5530:	89 81       	ldd	r24, Y+1	; 0x01
    5532:	8f 5f       	subi	r24, 0xFF	; 255
    5534:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    5536:	89 81       	ldd	r24, Y+1	; 0x01
    5538:	28 2f       	mov	r18, r24
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	8a 81       	ldd	r24, Y+2	; 0x02
    553e:	9b 81       	ldd	r25, Y+3	; 0x03
    5540:	fc 01       	movw	r30, r24
    5542:	e2 0f       	add	r30, r18
    5544:	f3 1f       	adc	r31, r19
    5546:	80 81       	ld	r24, Z
    5548:	88 23       	and	r24, r24
    554a:	39 f7       	brne	.-50     	; 0x551a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    554c:	0f 90       	pop	r0
    554e:	0f 90       	pop	r0
    5550:	0f 90       	pop	r0
    5552:	cf 91       	pop	r28
    5554:	df 91       	pop	r29
    5556:	08 95       	ret

00005558 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	df 93       	push	r29
    555e:	cf 93       	push	r28
    5560:	00 d0       	rcall	.+0      	; 0x5562 <UART_receiveString+0xa>
    5562:	0f 92       	push	r0
    5564:	cd b7       	in	r28, 0x3d	; 61
    5566:	de b7       	in	r29, 0x3e	; 62
    5568:	9b 83       	std	Y+3, r25	; 0x03
    556a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    556c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    556e:	89 81       	ldd	r24, Y+1	; 0x01
    5570:	28 2f       	mov	r18, r24
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	8a 81       	ldd	r24, Y+2	; 0x02
    5576:	9b 81       	ldd	r25, Y+3	; 0x03
    5578:	8c 01       	movw	r16, r24
    557a:	02 0f       	add	r16, r18
    557c:	13 1f       	adc	r17, r19
    557e:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    5582:	f8 01       	movw	r30, r16
    5584:	80 83       	st	Z, r24
    5586:	0f c0       	rjmp	.+30     	; 0x55a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    5588:	89 81       	ldd	r24, Y+1	; 0x01
    558a:	8f 5f       	subi	r24, 0xFF	; 255
    558c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    558e:	89 81       	ldd	r24, Y+1	; 0x01
    5590:	28 2f       	mov	r18, r24
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	8a 81       	ldd	r24, Y+2	; 0x02
    5596:	9b 81       	ldd	r25, Y+3	; 0x03
    5598:	8c 01       	movw	r16, r24
    559a:	02 0f       	add	r16, r18
    559c:	13 1f       	adc	r17, r19
    559e:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <UART_recieveByte>
    55a2:	f8 01       	movw	r30, r16
    55a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    55a6:	89 81       	ldd	r24, Y+1	; 0x01
    55a8:	28 2f       	mov	r18, r24
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	8a 81       	ldd	r24, Y+2	; 0x02
    55ae:	9b 81       	ldd	r25, Y+3	; 0x03
    55b0:	fc 01       	movw	r30, r24
    55b2:	e2 0f       	add	r30, r18
    55b4:	f3 1f       	adc	r31, r19
    55b6:	80 81       	ld	r24, Z
    55b8:	83 32       	cpi	r24, 0x23	; 35
    55ba:	31 f7       	brne	.-52     	; 0x5588 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	28 2f       	mov	r18, r24
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	8a 81       	ldd	r24, Y+2	; 0x02
    55c4:	9b 81       	ldd	r25, Y+3	; 0x03
    55c6:	fc 01       	movw	r30, r24
    55c8:	e2 0f       	add	r30, r18
    55ca:	f3 1f       	adc	r31, r19
    55cc:	10 82       	st	Z, r1
}
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	cf 91       	pop	r28
    55d6:	df 91       	pop	r29
    55d8:	1f 91       	pop	r17
    55da:	0f 91       	pop	r16
    55dc:	08 95       	ret

000055de <__udivmodsi4>:
    55de:	a1 e2       	ldi	r26, 0x21	; 33
    55e0:	1a 2e       	mov	r1, r26
    55e2:	aa 1b       	sub	r26, r26
    55e4:	bb 1b       	sub	r27, r27
    55e6:	fd 01       	movw	r30, r26
    55e8:	0d c0       	rjmp	.+26     	; 0x5604 <__udivmodsi4_ep>

000055ea <__udivmodsi4_loop>:
    55ea:	aa 1f       	adc	r26, r26
    55ec:	bb 1f       	adc	r27, r27
    55ee:	ee 1f       	adc	r30, r30
    55f0:	ff 1f       	adc	r31, r31
    55f2:	a2 17       	cp	r26, r18
    55f4:	b3 07       	cpc	r27, r19
    55f6:	e4 07       	cpc	r30, r20
    55f8:	f5 07       	cpc	r31, r21
    55fa:	20 f0       	brcs	.+8      	; 0x5604 <__udivmodsi4_ep>
    55fc:	a2 1b       	sub	r26, r18
    55fe:	b3 0b       	sbc	r27, r19
    5600:	e4 0b       	sbc	r30, r20
    5602:	f5 0b       	sbc	r31, r21

00005604 <__udivmodsi4_ep>:
    5604:	66 1f       	adc	r22, r22
    5606:	77 1f       	adc	r23, r23
    5608:	88 1f       	adc	r24, r24
    560a:	99 1f       	adc	r25, r25
    560c:	1a 94       	dec	r1
    560e:	69 f7       	brne	.-38     	; 0x55ea <__udivmodsi4_loop>
    5610:	60 95       	com	r22
    5612:	70 95       	com	r23
    5614:	80 95       	com	r24
    5616:	90 95       	com	r25
    5618:	9b 01       	movw	r18, r22
    561a:	ac 01       	movw	r20, r24
    561c:	bd 01       	movw	r22, r26
    561e:	cf 01       	movw	r24, r30
    5620:	08 95       	ret

00005622 <__prologue_saves__>:
    5622:	2f 92       	push	r2
    5624:	3f 92       	push	r3
    5626:	4f 92       	push	r4
    5628:	5f 92       	push	r5
    562a:	6f 92       	push	r6
    562c:	7f 92       	push	r7
    562e:	8f 92       	push	r8
    5630:	9f 92       	push	r9
    5632:	af 92       	push	r10
    5634:	bf 92       	push	r11
    5636:	cf 92       	push	r12
    5638:	df 92       	push	r13
    563a:	ef 92       	push	r14
    563c:	ff 92       	push	r15
    563e:	0f 93       	push	r16
    5640:	1f 93       	push	r17
    5642:	cf 93       	push	r28
    5644:	df 93       	push	r29
    5646:	cd b7       	in	r28, 0x3d	; 61
    5648:	de b7       	in	r29, 0x3e	; 62
    564a:	ca 1b       	sub	r28, r26
    564c:	db 0b       	sbc	r29, r27
    564e:	0f b6       	in	r0, 0x3f	; 63
    5650:	f8 94       	cli
    5652:	de bf       	out	0x3e, r29	; 62
    5654:	0f be       	out	0x3f, r0	; 63
    5656:	cd bf       	out	0x3d, r28	; 61
    5658:	09 94       	ijmp

0000565a <__epilogue_restores__>:
    565a:	2a 88       	ldd	r2, Y+18	; 0x12
    565c:	39 88       	ldd	r3, Y+17	; 0x11
    565e:	48 88       	ldd	r4, Y+16	; 0x10
    5660:	5f 84       	ldd	r5, Y+15	; 0x0f
    5662:	6e 84       	ldd	r6, Y+14	; 0x0e
    5664:	7d 84       	ldd	r7, Y+13	; 0x0d
    5666:	8c 84       	ldd	r8, Y+12	; 0x0c
    5668:	9b 84       	ldd	r9, Y+11	; 0x0b
    566a:	aa 84       	ldd	r10, Y+10	; 0x0a
    566c:	b9 84       	ldd	r11, Y+9	; 0x09
    566e:	c8 84       	ldd	r12, Y+8	; 0x08
    5670:	df 80       	ldd	r13, Y+7	; 0x07
    5672:	ee 80       	ldd	r14, Y+6	; 0x06
    5674:	fd 80       	ldd	r15, Y+5	; 0x05
    5676:	0c 81       	ldd	r16, Y+4	; 0x04
    5678:	1b 81       	ldd	r17, Y+3	; 0x03
    567a:	aa 81       	ldd	r26, Y+2	; 0x02
    567c:	b9 81       	ldd	r27, Y+1	; 0x01
    567e:	ce 0f       	add	r28, r30
    5680:	d1 1d       	adc	r29, r1
    5682:	0f b6       	in	r0, 0x3f	; 63
    5684:	f8 94       	cli
    5686:	de bf       	out	0x3e, r29	; 62
    5688:	0f be       	out	0x3f, r0	; 63
    568a:	cd bf       	out	0x3d, r28	; 61
    568c:	ed 01       	movw	r28, r26
    568e:	08 95       	ret

00005690 <itoa>:
    5690:	fb 01       	movw	r30, r22
    5692:	9f 01       	movw	r18, r30
    5694:	e8 94       	clt
    5696:	42 30       	cpi	r20, 0x02	; 2
    5698:	c4 f0       	brlt	.+48     	; 0x56ca <itoa+0x3a>
    569a:	45 32       	cpi	r20, 0x25	; 37
    569c:	b4 f4       	brge	.+44     	; 0x56ca <itoa+0x3a>
    569e:	4a 30       	cpi	r20, 0x0A	; 10
    56a0:	29 f4       	brne	.+10     	; 0x56ac <itoa+0x1c>
    56a2:	97 fb       	bst	r25, 7
    56a4:	1e f4       	brtc	.+6      	; 0x56ac <itoa+0x1c>
    56a6:	90 95       	com	r25
    56a8:	81 95       	neg	r24
    56aa:	9f 4f       	sbci	r25, 0xFF	; 255
    56ac:	64 2f       	mov	r22, r20
    56ae:	77 27       	eor	r23, r23
    56b0:	0e 94 79 2b 	call	0x56f2	; 0x56f2 <__udivmodhi4>
    56b4:	80 5d       	subi	r24, 0xD0	; 208
    56b6:	8a 33       	cpi	r24, 0x3A	; 58
    56b8:	0c f0       	brlt	.+2      	; 0x56bc <itoa+0x2c>
    56ba:	89 5d       	subi	r24, 0xD9	; 217
    56bc:	81 93       	st	Z+, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	00 97       	sbiw	r24, 0x00	; 0
    56c2:	a1 f7       	brne	.-24     	; 0x56ac <itoa+0x1c>
    56c4:	16 f4       	brtc	.+4      	; 0x56ca <itoa+0x3a>
    56c6:	5d e2       	ldi	r21, 0x2D	; 45
    56c8:	51 93       	st	Z+, r21
    56ca:	10 82       	st	Z, r1
    56cc:	c9 01       	movw	r24, r18
    56ce:	0c 94 69 2b 	jmp	0x56d2	; 0x56d2 <strrev>

000056d2 <strrev>:
    56d2:	dc 01       	movw	r26, r24
    56d4:	fc 01       	movw	r30, r24
    56d6:	67 2f       	mov	r22, r23
    56d8:	71 91       	ld	r23, Z+
    56da:	77 23       	and	r23, r23
    56dc:	e1 f7       	brne	.-8      	; 0x56d6 <strrev+0x4>
    56de:	32 97       	sbiw	r30, 0x02	; 2
    56e0:	04 c0       	rjmp	.+8      	; 0x56ea <strrev+0x18>
    56e2:	7c 91       	ld	r23, X
    56e4:	6d 93       	st	X+, r22
    56e6:	70 83       	st	Z, r23
    56e8:	62 91       	ld	r22, -Z
    56ea:	ae 17       	cp	r26, r30
    56ec:	bf 07       	cpc	r27, r31
    56ee:	c8 f3       	brcs	.-14     	; 0x56e2 <strrev+0x10>
    56f0:	08 95       	ret

000056f2 <__udivmodhi4>:
    56f2:	aa 1b       	sub	r26, r26
    56f4:	bb 1b       	sub	r27, r27
    56f6:	51 e1       	ldi	r21, 0x11	; 17
    56f8:	07 c0       	rjmp	.+14     	; 0x5708 <__udivmodhi4_ep>

000056fa <__udivmodhi4_loop>:
    56fa:	aa 1f       	adc	r26, r26
    56fc:	bb 1f       	adc	r27, r27
    56fe:	a6 17       	cp	r26, r22
    5700:	b7 07       	cpc	r27, r23
    5702:	10 f0       	brcs	.+4      	; 0x5708 <__udivmodhi4_ep>
    5704:	a6 1b       	sub	r26, r22
    5706:	b7 0b       	sbc	r27, r23

00005708 <__udivmodhi4_ep>:
    5708:	88 1f       	adc	r24, r24
    570a:	99 1f       	adc	r25, r25
    570c:	5a 95       	dec	r21
    570e:	a9 f7       	brne	.-22     	; 0x56fa <__udivmodhi4_loop>
    5710:	80 95       	com	r24
    5712:	90 95       	com	r25
    5714:	bc 01       	movw	r22, r24
    5716:	cd 01       	movw	r24, r26
    5718:	08 95       	ret

0000571a <_exit>:
    571a:	f8 94       	cli

0000571c <__stop_program>:
    571c:	ff cf       	rjmp	.-2      	; 0x571c <__stop_program>
