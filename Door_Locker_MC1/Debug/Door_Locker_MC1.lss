
Door_Locker_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00005808  0000589c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800108  00800108  00005944  2**0
                  ALLOC
  3 .stab         00003d50  00000000  00000000  00005944  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010be  00000000  00000000  00009694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a752  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000aa41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ca86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000db87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000eb0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__vector_7>
      20:	0c 94 0f 2a 	jmp	0x541e	; 0x541e <__vector_8>
      24:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <main>
      8a:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 2b 	jmp	0x5744	; 0x5744 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 2b 	jmp	0x570c	; 0x570c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 2b 	jmp	0x5744	; 0x5744 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 2b 	jmp	0x571c	; 0x571c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 ef       	ldi	r22, 0xF2	; 242
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 aa 2b 	jmp	0x5754	; 0x5754 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 92 2b 	jmp	0x5724	; 0x5724 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 96 2b 	jmp	0x572c	; 0x572c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b2 2b 	jmp	0x5764	; 0x5764 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Timer>:

/*********************************************************************************
 *                            CallBack Function                                  *
 ********************************************************************************/
void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     ca6:	80 91 08 01 	lds	r24, 0x0108
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 08 01 	sts	0x0108, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <main>:

/*********************************************************************************
 *                            Application Code                                   *
 ********************************************************************************/
int main(void)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	c6 5d       	subi	r28, 0xD6	; 214
     cc4:	d1 40       	sbci	r29, 0x01	; 1
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0 , pass1[5] = {0} , pass2[5] = {0} ,i = 0 , status = 0;
     cd0:	fe 01       	movw	r30, r28
     cd2:	eb 54       	subi	r30, 0x4B	; 75
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	10 82       	st	Z, r1
     cd8:	ce 01       	movw	r24, r28
     cda:	8a 54       	subi	r24, 0x4A	; 74
     cdc:	9e 4f       	sbci	r25, 0xFE	; 254
     cde:	25 e0       	ldi	r18, 0x05	; 5
     ce0:	fc 01       	movw	r30, r24
     ce2:	df 01       	movw	r26, r30
     ce4:	82 2f       	mov	r24, r18
     ce6:	1d 92       	st	X+, r1
     ce8:	8a 95       	dec	r24
     cea:	e9 f7       	brne	.-6      	; 0xce6 <main+0x30>
     cec:	ce 01       	movw	r24, r28
     cee:	85 54       	subi	r24, 0x45	; 69
     cf0:	9e 4f       	sbci	r25, 0xFE	; 254
     cf2:	25 e0       	ldi	r18, 0x05	; 5
     cf4:	fc 01       	movw	r30, r24
     cf6:	df 01       	movw	r26, r30
     cf8:	82 2f       	mov	r24, r18
     cfa:	1d 92       	st	X+, r1
     cfc:	8a 95       	dec	r24
     cfe:	e9 f7       	brne	.-6      	; 0xcfa <main+0x44>
     d00:	fe 01       	movw	r30, r28
     d02:	ec 54       	subi	r30, 0x4C	; 76
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	10 82       	st	Z, r1
     d08:	fe 01       	movw	r30, r28
     d0a:	ed 54       	subi	r30, 0x4D	; 77
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	10 82       	st	Z, r1
	uint8 flag = 0 , count = 0 ;
     d10:	fe 01       	movw	r30, r28
     d12:	ee 54       	subi	r30, 0x4E	; 78
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	10 82       	st	Z, r1
     d18:	fe 01       	movw	r30, r28
     d1a:	ef 54       	subi	r30, 0x4F	; 79
     d1c:	fe 4f       	sbci	r31, 0xFE	; 254
     d1e:	10 82       	st	Z, r1

	SREG |= (1<<7); /* Enable Global Interrupt */
     d20:	af e5       	ldi	r26, 0x5F	; 95
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ef e5       	ldi	r30, 0x5F	; 95
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24

	/* Configure The UART & Timer1 With Desired Specifications */
	UART_ConfigType u_configure = {BIT8 , Disable , ONE_Stop , 9600};
     d2e:	ce 01       	movw	r24, r28
     d30:	80 54       	subi	r24, 0x40	; 64
     d32:	9e 4f       	sbci	r25, 0xFE	; 254
     d34:	c3 53       	subi	r28, 0x33	; 51
     d36:	de 4f       	sbci	r29, 0xFE	; 254
     d38:	99 83       	std	Y+1, r25	; 0x01
     d3a:	88 83       	st	Y, r24
     d3c:	cd 5c       	subi	r28, 0xCD	; 205
     d3e:	d1 40       	sbci	r29, 0x01	; 1
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b1 e0       	ldi	r27, 0x01	; 1
     d44:	c1 53       	subi	r28, 0x31	; 49
     d46:	de 4f       	sbci	r29, 0xFE	; 254
     d48:	b9 83       	std	Y+1, r27	; 0x01
     d4a:	a8 83       	st	Y, r26
     d4c:	cf 5c       	subi	r28, 0xCF	; 207
     d4e:	d1 40       	sbci	r29, 0x01	; 1
     d50:	b7 e0       	ldi	r27, 0x07	; 7
     d52:	cf 52       	subi	r28, 0x2F	; 47
     d54:	de 4f       	sbci	r29, 0xFE	; 254
     d56:	b8 83       	st	Y, r27
     d58:	c1 5d       	subi	r28, 0xD1	; 209
     d5a:	d1 40       	sbci	r29, 0x01	; 1
     d5c:	c1 53       	subi	r28, 0x31	; 49
     d5e:	de 4f       	sbci	r29, 0xFE	; 254
     d60:	e8 81       	ld	r30, Y
     d62:	f9 81       	ldd	r31, Y+1	; 0x01
     d64:	cf 5c       	subi	r28, 0xCF	; 207
     d66:	d1 40       	sbci	r29, 0x01	; 1
     d68:	00 80       	ld	r0, Z
     d6a:	c1 53       	subi	r28, 0x31	; 49
     d6c:	de 4f       	sbci	r29, 0xFE	; 254
     d6e:	88 81       	ld	r24, Y
     d70:	99 81       	ldd	r25, Y+1	; 0x01
     d72:	cf 5c       	subi	r28, 0xCF	; 207
     d74:	d1 40       	sbci	r29, 0x01	; 1
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	c1 53       	subi	r28, 0x31	; 49
     d7a:	de 4f       	sbci	r29, 0xFE	; 254
     d7c:	99 83       	std	Y+1, r25	; 0x01
     d7e:	88 83       	st	Y, r24
     d80:	cf 5c       	subi	r28, 0xCF	; 207
     d82:	d1 40       	sbci	r29, 0x01	; 1
     d84:	c3 53       	subi	r28, 0x33	; 51
     d86:	de 4f       	sbci	r29, 0xFE	; 254
     d88:	a8 81       	ld	r26, Y
     d8a:	b9 81       	ldd	r27, Y+1	; 0x01
     d8c:	cd 5c       	subi	r28, 0xCD	; 205
     d8e:	d1 40       	sbci	r29, 0x01	; 1
     d90:	0c 92       	st	X, r0
     d92:	c3 53       	subi	r28, 0x33	; 51
     d94:	de 4f       	sbci	r29, 0xFE	; 254
     d96:	e8 81       	ld	r30, Y
     d98:	f9 81       	ldd	r31, Y+1	; 0x01
     d9a:	cd 5c       	subi	r28, 0xCD	; 205
     d9c:	d1 40       	sbci	r29, 0x01	; 1
     d9e:	31 96       	adiw	r30, 0x01	; 1
     da0:	c3 53       	subi	r28, 0x33	; 51
     da2:	de 4f       	sbci	r29, 0xFE	; 254
     da4:	f9 83       	std	Y+1, r31	; 0x01
     da6:	e8 83       	st	Y, r30
     da8:	cd 5c       	subi	r28, 0xCD	; 205
     daa:	d1 40       	sbci	r29, 0x01	; 1
     dac:	cf 52       	subi	r28, 0x2F	; 47
     dae:	de 4f       	sbci	r29, 0xFE	; 254
     db0:	f8 81       	ld	r31, Y
     db2:	c1 5d       	subi	r28, 0xD1	; 209
     db4:	d1 40       	sbci	r29, 0x01	; 1
     db6:	f1 50       	subi	r31, 0x01	; 1
     db8:	cf 52       	subi	r28, 0x2F	; 47
     dba:	de 4f       	sbci	r29, 0xFE	; 254
     dbc:	f8 83       	st	Y, r31
     dbe:	c1 5d       	subi	r28, 0xD1	; 209
     dc0:	d1 40       	sbci	r29, 0x01	; 1
     dc2:	cf 52       	subi	r28, 0x2F	; 47
     dc4:	de 4f       	sbci	r29, 0xFE	; 254
     dc6:	88 81       	ld	r24, Y
     dc8:	c1 5d       	subi	r28, 0xD1	; 209
     dca:	d1 40       	sbci	r29, 0x01	; 1
     dcc:	88 23       	and	r24, r24
     dce:	31 f6       	brne	.-116    	; 0xd5c <main+0xa6>
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     dd0:	ce 01       	movw	r24, r28
     dd2:	89 53       	subi	r24, 0x39	; 57
     dd4:	9e 4f       	sbci	r25, 0xFE	; 254
     dd6:	ce 52       	subi	r28, 0x2E	; 46
     dd8:	de 4f       	sbci	r29, 0xFE	; 254
     dda:	99 83       	std	Y+1, r25	; 0x01
     ddc:	88 83       	st	Y, r24
     dde:	c2 5d       	subi	r28, 0xD2	; 210
     de0:	d1 40       	sbci	r29, 0x01	; 1
     de2:	aa ef       	ldi	r26, 0xFA	; 250
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	cc 52       	subi	r28, 0x2C	; 44
     de8:	de 4f       	sbci	r29, 0xFE	; 254
     dea:	b9 83       	std	Y+1, r27	; 0x01
     dec:	a8 83       	st	Y, r26
     dee:	c4 5d       	subi	r28, 0xD4	; 212
     df0:	d1 40       	sbci	r29, 0x01	; 1
     df2:	b6 e0       	ldi	r27, 0x06	; 6
     df4:	ca 52       	subi	r28, 0x2A	; 42
     df6:	de 4f       	sbci	r29, 0xFE	; 254
     df8:	b8 83       	st	Y, r27
     dfa:	c6 5d       	subi	r28, 0xD6	; 214
     dfc:	d1 40       	sbci	r29, 0x01	; 1
     dfe:	cc 52       	subi	r28, 0x2C	; 44
     e00:	de 4f       	sbci	r29, 0xFE	; 254
     e02:	e8 81       	ld	r30, Y
     e04:	f9 81       	ldd	r31, Y+1	; 0x01
     e06:	c4 5d       	subi	r28, 0xD4	; 212
     e08:	d1 40       	sbci	r29, 0x01	; 1
     e0a:	00 80       	ld	r0, Z
     e0c:	cc 52       	subi	r28, 0x2C	; 44
     e0e:	de 4f       	sbci	r29, 0xFE	; 254
     e10:	88 81       	ld	r24, Y
     e12:	99 81       	ldd	r25, Y+1	; 0x01
     e14:	c4 5d       	subi	r28, 0xD4	; 212
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	cc 52       	subi	r28, 0x2C	; 44
     e1c:	de 4f       	sbci	r29, 0xFE	; 254
     e1e:	99 83       	std	Y+1, r25	; 0x01
     e20:	88 83       	st	Y, r24
     e22:	c4 5d       	subi	r28, 0xD4	; 212
     e24:	d1 40       	sbci	r29, 0x01	; 1
     e26:	ce 52       	subi	r28, 0x2E	; 46
     e28:	de 4f       	sbci	r29, 0xFE	; 254
     e2a:	a8 81       	ld	r26, Y
     e2c:	b9 81       	ldd	r27, Y+1	; 0x01
     e2e:	c2 5d       	subi	r28, 0xD2	; 210
     e30:	d1 40       	sbci	r29, 0x01	; 1
     e32:	0c 92       	st	X, r0
     e34:	ce 52       	subi	r28, 0x2E	; 46
     e36:	de 4f       	sbci	r29, 0xFE	; 254
     e38:	e8 81       	ld	r30, Y
     e3a:	f9 81       	ldd	r31, Y+1	; 0x01
     e3c:	c2 5d       	subi	r28, 0xD2	; 210
     e3e:	d1 40       	sbci	r29, 0x01	; 1
     e40:	31 96       	adiw	r30, 0x01	; 1
     e42:	ce 52       	subi	r28, 0x2E	; 46
     e44:	de 4f       	sbci	r29, 0xFE	; 254
     e46:	f9 83       	std	Y+1, r31	; 0x01
     e48:	e8 83       	st	Y, r30
     e4a:	c2 5d       	subi	r28, 0xD2	; 210
     e4c:	d1 40       	sbci	r29, 0x01	; 1
     e4e:	ca 52       	subi	r28, 0x2A	; 42
     e50:	de 4f       	sbci	r29, 0xFE	; 254
     e52:	f8 81       	ld	r31, Y
     e54:	c6 5d       	subi	r28, 0xD6	; 214
     e56:	d1 40       	sbci	r29, 0x01	; 1
     e58:	f1 50       	subi	r31, 0x01	; 1
     e5a:	ca 52       	subi	r28, 0x2A	; 42
     e5c:	de 4f       	sbci	r29, 0xFE	; 254
     e5e:	f8 83       	st	Y, r31
     e60:	c6 5d       	subi	r28, 0xD6	; 214
     e62:	d1 40       	sbci	r29, 0x01	; 1
     e64:	ca 52       	subi	r28, 0x2A	; 42
     e66:	de 4f       	sbci	r29, 0xFE	; 254
     e68:	88 81       	ld	r24, Y
     e6a:	c6 5d       	subi	r28, 0xD6	; 214
     e6c:	d1 40       	sbci	r29, 0x01	; 1
     e6e:	88 23       	and	r24, r24
     e70:	31 f6       	brne	.-116    	; 0xdfe <main+0x148>

	/* Initialization Drivers */
	UART_init(&u_configure);
     e72:	ce 01       	movw	r24, r28
     e74:	80 54       	subi	r24, 0x40	; 64
     e76:	9e 4f       	sbci	r25, 0xFE	; 254
     e78:	0e 94 42 2a 	call	0x5484	; 0x5484 <UART_init>
	LCD_init();
     e7c:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <LCD_init>

	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
     e80:	8f e4       	ldi	r24, 0x4F	; 79
     e82:	96 e0       	ldi	r25, 0x06	; 6
     e84:	0e 94 97 29 	call	0x532e	; 0x532e <Timer1_setCallBack>

	UART_recieveByte(); /* Waiting For MCU2 To be Ready */
     e88:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>

	while(1)
	{
		/* Create Password to The System */
		if(flag == 0)
     e8c:	fe 01       	movw	r30, r28
     e8e:	ee 54       	subi	r30, 0x4E	; 78
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	80 81       	ld	r24, Z
     e94:	88 23       	and	r24, r24
     e96:	09 f0       	breq	.+2      	; 0xe9a <main+0x1e4>
     e98:	7f c6       	rjmp	.+3326   	; 0x1b98 <main+0xee2>
		{
			LCD_clearScreen();
     e9a:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
			LCD_displayString("PLZ Enter Pass:");
     e9e:	80 e6       	ldi	r24, 0x60	; 96
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
			LCD_moveCursor(1, 0);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_moveCursor>

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
     eae:	fe 01       	movw	r30, r28
     eb0:	ec 54       	subi	r30, 0x4C	; 76
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	10 82       	st	Z, r1
     eb6:	d6 c0       	rjmp	.+428    	; 0x1064 <main+0x3ae>
			{
				key = KEYPAD_getPressedKey() ;
     eb8:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
     ebc:	fe 01       	movw	r30, r28
     ebe:	eb 54       	subi	r30, 0x4B	; 75
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	80 83       	st	Z, r24
				pass1[i] = key ;
     ec4:	fe 01       	movw	r30, r28
     ec6:	ec 54       	subi	r30, 0x4C	; 76
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	80 81       	ld	r24, Z
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	8a 54       	subi	r24, 0x4A	; 74
     ed4:	9e 4f       	sbci	r25, 0xFE	; 254
     ed6:	dc 01       	movw	r26, r24
     ed8:	a2 0f       	add	r26, r18
     eda:	b3 1f       	adc	r27, r19
     edc:	fe 01       	movw	r30, r28
     ede:	eb 54       	subi	r30, 0x4B	; 75
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	80 81       	ld	r24, Z
     ee4:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     ee6:	8a e2       	ldi	r24, 0x2A	; 42
     ee8:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
     eec:	fe 01       	movw	r30, r28
     eee:	e3 55       	subi	r30, 0x53	; 83
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	aa ef       	ldi	r26, 0xFA	; 250
     ef8:	b3 e4       	ldi	r27, 0x43	; 67
     efa:	80 83       	st	Z, r24
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	a2 83       	std	Z+2, r26	; 0x02
     f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	8e 01       	movw	r16, r28
     f04:	07 55       	subi	r16, 0x57	; 87
     f06:	1e 4f       	sbci	r17, 0xFE	; 254
     f08:	fe 01       	movw	r30, r28
     f0a:	e3 55       	subi	r30, 0x53	; 83
     f0c:	fe 4f       	sbci	r31, 0xFE	; 254
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	4a ef       	ldi	r20, 0xFA	; 250
     f1c:	54 e4       	ldi	r21, 0x44	; 68
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	f8 01       	movw	r30, r16
     f28:	80 83       	st	Z, r24
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	a2 83       	std	Z+2, r26	; 0x02
     f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f30:	fe 01       	movw	r30, r28
     f32:	e7 55       	subi	r30, 0x57	; 87
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e8       	ldi	r20, 0x80	; 128
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f4a:	88 23       	and	r24, r24
     f4c:	44 f4       	brge	.+16     	; 0xf5e <main+0x2a8>
		__ticks = 1;
     f4e:	fe 01       	movw	r30, r28
     f50:	e9 55       	subi	r30, 0x59	; 89
     f52:	fe 4f       	sbci	r31, 0xFE	; 254
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	64 c0       	rjmp	.+200    	; 0x1026 <main+0x370>
	else if (__tmp > 65535)
     f5e:	fe 01       	movw	r30, r28
     f60:	e7 55       	subi	r30, 0x57	; 87
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	3f ef       	ldi	r19, 0xFF	; 255
     f70:	4f e7       	ldi	r20, 0x7F	; 127
     f72:	57 e4       	ldi	r21, 0x47	; 71
     f74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f78:	18 16       	cp	r1, r24
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <main+0x2c8>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <main+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7e:	fe 01       	movw	r30, r28
     f80:	e3 55       	subi	r30, 0x53	; 83
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e2       	ldi	r20, 0x20	; 32
     f92:	51 e4       	ldi	r21, 0x41	; 65
     f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	8e 01       	movw	r16, r28
     f9e:	09 55       	subi	r16, 0x59	; 89
     fa0:	1e 4f       	sbci	r17, 0xFE	; 254
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	f8 01       	movw	r30, r16
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	1f c0       	rjmp	.+62     	; 0xff4 <main+0x33e>
     fb6:	fe 01       	movw	r30, r28
     fb8:	eb 55       	subi	r30, 0x5B	; 91
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc4:	fe 01       	movw	r30, r28
     fc6:	eb 55       	subi	r30, 0x5B	; 91
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	80 81       	ld	r24, Z
     fcc:	91 81       	ldd	r25, Z+1	; 0x01
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <main+0x318>
     fd2:	fe 01       	movw	r30, r28
     fd4:	eb 55       	subi	r30, 0x5B	; 91
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fdc:	de 01       	movw	r26, r28
     fde:	a9 55       	subi	r26, 0x59	; 89
     fe0:	be 4f       	sbci	r27, 0xFE	; 254
     fe2:	fe 01       	movw	r30, r28
     fe4:	e9 55       	subi	r30, 0x59	; 89
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	9c 93       	st	X, r25
     ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	fe 01       	movw	r30, r28
     ff6:	e9 55       	subi	r30, 0x59	; 89
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	d1 f6       	brne	.-76     	; 0xfb6 <main+0x300>
    1002:	27 c0       	rjmp	.+78     	; 0x1052 <main+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	8e 01       	movw	r16, r28
    1006:	09 55       	subi	r16, 0x59	; 89
    1008:	1e 4f       	sbci	r17, 0xFE	; 254
    100a:	fe 01       	movw	r30, r28
    100c:	e7 55       	subi	r30, 0x57	; 87
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	f8 01       	movw	r30, r16
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
    1026:	de 01       	movw	r26, r28
    1028:	ad 55       	subi	r26, 0x5D	; 93
    102a:	be 4f       	sbci	r27, 0xFE	; 254
    102c:	fe 01       	movw	r30, r28
    102e:	e9 55       	subi	r30, 0x59	; 89
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	8d 93       	st	X+, r24
    1038:	9c 93       	st	X, r25
    103a:	fe 01       	movw	r30, r28
    103c:	ed 55       	subi	r30, 0x5D	; 93
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <main+0x38e>
    1048:	fe 01       	movw	r30, r28
    104a:	ed 55       	subi	r30, 0x5D	; 93
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("PLZ Enter Pass:");
			LCD_moveCursor(1, 0);

			/* Enter The Password */
			for(i = 0 ; i < 5 ; i++)
    1052:	de 01       	movw	r26, r28
    1054:	ac 54       	subi	r26, 0x4C	; 76
    1056:	be 4f       	sbci	r27, 0xFE	; 254
    1058:	fe 01       	movw	r30, r28
    105a:	ec 54       	subi	r30, 0x4C	; 76
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	80 81       	ld	r24, Z
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	8c 93       	st	X, r24
    1064:	fe 01       	movw	r30, r28
    1066:	ec 54       	subi	r30, 0x4C	; 76
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	80 81       	ld	r24, Z
    106c:	85 30       	cpi	r24, 0x05	; 5
    106e:	08 f4       	brcc	.+2      	; 0x1072 <main+0x3bc>
    1070:	23 cf       	rjmp	.-442    	; 0xeb8 <main+0x202>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1072:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    1076:	fe 01       	movw	r30, r28
    1078:	eb 54       	subi	r30, 0x4B	; 75
    107a:	fe 4f       	sbci	r31, 0xFE	; 254
    107c:	80 83       	st	Z, r24
    107e:	fe 01       	movw	r30, r28
    1080:	e1 56       	subi	r30, 0x61	; 97
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	aa ef       	ldi	r26, 0xFA	; 250
    108a:	b3 e4       	ldi	r27, 0x43	; 67
    108c:	80 83       	st	Z, r24
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	a2 83       	std	Z+2, r26	; 0x02
    1092:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1094:	8e 01       	movw	r16, r28
    1096:	05 56       	subi	r16, 0x65	; 101
    1098:	1e 4f       	sbci	r17, 0xFE	; 254
    109a:	fe 01       	movw	r30, r28
    109c:	e1 56       	subi	r30, 0x61	; 97
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	2b ea       	ldi	r18, 0xAB	; 171
    10aa:	3a ea       	ldi	r19, 0xAA	; 170
    10ac:	4a e2       	ldi	r20, 0x2A	; 42
    10ae:	50 e4       	ldi	r21, 0x40	; 64
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 83       	st	Z, r24
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	a2 83       	std	Z+2, r26	; 0x02
    10c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c2:	fe 01       	movw	r30, r28
    10c4:	e5 56       	subi	r30, 0x65	; 101
    10c6:	fe 4f       	sbci	r31, 0xFE	; 254
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	34 f4       	brge	.+12     	; 0x10ec <main+0x436>
		__ticks = 1;
    10e0:	fe 01       	movw	r30, r28
    10e2:	e6 56       	subi	r30, 0x66	; 102
    10e4:	fe 4f       	sbci	r31, 0xFE	; 254
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 83       	st	Z, r24
    10ea:	e0 c0       	rjmp	.+448    	; 0x12ac <main+0x5f6>
	else if (__tmp > 255)
    10ec:	fe 01       	movw	r30, r28
    10ee:	e5 56       	subi	r30, 0x65	; 101
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	53 e4       	ldi	r21, 0x43	; 67
    1102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	0c f0       	brlt	.+2      	; 0x110c <main+0x456>
    110a:	c0 c0       	rjmp	.+384    	; 0x128c <main+0x5d6>
	{
		_delay_ms(__us / 1000.0);
    110c:	fe 01       	movw	r30, r28
    110e:	e1 56       	subi	r30, 0x61	; 97
    1110:	fe 4f       	sbci	r31, 0xFE	; 254
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a e7       	ldi	r20, 0x7A	; 122
    1120:	54 e4       	ldi	r21, 0x44	; 68
    1122:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	fe 01       	movw	r30, r28
    112c:	ea 56       	subi	r30, 0x6A	; 106
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	80 83       	st	Z, r24
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	a2 83       	std	Z+2, r26	; 0x02
    1136:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1138:	8e 01       	movw	r16, r28
    113a:	0e 56       	subi	r16, 0x6E	; 110
    113c:	1e 4f       	sbci	r17, 0xFE	; 254
    113e:	fe 01       	movw	r30, r28
    1140:	ea 56       	subi	r30, 0x6A	; 106
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	4a ef       	ldi	r20, 0xFA	; 250
    1152:	54 e4       	ldi	r21, 0x44	; 68
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	f8 01       	movw	r30, r16
    115e:	80 83       	st	Z, r24
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	a2 83       	std	Z+2, r26	; 0x02
    1164:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1166:	fe 01       	movw	r30, r28
    1168:	ee 56       	subi	r30, 0x6E	; 110
    116a:	fe 4f       	sbci	r31, 0xFE	; 254
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	44 f4       	brge	.+16     	; 0x1194 <main+0x4de>
		__ticks = 1;
    1184:	fe 01       	movw	r30, r28
    1186:	e0 57       	subi	r30, 0x70	; 112
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    1192:	64 c0       	rjmp	.+200    	; 0x125c <main+0x5a6>
	else if (__tmp > 65535)
    1194:	fe 01       	movw	r30, r28
    1196:	ee 56       	subi	r30, 0x6E	; 110
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	0c f0       	brlt	.+2      	; 0x11b4 <main+0x4fe>
    11b2:	43 c0       	rjmp	.+134    	; 0x123a <main+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	fe 01       	movw	r30, r28
    11b6:	ea 56       	subi	r30, 0x6A	; 106
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e2       	ldi	r20, 0x20	; 32
    11c8:	51 e4       	ldi	r21, 0x41	; 65
    11ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8e 01       	movw	r16, r28
    11d4:	00 57       	subi	r16, 0x70	; 112
    11d6:	1e 4f       	sbci	r17, 0xFE	; 254
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	f8 01       	movw	r30, r16
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
    11ea:	1f c0       	rjmp	.+62     	; 0x122a <main+0x574>
    11ec:	fe 01       	movw	r30, r28
    11ee:	e2 57       	subi	r30, 0x72	; 114
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	88 ec       	ldi	r24, 0xC8	; 200
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	e2 57       	subi	r30, 0x72	; 114
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <main+0x54e>
    1208:	fe 01       	movw	r30, r28
    120a:	e2 57       	subi	r30, 0x72	; 114
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1212:	de 01       	movw	r26, r28
    1214:	a0 57       	subi	r26, 0x70	; 112
    1216:	be 4f       	sbci	r27, 0xFE	; 254
    1218:	fe 01       	movw	r30, r28
    121a:	e0 57       	subi	r30, 0x70	; 112
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	9c 93       	st	X, r25
    1228:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122a:	fe 01       	movw	r30, r28
    122c:	e0 57       	subi	r30, 0x70	; 112
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	d1 f6       	brne	.-76     	; 0x11ec <main+0x536>
    1238:	4b c0       	rjmp	.+150    	; 0x12d0 <main+0x61a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	8e 01       	movw	r16, r28
    123c:	00 57       	subi	r16, 0x70	; 112
    123e:	1e 4f       	sbci	r17, 0xFE	; 254
    1240:	fe 01       	movw	r30, r28
    1242:	ee 56       	subi	r30, 0x6E	; 110
    1244:	fe 4f       	sbci	r31, 0xFE	; 254
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	f8 01       	movw	r30, r16
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	80 83       	st	Z, r24
    125c:	de 01       	movw	r26, r28
    125e:	a4 57       	subi	r26, 0x74	; 116
    1260:	be 4f       	sbci	r27, 0xFE	; 254
    1262:	fe 01       	movw	r30, r28
    1264:	e0 57       	subi	r30, 0x70	; 112
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	11 96       	adiw	r26, 0x01	; 1
    126e:	9c 93       	st	X, r25
    1270:	8e 93       	st	-X, r24
    1272:	fe 01       	movw	r30, r28
    1274:	e4 57       	subi	r30, 0x74	; 116
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <main+0x5c6>
    1280:	fe 01       	movw	r30, r28
    1282:	e4 57       	subi	r30, 0x74	; 116
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	22 c0       	rjmp	.+68     	; 0x12d0 <main+0x61a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    128c:	8e 01       	movw	r16, r28
    128e:	06 56       	subi	r16, 0x66	; 102
    1290:	1e 4f       	sbci	r17, 0xFE	; 254
    1292:	fe 01       	movw	r30, r28
    1294:	e5 56       	subi	r30, 0x65	; 101
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 83       	st	Z, r24
    12ac:	de 01       	movw	r26, r28
    12ae:	a5 57       	subi	r26, 0x75	; 117
    12b0:	be 4f       	sbci	r27, 0xFE	; 254
    12b2:	fe 01       	movw	r30, r28
    12b4:	e6 56       	subi	r30, 0x66	; 102
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	80 81       	ld	r24, Z
    12ba:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12bc:	fe 01       	movw	r30, r28
    12be:	e5 57       	subi	r30, 0x75	; 117
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	80 81       	ld	r24, Z
    12c4:	8a 95       	dec	r24
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <main+0x60e>
    12c8:	fe 01       	movw	r30, r28
    12ca:	e5 57       	subi	r30, 0x75	; 117
    12cc:	fe 4f       	sbci	r31, 0xFE	; 254
    12ce:	80 83       	st	Z, r24
				_delay_us(500);
			} while(key != 13);
    12d0:	fe 01       	movw	r30, r28
    12d2:	eb 54       	subi	r30, 0x4B	; 75
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	80 81       	ld	r24, Z
    12d8:	8d 30       	cpi	r24, 0x0D	; 13
    12da:	09 f0       	breq	.+2      	; 0x12de <main+0x628>
    12dc:	ca ce       	rjmp	.-620    	; 0x1072 <main+0x3bc>

			LCD_clearScreen();
    12de:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
    12e2:	80 e7       	ldi	r24, 0x70	; 112
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "same Pass: ");
    12ea:	21 e8       	ldi	r18, 0x81	; 129
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <LCD_displayStringRowColumn>

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    12f8:	fe 01       	movw	r30, r28
    12fa:	ec 54       	subi	r30, 0x4C	; 76
    12fc:	fe 4f       	sbci	r31, 0xFE	; 254
    12fe:	10 82       	st	Z, r1
    1300:	d6 c0       	rjmp	.+428    	; 0x14ae <main+0x7f8>
			{
				key = KEYPAD_getPressedKey() ;
    1302:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    1306:	fe 01       	movw	r30, r28
    1308:	eb 54       	subi	r30, 0x4B	; 75
    130a:	fe 4f       	sbci	r31, 0xFE	; 254
    130c:	80 83       	st	Z, r24
				pass2[i] = key ;
    130e:	fe 01       	movw	r30, r28
    1310:	ec 54       	subi	r30, 0x4C	; 76
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	ce 01       	movw	r24, r28
    131c:	85 54       	subi	r24, 0x45	; 69
    131e:	9e 4f       	sbci	r25, 0xFE	; 254
    1320:	dc 01       	movw	r26, r24
    1322:	a2 0f       	add	r26, r18
    1324:	b3 1f       	adc	r27, r19
    1326:	fe 01       	movw	r30, r28
    1328:	eb 54       	subi	r30, 0x4B	; 75
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	80 81       	ld	r24, Z
    132e:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
    1330:	8a e2       	ldi	r24, 0x2A	; 42
    1332:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
    1336:	fe 01       	movw	r30, r28
    1338:	e9 57       	subi	r30, 0x79	; 121
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	aa ef       	ldi	r26, 0xFA	; 250
    1342:	b3 e4       	ldi	r27, 0x43	; 67
    1344:	80 83       	st	Z, r24
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	a2 83       	std	Z+2, r26	; 0x02
    134a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134c:	8e 01       	movw	r16, r28
    134e:	0d 57       	subi	r16, 0x7D	; 125
    1350:	1e 4f       	sbci	r17, 0xFE	; 254
    1352:	fe 01       	movw	r30, r28
    1354:	e9 57       	subi	r30, 0x79	; 121
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	60 81       	ld	r22, Z
    135a:	71 81       	ldd	r23, Z+1	; 0x01
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	93 81       	ldd	r25, Z+3	; 0x03
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a ef       	ldi	r20, 0xFA	; 250
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	f8 01       	movw	r30, r16
    1372:	80 83       	st	Z, r24
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	a2 83       	std	Z+2, r26	; 0x02
    1378:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    137a:	fe 01       	movw	r30, r28
    137c:	ed 57       	subi	r30, 0x7D	; 125
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e8       	ldi	r20, 0x80	; 128
    138e:	5f e3       	ldi	r21, 0x3F	; 63
    1390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1394:	88 23       	and	r24, r24
    1396:	44 f4       	brge	.+16     	; 0x13a8 <main+0x6f2>
		__ticks = 1;
    1398:	fe 01       	movw	r30, r28
    139a:	ef 57       	subi	r30, 0x7F	; 127
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
    13a6:	64 c0       	rjmp	.+200    	; 0x1470 <main+0x7ba>
	else if (__tmp > 65535)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 57       	subi	r30, 0x7D	; 125
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	0c f0       	brlt	.+2      	; 0x13c8 <main+0x712>
    13c6:	43 c0       	rjmp	.+134    	; 0x144e <main+0x798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c8:	fe 01       	movw	r30, r28
    13ca:	e9 57       	subi	r30, 0x79	; 121
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	8e 01       	movw	r16, r28
    13e8:	0f 57       	subi	r16, 0x7F	; 127
    13ea:	1e 4f       	sbci	r17, 0xFE	; 254
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	f8 01       	movw	r30, r16
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	1f c0       	rjmp	.+62     	; 0x143e <main+0x788>
    1400:	fe 01       	movw	r30, r28
    1402:	e1 58       	subi	r30, 0x81	; 129
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    140e:	fe 01       	movw	r30, r28
    1410:	e1 58       	subi	r30, 0x81	; 129
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <main+0x762>
    141c:	fe 01       	movw	r30, r28
    141e:	e1 58       	subi	r30, 0x81	; 129
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	de 01       	movw	r26, r28
    1428:	af 57       	subi	r26, 0x7F	; 127
    142a:	be 4f       	sbci	r27, 0xFE	; 254
    142c:	fe 01       	movw	r30, r28
    142e:	ef 57       	subi	r30, 0x7F	; 127
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	11 96       	adiw	r26, 0x01	; 1
    143a:	9c 93       	st	X, r25
    143c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143e:	fe 01       	movw	r30, r28
    1440:	ef 57       	subi	r30, 0x7F	; 127
    1442:	fe 4f       	sbci	r31, 0xFE	; 254
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	d1 f6       	brne	.-76     	; 0x1400 <main+0x74a>
    144c:	27 c0       	rjmp	.+78     	; 0x149c <main+0x7e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144e:	8e 01       	movw	r16, r28
    1450:	0f 57       	subi	r16, 0x7F	; 127
    1452:	1e 4f       	sbci	r17, 0xFE	; 254
    1454:	fe 01       	movw	r30, r28
    1456:	ed 57       	subi	r30, 0x7D	; 125
    1458:	fe 4f       	sbci	r31, 0xFE	; 254
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	f8 01       	movw	r30, r16
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
    1470:	de 01       	movw	r26, r28
    1472:	a3 58       	subi	r26, 0x83	; 131
    1474:	be 4f       	sbci	r27, 0xFE	; 254
    1476:	fe 01       	movw	r30, r28
    1478:	ef 57       	subi	r30, 0x7F	; 127
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	8d 93       	st	X+, r24
    1482:	9c 93       	st	X, r25
    1484:	fe 01       	movw	r30, r28
    1486:	e3 58       	subi	r30, 0x83	; 131
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <main+0x7d8>
    1492:	fe 01       	movw	r30, r28
    1494:	e3 58       	subi	r30, 0x83	; 131
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
			LCD_clearScreen();
			LCD_displayString("Plz re-enter the");
			LCD_displayStringRowColumn(1, 0, "same Pass: ");

			/* Re-enter The same Password */
			for(i = 0 ; i < 5 ; i++)
    149c:	de 01       	movw	r26, r28
    149e:	ac 54       	subi	r26, 0x4C	; 76
    14a0:	be 4f       	sbci	r27, 0xFE	; 254
    14a2:	fe 01       	movw	r30, r28
    14a4:	ec 54       	subi	r30, 0x4C	; 76
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 5f       	subi	r24, 0xFF	; 255
    14ac:	8c 93       	st	X, r24
    14ae:	fe 01       	movw	r30, r28
    14b0:	ec 54       	subi	r30, 0x4C	; 76
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	80 81       	ld	r24, Z
    14b6:	85 30       	cpi	r24, 0x05	; 5
    14b8:	08 f4       	brcc	.+2      	; 0x14bc <main+0x806>
    14ba:	23 cf       	rjmp	.-442    	; 0x1302 <main+0x64c>
			}

			/* Waiting User to press The Enter Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    14bc:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    14c0:	fe 01       	movw	r30, r28
    14c2:	eb 54       	subi	r30, 0x4B	; 75
    14c4:	fe 4f       	sbci	r31, 0xFE	; 254
    14c6:	80 83       	st	Z, r24
    14c8:	fe 01       	movw	r30, r28
    14ca:	e7 58       	subi	r30, 0x87	; 135
    14cc:	fe 4f       	sbci	r31, 0xFE	; 254
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	aa ef       	ldi	r26, 0xFA	; 250
    14d4:	b3 e4       	ldi	r27, 0x43	; 67
    14d6:	80 83       	st	Z, r24
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	a2 83       	std	Z+2, r26	; 0x02
    14dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	8e 01       	movw	r16, r28
    14e0:	0b 58       	subi	r16, 0x8B	; 139
    14e2:	1e 4f       	sbci	r17, 0xFE	; 254
    14e4:	fe 01       	movw	r30, r28
    14e6:	e7 58       	subi	r30, 0x87	; 135
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a ef       	ldi	r20, 0xFA	; 250
    14f8:	54 e4       	ldi	r21, 0x44	; 68
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	f8 01       	movw	r30, r16
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150c:	fe 01       	movw	r30, r28
    150e:	eb 58       	subi	r30, 0x8B	; 139
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	44 f4       	brge	.+16     	; 0x153a <main+0x884>
		__ticks = 1;
    152a:	fe 01       	movw	r30, r28
    152c:	ed 58       	subi	r30, 0x8D	; 141
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	64 c0       	rjmp	.+200    	; 0x1602 <main+0x94c>
	else if (__tmp > 65535)
    153a:	fe 01       	movw	r30, r28
    153c:	eb 58       	subi	r30, 0x8B	; 139
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	60 81       	ld	r22, Z
    1542:	71 81       	ldd	r23, Z+1	; 0x01
    1544:	82 81       	ldd	r24, Z+2	; 0x02
    1546:	93 81       	ldd	r25, Z+3	; 0x03
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	4f e7       	ldi	r20, 0x7F	; 127
    154e:	57 e4       	ldi	r21, 0x47	; 71
    1550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	0c f0       	brlt	.+2      	; 0x155a <main+0x8a4>
    1558:	43 c0       	rjmp	.+134    	; 0x15e0 <main+0x92a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	fe 01       	movw	r30, r28
    155c:	e7 58       	subi	r30, 0x87	; 135
    155e:	fe 4f       	sbci	r31, 0xFE	; 254
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	51 e4       	ldi	r21, 0x41	; 65
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8e 01       	movw	r16, r28
    157a:	0d 58       	subi	r16, 0x8D	; 141
    157c:	1e 4f       	sbci	r17, 0xFE	; 254
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	f8 01       	movw	r30, r16
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
    1590:	1f c0       	rjmp	.+62     	; 0x15d0 <main+0x91a>
    1592:	fe 01       	movw	r30, r28
    1594:	ef 58       	subi	r30, 0x8F	; 143
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	88 ec       	ldi	r24, 0xC8	; 200
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
    15a0:	fe 01       	movw	r30, r28
    15a2:	ef 58       	subi	r30, 0x8F	; 143
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <main+0x8f4>
    15ae:	fe 01       	movw	r30, r28
    15b0:	ef 58       	subi	r30, 0x8F	; 143
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	de 01       	movw	r26, r28
    15ba:	ad 58       	subi	r26, 0x8D	; 141
    15bc:	be 4f       	sbci	r27, 0xFE	; 254
    15be:	fe 01       	movw	r30, r28
    15c0:	ed 58       	subi	r30, 0x8D	; 141
    15c2:	fe 4f       	sbci	r31, 0xFE	; 254
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	9c 93       	st	X, r25
    15ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d0:	fe 01       	movw	r30, r28
    15d2:	ed 58       	subi	r30, 0x8D	; 141
    15d4:	fe 4f       	sbci	r31, 0xFE	; 254
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	d1 f6       	brne	.-76     	; 0x1592 <main+0x8dc>
    15de:	28 c0       	rjmp	.+80     	; 0x1630 <main+0x97a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	8e 01       	movw	r16, r28
    15e2:	0d 58       	subi	r16, 0x8D	; 141
    15e4:	1e 4f       	sbci	r17, 0xFE	; 254
    15e6:	fe 01       	movw	r30, r28
    15e8:	eb 58       	subi	r30, 0x8B	; 139
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	f8 01       	movw	r30, r16
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
    1602:	de 01       	movw	r26, r28
    1604:	a1 59       	subi	r26, 0x91	; 145
    1606:	be 4f       	sbci	r27, 0xFE	; 254
    1608:	fe 01       	movw	r30, r28
    160a:	ed 58       	subi	r30, 0x8D	; 141
    160c:	fe 4f       	sbci	r31, 0xFE	; 254
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	11 96       	adiw	r26, 0x01	; 1
    1614:	9c 93       	st	X, r25
    1616:	8e 93       	st	-X, r24
    1618:	fe 01       	movw	r30, r28
    161a:	e1 59       	subi	r30, 0x91	; 145
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <main+0x96c>
    1626:	fe 01       	movw	r30, r28
    1628:	e1 59       	subi	r30, 0x91	; 145
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
				_delay_ms(500);
			} while(key != 13);
    1630:	fe 01       	movw	r30, r28
    1632:	eb 54       	subi	r30, 0x4B	; 75
    1634:	fe 4f       	sbci	r31, 0xFE	; 254
    1636:	80 81       	ld	r24, Z
    1638:	8d 30       	cpi	r24, 0x0D	; 13
    163a:	09 f0       	breq	.+2      	; 0x163e <main+0x988>
    163c:	3f cf       	rjmp	.-386    	; 0x14bc <main+0x806>

			/* Send 2 Passwords To 2nd MCU */
			for(i = 0 ; i < 5 ; i++)
    163e:	fe 01       	movw	r30, r28
    1640:	ec 54       	subi	r30, 0x4C	; 76
    1642:	fe 4f       	sbci	r31, 0xFE	; 254
    1644:	10 82       	st	Z, r1
    1646:	41 c1       	rjmp	.+642    	; 0x18ca <main+0xc14>
			{
				UART_sendByte(pass1[i]);
    1648:	fe 01       	movw	r30, r28
    164a:	ec 54       	subi	r30, 0x4C	; 76
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	80 81       	ld	r24, Z
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	ce 01       	movw	r24, r28
    1656:	8a 54       	subi	r24, 0x4A	; 74
    1658:	9e 4f       	sbci	r25, 0xFE	; 254
    165a:	fc 01       	movw	r30, r24
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	80 81       	ld	r24, Z
    1662:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    1666:	fe 01       	movw	r30, r28
    1668:	e5 59       	subi	r30, 0x95	; 149
    166a:	fe 4f       	sbci	r31, 0xFE	; 254
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 ea       	ldi	r26, 0xA0	; 160
    1672:	b1 e4       	ldi	r27, 0x41	; 65
    1674:	80 83       	st	Z, r24
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	a2 83       	std	Z+2, r26	; 0x02
    167a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    167c:	8e 01       	movw	r16, r28
    167e:	09 59       	subi	r16, 0x99	; 153
    1680:	1e 4f       	sbci	r17, 0xFE	; 254
    1682:	fe 01       	movw	r30, r28
    1684:	e5 59       	subi	r30, 0x95	; 149
    1686:	fe 4f       	sbci	r31, 0xFE	; 254
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	2b ea       	ldi	r18, 0xAB	; 171
    1692:	3a ea       	ldi	r19, 0xAA	; 170
    1694:	4a e2       	ldi	r20, 0x2A	; 42
    1696:	50 e4       	ldi	r21, 0x40	; 64
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	f8 01       	movw	r30, r16
    16a2:	80 83       	st	Z, r24
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	a2 83       	std	Z+2, r26	; 0x02
    16a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16aa:	fe 01       	movw	r30, r28
    16ac:	e9 59       	subi	r30, 0x99	; 153
    16ae:	fe 4f       	sbci	r31, 0xFE	; 254
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	34 f4       	brge	.+12     	; 0x16d4 <main+0xa1e>
		__ticks = 1;
    16c8:	fe 01       	movw	r30, r28
    16ca:	ea 59       	subi	r30, 0x9A	; 154
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	80 83       	st	Z, r24
    16d2:	e0 c0       	rjmp	.+448    	; 0x1894 <main+0xbde>
	else if (__tmp > 255)
    16d4:	fe 01       	movw	r30, r28
    16d6:	e9 59       	subi	r30, 0x99	; 153
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	53 e4       	ldi	r21, 0x43	; 67
    16ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	0c f0       	brlt	.+2      	; 0x16f4 <main+0xa3e>
    16f2:	c0 c0       	rjmp	.+384    	; 0x1874 <main+0xbbe>
	{
		_delay_ms(__us / 1000.0);
    16f4:	fe 01       	movw	r30, r28
    16f6:	e5 59       	subi	r30, 0x95	; 149
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	4a e7       	ldi	r20, 0x7A	; 122
    1708:	54 e4       	ldi	r21, 0x44	; 68
    170a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	fe 01       	movw	r30, r28
    1714:	ee 59       	subi	r30, 0x9E	; 158
    1716:	fe 4f       	sbci	r31, 0xFE	; 254
    1718:	80 83       	st	Z, r24
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	a2 83       	std	Z+2, r26	; 0x02
    171e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1720:	8e 01       	movw	r16, r28
    1722:	02 5a       	subi	r16, 0xA2	; 162
    1724:	1e 4f       	sbci	r17, 0xFE	; 254
    1726:	fe 01       	movw	r30, r28
    1728:	ee 59       	subi	r30, 0x9E	; 158
    172a:	fe 4f       	sbci	r31, 0xFE	; 254
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a ef       	ldi	r20, 0xFA	; 250
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	a2 83       	std	Z+2, r26	; 0x02
    174c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    174e:	fe 01       	movw	r30, r28
    1750:	e2 5a       	subi	r30, 0xA2	; 162
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	44 f4       	brge	.+16     	; 0x177c <main+0xac6>
		__ticks = 1;
    176c:	fe 01       	movw	r30, r28
    176e:	e4 5a       	subi	r30, 0xA4	; 164
    1770:	fe 4f       	sbci	r31, 0xFE	; 254
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	64 c0       	rjmp	.+200    	; 0x1844 <main+0xb8e>
	else if (__tmp > 65535)
    177c:	fe 01       	movw	r30, r28
    177e:	e2 5a       	subi	r30, 0xA2	; 162
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	0c f0       	brlt	.+2      	; 0x179c <main+0xae6>
    179a:	43 c0       	rjmp	.+134    	; 0x1822 <main+0xb6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	fe 01       	movw	r30, r28
    179e:	ee 59       	subi	r30, 0x9E	; 158
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	60 81       	ld	r22, Z
    17a4:	71 81       	ldd	r23, Z+1	; 0x01
    17a6:	82 81       	ldd	r24, Z+2	; 0x02
    17a8:	93 81       	ldd	r25, Z+3	; 0x03
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e2       	ldi	r20, 0x20	; 32
    17b0:	51 e4       	ldi	r21, 0x41	; 65
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8e 01       	movw	r16, r28
    17bc:	04 5a       	subi	r16, 0xA4	; 164
    17be:	1e 4f       	sbci	r17, 0xFE	; 254
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	f8 01       	movw	r30, r16
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	1f c0       	rjmp	.+62     	; 0x1812 <main+0xb5c>
    17d4:	fe 01       	movw	r30, r28
    17d6:	e6 5a       	subi	r30, 0xA6	; 166
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	88 ec       	ldi	r24, 0xC8	; 200
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	fe 01       	movw	r30, r28
    17e4:	e6 5a       	subi	r30, 0xA6	; 166
    17e6:	fe 4f       	sbci	r31, 0xFE	; 254
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <main+0xb36>
    17f0:	fe 01       	movw	r30, r28
    17f2:	e6 5a       	subi	r30, 0xA6	; 166
    17f4:	fe 4f       	sbci	r31, 0xFE	; 254
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	de 01       	movw	r26, r28
    17fc:	a4 5a       	subi	r26, 0xA4	; 164
    17fe:	be 4f       	sbci	r27, 0xFE	; 254
    1800:	fe 01       	movw	r30, r28
    1802:	e4 5a       	subi	r30, 0xA4	; 164
    1804:	fe 4f       	sbci	r31, 0xFE	; 254
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	11 96       	adiw	r26, 0x01	; 1
    180e:	9c 93       	st	X, r25
    1810:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	fe 01       	movw	r30, r28
    1814:	e4 5a       	subi	r30, 0xA4	; 164
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	d1 f6       	brne	.-76     	; 0x17d4 <main+0xb1e>
    1820:	4b c0       	rjmp	.+150    	; 0x18b8 <main+0xc02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	8e 01       	movw	r16, r28
    1824:	04 5a       	subi	r16, 0xA4	; 164
    1826:	1e 4f       	sbci	r17, 0xFE	; 254
    1828:	fe 01       	movw	r30, r28
    182a:	e2 5a       	subi	r30, 0xA2	; 162
    182c:	fe 4f       	sbci	r31, 0xFE	; 254
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	f8 01       	movw	r30, r16
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
    1844:	de 01       	movw	r26, r28
    1846:	a8 5a       	subi	r26, 0xA8	; 168
    1848:	be 4f       	sbci	r27, 0xFE	; 254
    184a:	fe 01       	movw	r30, r28
    184c:	e4 5a       	subi	r30, 0xA4	; 164
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
    185a:	fe 01       	movw	r30, r28
    185c:	e8 5a       	subi	r30, 0xA8	; 168
    185e:	fe 4f       	sbci	r31, 0xFE	; 254
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <main+0xbae>
    1868:	fe 01       	movw	r30, r28
    186a:	e8 5a       	subi	r30, 0xA8	; 168
    186c:	fe 4f       	sbci	r31, 0xFE	; 254
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
    1872:	22 c0       	rjmp	.+68     	; 0x18b8 <main+0xc02>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1874:	8e 01       	movw	r16, r28
    1876:	0a 59       	subi	r16, 0x9A	; 154
    1878:	1e 4f       	sbci	r17, 0xFE	; 254
    187a:	fe 01       	movw	r30, r28
    187c:	e9 59       	subi	r30, 0x99	; 153
    187e:	fe 4f       	sbci	r31, 0xFE	; 254
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	80 83       	st	Z, r24
    1894:	de 01       	movw	r26, r28
    1896:	a9 5a       	subi	r26, 0xA9	; 169
    1898:	be 4f       	sbci	r27, 0xFE	; 254
    189a:	fe 01       	movw	r30, r28
    189c:	ea 59       	subi	r30, 0x9A	; 154
    189e:	fe 4f       	sbci	r31, 0xFE	; 254
    18a0:	80 81       	ld	r24, Z
    18a2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18a4:	fe 01       	movw	r30, r28
    18a6:	e9 5a       	subi	r30, 0xA9	; 169
    18a8:	fe 4f       	sbci	r31, 0xFE	; 254
    18aa:	80 81       	ld	r24, Z
    18ac:	8a 95       	dec	r24
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <main+0xbf6>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e9 5a       	subi	r30, 0xA9	; 169
    18b4:	fe 4f       	sbci	r31, 0xFE	; 254
    18b6:	80 83       	st	Z, r24
				key = KEYPAD_getPressedKey() ;
				_delay_ms(500);
			} while(key != 13);

			/* Send 2 Passwords To 2nd MCU */
			for(i = 0 ; i < 5 ; i++)
    18b8:	de 01       	movw	r26, r28
    18ba:	ac 54       	subi	r26, 0x4C	; 76
    18bc:	be 4f       	sbci	r27, 0xFE	; 254
    18be:	fe 01       	movw	r30, r28
    18c0:	ec 54       	subi	r30, 0x4C	; 76
    18c2:	fe 4f       	sbci	r31, 0xFE	; 254
    18c4:	80 81       	ld	r24, Z
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	8c 93       	st	X, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	ec 54       	subi	r30, 0x4C	; 76
    18ce:	fe 4f       	sbci	r31, 0xFE	; 254
    18d0:	80 81       	ld	r24, Z
    18d2:	85 30       	cpi	r24, 0x05	; 5
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <main+0xc22>
    18d6:	b8 ce       	rjmp	.-656    	; 0x1648 <main+0x992>
				UART_sendByte(pass1[i]);

				_delay_us(20);
			}

			for(i = 0 ; i < 5 ; i++)
    18d8:	fe 01       	movw	r30, r28
    18da:	ec 54       	subi	r30, 0x4C	; 76
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	10 82       	st	Z, r1
    18e0:	41 c1       	rjmp	.+642    	; 0x1b64 <main+0xeae>
			{
				UART_sendByte(pass2[i]);
    18e2:	fe 01       	movw	r30, r28
    18e4:	ec 54       	subi	r30, 0x4C	; 76
    18e6:	fe 4f       	sbci	r31, 0xFE	; 254
    18e8:	80 81       	ld	r24, Z
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	ce 01       	movw	r24, r28
    18f0:	85 54       	subi	r24, 0x45	; 69
    18f2:	9e 4f       	sbci	r25, 0xFE	; 254
    18f4:	fc 01       	movw	r30, r24
    18f6:	e2 0f       	add	r30, r18
    18f8:	f3 1f       	adc	r31, r19
    18fa:	80 81       	ld	r24, Z
    18fc:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    1900:	fe 01       	movw	r30, r28
    1902:	ed 5a       	subi	r30, 0xAD	; 173
    1904:	fe 4f       	sbci	r31, 0xFE	; 254
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 ea       	ldi	r26, 0xA0	; 160
    190c:	b1 e4       	ldi	r27, 0x41	; 65
    190e:	80 83       	st	Z, r24
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	a2 83       	std	Z+2, r26	; 0x02
    1914:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1916:	8e 01       	movw	r16, r28
    1918:	01 5b       	subi	r16, 0xB1	; 177
    191a:	1e 4f       	sbci	r17, 0xFE	; 254
    191c:	fe 01       	movw	r30, r28
    191e:	ed 5a       	subi	r30, 0xAD	; 173
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	2b ea       	ldi	r18, 0xAB	; 171
    192c:	3a ea       	ldi	r19, 0xAA	; 170
    192e:	4a e2       	ldi	r20, 0x2A	; 42
    1930:	50 e4       	ldi	r21, 0x40	; 64
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1944:	fe 01       	movw	r30, r28
    1946:	e1 5b       	subi	r30, 0xB1	; 177
    1948:	fe 4f       	sbci	r31, 0xFE	; 254
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	34 f4       	brge	.+12     	; 0x196e <main+0xcb8>
		__ticks = 1;
    1962:	fe 01       	movw	r30, r28
    1964:	e2 5b       	subi	r30, 0xB2	; 178
    1966:	fe 4f       	sbci	r31, 0xFE	; 254
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 83       	st	Z, r24
    196c:	e0 c0       	rjmp	.+448    	; 0x1b2e <main+0xe78>
	else if (__tmp > 255)
    196e:	fe 01       	movw	r30, r28
    1970:	e1 5b       	subi	r30, 0xB1	; 177
    1972:	fe 4f       	sbci	r31, 0xFE	; 254
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	53 e4       	ldi	r21, 0x43	; 67
    1984:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	0c f0       	brlt	.+2      	; 0x198e <main+0xcd8>
    198c:	c0 c0       	rjmp	.+384    	; 0x1b0e <main+0xe58>
	{
		_delay_ms(__us / 1000.0);
    198e:	fe 01       	movw	r30, r28
    1990:	ed 5a       	subi	r30, 0xAD	; 173
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4a e7       	ldi	r20, 0x7A	; 122
    19a2:	54 e4       	ldi	r21, 0x44	; 68
    19a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	fe 01       	movw	r30, r28
    19ae:	e6 5b       	subi	r30, 0xB6	; 182
    19b0:	fe 4f       	sbci	r31, 0xFE	; 254
    19b2:	80 83       	st	Z, r24
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	a2 83       	std	Z+2, r26	; 0x02
    19b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	8e 01       	movw	r16, r28
    19bc:	0a 5b       	subi	r16, 0xBA	; 186
    19be:	1e 4f       	sbci	r17, 0xFE	; 254
    19c0:	fe 01       	movw	r30, r28
    19c2:	e6 5b       	subi	r30, 0xB6	; 182
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a ef       	ldi	r20, 0xFA	; 250
    19d4:	54 e4       	ldi	r21, 0x44	; 68
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	f8 01       	movw	r30, r16
    19e0:	80 83       	st	Z, r24
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	a2 83       	std	Z+2, r26	; 0x02
    19e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e8:	fe 01       	movw	r30, r28
    19ea:	ea 5b       	subi	r30, 0xBA	; 186
    19ec:	fe 4f       	sbci	r31, 0xFE	; 254
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	44 f4       	brge	.+16     	; 0x1a16 <main+0xd60>
		__ticks = 1;
    1a06:	fe 01       	movw	r30, r28
    1a08:	ec 5b       	subi	r30, 0xBC	; 188
    1a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
    1a14:	64 c0       	rjmp	.+200    	; 0x1ade <main+0xe28>
	else if (__tmp > 65535)
    1a16:	fe 01       	movw	r30, r28
    1a18:	ea 5b       	subi	r30, 0xBA	; 186
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	57 e4       	ldi	r21, 0x47	; 71
    1a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	0c f0       	brlt	.+2      	; 0x1a36 <main+0xd80>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <main+0xe06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a36:	fe 01       	movw	r30, r28
    1a38:	e6 5b       	subi	r30, 0xB6	; 182
    1a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8e 01       	movw	r16, r28
    1a56:	0c 5b       	subi	r16, 0xBC	; 188
    1a58:	1e 4f       	sbci	r17, 0xFE	; 254
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	f8 01       	movw	r30, r16
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	1f c0       	rjmp	.+62     	; 0x1aac <main+0xdf6>
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ee 5b       	subi	r30, 0xBE	; 190
    1a72:	fe 4f       	sbci	r31, 0xFE	; 254
    1a74:	88 ec       	ldi	r24, 0xC8	; 200
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ee 5b       	subi	r30, 0xBE	; 190
    1a80:	fe 4f       	sbci	r31, 0xFE	; 254
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <main+0xdd0>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ee 5b       	subi	r30, 0xBE	; 190
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	de 01       	movw	r26, r28
    1a96:	ac 5b       	subi	r26, 0xBC	; 188
    1a98:	be 4f       	sbci	r27, 0xFE	; 254
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ec 5b       	subi	r30, 0xBC	; 188
    1a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	11 96       	adiw	r26, 0x01	; 1
    1aa8:	9c 93       	st	X, r25
    1aaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	fe 01       	movw	r30, r28
    1aae:	ec 5b       	subi	r30, 0xBC	; 188
    1ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	d1 f6       	brne	.-76     	; 0x1a6e <main+0xdb8>
    1aba:	4b c0       	rjmp	.+150    	; 0x1b52 <main+0xe9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abc:	8e 01       	movw	r16, r28
    1abe:	0c 5b       	subi	r16, 0xBC	; 188
    1ac0:	1e 4f       	sbci	r17, 0xFE	; 254
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ea 5b       	subi	r30, 0xBA	; 186
    1ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	de 01       	movw	r26, r28
    1ae0:	a0 5c       	subi	r26, 0xC0	; 192
    1ae2:	be 4f       	sbci	r27, 0xFE	; 254
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ec 5b       	subi	r30, 0xBC	; 188
    1ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aea:	80 81       	ld	r24, Z
    1aec:	91 81       	ldd	r25, Z+1	; 0x01
    1aee:	11 96       	adiw	r26, 0x01	; 1
    1af0:	9c 93       	st	X, r25
    1af2:	8e 93       	st	-X, r24
    1af4:	fe 01       	movw	r30, r28
    1af6:	e0 5c       	subi	r30, 0xC0	; 192
    1af8:	fe 4f       	sbci	r31, 0xFE	; 254
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <main+0xe48>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e0 5c       	subi	r30, 0xC0	; 192
    1b06:	fe 4f       	sbci	r31, 0xFE	; 254
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
    1b0c:	22 c0       	rjmp	.+68     	; 0x1b52 <main+0xe9c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b0e:	8e 01       	movw	r16, r28
    1b10:	02 5b       	subi	r16, 0xB2	; 178
    1b12:	1e 4f       	sbci	r17, 0xFE	; 254
    1b14:	fe 01       	movw	r30, r28
    1b16:	e1 5b       	subi	r30, 0xB1	; 177
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 83       	st	Z, r24
    1b2e:	de 01       	movw	r26, r28
    1b30:	a1 5c       	subi	r26, 0xC1	; 193
    1b32:	be 4f       	sbci	r27, 0xFE	; 254
    1b34:	fe 01       	movw	r30, r28
    1b36:	e2 5b       	subi	r30, 0xB2	; 178
    1b38:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e1 5c       	subi	r30, 0xC1	; 193
    1b42:	fe 4f       	sbci	r31, 0xFE	; 254
    1b44:	80 81       	ld	r24, Z
    1b46:	8a 95       	dec	r24
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <main+0xe90>
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e1 5c       	subi	r30, 0xC1	; 193
    1b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b50:	80 83       	st	Z, r24
				UART_sendByte(pass1[i]);

				_delay_us(20);
			}

			for(i = 0 ; i < 5 ; i++)
    1b52:	de 01       	movw	r26, r28
    1b54:	ac 54       	subi	r26, 0x4C	; 76
    1b56:	be 4f       	sbci	r27, 0xFE	; 254
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ec 54       	subi	r30, 0x4C	; 76
    1b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	8c 93       	st	X, r24
    1b64:	fe 01       	movw	r30, r28
    1b66:	ec 54       	subi	r30, 0x4C	; 76
    1b68:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6a:	80 81       	ld	r24, Z
    1b6c:	85 30       	cpi	r24, 0x05	; 5
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <main+0xebc>
    1b70:	b8 ce       	rjmp	.-656    	; 0x18e2 <main+0xc2c>
				UART_sendByte(pass2[i]);

				_delay_us(20);
			}

			status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    1b72:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    1b76:	fe 01       	movw	r30, r28
    1b78:	ed 54       	subi	r30, 0x4D	; 77
    1b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7c:	80 83       	st	Z, r24

			/* if 2 Passwords matched each other move to next phase */
			if(status == OK)
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ed 54       	subi	r30, 0x4D	; 77
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	80 81       	ld	r24, Z
    1b86:	80 31       	cpi	r24, 0x10	; 16
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <main+0xed6>
    1b8a:	80 c9       	rjmp	.-3328   	; 0xe8c <main+0x1d6>
			{
				flag = 1;
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	ee 54       	subi	r30, 0x4E	; 78
    1b90:	fe 4f       	sbci	r31, 0xFE	; 254
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 83       	st	Z, r24
    1b96:	7a c9       	rjmp	.-3340   	; 0xe8c <main+0x1d6>
			}
		}
		else if(flag == 1) /* Normal Phase Of System */
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ee 54       	subi	r30, 0x4E	; 78
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	80 81       	ld	r24, Z
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <main+0xef0>
    1ba4:	73 c9       	rjmp	.-3354   	; 0xe8c <main+0x1d6>
		{
			LCD_clearScreen();
    1ba6:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    1baa:	8d e8       	ldi	r24, 0x8D	; 141
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1bb2:	2b e9       	ldi	r18, 0x9B	; 155
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	a9 01       	movw	r20, r18
    1bbc:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <LCD_displayStringRowColumn>

			/* Waiting User to press (+ or -) Button */
			do
			{
				key = KEYPAD_getPressedKey() ;
    1bc0:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	eb 54       	subi	r30, 0x4B	; 75
    1bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bca:	80 83       	st	Z, r24
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e5 5c       	subi	r30, 0xC5	; 197
    1bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	aa ef       	ldi	r26, 0xFA	; 250
    1bd8:	b3 e4       	ldi	r27, 0x43	; 67
    1bda:	80 83       	st	Z, r24
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	8e 01       	movw	r16, r28
    1be4:	09 5c       	subi	r16, 0xC9	; 201
    1be6:	1e 4f       	sbci	r17, 0xFE	; 254
    1be8:	fe 01       	movw	r30, r28
    1bea:	e5 5c       	subi	r30, 0xC5	; 197
    1bec:	fe 4f       	sbci	r31, 0xFE	; 254
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 83       	st	Z, r24
    1c0a:	91 83       	std	Z+1, r25	; 0x01
    1c0c:	a2 83       	std	Z+2, r26	; 0x02
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c10:	fe 01       	movw	r30, r28
    1c12:	e9 5c       	subi	r30, 0xC9	; 201
    1c14:	fe 4f       	sbci	r31, 0xFE	; 254
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	44 f4       	brge	.+16     	; 0x1c3e <main+0xf88>
		__ticks = 1;
    1c2e:	fe 01       	movw	r30, r28
    1c30:	eb 5c       	subi	r30, 0xCB	; 203
    1c32:	fe 4f       	sbci	r31, 0xFE	; 254
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
    1c3c:	64 c0       	rjmp	.+200    	; 0x1d06 <main+0x1050>
	else if (__tmp > 65535)
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e9 5c       	subi	r30, 0xC9	; 201
    1c42:	fe 4f       	sbci	r31, 0xFE	; 254
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <main+0xfa8>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <main+0x102e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e5 5c       	subi	r30, 0xC5	; 197
    1c62:	fe 4f       	sbci	r31, 0xFE	; 254
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8e 01       	movw	r16, r28
    1c7e:	0b 5c       	subi	r16, 0xCB	; 203
    1c80:	1e 4f       	sbci	r17, 0xFE	; 254
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	1f c0       	rjmp	.+62     	; 0x1cd4 <main+0x101e>
    1c96:	fe 01       	movw	r30, r28
    1c98:	ed 5c       	subi	r30, 0xCD	; 205
    1c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ed 5c       	subi	r30, 0xCD	; 205
    1ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <main+0xff8>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ed 5c       	subi	r30, 0xCD	; 205
    1cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	ab 5c       	subi	r26, 0xCB	; 203
    1cc0:	be 4f       	sbci	r27, 0xFE	; 254
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	eb 5c       	subi	r30, 0xCB	; 203
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	eb 5c       	subi	r30, 0xCB	; 203
    1cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	d1 f6       	brne	.-76     	; 0x1c96 <main+0xfe0>
    1ce2:	28 c0       	rjmp	.+80     	; 0x1d34 <main+0x107e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	0b 5c       	subi	r16, 0xCB	; 203
    1ce8:	1e 4f       	sbci	r17, 0xFE	; 254
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 5c       	subi	r30, 0xC9	; 201
    1cee:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	de 01       	movw	r26, r28
    1d08:	af 5c       	subi	r26, 0xCF	; 207
    1d0a:	be 4f       	sbci	r27, 0xFE	; 254
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	eb 5c       	subi	r30, 0xCB	; 203
    1d10:	fe 4f       	sbci	r31, 0xFE	; 254
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	11 96       	adiw	r26, 0x01	; 1
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	ef 5c       	subi	r30, 0xCF	; 207
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <main+0x1070>
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ef 5c       	subi	r30, 0xCF	; 207
    1d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
				_delay_ms(500);
			} while((key != '+') && (key != '-'));
    1d34:	fe 01       	movw	r30, r28
    1d36:	eb 54       	subi	r30, 0x4B	; 75
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8b 32       	cpi	r24, 0x2B	; 43
    1d3e:	39 f0       	breq	.+14     	; 0x1d4e <main+0x1098>
    1d40:	fe 01       	movw	r30, r28
    1d42:	eb 54       	subi	r30, 0x4B	; 75
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	80 81       	ld	r24, Z
    1d48:	8d 32       	cpi	r24, 0x2D	; 45
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <main+0x1098>
    1d4c:	39 cf       	rjmp	.-398    	; 0x1bc0 <main+0xf0a>

			if(key == '+') /* User Choose Open The Door */
    1d4e:	fe 01       	movw	r30, r28
    1d50:	eb 54       	subi	r30, 0x4B	; 75
    1d52:	fe 4f       	sbci	r31, 0xFE	; 254
    1d54:	80 81       	ld	r24, Z
    1d56:	8b 32       	cpi	r24, 0x2B	; 43
    1d58:	11 f0       	breq	.+4      	; 0x1d5e <main+0x10a8>
    1d5a:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <main+0x2288>
			{
				LCD_clearScreen();
    1d5e:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    1d62:	8b ea       	ldi	r24, 0xAB	; 171
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
				LCD_moveCursor(1, 0);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1d72:	fe 01       	movw	r30, r28
    1d74:	ec 54       	subi	r30, 0x4C	; 76
    1d76:	fe 4f       	sbci	r31, 0xFE	; 254
    1d78:	10 82       	st	Z, r1
    1d7a:	d6 c0       	rjmp	.+428    	; 0x1f28 <main+0x1272>
				{
					key = KEYPAD_getPressedKey() ;
    1d7c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    1d80:	fe 01       	movw	r30, r28
    1d82:	eb 54       	subi	r30, 0x4B	; 75
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	80 83       	st	Z, r24
					pass1[i] = key ;
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ec 54       	subi	r30, 0x4C	; 76
    1d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8e:	80 81       	ld	r24, Z
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	ce 01       	movw	r24, r28
    1d96:	8a 54       	subi	r24, 0x4A	; 74
    1d98:	9e 4f       	sbci	r25, 0xFE	; 254
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	a2 0f       	add	r26, r18
    1d9e:	b3 1f       	adc	r27, r19
    1da0:	fe 01       	movw	r30, r28
    1da2:	eb 54       	subi	r30, 0x4B	; 75
    1da4:	fe 4f       	sbci	r31, 0xFE	; 254
    1da6:	80 81       	ld	r24, Z
    1da8:	8c 93       	st	X, r24
					LCD_displayCharacter('*');
    1daa:	8a e2       	ldi	r24, 0x2A	; 42
    1dac:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
    1db0:	fe 01       	movw	r30, r28
    1db2:	e3 5d       	subi	r30, 0xD3	; 211
    1db4:	fe 4f       	sbci	r31, 0xFE	; 254
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	aa ef       	ldi	r26, 0xFA	; 250
    1dbc:	b3 e4       	ldi	r27, 0x43	; 67
    1dbe:	80 83       	st	Z, r24
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	a2 83       	std	Z+2, r26	; 0x02
    1dc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc6:	8e 01       	movw	r16, r28
    1dc8:	07 5d       	subi	r16, 0xD7	; 215
    1dca:	1e 4f       	sbci	r17, 0xFE	; 254
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e3 5d       	subi	r30, 0xD3	; 211
    1dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	f8 01       	movw	r30, r16
    1dec:	80 83       	st	Z, r24
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	a2 83       	std	Z+2, r26	; 0x02
    1df2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df4:	fe 01       	movw	r30, r28
    1df6:	e7 5d       	subi	r30, 0xD7	; 215
    1df8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e8       	ldi	r20, 0x80	; 128
    1e08:	5f e3       	ldi	r21, 0x3F	; 63
    1e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	44 f4       	brge	.+16     	; 0x1e22 <main+0x116c>
		__ticks = 1;
    1e12:	fe 01       	movw	r30, r28
    1e14:	e9 5d       	subi	r30, 0xD9	; 217
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	80 83       	st	Z, r24
    1e20:	64 c0       	rjmp	.+200    	; 0x1eea <main+0x1234>
	else if (__tmp > 65535)
    1e22:	fe 01       	movw	r30, r28
    1e24:	e7 5d       	subi	r30, 0xD7	; 215
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	0c f0       	brlt	.+2      	; 0x1e42 <main+0x118c>
    1e40:	43 c0       	rjmp	.+134    	; 0x1ec8 <main+0x1212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	fe 01       	movw	r30, r28
    1e44:	e3 5d       	subi	r30, 0xD3	; 211
    1e46:	fe 4f       	sbci	r31, 0xFE	; 254
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8e 01       	movw	r16, r28
    1e62:	09 5d       	subi	r16, 0xD9	; 217
    1e64:	1e 4f       	sbci	r17, 0xFE	; 254
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	f8 01       	movw	r30, r16
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	1f c0       	rjmp	.+62     	; 0x1eb8 <main+0x1202>
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	eb 5d       	subi	r30, 0xDB	; 219
    1e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e80:	88 ec       	ldi	r24, 0xC8	; 200
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	fe 01       	movw	r30, r28
    1e8a:	eb 5d       	subi	r30, 0xDB	; 219
    1e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <main+0x11dc>
    1e96:	fe 01       	movw	r30, r28
    1e98:	eb 5d       	subi	r30, 0xDB	; 219
    1e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	de 01       	movw	r26, r28
    1ea2:	a9 5d       	subi	r26, 0xD9	; 217
    1ea4:	be 4f       	sbci	r27, 0xFE	; 254
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e9 5d       	subi	r30, 0xD9	; 217
    1eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1eac:	80 81       	ld	r24, Z
    1eae:	91 81       	ldd	r25, Z+1	; 0x01
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	11 96       	adiw	r26, 0x01	; 1
    1eb4:	9c 93       	st	X, r25
    1eb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e9 5d       	subi	r30, 0xD9	; 217
    1ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	d1 f6       	brne	.-76     	; 0x1e7a <main+0x11c4>
    1ec6:	27 c0       	rjmp	.+78     	; 0x1f16 <main+0x1260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	8e 01       	movw	r16, r28
    1eca:	09 5d       	subi	r16, 0xD9	; 217
    1ecc:	1e 4f       	sbci	r17, 0xFE	; 254
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e7 5d       	subi	r30, 0xD7	; 215
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	de 01       	movw	r26, r28
    1eec:	ad 5d       	subi	r26, 0xDD	; 221
    1eee:	be 4f       	sbci	r27, 0xFE	; 254
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e9 5d       	subi	r30, 0xD9	; 217
    1ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	8d 93       	st	X+, r24
    1efc:	9c 93       	st	X, r25
    1efe:	fe 01       	movw	r30, r28
    1f00:	ed 5d       	subi	r30, 0xDD	; 221
    1f02:	fe 4f       	sbci	r31, 0xFE	; 254
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <main+0x1252>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ed 5d       	subi	r30, 0xDD	; 221
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    1f16:	de 01       	movw	r26, r28
    1f18:	ac 54       	subi	r26, 0x4C	; 76
    1f1a:	be 4f       	sbci	r27, 0xFE	; 254
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ec 54       	subi	r30, 0x4C	; 76
    1f20:	fe 4f       	sbci	r31, 0xFE	; 254
    1f22:	80 81       	ld	r24, Z
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	8c 93       	st	X, r24
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ec 54       	subi	r30, 0x4C	; 76
    1f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2e:	80 81       	ld	r24, Z
    1f30:	85 30       	cpi	r24, 0x05	; 5
    1f32:	08 f4       	brcc	.+2      	; 0x1f36 <main+0x1280>
    1f34:	23 cf       	rjmp	.-442    	; 0x1d7c <main+0x10c6>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    1f36:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	eb 54       	subi	r30, 0x4B	; 75
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	80 83       	st	Z, r24
    1f42:	fe 01       	movw	r30, r28
    1f44:	e1 5e       	subi	r30, 0xE1	; 225
    1f46:	fe 4f       	sbci	r31, 0xFE	; 254
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	aa ef       	ldi	r26, 0xFA	; 250
    1f4e:	b3 e4       	ldi	r27, 0x43	; 67
    1f50:	80 83       	st	Z, r24
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	8e 01       	movw	r16, r28
    1f5a:	05 5e       	subi	r16, 0xE5	; 229
    1f5c:	1e 4f       	sbci	r17, 0xFE	; 254
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e1 5e       	subi	r30, 0xE1	; 225
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f86:	fe 01       	movw	r30, r28
    1f88:	e5 5e       	subi	r30, 0xE5	; 229
    1f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	44 f4       	brge	.+16     	; 0x1fb4 <main+0x12fe>
		__ticks = 1;
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e7 5e       	subi	r30, 0xE7	; 231
    1fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    1fb2:	64 c0       	rjmp	.+200    	; 0x207c <main+0x13c6>
	else if (__tmp > 65535)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e5 5e       	subi	r30, 0xE5	; 229
    1fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	0c f0       	brlt	.+2      	; 0x1fd4 <main+0x131e>
    1fd2:	43 c0       	rjmp	.+134    	; 0x205a <main+0x13a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e1 5e       	subi	r30, 0xE1	; 225
    1fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	07 5e       	subi	r16, 0xE7	; 231
    1ff6:	1e 4f       	sbci	r17, 0xFE	; 254
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	f8 01       	movw	r30, r16
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
    200a:	1f c0       	rjmp	.+62     	; 0x204a <main+0x1394>
    200c:	fe 01       	movw	r30, r28
    200e:	e9 5e       	subi	r30, 0xE9	; 233
    2010:	fe 4f       	sbci	r31, 0xFE	; 254
    2012:	88 ec       	ldi	r24, 0xC8	; 200
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
    201a:	fe 01       	movw	r30, r28
    201c:	e9 5e       	subi	r30, 0xE9	; 233
    201e:	fe 4f       	sbci	r31, 0xFE	; 254
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <main+0x136e>
    2028:	fe 01       	movw	r30, r28
    202a:	e9 5e       	subi	r30, 0xE9	; 233
    202c:	fe 4f       	sbci	r31, 0xFE	; 254
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	de 01       	movw	r26, r28
    2034:	a7 5e       	subi	r26, 0xE7	; 231
    2036:	be 4f       	sbci	r27, 0xFE	; 254
    2038:	fe 01       	movw	r30, r28
    203a:	e7 5e       	subi	r30, 0xE7	; 231
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	80 81       	ld	r24, Z
    2040:	91 81       	ldd	r25, Z+1	; 0x01
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	11 96       	adiw	r26, 0x01	; 1
    2046:	9c 93       	st	X, r25
    2048:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	fe 01       	movw	r30, r28
    204c:	e7 5e       	subi	r30, 0xE7	; 231
    204e:	fe 4f       	sbci	r31, 0xFE	; 254
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	d1 f6       	brne	.-76     	; 0x200c <main+0x1356>
    2058:	28 c0       	rjmp	.+80     	; 0x20aa <main+0x13f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	8e 01       	movw	r16, r28
    205c:	07 5e       	subi	r16, 0xE7	; 231
    205e:	1e 4f       	sbci	r17, 0xFE	; 254
    2060:	fe 01       	movw	r30, r28
    2062:	e5 5e       	subi	r30, 0xE5	; 229
    2064:	fe 4f       	sbci	r31, 0xFE	; 254
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	f8 01       	movw	r30, r16
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
    207c:	de 01       	movw	r26, r28
    207e:	ab 5e       	subi	r26, 0xEB	; 235
    2080:	be 4f       	sbci	r27, 0xFE	; 254
    2082:	fe 01       	movw	r30, r28
    2084:	e7 5e       	subi	r30, 0xE7	; 231
    2086:	fe 4f       	sbci	r31, 0xFE	; 254
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	11 96       	adiw	r26, 0x01	; 1
    208e:	9c 93       	st	X, r25
    2090:	8e 93       	st	-X, r24
    2092:	fe 01       	movw	r30, r28
    2094:	eb 5e       	subi	r30, 0xEB	; 235
    2096:	fe 4f       	sbci	r31, 0xFE	; 254
    2098:	80 81       	ld	r24, Z
    209a:	91 81       	ldd	r25, Z+1	; 0x01
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <main+0x13e6>
    20a0:	fe 01       	movw	r30, r28
    20a2:	eb 5e       	subi	r30, 0xEB	; 235
    20a4:	fe 4f       	sbci	r31, 0xFE	; 254
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    20aa:	fe 01       	movw	r30, r28
    20ac:	eb 54       	subi	r30, 0x4B	; 75
    20ae:	fe 4f       	sbci	r31, 0xFE	; 254
    20b0:	80 81       	ld	r24, Z
    20b2:	8d 30       	cpi	r24, 0x0D	; 13
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <main+0x1402>
    20b6:	3f cf       	rjmp	.-386    	; 0x1f36 <main+0x1280>

				UART_sendByte(CHECK); /* */
    20b8:	81 e1       	ldi	r24, 0x11	; 17
    20ba:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    20be:	fe 01       	movw	r30, r28
    20c0:	ef 5e       	subi	r30, 0xEF	; 239
    20c2:	fe 4f       	sbci	r31, 0xFE	; 254
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 ea       	ldi	r26, 0xA0	; 160
    20ca:	b1 e4       	ldi	r27, 0x41	; 65
    20cc:	80 83       	st	Z, r24
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	a2 83       	std	Z+2, r26	; 0x02
    20d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20d4:	8e 01       	movw	r16, r28
    20d6:	03 5f       	subi	r16, 0xF3	; 243
    20d8:	1e 4f       	sbci	r17, 0xFE	; 254
    20da:	fe 01       	movw	r30, r28
    20dc:	ef 5e       	subi	r30, 0xEF	; 239
    20de:	fe 4f       	sbci	r31, 0xFE	; 254
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	2b ea       	ldi	r18, 0xAB	; 171
    20ea:	3a ea       	ldi	r19, 0xAA	; 170
    20ec:	4a e2       	ldi	r20, 0x2A	; 42
    20ee:	50 e4       	ldi	r21, 0x40	; 64
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	f8 01       	movw	r30, r16
    20fa:	80 83       	st	Z, r24
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	a2 83       	std	Z+2, r26	; 0x02
    2100:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2102:	fe 01       	movw	r30, r28
    2104:	e3 5f       	subi	r30, 0xF3	; 243
    2106:	fe 4f       	sbci	r31, 0xFE	; 254
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	34 f4       	brge	.+12     	; 0x212c <main+0x1476>
		__ticks = 1;
    2120:	fe 01       	movw	r30, r28
    2122:	e4 5f       	subi	r30, 0xF4	; 244
    2124:	fe 4f       	sbci	r31, 0xFE	; 254
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	80 83       	st	Z, r24
    212a:	e0 c0       	rjmp	.+448    	; 0x22ec <main+0x1636>
	else if (__tmp > 255)
    212c:	fe 01       	movw	r30, r28
    212e:	e3 5f       	subi	r30, 0xF3	; 243
    2130:	fe 4f       	sbci	r31, 0xFE	; 254
    2132:	60 81       	ld	r22, Z
    2134:	71 81       	ldd	r23, Z+1	; 0x01
    2136:	82 81       	ldd	r24, Z+2	; 0x02
    2138:	93 81       	ldd	r25, Z+3	; 0x03
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	53 e4       	ldi	r21, 0x43	; 67
    2142:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	0c f0       	brlt	.+2      	; 0x214c <main+0x1496>
    214a:	c0 c0       	rjmp	.+384    	; 0x22cc <main+0x1616>
	{
		_delay_ms(__us / 1000.0);
    214c:	fe 01       	movw	r30, r28
    214e:	ef 5e       	subi	r30, 0xEF	; 239
    2150:	fe 4f       	sbci	r31, 0xFE	; 254
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a e7       	ldi	r20, 0x7A	; 122
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	fe 01       	movw	r30, r28
    216c:	e8 5f       	subi	r30, 0xF8	; 248
    216e:	fe 4f       	sbci	r31, 0xFE	; 254
    2170:	80 83       	st	Z, r24
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	a2 83       	std	Z+2, r26	; 0x02
    2176:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2178:	8e 01       	movw	r16, r28
    217a:	0c 5f       	subi	r16, 0xFC	; 252
    217c:	1e 4f       	sbci	r17, 0xFE	; 254
    217e:	fe 01       	movw	r30, r28
    2180:	e8 5f       	subi	r30, 0xF8	; 248
    2182:	fe 4f       	sbci	r31, 0xFE	; 254
    2184:	60 81       	ld	r22, Z
    2186:	71 81       	ldd	r23, Z+1	; 0x01
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	f8 01       	movw	r30, r16
    219e:	80 83       	st	Z, r24
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	a2 83       	std	Z+2, r26	; 0x02
    21a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a6:	fe 01       	movw	r30, r28
    21a8:	ec 5f       	subi	r30, 0xFC	; 252
    21aa:	fe 4f       	sbci	r31, 0xFE	; 254
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	44 f4       	brge	.+16     	; 0x21d4 <main+0x151e>
		__ticks = 1;
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 5f       	subi	r30, 0xFE	; 254
    21c8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	64 c0       	rjmp	.+200    	; 0x229c <main+0x15e6>
	else if (__tmp > 65535)
    21d4:	fe 01       	movw	r30, r28
    21d6:	ec 5f       	subi	r30, 0xFC	; 252
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	60 81       	ld	r22, Z
    21dc:	71 81       	ldd	r23, Z+1	; 0x01
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	4f e7       	ldi	r20, 0x7F	; 127
    21e8:	57 e4       	ldi	r21, 0x47	; 71
    21ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ee:	18 16       	cp	r1, r24
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <main+0x153e>
    21f2:	43 c0       	rjmp	.+134    	; 0x227a <main+0x15c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f4:	fe 01       	movw	r30, r28
    21f6:	e8 5f       	subi	r30, 0xF8	; 248
    21f8:	fe 4f       	sbci	r31, 0xFE	; 254
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	8e 01       	movw	r16, r28
    2214:	0e 5f       	subi	r16, 0xFE	; 254
    2216:	1e 4f       	sbci	r17, 0xFE	; 254
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	f8 01       	movw	r30, r16
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	1f c0       	rjmp	.+62     	; 0x226a <main+0x15b4>
    222c:	fe 01       	movw	r30, r28
    222e:	e0 50       	subi	r30, 0x00	; 0
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	88 ec       	ldi	r24, 0xC8	; 200
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    223a:	fe 01       	movw	r30, r28
    223c:	e0 50       	subi	r30, 0x00	; 0
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <main+0x158e>
    2248:	fe 01       	movw	r30, r28
    224a:	e0 50       	subi	r30, 0x00	; 0
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2252:	de 01       	movw	r26, r28
    2254:	ae 5f       	subi	r26, 0xFE	; 254
    2256:	be 4f       	sbci	r27, 0xFE	; 254
    2258:	fe 01       	movw	r30, r28
    225a:	ee 5f       	subi	r30, 0xFE	; 254
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	11 96       	adiw	r26, 0x01	; 1
    2266:	9c 93       	st	X, r25
    2268:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	fe 01       	movw	r30, r28
    226c:	ee 5f       	subi	r30, 0xFE	; 254
    226e:	fe 4f       	sbci	r31, 0xFE	; 254
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	d1 f6       	brne	.-76     	; 0x222c <main+0x1576>
    2278:	4b c0       	rjmp	.+150    	; 0x2310 <main+0x165a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	8e 01       	movw	r16, r28
    227c:	0e 5f       	subi	r16, 0xFE	; 254
    227e:	1e 4f       	sbci	r17, 0xFE	; 254
    2280:	fe 01       	movw	r30, r28
    2282:	ec 5f       	subi	r30, 0xFC	; 252
    2284:	fe 4f       	sbci	r31, 0xFE	; 254
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	f8 01       	movw	r30, r16
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
    229c:	de 01       	movw	r26, r28
    229e:	a2 50       	subi	r26, 0x02	; 2
    22a0:	bf 4f       	sbci	r27, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	ee 5f       	subi	r30, 0xFE	; 254
    22a6:	fe 4f       	sbci	r31, 0xFE	; 254
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	11 96       	adiw	r26, 0x01	; 1
    22ae:	9c 93       	st	X, r25
    22b0:	8e 93       	st	-X, r24
    22b2:	fe 01       	movw	r30, r28
    22b4:	e2 50       	subi	r30, 0x02	; 2
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <main+0x1606>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e2 50       	subi	r30, 0x02	; 2
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    22ca:	22 c0       	rjmp	.+68     	; 0x2310 <main+0x165a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22cc:	8e 01       	movw	r16, r28
    22ce:	04 5f       	subi	r16, 0xF4	; 244
    22d0:	1e 4f       	sbci	r17, 0xFE	; 254
    22d2:	fe 01       	movw	r30, r28
    22d4:	e3 5f       	subi	r30, 0xF3	; 243
    22d6:	fe 4f       	sbci	r31, 0xFE	; 254
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	f8 01       	movw	r30, r16
    22ea:	80 83       	st	Z, r24
    22ec:	de 01       	movw	r26, r28
    22ee:	a3 50       	subi	r26, 0x03	; 3
    22f0:	bf 4f       	sbci	r27, 0xFF	; 255
    22f2:	fe 01       	movw	r30, r28
    22f4:	e4 5f       	subi	r30, 0xF4	; 244
    22f6:	fe 4f       	sbci	r31, 0xFE	; 254
    22f8:	80 81       	ld	r24, Z
    22fa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22fc:	fe 01       	movw	r30, r28
    22fe:	e3 50       	subi	r30, 0x03	; 3
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	8a 95       	dec	r24
    2306:	f1 f7       	brne	.-4      	; 0x2304 <main+0x164e>
    2308:	fe 01       	movw	r30, r28
    230a:	e3 50       	subi	r30, 0x03	; 3
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 83       	st	Z, r24

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    2310:	fe 01       	movw	r30, r28
    2312:	ec 54       	subi	r30, 0x4C	; 76
    2314:	fe 4f       	sbci	r31, 0xFE	; 254
    2316:	10 82       	st	Z, r1
    2318:	41 c1       	rjmp	.+642    	; 0x259c <main+0x18e6>
				{
					UART_sendByte(pass1[i]);
    231a:	fe 01       	movw	r30, r28
    231c:	ec 54       	subi	r30, 0x4C	; 76
    231e:	fe 4f       	sbci	r31, 0xFE	; 254
    2320:	80 81       	ld	r24, Z
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	ce 01       	movw	r24, r28
    2328:	8a 54       	subi	r24, 0x4A	; 74
    232a:	9e 4f       	sbci	r25, 0xFE	; 254
    232c:	fc 01       	movw	r30, r24
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	80 81       	ld	r24, Z
    2334:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    2338:	fe 01       	movw	r30, r28
    233a:	e7 50       	subi	r30, 0x07	; 7
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 ea       	ldi	r26, 0xA0	; 160
    2344:	b1 e4       	ldi	r27, 0x41	; 65
    2346:	80 83       	st	Z, r24
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	a2 83       	std	Z+2, r26	; 0x02
    234c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    234e:	8e 01       	movw	r16, r28
    2350:	0b 50       	subi	r16, 0x0B	; 11
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	e7 50       	subi	r30, 0x07	; 7
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	2b ea       	ldi	r18, 0xAB	; 171
    2364:	3a ea       	ldi	r19, 0xAA	; 170
    2366:	4a e2       	ldi	r20, 0x2A	; 42
    2368:	50 e4       	ldi	r21, 0x40	; 64
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    237c:	fe 01       	movw	r30, r28
    237e:	eb 50       	subi	r30, 0x0B	; 11
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	34 f4       	brge	.+12     	; 0x23a6 <main+0x16f0>
		__ticks = 1;
    239a:	fe 01       	movw	r30, r28
    239c:	ec 50       	subi	r30, 0x0C	; 12
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 83       	st	Z, r24
    23a4:	e0 c0       	rjmp	.+448    	; 0x2566 <main+0x18b0>
	else if (__tmp > 255)
    23a6:	fe 01       	movw	r30, r28
    23a8:	eb 50       	subi	r30, 0x0B	; 11
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	60 81       	ld	r22, Z
    23ae:	71 81       	ldd	r23, Z+1	; 0x01
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4f e7       	ldi	r20, 0x7F	; 127
    23ba:	53 e4       	ldi	r21, 0x43	; 67
    23bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c0:	18 16       	cp	r1, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <main+0x1710>
    23c4:	c0 c0       	rjmp	.+384    	; 0x2546 <main+0x1890>
	{
		_delay_ms(__us / 1000.0);
    23c6:	fe 01       	movw	r30, r28
    23c8:	e7 50       	subi	r30, 0x07	; 7
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	fe 01       	movw	r30, r28
    23e6:	e0 51       	subi	r30, 0x10	; 16
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 83       	st	Z, r24
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	a2 83       	std	Z+2, r26	; 0x02
    23f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f2:	8e 01       	movw	r16, r28
    23f4:	04 51       	subi	r16, 0x14	; 20
    23f6:	1f 4f       	sbci	r17, 0xFF	; 255
    23f8:	fe 01       	movw	r30, r28
    23fa:	e0 51       	subi	r30, 0x10	; 16
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	4a ef       	ldi	r20, 0xFA	; 250
    240c:	54 e4       	ldi	r21, 0x44	; 68
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	f8 01       	movw	r30, r16
    2418:	80 83       	st	Z, r24
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	a2 83       	std	Z+2, r26	; 0x02
    241e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2420:	fe 01       	movw	r30, r28
    2422:	e4 51       	subi	r30, 0x14	; 20
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	44 f4       	brge	.+16     	; 0x244e <main+0x1798>
		__ticks = 1;
    243e:	fe 01       	movw	r30, r28
    2440:	e6 51       	subi	r30, 0x16	; 22
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    244c:	64 c0       	rjmp	.+200    	; 0x2516 <main+0x1860>
	else if (__tmp > 65535)
    244e:	fe 01       	movw	r30, r28
    2450:	e4 51       	subi	r30, 0x14	; 20
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	0c f0       	brlt	.+2      	; 0x246e <main+0x17b8>
    246c:	43 c0       	rjmp	.+134    	; 0x24f4 <main+0x183e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	fe 01       	movw	r30, r28
    2470:	e0 51       	subi	r30, 0x10	; 16
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	60 81       	ld	r22, Z
    2476:	71 81       	ldd	r23, Z+1	; 0x01
    2478:	82 81       	ldd	r24, Z+2	; 0x02
    247a:	93 81       	ldd	r25, Z+3	; 0x03
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8e 01       	movw	r16, r28
    248e:	06 51       	subi	r16, 0x16	; 22
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	f8 01       	movw	r30, r16
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	1f c0       	rjmp	.+62     	; 0x24e4 <main+0x182e>
    24a6:	fe 01       	movw	r30, r28
    24a8:	e8 51       	subi	r30, 0x18	; 24
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	88 ec       	ldi	r24, 0xC8	; 200
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b4:	fe 01       	movw	r30, r28
    24b6:	e8 51       	subi	r30, 0x18	; 24
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <main+0x1808>
    24c2:	fe 01       	movw	r30, r28
    24c4:	e8 51       	subi	r30, 0x18	; 24
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	de 01       	movw	r26, r28
    24ce:	a6 51       	subi	r26, 0x16	; 22
    24d0:	bf 4f       	sbci	r27, 0xFF	; 255
    24d2:	fe 01       	movw	r30, r28
    24d4:	e6 51       	subi	r30, 0x16	; 22
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	11 96       	adiw	r26, 0x01	; 1
    24e0:	9c 93       	st	X, r25
    24e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	fe 01       	movw	r30, r28
    24e6:	e6 51       	subi	r30, 0x16	; 22
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	d1 f6       	brne	.-76     	; 0x24a6 <main+0x17f0>
    24f2:	4b c0       	rjmp	.+150    	; 0x258a <main+0x18d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	8e 01       	movw	r16, r28
    24f6:	06 51       	subi	r16, 0x16	; 22
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	fe 01       	movw	r30, r28
    24fc:	e4 51       	subi	r30, 0x14	; 20
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	82 81       	ldd	r24, Z+2	; 0x02
    2506:	93 81       	ldd	r25, Z+3	; 0x03
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	f8 01       	movw	r30, r16
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
    2516:	de 01       	movw	r26, r28
    2518:	aa 51       	subi	r26, 0x1A	; 26
    251a:	bf 4f       	sbci	r27, 0xFF	; 255
    251c:	fe 01       	movw	r30, r28
    251e:	e6 51       	subi	r30, 0x16	; 22
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	11 96       	adiw	r26, 0x01	; 1
    2528:	9c 93       	st	X, r25
    252a:	8e 93       	st	-X, r24
    252c:	fe 01       	movw	r30, r28
    252e:	ea 51       	subi	r30, 0x1A	; 26
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0x1880>
    253a:	fe 01       	movw	r30, r28
    253c:	ea 51       	subi	r30, 0x1A	; 26
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	22 c0       	rjmp	.+68     	; 0x258a <main+0x18d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2546:	8e 01       	movw	r16, r28
    2548:	0c 50       	subi	r16, 0x0C	; 12
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	fe 01       	movw	r30, r28
    254e:	eb 50       	subi	r30, 0x0B	; 11
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	60 81       	ld	r22, Z
    2554:	71 81       	ldd	r23, Z+1	; 0x01
    2556:	82 81       	ldd	r24, Z+2	; 0x02
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	f8 01       	movw	r30, r16
    2564:	80 83       	st	Z, r24
    2566:	de 01       	movw	r26, r28
    2568:	ab 51       	subi	r26, 0x1B	; 27
    256a:	bf 4f       	sbci	r27, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	ec 50       	subi	r30, 0x0C	; 12
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2576:	fe 01       	movw	r30, r28
    2578:	eb 51       	subi	r30, 0x1B	; 27
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	8a 95       	dec	r24
    2580:	f1 f7       	brne	.-4      	; 0x257e <main+0x18c8>
    2582:	fe 01       	movw	r30, r28
    2584:	eb 51       	subi	r30, 0x1B	; 27
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 83       	st	Z, r24
				UART_sendByte(CHECK); /* */

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    258a:	de 01       	movw	r26, r28
    258c:	ac 54       	subi	r26, 0x4C	; 76
    258e:	be 4f       	sbci	r27, 0xFE	; 254
    2590:	fe 01       	movw	r30, r28
    2592:	ec 54       	subi	r30, 0x4C	; 76
    2594:	fe 4f       	sbci	r31, 0xFE	; 254
    2596:	80 81       	ld	r24, Z
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	8c 93       	st	X, r24
    259c:	fe 01       	movw	r30, r28
    259e:	ec 54       	subi	r30, 0x4C	; 76
    25a0:	fe 4f       	sbci	r31, 0xFE	; 254
    25a2:	80 81       	ld	r24, Z
    25a4:	85 30       	cpi	r24, 0x05	; 5
    25a6:	08 f4       	brcc	.+2      	; 0x25aa <main+0x18f4>
    25a8:	b8 ce       	rjmp	.-656    	; 0x231a <main+0x1664>
					UART_sendByte(pass1[i]);

					_delay_us(20);
				}

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    25aa:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    25ae:	fe 01       	movw	r30, r28
    25b0:	ed 54       	subi	r30, 0x4D	; 77
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	80 83       	st	Z, r24

				while(1)
				{
					if (status == OK) /* Right Password */
    25b6:	fe 01       	movw	r30, r28
    25b8:	ed 54       	subi	r30, 0x4D	; 77
    25ba:	fe 4f       	sbci	r31, 0xFE	; 254
    25bc:	80 81       	ld	r24, Z
    25be:	80 31       	cpi	r24, 0x10	; 16
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <main+0x190e>
    25c2:	4a c0       	rjmp	.+148    	; 0x2658 <main+0x19a2>
					{
						/* Door Unlocking */
						UART_sendByte(UNLOCK);
    25c4:	82 e1       	ldi	r24, 0x12	; 18
    25c6:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
						LCD_clearScreen();
    25ca:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    25ce:	2b eb       	ldi	r18, 0xBB	; 187
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	a9 01       	movw	r20, r18
    25d8:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    25dc:	ce 01       	movw	r24, r28
    25de:	89 53       	subi	r24, 0x39	; 57
    25e0:	9e 4f       	sbci	r25, 0xFE	; 254
    25e2:	0e 94 27 29 	call	0x524e	; 0x524e <Timer1_init>
						while(g_count != 15); /* Waiting For 15 Seconds */
    25e6:	80 91 08 01 	lds	r24, 0x0108
    25ea:	8f 30       	cpi	r24, 0x0F	; 15
    25ec:	e1 f7       	brne	.-8      	; 0x25e6 <main+0x1930>
						Timer1_deInit();
    25ee:	0e 94 87 29 	call	0x530e	; 0x530e <Timer1_deInit>
						g_count = 0 ;
    25f2:	10 92 08 01 	sts	0x0108, r1

						/* Door Holding */
						LCD_clearScreen();
    25f6:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Holding");
    25fa:	2a ec       	ldi	r18, 0xCA	; 202
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	a9 01       	movw	r20, r18
    2604:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    2608:	ce 01       	movw	r24, r28
    260a:	89 53       	subi	r24, 0x39	; 57
    260c:	9e 4f       	sbci	r25, 0xFE	; 254
    260e:	0e 94 27 29 	call	0x524e	; 0x524e <Timer1_init>
						while(g_count != 3); /* Waiting For 3 Seconds */
    2612:	80 91 08 01 	lds	r24, 0x0108
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	e1 f7       	brne	.-8      	; 0x2612 <main+0x195c>
						Timer1_deInit();
    261a:	0e 94 87 29 	call	0x530e	; 0x530e <Timer1_deInit>
						g_count = 0 ;
    261e:	10 92 08 01 	sts	0x0108, r1

						/* Door locking */
						UART_sendByte(LOCK);
    2622:	83 e1       	ldi	r24, 0x13	; 19
    2624:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
						LCD_clearScreen();
    2628:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 1, "Door Locking");
    262c:	27 ed       	ldi	r18, 0xD7	; 215
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	a9 01       	movw	r20, r18
    2636:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <LCD_displayStringRowColumn>
						Timer1_init(&t_configure); /* Start Timer */
    263a:	ce 01       	movw	r24, r28
    263c:	89 53       	subi	r24, 0x39	; 57
    263e:	9e 4f       	sbci	r25, 0xFE	; 254
    2640:	0e 94 27 29 	call	0x524e	; 0x524e <Timer1_init>
						while(g_count != 15); /* Waiting For 15 Seconds */
    2644:	80 91 08 01 	lds	r24, 0x0108
    2648:	8f 30       	cpi	r24, 0x0F	; 15
    264a:	e1 f7       	brne	.-8      	; 0x2644 <main+0x198e>
						Timer1_deInit();
    264c:	0e 94 87 29 	call	0x530e	; 0x530e <Timer1_deInit>
						g_count = 0 ;
    2650:	10 92 08 01 	sts	0x0108, r1
    2654:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>

						break;
					}
					else if(status == ERROR) /* Wrong Password */
    2658:	fe 01       	movw	r30, r28
    265a:	ed 54       	subi	r30, 0x4D	; 77
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	80 81       	ld	r24, Z
    2660:	88 23       	and	r24, r24
    2662:	09 f0       	breq	.+2      	; 0x2666 <main+0x19b0>
    2664:	a8 cf       	rjmp	.-176    	; 0x25b6 <main+0x1900>
					{
						count = 0 ;
    2666:	fe 01       	movw	r30, r28
    2668:	ef 54       	subi	r30, 0x4F	; 79
    266a:	fe 4f       	sbci	r31, 0xFE	; 254
    266c:	10 82       	st	Z, r1

						do
						{
							count++;
    266e:	de 01       	movw	r26, r28
    2670:	af 54       	subi	r26, 0x4F	; 79
    2672:	be 4f       	sbci	r27, 0xFE	; 254
    2674:	fe 01       	movw	r30, r28
    2676:	ef 54       	subi	r30, 0x4F	; 79
    2678:	fe 4f       	sbci	r31, 0xFE	; 254
    267a:	80 81       	ld	r24, Z
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	8c 93       	st	X, r24

							LCD_clearScreen();
    2680:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
							LCD_displayString("PLZ Enter Pass:");
    2684:	80 e6       	ldi	r24, 0x60	; 96
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
							LCD_moveCursor(1, 0);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_moveCursor>

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    2694:	fe 01       	movw	r30, r28
    2696:	ec 54       	subi	r30, 0x4C	; 76
    2698:	fe 4f       	sbci	r31, 0xFE	; 254
    269a:	10 82       	st	Z, r1
    269c:	d6 c0       	rjmp	.+428    	; 0x284a <main+0x1b94>
							{
								key = KEYPAD_getPressedKey() ;
    269e:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    26a2:	fe 01       	movw	r30, r28
    26a4:	eb 54       	subi	r30, 0x4B	; 75
    26a6:	fe 4f       	sbci	r31, 0xFE	; 254
    26a8:	80 83       	st	Z, r24
								pass1[i] = key ;
    26aa:	fe 01       	movw	r30, r28
    26ac:	ec 54       	subi	r30, 0x4C	; 76
    26ae:	fe 4f       	sbci	r31, 0xFE	; 254
    26b0:	80 81       	ld	r24, Z
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	ce 01       	movw	r24, r28
    26b8:	8a 54       	subi	r24, 0x4A	; 74
    26ba:	9e 4f       	sbci	r25, 0xFE	; 254
    26bc:	dc 01       	movw	r26, r24
    26be:	a2 0f       	add	r26, r18
    26c0:	b3 1f       	adc	r27, r19
    26c2:	fe 01       	movw	r30, r28
    26c4:	eb 54       	subi	r30, 0x4B	; 75
    26c6:	fe 4f       	sbci	r31, 0xFE	; 254
    26c8:	80 81       	ld	r24, Z
    26ca:	8c 93       	st	X, r24
								LCD_displayCharacter('*');
    26cc:	8a e2       	ldi	r24, 0x2A	; 42
    26ce:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
    26d2:	fe 01       	movw	r30, r28
    26d4:	ef 51       	subi	r30, 0x1F	; 31
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	aa ef       	ldi	r26, 0xFA	; 250
    26de:	b3 e4       	ldi	r27, 0x43	; 67
    26e0:	80 83       	st	Z, r24
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	a2 83       	std	Z+2, r26	; 0x02
    26e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e8:	8e 01       	movw	r16, r28
    26ea:	03 52       	subi	r16, 0x23	; 35
    26ec:	1f 4f       	sbci	r17, 0xFF	; 255
    26ee:	fe 01       	movw	r30, r28
    26f0:	ef 51       	subi	r30, 0x1F	; 31
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	f8 01       	movw	r30, r16
    270e:	80 83       	st	Z, r24
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	a2 83       	std	Z+2, r26	; 0x02
    2714:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2716:	fe 01       	movw	r30, r28
    2718:	e3 52       	subi	r30, 0x23	; 35
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	44 f4       	brge	.+16     	; 0x2744 <main+0x1a8e>
		__ticks = 1;
    2734:	fe 01       	movw	r30, r28
    2736:	e5 52       	subi	r30, 0x25	; 37
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
    2742:	64 c0       	rjmp	.+200    	; 0x280c <main+0x1b56>
	else if (__tmp > 65535)
    2744:	fe 01       	movw	r30, r28
    2746:	e3 52       	subi	r30, 0x23	; 35
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	0c f0       	brlt	.+2      	; 0x2764 <main+0x1aae>
    2762:	43 c0       	rjmp	.+134    	; 0x27ea <main+0x1b34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2764:	fe 01       	movw	r30, r28
    2766:	ef 51       	subi	r30, 0x1F	; 31
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8e 01       	movw	r16, r28
    2784:	05 52       	subi	r16, 0x25	; 37
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	f8 01       	movw	r30, r16
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	1f c0       	rjmp	.+62     	; 0x27da <main+0x1b24>
    279c:	fe 01       	movw	r30, r28
    279e:	e7 52       	subi	r30, 0x27	; 39
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	88 ec       	ldi	r24, 0xC8	; 200
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 52       	subi	r30, 0x27	; 39
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <main+0x1afe>
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 52       	subi	r30, 0x27	; 39
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	de 01       	movw	r26, r28
    27c4:	a5 52       	subi	r26, 0x25	; 37
    27c6:	bf 4f       	sbci	r27, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	e5 52       	subi	r30, 0x25	; 37
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	9c 93       	st	X, r25
    27d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27da:	fe 01       	movw	r30, r28
    27dc:	e5 52       	subi	r30, 0x25	; 37
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	d1 f6       	brne	.-76     	; 0x279c <main+0x1ae6>
    27e8:	27 c0       	rjmp	.+78     	; 0x2838 <main+0x1b82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	8e 01       	movw	r16, r28
    27ec:	05 52       	subi	r16, 0x25	; 37
    27ee:	1f 4f       	sbci	r17, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e3 52       	subi	r30, 0x23	; 35
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	f8 01       	movw	r30, r16
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	de 01       	movw	r26, r28
    280e:	a9 52       	subi	r26, 0x29	; 41
    2810:	bf 4f       	sbci	r27, 0xFF	; 255
    2812:	fe 01       	movw	r30, r28
    2814:	e5 52       	subi	r30, 0x25	; 37
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	8d 93       	st	X+, r24
    281e:	9c 93       	st	X, r25
    2820:	fe 01       	movw	r30, r28
    2822:	e9 52       	subi	r30, 0x29	; 41
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <main+0x1b74>
    282e:	fe 01       	movw	r30, r28
    2830:	e9 52       	subi	r30, 0x29	; 41
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
							LCD_clearScreen();
							LCD_displayString("PLZ Enter Pass:");
							LCD_moveCursor(1, 0);

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    2838:	de 01       	movw	r26, r28
    283a:	ac 54       	subi	r26, 0x4C	; 76
    283c:	be 4f       	sbci	r27, 0xFE	; 254
    283e:	fe 01       	movw	r30, r28
    2840:	ec 54       	subi	r30, 0x4C	; 76
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	80 81       	ld	r24, Z
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	8c 93       	st	X, r24
    284a:	fe 01       	movw	r30, r28
    284c:	ec 54       	subi	r30, 0x4C	; 76
    284e:	fe 4f       	sbci	r31, 0xFE	; 254
    2850:	80 81       	ld	r24, Z
    2852:	85 30       	cpi	r24, 0x05	; 5
    2854:	08 f4       	brcc	.+2      	; 0x2858 <main+0x1ba2>
    2856:	23 cf       	rjmp	.-442    	; 0x269e <main+0x19e8>
							}

							/* Waiting User to press The Enter Button */
							do
							{
								key = KEYPAD_getPressedKey() ;
    2858:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    285c:	fe 01       	movw	r30, r28
    285e:	eb 54       	subi	r30, 0x4B	; 75
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	80 83       	st	Z, r24
    2864:	fe 01       	movw	r30, r28
    2866:	ed 52       	subi	r30, 0x2D	; 45
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	aa ef       	ldi	r26, 0xFA	; 250
    2870:	b3 e4       	ldi	r27, 0x43	; 67
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	8e 01       	movw	r16, r28
    287c:	01 53       	subi	r16, 0x31	; 49
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	fe 01       	movw	r30, r28
    2882:	ed 52       	subi	r30, 0x2D	; 45
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	f8 01       	movw	r30, r16
    28a0:	80 83       	st	Z, r24
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	a2 83       	std	Z+2, r26	; 0x02
    28a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a8:	fe 01       	movw	r30, r28
    28aa:	e1 53       	subi	r30, 0x31	; 49
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	5f e3       	ldi	r21, 0x3F	; 63
    28be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	44 f4       	brge	.+16     	; 0x28d6 <main+0x1c20>
		__ticks = 1;
    28c6:	fe 01       	movw	r30, r28
    28c8:	e3 53       	subi	r30, 0x33	; 51
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
    28d4:	64 c0       	rjmp	.+200    	; 0x299e <main+0x1ce8>
	else if (__tmp > 65535)
    28d6:	fe 01       	movw	r30, r28
    28d8:	e1 53       	subi	r30, 0x31	; 49
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	3f ef       	ldi	r19, 0xFF	; 255
    28e8:	4f e7       	ldi	r20, 0x7F	; 127
    28ea:	57 e4       	ldi	r21, 0x47	; 71
    28ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f0:	18 16       	cp	r1, r24
    28f2:	0c f0       	brlt	.+2      	; 0x28f6 <main+0x1c40>
    28f4:	43 c0       	rjmp	.+134    	; 0x297c <main+0x1cc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	fe 01       	movw	r30, r28
    28f8:	ed 52       	subi	r30, 0x2D	; 45
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	40 e2       	ldi	r20, 0x20	; 32
    290a:	51 e4       	ldi	r21, 0x41	; 65
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	8e 01       	movw	r16, r28
    2916:	03 53       	subi	r16, 0x33	; 51
    2918:	1f 4f       	sbci	r17, 0xFF	; 255
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	f8 01       	movw	r30, r16
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	80 83       	st	Z, r24
    292c:	1f c0       	rjmp	.+62     	; 0x296c <main+0x1cb6>
    292e:	fe 01       	movw	r30, r28
    2930:	e5 53       	subi	r30, 0x35	; 53
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	88 ec       	ldi	r24, 0xC8	; 200
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
    293c:	fe 01       	movw	r30, r28
    293e:	e5 53       	subi	r30, 0x35	; 53
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <main+0x1c90>
    294a:	fe 01       	movw	r30, r28
    294c:	e5 53       	subi	r30, 0x35	; 53
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	de 01       	movw	r26, r28
    2956:	a3 53       	subi	r26, 0x33	; 51
    2958:	bf 4f       	sbci	r27, 0xFF	; 255
    295a:	fe 01       	movw	r30, r28
    295c:	e3 53       	subi	r30, 0x33	; 51
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	11 96       	adiw	r26, 0x01	; 1
    2968:	9c 93       	st	X, r25
    296a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296c:	fe 01       	movw	r30, r28
    296e:	e3 53       	subi	r30, 0x33	; 51
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	d1 f6       	brne	.-76     	; 0x292e <main+0x1c78>
    297a:	28 c0       	rjmp	.+80     	; 0x29cc <main+0x1d16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	8e 01       	movw	r16, r28
    297e:	03 53       	subi	r16, 0x33	; 51
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	fe 01       	movw	r30, r28
    2984:	e1 53       	subi	r30, 0x31	; 49
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	f8 01       	movw	r30, r16
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	80 83       	st	Z, r24
    299e:	de 01       	movw	r26, r28
    29a0:	a7 53       	subi	r26, 0x37	; 55
    29a2:	bf 4f       	sbci	r27, 0xFF	; 255
    29a4:	fe 01       	movw	r30, r28
    29a6:	e3 53       	subi	r30, 0x33	; 51
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 53       	subi	r30, 0x37	; 55
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <main+0x1d08>
    29c2:	fe 01       	movw	r30, r28
    29c4:	e7 53       	subi	r30, 0x37	; 55
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
								_delay_ms(500);
							} while(key != 13);
    29cc:	fe 01       	movw	r30, r28
    29ce:	eb 54       	subi	r30, 0x4B	; 75
    29d0:	fe 4f       	sbci	r31, 0xFE	; 254
    29d2:	80 81       	ld	r24, Z
    29d4:	8d 30       	cpi	r24, 0x0D	; 13
    29d6:	09 f0       	breq	.+2      	; 0x29da <main+0x1d24>
    29d8:	3f cf       	rjmp	.-386    	; 0x2858 <main+0x1ba2>

							UART_sendByte(CHECK); /* */
    29da:	81 e1       	ldi	r24, 0x11	; 17
    29dc:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    29e0:	fe 01       	movw	r30, r28
    29e2:	eb 53       	subi	r30, 0x3B	; 59
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 ea       	ldi	r26, 0xA0	; 160
    29ec:	b1 e4       	ldi	r27, 0x41	; 65
    29ee:	80 83       	st	Z, r24
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	a2 83       	std	Z+2, r26	; 0x02
    29f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29f6:	8e 01       	movw	r16, r28
    29f8:	0f 53       	subi	r16, 0x3F	; 63
    29fa:	1f 4f       	sbci	r17, 0xFF	; 255
    29fc:	fe 01       	movw	r30, r28
    29fe:	eb 53       	subi	r30, 0x3B	; 59
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	2b ea       	ldi	r18, 0xAB	; 171
    2a0c:	3a ea       	ldi	r19, 0xAA	; 170
    2a0e:	4a e2       	ldi	r20, 0x2A	; 42
    2a10:	50 e4       	ldi	r21, 0x40	; 64
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	80 83       	st	Z, r24
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	a2 83       	std	Z+2, r26	; 0x02
    2a22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a24:	fe 01       	movw	r30, r28
    2a26:	ef 53       	subi	r30, 0x3F	; 63
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	34 f4       	brge	.+12     	; 0x2a4e <main+0x1d98>
		__ticks = 1;
    2a42:	fe 01       	movw	r30, r28
    2a44:	e0 54       	subi	r30, 0x40	; 64
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	80 83       	st	Z, r24
    2a4c:	e0 c0       	rjmp	.+448    	; 0x2c0e <main+0x1f58>
	else if (__tmp > 255)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ef 53       	subi	r30, 0x3F	; 63
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4f e7       	ldi	r20, 0x7F	; 127
    2a62:	53 e4       	ldi	r21, 0x43	; 67
    2a64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a68:	18 16       	cp	r1, r24
    2a6a:	0c f0       	brlt	.+2      	; 0x2a6e <main+0x1db8>
    2a6c:	c0 c0       	rjmp	.+384    	; 0x2bee <main+0x1f38>
	{
		_delay_ms(__us / 1000.0);
    2a6e:	fe 01       	movw	r30, r28
    2a70:	eb 53       	subi	r30, 0x3B	; 59
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	60 81       	ld	r22, Z
    2a76:	71 81       	ldd	r23, Z+1	; 0x01
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4a e7       	ldi	r20, 0x7A	; 122
    2a82:	54 e4       	ldi	r21, 0x44	; 68
    2a84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e4 54       	subi	r30, 0x44	; 68
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	08 54       	subi	r16, 0x48	; 72
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e4 54       	subi	r30, 0x44	; 68
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e8 54       	subi	r30, 0x48	; 72
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	44 f4       	brge	.+16     	; 0x2af6 <main+0x1e40>
		__ticks = 1;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ea 54       	subi	r30, 0x4A	; 74
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	64 c0       	rjmp	.+200    	; 0x2bbe <main+0x1f08>
	else if (__tmp > 65535)
    2af6:	fe 01       	movw	r30, r28
    2af8:	e8 54       	subi	r30, 0x48	; 72
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	0c f0       	brlt	.+2      	; 0x2b16 <main+0x1e60>
    2b14:	43 c0       	rjmp	.+134    	; 0x2b9c <main+0x1ee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	fe 01       	movw	r30, r28
    2b18:	e4 54       	subi	r30, 0x44	; 68
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	60 81       	ld	r22, Z
    2b1e:	71 81       	ldd	r23, Z+1	; 0x01
    2b20:	82 81       	ldd	r24, Z+2	; 0x02
    2b22:	93 81       	ldd	r25, Z+3	; 0x03
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8e 01       	movw	r16, r28
    2b36:	0a 54       	subi	r16, 0x4A	; 74
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	f8 01       	movw	r30, r16
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	1f c0       	rjmp	.+62     	; 0x2b8c <main+0x1ed6>
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ec 54       	subi	r30, 0x4C	; 76
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	88 ec       	ldi	r24, 0xC8	; 200
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ec 54       	subi	r30, 0x4C	; 76
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <main+0x1eb0>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ec 54       	subi	r30, 0x4C	; 76
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	91 83       	std	Z+1, r25	; 0x01
    2b72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	de 01       	movw	r26, r28
    2b76:	aa 54       	subi	r26, 0x4A	; 74
    2b78:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	ea 54       	subi	r30, 0x4A	; 74
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	9c 93       	st	X, r25
    2b8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ea 54       	subi	r30, 0x4A	; 74
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	d1 f6       	brne	.-76     	; 0x2b4e <main+0x1e98>
    2b9a:	4b c0       	rjmp	.+150    	; 0x2c32 <main+0x1f7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	8e 01       	movw	r16, r28
    2b9e:	0a 54       	subi	r16, 0x4A	; 74
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e8 54       	subi	r30, 0x48	; 72
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	60 81       	ld	r22, Z
    2baa:	71 81       	ldd	r23, Z+1	; 0x01
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	93 81       	ldd	r25, Z+3	; 0x03
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	f8 01       	movw	r30, r16
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	de 01       	movw	r26, r28
    2bc0:	ae 54       	subi	r26, 0x4E	; 78
    2bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ea 54       	subi	r30, 0x4A	; 74
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ee 54       	subi	r30, 0x4E	; 78
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <main+0x1f28>
    2be2:	fe 01       	movw	r30, r28
    2be4:	ee 54       	subi	r30, 0x4E	; 78
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	22 c0       	rjmp	.+68     	; 0x2c32 <main+0x1f7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bee:	8e 01       	movw	r16, r28
    2bf0:	00 54       	subi	r16, 0x40	; 64
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	ef 53       	subi	r30, 0x3F	; 63
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	80 83       	st	Z, r24
    2c0e:	de 01       	movw	r26, r28
    2c10:	af 54       	subi	r26, 0x4F	; 79
    2c12:	bf 4f       	sbci	r27, 0xFF	; 255
    2c14:	fe 01       	movw	r30, r28
    2c16:	e0 54       	subi	r30, 0x40	; 64
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ef 54       	subi	r30, 0x4F	; 79
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	8a 95       	dec	r24
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <main+0x1f70>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ef 54       	subi	r30, 0x4F	; 79
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 83       	st	Z, r24

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    2c32:	fe 01       	movw	r30, r28
    2c34:	ec 54       	subi	r30, 0x4C	; 76
    2c36:	fe 4f       	sbci	r31, 0xFE	; 254
    2c38:	10 82       	st	Z, r1
    2c3a:	41 c1       	rjmp	.+642    	; 0x2ebe <main+0x2208>
							{
								UART_sendByte(pass1[i]);
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	ec 54       	subi	r30, 0x4C	; 76
    2c40:	fe 4f       	sbci	r31, 0xFE	; 254
    2c42:	80 81       	ld	r24, Z
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	ce 01       	movw	r24, r28
    2c4a:	8a 54       	subi	r24, 0x4A	; 74
    2c4c:	9e 4f       	sbci	r25, 0xFE	; 254
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	80 81       	ld	r24, Z
    2c56:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e3 55       	subi	r30, 0x53	; 83
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 ea       	ldi	r26, 0xA0	; 160
    2c66:	b1 e4       	ldi	r27, 0x41	; 65
    2c68:	80 83       	st	Z, r24
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	a2 83       	std	Z+2, r26	; 0x02
    2c6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c70:	8e 01       	movw	r16, r28
    2c72:	07 55       	subi	r16, 0x57	; 87
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	fe 01       	movw	r30, r28
    2c78:	e3 55       	subi	r30, 0x53	; 83
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	2b ea       	ldi	r18, 0xAB	; 171
    2c86:	3a ea       	ldi	r19, 0xAA	; 170
    2c88:	4a e2       	ldi	r20, 0x2A	; 42
    2c8a:	50 e4       	ldi	r21, 0x40	; 64
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	f8 01       	movw	r30, r16
    2c96:	80 83       	st	Z, r24
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	a2 83       	std	Z+2, r26	; 0x02
    2c9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e7 55       	subi	r30, 0x57	; 87
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	34 f4       	brge	.+12     	; 0x2cc8 <main+0x2012>
		__ticks = 1;
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e8 55       	subi	r30, 0x58	; 88
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 83       	st	Z, r24
    2cc6:	e0 c0       	rjmp	.+448    	; 0x2e88 <main+0x21d2>
	else if (__tmp > 255)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e7 55       	subi	r30, 0x57	; 87
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	53 e4       	ldi	r21, 0x43	; 67
    2cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	0c f0       	brlt	.+2      	; 0x2ce8 <main+0x2032>
    2ce6:	c0 c0       	rjmp	.+384    	; 0x2e68 <main+0x21b2>
	{
		_delay_ms(__us / 1000.0);
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e3 55       	subi	r30, 0x53	; 83
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a e7       	ldi	r20, 0x7A	; 122
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	fe 01       	movw	r30, r28
    2d08:	ec 55       	subi	r30, 0x5C	; 92
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	80 83       	st	Z, r24
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	a2 83       	std	Z+2, r26	; 0x02
    2d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d14:	8e 01       	movw	r16, r28
    2d16:	00 56       	subi	r16, 0x60	; 96
    2d18:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ec 55       	subi	r30, 0x5C	; 92
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	60 81       	ld	r22, Z
    2d22:	71 81       	ldd	r23, Z+1	; 0x01
    2d24:	82 81       	ldd	r24, Z+2	; 0x02
    2d26:	93 81       	ldd	r25, Z+3	; 0x03
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	4a ef       	ldi	r20, 0xFA	; 250
    2d2e:	54 e4       	ldi	r21, 0x44	; 68
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	f8 01       	movw	r30, r16
    2d3a:	80 83       	st	Z, r24
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	a2 83       	std	Z+2, r26	; 0x02
    2d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d42:	fe 01       	movw	r30, r28
    2d44:	e0 56       	subi	r30, 0x60	; 96
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	60 81       	ld	r22, Z
    2d4a:	71 81       	ldd	r23, Z+1	; 0x01
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d5c:	88 23       	and	r24, r24
    2d5e:	44 f4       	brge	.+16     	; 0x2d70 <main+0x20ba>
		__ticks = 1;
    2d60:	fe 01       	movw	r30, r28
    2d62:	e2 56       	subi	r30, 0x62	; 98
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	64 c0       	rjmp	.+200    	; 0x2e38 <main+0x2182>
	else if (__tmp > 65535)
    2d70:	fe 01       	movw	r30, r28
    2d72:	e0 56       	subi	r30, 0x60	; 96
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	60 81       	ld	r22, Z
    2d78:	71 81       	ldd	r23, Z+1	; 0x01
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	3f ef       	ldi	r19, 0xFF	; 255
    2d82:	4f e7       	ldi	r20, 0x7F	; 127
    2d84:	57 e4       	ldi	r21, 0x47	; 71
    2d86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8a:	18 16       	cp	r1, r24
    2d8c:	0c f0       	brlt	.+2      	; 0x2d90 <main+0x20da>
    2d8e:	43 c0       	rjmp	.+134    	; 0x2e16 <main+0x2160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d90:	fe 01       	movw	r30, r28
    2d92:	ec 55       	subi	r30, 0x5C	; 92
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	8e 01       	movw	r16, r28
    2db0:	02 56       	subi	r16, 0x62	; 98
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
    2dc6:	1f c0       	rjmp	.+62     	; 0x2e06 <main+0x2150>
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e4 56       	subi	r30, 0x64	; 100
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	88 ec       	ldi	r24, 0xC8	; 200
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e4 56       	subi	r30, 0x64	; 100
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <main+0x212a>
    2de4:	fe 01       	movw	r30, r28
    2de6:	e4 56       	subi	r30, 0x64	; 100
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dee:	de 01       	movw	r26, r28
    2df0:	a2 56       	subi	r26, 0x62	; 98
    2df2:	bf 4f       	sbci	r27, 0xFF	; 255
    2df4:	fe 01       	movw	r30, r28
    2df6:	e2 56       	subi	r30, 0x62	; 98
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	11 96       	adiw	r26, 0x01	; 1
    2e02:	9c 93       	st	X, r25
    2e04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e06:	fe 01       	movw	r30, r28
    2e08:	e2 56       	subi	r30, 0x62	; 98
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 81       	ld	r24, Z
    2e0e:	91 81       	ldd	r25, Z+1	; 0x01
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	d1 f6       	brne	.-76     	; 0x2dc8 <main+0x2112>
    2e14:	4b c0       	rjmp	.+150    	; 0x2eac <main+0x21f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	8e 01       	movw	r16, r28
    2e18:	02 56       	subi	r16, 0x62	; 98
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e0 56       	subi	r30, 0x60	; 96
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	60 81       	ld	r22, Z
    2e24:	71 81       	ldd	r23, Z+1	; 0x01
    2e26:	82 81       	ldd	r24, Z+2	; 0x02
    2e28:	93 81       	ldd	r25, Z+3	; 0x03
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	f8 01       	movw	r30, r16
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	80 83       	st	Z, r24
    2e38:	de 01       	movw	r26, r28
    2e3a:	a6 56       	subi	r26, 0x66	; 102
    2e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e2 56       	subi	r30, 0x62	; 98
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	11 96       	adiw	r26, 0x01	; 1
    2e4a:	9c 93       	st	X, r25
    2e4c:	8e 93       	st	-X, r24
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e6 56       	subi	r30, 0x66	; 102
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <main+0x21a2>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e6 56       	subi	r30, 0x66	; 102
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	80 83       	st	Z, r24
    2e66:	22 c0       	rjmp	.+68     	; 0x2eac <main+0x21f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e68:	8e 01       	movw	r16, r28
    2e6a:	08 55       	subi	r16, 0x58	; 88
    2e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e7 55       	subi	r30, 0x57	; 87
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	f8 01       	movw	r30, r16
    2e86:	80 83       	st	Z, r24
    2e88:	de 01       	movw	r26, r28
    2e8a:	a7 56       	subi	r26, 0x67	; 103
    2e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e8 55       	subi	r30, 0x58	; 88
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e98:	fe 01       	movw	r30, r28
    2e9a:	e7 56       	subi	r30, 0x67	; 103
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8a 95       	dec	r24
    2ea2:	f1 f7       	brne	.-4      	; 0x2ea0 <main+0x21ea>
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	e7 56       	subi	r30, 0x67	; 103
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 83       	st	Z, r24
							UART_sendByte(CHECK); /* */

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    2eac:	de 01       	movw	r26, r28
    2eae:	ac 54       	subi	r26, 0x4C	; 76
    2eb0:	be 4f       	sbci	r27, 0xFE	; 254
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ec 54       	subi	r30, 0x4C	; 76
    2eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb8:	80 81       	ld	r24, Z
    2eba:	8f 5f       	subi	r24, 0xFF	; 255
    2ebc:	8c 93       	st	X, r24
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ec 54       	subi	r30, 0x4C	; 76
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	80 81       	ld	r24, Z
    2ec6:	85 30       	cpi	r24, 0x05	; 5
    2ec8:	08 f4       	brcc	.+2      	; 0x2ecc <main+0x2216>
    2eca:	b8 ce       	rjmp	.-656    	; 0x2c3c <main+0x1f86>
								UART_sendByte(pass1[i]);

								_delay_us(20);
							}

							status = UART_recieveByte();
    2ecc:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 54       	subi	r30, 0x4D	; 77
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	80 83       	st	Z, r24

						}while((count != 2) && (status == ERROR));
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ef 54       	subi	r30, 0x4F	; 79
    2edc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ede:	80 81       	ld	r24, Z
    2ee0:	82 30       	cpi	r24, 0x02	; 2
    2ee2:	39 f0       	breq	.+14     	; 0x2ef2 <main+0x223c>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ed 54       	subi	r30, 0x4D	; 77
    2ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eea:	80 81       	ld	r24, Z
    2eec:	88 23       	and	r24, r24
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <main+0x223c>
    2ef0:	be cb       	rjmp	.-2180   	; 0x266e <main+0x19b8>

						if((count == 2) && (status == ERROR))
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ef 54       	subi	r30, 0x4F	; 79
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	80 81       	ld	r24, Z
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <main+0x224a>
    2efe:	5b cb       	rjmp	.-2378   	; 0x25b6 <main+0x1900>
    2f00:	fe 01       	movw	r30, r28
    2f02:	ed 54       	subi	r30, 0x4D	; 77
    2f04:	fe 4f       	sbci	r31, 0xFE	; 254
    2f06:	80 81       	ld	r24, Z
    2f08:	88 23       	and	r24, r24
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <main+0x2258>
    2f0c:	54 cb       	rjmp	.-2392   	; 0x25b6 <main+0x1900>
						{
							UART_sendByte(BUZZER);
    2f0e:	84 e1       	ldi	r24, 0x14	; 20
    2f10:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
							LCD_clearScreen();
    2f14:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
							LCD_displayString("System Locked");
    2f18:	84 ee       	ldi	r24, 0xE4	; 228
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
							Timer1_init(&t_configure); /* Start Timer */
    2f20:	ce 01       	movw	r24, r28
    2f22:	89 53       	subi	r24, 0x39	; 57
    2f24:	9e 4f       	sbci	r25, 0xFE	; 254
    2f26:	0e 94 27 29 	call	0x524e	; 0x524e <Timer1_init>
							while(g_count != 60); /* Waiting For 60 Seconds */
    2f2a:	80 91 08 01 	lds	r24, 0x0108
    2f2e:	8c 33       	cpi	r24, 0x3C	; 60
    2f30:	e1 f7       	brne	.-8      	; 0x2f2a <main+0x2274>
							Timer1_deInit();
    2f32:	0e 94 87 29 	call	0x530e	; 0x530e <Timer1_deInit>
							g_count = 0 ;
    2f36:	10 92 08 01 	sts	0x0108, r1
    2f3a:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>
							break;
						}
					}
				}
			}
			else if(key == '-') /* User Choose Change The Password */
    2f3e:	fe 01       	movw	r30, r28
    2f40:	eb 54       	subi	r30, 0x4B	; 75
    2f42:	fe 4f       	sbci	r31, 0xFE	; 254
    2f44:	80 81       	ld	r24, Z
    2f46:	8d 32       	cpi	r24, 0x2D	; 45
    2f48:	11 f0       	breq	.+4      	; 0x2f4e <main+0x2298>
    2f4a:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>
			{
				LCD_clearScreen();
    2f4e:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    2f52:	8b ea       	ldi	r24, 0xAB	; 171
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
				LCD_moveCursor(1, 0);
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_moveCursor>

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    2f62:	fe 01       	movw	r30, r28
    2f64:	ec 54       	subi	r30, 0x4C	; 76
    2f66:	fe 4f       	sbci	r31, 0xFE	; 254
    2f68:	10 82       	st	Z, r1
    2f6a:	d6 c0       	rjmp	.+428    	; 0x3118 <main+0x2462>
				{
					key = KEYPAD_getPressedKey() ;
    2f6c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    2f70:	fe 01       	movw	r30, r28
    2f72:	eb 54       	subi	r30, 0x4B	; 75
    2f74:	fe 4f       	sbci	r31, 0xFE	; 254
    2f76:	80 83       	st	Z, r24
					pass1[i] = key ;
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ec 54       	subi	r30, 0x4C	; 76
    2f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7e:	80 81       	ld	r24, Z
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	ce 01       	movw	r24, r28
    2f86:	8a 54       	subi	r24, 0x4A	; 74
    2f88:	9e 4f       	sbci	r25, 0xFE	; 254
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	a2 0f       	add	r26, r18
    2f8e:	b3 1f       	adc	r27, r19
    2f90:	fe 01       	movw	r30, r28
    2f92:	eb 54       	subi	r30, 0x4B	; 75
    2f94:	fe 4f       	sbci	r31, 0xFE	; 254
    2f96:	80 81       	ld	r24, Z
    2f98:	8c 93       	st	X, r24
					LCD_displayCharacter('*');
    2f9a:	8a e2       	ldi	r24, 0x2A	; 42
    2f9c:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	eb 56       	subi	r30, 0x6B	; 107
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	aa ef       	ldi	r26, 0xFA	; 250
    2fac:	b3 e4       	ldi	r27, 0x43	; 67
    2fae:	80 83       	st	Z, r24
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	a2 83       	std	Z+2, r26	; 0x02
    2fb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	0f 56       	subi	r16, 0x6F	; 111
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	eb 56       	subi	r30, 0x6B	; 107
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a ef       	ldi	r20, 0xFA	; 250
    2fd0:	54 e4       	ldi	r21, 0x44	; 68
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	f8 01       	movw	r30, r16
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ef 56       	subi	r30, 0x6F	; 111
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	60 81       	ld	r22, Z
    2fec:	71 81       	ldd	r23, Z+1	; 0x01
    2fee:	82 81       	ldd	r24, Z+2	; 0x02
    2ff0:	93 81       	ldd	r25, Z+3	; 0x03
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	5f e3       	ldi	r21, 0x3F	; 63
    2ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffe:	88 23       	and	r24, r24
    3000:	44 f4       	brge	.+16     	; 0x3012 <main+0x235c>
		__ticks = 1;
    3002:	fe 01       	movw	r30, r28
    3004:	e1 57       	subi	r30, 0x71	; 113
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
    3010:	64 c0       	rjmp	.+200    	; 0x30da <main+0x2424>
	else if (__tmp > 65535)
    3012:	fe 01       	movw	r30, r28
    3014:	ef 56       	subi	r30, 0x6F	; 111
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	0c f0       	brlt	.+2      	; 0x3032 <main+0x237c>
    3030:	43 c0       	rjmp	.+134    	; 0x30b8 <main+0x2402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3032:	fe 01       	movw	r30, r28
    3034:	eb 56       	subi	r30, 0x6B	; 107
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	8e 01       	movw	r16, r28
    3052:	01 57       	subi	r16, 0x71	; 113
    3054:	1f 4f       	sbci	r17, 0xFF	; 255
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	f8 01       	movw	r30, r16
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
    3068:	1f c0       	rjmp	.+62     	; 0x30a8 <main+0x23f2>
    306a:	fe 01       	movw	r30, r28
    306c:	e3 57       	subi	r30, 0x73	; 115
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	88 ec       	ldi	r24, 0xC8	; 200
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3078:	fe 01       	movw	r30, r28
    307a:	e3 57       	subi	r30, 0x73	; 115
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	91 81       	ldd	r25, Z+1	; 0x01
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <main+0x23cc>
    3086:	fe 01       	movw	r30, r28
    3088:	e3 57       	subi	r30, 0x73	; 115
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	91 83       	std	Z+1, r25	; 0x01
    308e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	de 01       	movw	r26, r28
    3092:	a1 57       	subi	r26, 0x71	; 113
    3094:	bf 4f       	sbci	r27, 0xFF	; 255
    3096:	fe 01       	movw	r30, r28
    3098:	e1 57       	subi	r30, 0x71	; 113
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	80 81       	ld	r24, Z
    309e:	91 81       	ldd	r25, Z+1	; 0x01
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	11 96       	adiw	r26, 0x01	; 1
    30a4:	9c 93       	st	X, r25
    30a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	fe 01       	movw	r30, r28
    30aa:	e1 57       	subi	r30, 0x71	; 113
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	d1 f6       	brne	.-76     	; 0x306a <main+0x23b4>
    30b6:	27 c0       	rjmp	.+78     	; 0x3106 <main+0x2450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	8e 01       	movw	r16, r28
    30ba:	01 57       	subi	r16, 0x71	; 113
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	ef 56       	subi	r30, 0x6F	; 111
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	f8 01       	movw	r30, r16
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
    30da:	de 01       	movw	r26, r28
    30dc:	a5 57       	subi	r26, 0x75	; 117
    30de:	bf 4f       	sbci	r27, 0xFF	; 255
    30e0:	fe 01       	movw	r30, r28
    30e2:	e1 57       	subi	r30, 0x71	; 113
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	8d 93       	st	X+, r24
    30ec:	9c 93       	st	X, r25
    30ee:	fe 01       	movw	r30, r28
    30f0:	e5 57       	subi	r30, 0x75	; 117
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <main+0x2442>
    30fc:	fe 01       	movw	r30, r28
    30fe:	e5 57       	subi	r30, 0x75	; 117
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	80 83       	st	Z, r24
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);

				/* Enter The Password */
				for(i = 0 ; i < 5 ; i++)
    3106:	de 01       	movw	r26, r28
    3108:	ac 54       	subi	r26, 0x4C	; 76
    310a:	be 4f       	sbci	r27, 0xFE	; 254
    310c:	fe 01       	movw	r30, r28
    310e:	ec 54       	subi	r30, 0x4C	; 76
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	80 81       	ld	r24, Z
    3114:	8f 5f       	subi	r24, 0xFF	; 255
    3116:	8c 93       	st	X, r24
    3118:	fe 01       	movw	r30, r28
    311a:	ec 54       	subi	r30, 0x4C	; 76
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	80 81       	ld	r24, Z
    3120:	85 30       	cpi	r24, 0x05	; 5
    3122:	08 f4       	brcc	.+2      	; 0x3126 <main+0x2470>
    3124:	23 cf       	rjmp	.-442    	; 0x2f6c <main+0x22b6>
				}

				/* Waiting User to press The Enter Button */
				do
				{
					key = KEYPAD_getPressedKey() ;
    3126:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    312a:	fe 01       	movw	r30, r28
    312c:	eb 54       	subi	r30, 0x4B	; 75
    312e:	fe 4f       	sbci	r31, 0xFE	; 254
    3130:	80 83       	st	Z, r24
    3132:	fe 01       	movw	r30, r28
    3134:	e9 57       	subi	r30, 0x79	; 121
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	aa ef       	ldi	r26, 0xFA	; 250
    313e:	b3 e4       	ldi	r27, 0x43	; 67
    3140:	80 83       	st	Z, r24
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	a2 83       	std	Z+2, r26	; 0x02
    3146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3148:	8e 01       	movw	r16, r28
    314a:	0d 57       	subi	r16, 0x7D	; 125
    314c:	1f 4f       	sbci	r17, 0xFF	; 255
    314e:	fe 01       	movw	r30, r28
    3150:	e9 57       	subi	r30, 0x79	; 121
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	60 81       	ld	r22, Z
    3156:	71 81       	ldd	r23, Z+1	; 0x01
    3158:	82 81       	ldd	r24, Z+2	; 0x02
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a ef       	ldi	r20, 0xFA	; 250
    3162:	54 e4       	ldi	r21, 0x44	; 68
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	80 83       	st	Z, r24
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	a2 83       	std	Z+2, r26	; 0x02
    3174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3176:	fe 01       	movw	r30, r28
    3178:	ed 57       	subi	r30, 0x7D	; 125
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	60 81       	ld	r22, Z
    317e:	71 81       	ldd	r23, Z+1	; 0x01
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	44 f4       	brge	.+16     	; 0x31a4 <main+0x24ee>
		__ticks = 1;
    3194:	fe 01       	movw	r30, r28
    3196:	ef 57       	subi	r30, 0x7F	; 127
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	80 83       	st	Z, r24
    31a2:	64 c0       	rjmp	.+200    	; 0x326c <main+0x25b6>
	else if (__tmp > 65535)
    31a4:	fe 01       	movw	r30, r28
    31a6:	ed 57       	subi	r30, 0x7D	; 125
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	60 81       	ld	r22, Z
    31ac:	71 81       	ldd	r23, Z+1	; 0x01
    31ae:	82 81       	ldd	r24, Z+2	; 0x02
    31b0:	93 81       	ldd	r25, Z+3	; 0x03
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	0c f0       	brlt	.+2      	; 0x31c4 <main+0x250e>
    31c2:	43 c0       	rjmp	.+134    	; 0x324a <main+0x2594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c4:	fe 01       	movw	r30, r28
    31c6:	e9 57       	subi	r30, 0x79	; 121
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	60 81       	ld	r22, Z
    31cc:	71 81       	ldd	r23, Z+1	; 0x01
    31ce:	82 81       	ldd	r24, Z+2	; 0x02
    31d0:	93 81       	ldd	r25, Z+3	; 0x03
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e2       	ldi	r20, 0x20	; 32
    31d8:	51 e4       	ldi	r21, 0x41	; 65
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	8e 01       	movw	r16, r28
    31e4:	0f 57       	subi	r16, 0x7F	; 127
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	bc 01       	movw	r22, r24
    31ea:	cd 01       	movw	r24, r26
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	f8 01       	movw	r30, r16
    31f6:	91 83       	std	Z+1, r25	; 0x01
    31f8:	80 83       	st	Z, r24
    31fa:	1f c0       	rjmp	.+62     	; 0x323a <main+0x2584>
    31fc:	fe 01       	movw	r30, r28
    31fe:	e1 58       	subi	r30, 0x81	; 129
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	88 ec       	ldi	r24, 0xC8	; 200
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	80 83       	st	Z, r24
    320a:	fe 01       	movw	r30, r28
    320c:	e1 58       	subi	r30, 0x81	; 129
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <main+0x255e>
    3218:	fe 01       	movw	r30, r28
    321a:	e1 58       	subi	r30, 0x81	; 129
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3222:	de 01       	movw	r26, r28
    3224:	af 57       	subi	r26, 0x7F	; 127
    3226:	bf 4f       	sbci	r27, 0xFF	; 255
    3228:	fe 01       	movw	r30, r28
    322a:	ef 57       	subi	r30, 0x7F	; 127
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 81       	ld	r24, Z
    3230:	91 81       	ldd	r25, Z+1	; 0x01
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	11 96       	adiw	r26, 0x01	; 1
    3236:	9c 93       	st	X, r25
    3238:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323a:	fe 01       	movw	r30, r28
    323c:	ef 57       	subi	r30, 0x7F	; 127
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	d1 f6       	brne	.-76     	; 0x31fc <main+0x2546>
    3248:	28 c0       	rjmp	.+80     	; 0x329a <main+0x25e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324a:	8e 01       	movw	r16, r28
    324c:	0f 57       	subi	r16, 0x7F	; 127
    324e:	1f 4f       	sbci	r17, 0xFF	; 255
    3250:	fe 01       	movw	r30, r28
    3252:	ed 57       	subi	r30, 0x7D	; 125
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	82 81       	ldd	r24, Z+2	; 0x02
    325c:	93 81       	ldd	r25, Z+3	; 0x03
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	f8 01       	movw	r30, r16
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	de 01       	movw	r26, r28
    326e:	a3 58       	subi	r26, 0x83	; 131
    3270:	bf 4f       	sbci	r27, 0xFF	; 255
    3272:	fe 01       	movw	r30, r28
    3274:	ef 57       	subi	r30, 0x7F	; 127
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	11 96       	adiw	r26, 0x01	; 1
    327e:	9c 93       	st	X, r25
    3280:	8e 93       	st	-X, r24
    3282:	fe 01       	movw	r30, r28
    3284:	e3 58       	subi	r30, 0x83	; 131
    3286:	ff 4f       	sbci	r31, 0xFF	; 255
    3288:	80 81       	ld	r24, Z
    328a:	91 81       	ldd	r25, Z+1	; 0x01
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <main+0x25d6>
    3290:	fe 01       	movw	r30, r28
    3292:	e3 58       	subi	r30, 0x83	; 131
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	91 83       	std	Z+1, r25	; 0x01
    3298:	80 83       	st	Z, r24
					_delay_ms(500);
				} while(key != 13);
    329a:	fe 01       	movw	r30, r28
    329c:	eb 54       	subi	r30, 0x4B	; 75
    329e:	fe 4f       	sbci	r31, 0xFE	; 254
    32a0:	80 81       	ld	r24, Z
    32a2:	8d 30       	cpi	r24, 0x0D	; 13
    32a4:	09 f0       	breq	.+2      	; 0x32a8 <main+0x25f2>
    32a6:	3f cf       	rjmp	.-386    	; 0x3126 <main+0x2470>

				UART_sendByte(CHECK); /* */
    32a8:	81 e1       	ldi	r24, 0x11	; 17
    32aa:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 58       	subi	r30, 0x87	; 135
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a0 ea       	ldi	r26, 0xA0	; 160
    32ba:	b1 e4       	ldi	r27, 0x41	; 65
    32bc:	80 83       	st	Z, r24
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	a2 83       	std	Z+2, r26	; 0x02
    32c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32c4:	8e 01       	movw	r16, r28
    32c6:	0b 58       	subi	r16, 0x8B	; 139
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	fe 01       	movw	r30, r28
    32cc:	e7 58       	subi	r30, 0x87	; 135
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	2b ea       	ldi	r18, 0xAB	; 171
    32da:	3a ea       	ldi	r19, 0xAA	; 170
    32dc:	4a e2       	ldi	r20, 0x2A	; 42
    32de:	50 e4       	ldi	r21, 0x40	; 64
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	f8 01       	movw	r30, r16
    32ea:	80 83       	st	Z, r24
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	a2 83       	std	Z+2, r26	; 0x02
    32f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32f2:	fe 01       	movw	r30, r28
    32f4:	eb 58       	subi	r30, 0x8B	; 139
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	60 81       	ld	r22, Z
    32fa:	71 81       	ldd	r23, Z+1	; 0x01
    32fc:	82 81       	ldd	r24, Z+2	; 0x02
    32fe:	93 81       	ldd	r25, Z+3	; 0x03
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e8       	ldi	r20, 0x80	; 128
    3306:	5f e3       	ldi	r21, 0x3F	; 63
    3308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    330c:	88 23       	and	r24, r24
    330e:	34 f4       	brge	.+12     	; 0x331c <main+0x2666>
		__ticks = 1;
    3310:	fe 01       	movw	r30, r28
    3312:	ec 58       	subi	r30, 0x8C	; 140
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 83       	st	Z, r24
    331a:	e0 c0       	rjmp	.+448    	; 0x34dc <main+0x2826>
	else if (__tmp > 255)
    331c:	fe 01       	movw	r30, r28
    331e:	eb 58       	subi	r30, 0x8B	; 139
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	4f e7       	ldi	r20, 0x7F	; 127
    3330:	53 e4       	ldi	r21, 0x43	; 67
    3332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3336:	18 16       	cp	r1, r24
    3338:	0c f0       	brlt	.+2      	; 0x333c <main+0x2686>
    333a:	c0 c0       	rjmp	.+384    	; 0x34bc <main+0x2806>
	{
		_delay_ms(__us / 1000.0);
    333c:	fe 01       	movw	r30, r28
    333e:	e7 58       	subi	r30, 0x87	; 135
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	4a e7       	ldi	r20, 0x7A	; 122
    3350:	54 e4       	ldi	r21, 0x44	; 68
    3352:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	fe 01       	movw	r30, r28
    335c:	e0 59       	subi	r30, 0x90	; 144
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	80 83       	st	Z, r24
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	a2 83       	std	Z+2, r26	; 0x02
    3366:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3368:	8e 01       	movw	r16, r28
    336a:	04 59       	subi	r16, 0x94	; 148
    336c:	1f 4f       	sbci	r17, 0xFF	; 255
    336e:	fe 01       	movw	r30, r28
    3370:	e0 59       	subi	r30, 0x90	; 144
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	4a ef       	ldi	r20, 0xFA	; 250
    3382:	54 e4       	ldi	r21, 0x44	; 68
    3384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	80 83       	st	Z, r24
    3390:	91 83       	std	Z+1, r25	; 0x01
    3392:	a2 83       	std	Z+2, r26	; 0x02
    3394:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3396:	fe 01       	movw	r30, r28
    3398:	e4 59       	subi	r30, 0x94	; 148
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	60 81       	ld	r22, Z
    339e:	71 81       	ldd	r23, Z+1	; 0x01
    33a0:	82 81       	ldd	r24, Z+2	; 0x02
    33a2:	93 81       	ldd	r25, Z+3	; 0x03
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e8       	ldi	r20, 0x80	; 128
    33aa:	5f e3       	ldi	r21, 0x3F	; 63
    33ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b0:	88 23       	and	r24, r24
    33b2:	44 f4       	brge	.+16     	; 0x33c4 <main+0x270e>
		__ticks = 1;
    33b4:	fe 01       	movw	r30, r28
    33b6:	e6 59       	subi	r30, 0x96	; 150
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	80 83       	st	Z, r24
    33c2:	64 c0       	rjmp	.+200    	; 0x348c <main+0x27d6>
	else if (__tmp > 65535)
    33c4:	fe 01       	movw	r30, r28
    33c6:	e4 59       	subi	r30, 0x94	; 148
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	3f ef       	ldi	r19, 0xFF	; 255
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	57 e4       	ldi	r21, 0x47	; 71
    33da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	0c f0       	brlt	.+2      	; 0x33e4 <main+0x272e>
    33e2:	43 c0       	rjmp	.+134    	; 0x346a <main+0x27b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e4:	fe 01       	movw	r30, r28
    33e6:	e0 59       	subi	r30, 0x90	; 144
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e2       	ldi	r20, 0x20	; 32
    33f8:	51 e4       	ldi	r21, 0x41	; 65
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	8e 01       	movw	r16, r28
    3404:	06 59       	subi	r16, 0x96	; 150
    3406:	1f 4f       	sbci	r17, 0xFF	; 255
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	f8 01       	movw	r30, r16
    3416:	91 83       	std	Z+1, r25	; 0x01
    3418:	80 83       	st	Z, r24
    341a:	1f c0       	rjmp	.+62     	; 0x345a <main+0x27a4>
    341c:	fe 01       	movw	r30, r28
    341e:	e8 59       	subi	r30, 0x98	; 152
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	88 ec       	ldi	r24, 0xC8	; 200
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
    342a:	fe 01       	movw	r30, r28
    342c:	e8 59       	subi	r30, 0x98	; 152
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	01 97       	sbiw	r24, 0x01	; 1
    3436:	f1 f7       	brne	.-4      	; 0x3434 <main+0x277e>
    3438:	fe 01       	movw	r30, r28
    343a:	e8 59       	subi	r30, 0x98	; 152
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	91 83       	std	Z+1, r25	; 0x01
    3440:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3442:	de 01       	movw	r26, r28
    3444:	a6 59       	subi	r26, 0x96	; 150
    3446:	bf 4f       	sbci	r27, 0xFF	; 255
    3448:	fe 01       	movw	r30, r28
    344a:	e6 59       	subi	r30, 0x96	; 150
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	11 96       	adiw	r26, 0x01	; 1
    3456:	9c 93       	st	X, r25
    3458:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345a:	fe 01       	movw	r30, r28
    345c:	e6 59       	subi	r30, 0x96	; 150
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	d1 f6       	brne	.-76     	; 0x341c <main+0x2766>
    3468:	4b c0       	rjmp	.+150    	; 0x3500 <main+0x284a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346a:	8e 01       	movw	r16, r28
    346c:	06 59       	subi	r16, 0x96	; 150
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	fe 01       	movw	r30, r28
    3472:	e4 59       	subi	r30, 0x94	; 148
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	f8 01       	movw	r30, r16
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	80 83       	st	Z, r24
    348c:	de 01       	movw	r26, r28
    348e:	aa 59       	subi	r26, 0x9A	; 154
    3490:	bf 4f       	sbci	r27, 0xFF	; 255
    3492:	fe 01       	movw	r30, r28
    3494:	e6 59       	subi	r30, 0x96	; 150
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	80 81       	ld	r24, Z
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	11 96       	adiw	r26, 0x01	; 1
    349e:	9c 93       	st	X, r25
    34a0:	8e 93       	st	-X, r24
    34a2:	fe 01       	movw	r30, r28
    34a4:	ea 59       	subi	r30, 0x9A	; 154
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 81       	ld	r24, Z
    34aa:	91 81       	ldd	r25, Z+1	; 0x01
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <main+0x27f6>
    34b0:	fe 01       	movw	r30, r28
    34b2:	ea 59       	subi	r30, 0x9A	; 154
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
    34ba:	22 c0       	rjmp	.+68     	; 0x3500 <main+0x284a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34bc:	8e 01       	movw	r16, r28
    34be:	0c 58       	subi	r16, 0x8C	; 140
    34c0:	1f 4f       	sbci	r17, 0xFF	; 255
    34c2:	fe 01       	movw	r30, r28
    34c4:	eb 58       	subi	r30, 0x8B	; 139
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	93 81       	ldd	r25, Z+3	; 0x03
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	f8 01       	movw	r30, r16
    34da:	80 83       	st	Z, r24
    34dc:	de 01       	movw	r26, r28
    34de:	ab 59       	subi	r26, 0x9B	; 155
    34e0:	bf 4f       	sbci	r27, 0xFF	; 255
    34e2:	fe 01       	movw	r30, r28
    34e4:	ec 58       	subi	r30, 0x8C	; 140
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	80 81       	ld	r24, Z
    34ea:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34ec:	fe 01       	movw	r30, r28
    34ee:	eb 59       	subi	r30, 0x9B	; 155
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	8a 95       	dec	r24
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <main+0x283e>
    34f8:	fe 01       	movw	r30, r28
    34fa:	eb 59       	subi	r30, 0x9B	; 155
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 83       	st	Z, r24

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    3500:	fe 01       	movw	r30, r28
    3502:	ec 54       	subi	r30, 0x4C	; 76
    3504:	fe 4f       	sbci	r31, 0xFE	; 254
    3506:	10 82       	st	Z, r1
    3508:	41 c1       	rjmp	.+642    	; 0x378c <main+0x2ad6>
				{
					UART_sendByte(pass1[i]);
    350a:	fe 01       	movw	r30, r28
    350c:	ec 54       	subi	r30, 0x4C	; 76
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	80 81       	ld	r24, Z
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	ce 01       	movw	r24, r28
    3518:	8a 54       	subi	r24, 0x4A	; 74
    351a:	9e 4f       	sbci	r25, 0xFE	; 254
    351c:	fc 01       	movw	r30, r24
    351e:	e2 0f       	add	r30, r18
    3520:	f3 1f       	adc	r31, r19
    3522:	80 81       	ld	r24, Z
    3524:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    3528:	fe 01       	movw	r30, r28
    352a:	ef 59       	subi	r30, 0x9F	; 159
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	a0 ea       	ldi	r26, 0xA0	; 160
    3534:	b1 e4       	ldi	r27, 0x41	; 65
    3536:	80 83       	st	Z, r24
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	a2 83       	std	Z+2, r26	; 0x02
    353c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    353e:	8e 01       	movw	r16, r28
    3540:	03 5a       	subi	r16, 0xA3	; 163
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	fe 01       	movw	r30, r28
    3546:	ef 59       	subi	r30, 0x9F	; 159
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	2b ea       	ldi	r18, 0xAB	; 171
    3554:	3a ea       	ldi	r19, 0xAA	; 170
    3556:	4a e2       	ldi	r20, 0x2A	; 42
    3558:	50 e4       	ldi	r21, 0x40	; 64
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	f8 01       	movw	r30, r16
    3564:	80 83       	st	Z, r24
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	a2 83       	std	Z+2, r26	; 0x02
    356a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    356c:	fe 01       	movw	r30, r28
    356e:	e3 5a       	subi	r30, 0xA3	; 163
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	60 81       	ld	r22, Z
    3574:	71 81       	ldd	r23, Z+1	; 0x01
    3576:	82 81       	ldd	r24, Z+2	; 0x02
    3578:	93 81       	ldd	r25, Z+3	; 0x03
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e8       	ldi	r20, 0x80	; 128
    3580:	5f e3       	ldi	r21, 0x3F	; 63
    3582:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3586:	88 23       	and	r24, r24
    3588:	34 f4       	brge	.+12     	; 0x3596 <main+0x28e0>
		__ticks = 1;
    358a:	fe 01       	movw	r30, r28
    358c:	e4 5a       	subi	r30, 0xA4	; 164
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	80 83       	st	Z, r24
    3594:	e0 c0       	rjmp	.+448    	; 0x3756 <main+0x2aa0>
	else if (__tmp > 255)
    3596:	fe 01       	movw	r30, r28
    3598:	e3 5a       	subi	r30, 0xA3	; 163
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	60 81       	ld	r22, Z
    359e:	71 81       	ldd	r23, Z+1	; 0x01
    35a0:	82 81       	ldd	r24, Z+2	; 0x02
    35a2:	93 81       	ldd	r25, Z+3	; 0x03
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4f e7       	ldi	r20, 0x7F	; 127
    35aa:	53 e4       	ldi	r21, 0x43	; 67
    35ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b0:	18 16       	cp	r1, r24
    35b2:	0c f0       	brlt	.+2      	; 0x35b6 <main+0x2900>
    35b4:	c0 c0       	rjmp	.+384    	; 0x3736 <main+0x2a80>
	{
		_delay_ms(__us / 1000.0);
    35b6:	fe 01       	movw	r30, r28
    35b8:	ef 59       	subi	r30, 0x9F	; 159
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	60 81       	ld	r22, Z
    35be:	71 81       	ldd	r23, Z+1	; 0x01
    35c0:	82 81       	ldd	r24, Z+2	; 0x02
    35c2:	93 81       	ldd	r25, Z+3	; 0x03
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	4a e7       	ldi	r20, 0x7A	; 122
    35ca:	54 e4       	ldi	r21, 0x44	; 68
    35cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	fe 01       	movw	r30, r28
    35d6:	e8 5a       	subi	r30, 0xA8	; 168
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 83       	st	Z, r24
    35dc:	91 83       	std	Z+1, r25	; 0x01
    35de:	a2 83       	std	Z+2, r26	; 0x02
    35e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e2:	8e 01       	movw	r16, r28
    35e4:	0c 5a       	subi	r16, 0xAC	; 172
    35e6:	1f 4f       	sbci	r17, 0xFF	; 255
    35e8:	fe 01       	movw	r30, r28
    35ea:	e8 5a       	subi	r30, 0xA8	; 168
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	60 81       	ld	r22, Z
    35f0:	71 81       	ldd	r23, Z+1	; 0x01
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	93 81       	ldd	r25, Z+3	; 0x03
    35f6:	20 e0       	ldi	r18, 0x00	; 0
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	4a ef       	ldi	r20, 0xFA	; 250
    35fc:	54 e4       	ldi	r21, 0x44	; 68
    35fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3602:	dc 01       	movw	r26, r24
    3604:	cb 01       	movw	r24, r22
    3606:	f8 01       	movw	r30, r16
    3608:	80 83       	st	Z, r24
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	a2 83       	std	Z+2, r26	; 0x02
    360e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3610:	fe 01       	movw	r30, r28
    3612:	ec 5a       	subi	r30, 0xAC	; 172
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	60 81       	ld	r22, Z
    3618:	71 81       	ldd	r23, Z+1	; 0x01
    361a:	82 81       	ldd	r24, Z+2	; 0x02
    361c:	93 81       	ldd	r25, Z+3	; 0x03
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	44 f4       	brge	.+16     	; 0x363e <main+0x2988>
		__ticks = 1;
    362e:	fe 01       	movw	r30, r28
    3630:	ee 5a       	subi	r30, 0xAE	; 174
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	80 83       	st	Z, r24
    363c:	64 c0       	rjmp	.+200    	; 0x3706 <main+0x2a50>
	else if (__tmp > 65535)
    363e:	fe 01       	movw	r30, r28
    3640:	ec 5a       	subi	r30, 0xAC	; 172
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	3f ef       	ldi	r19, 0xFF	; 255
    3650:	4f e7       	ldi	r20, 0x7F	; 127
    3652:	57 e4       	ldi	r21, 0x47	; 71
    3654:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3658:	18 16       	cp	r1, r24
    365a:	0c f0       	brlt	.+2      	; 0x365e <main+0x29a8>
    365c:	43 c0       	rjmp	.+134    	; 0x36e4 <main+0x2a2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365e:	fe 01       	movw	r30, r28
    3660:	e8 5a       	subi	r30, 0xA8	; 168
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	60 81       	ld	r22, Z
    3666:	71 81       	ldd	r23, Z+1	; 0x01
    3668:	82 81       	ldd	r24, Z+2	; 0x02
    366a:	93 81       	ldd	r25, Z+3	; 0x03
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	8e 01       	movw	r16, r28
    367e:	0e 5a       	subi	r16, 0xAE	; 174
    3680:	1f 4f       	sbci	r17, 0xFF	; 255
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	f8 01       	movw	r30, r16
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	80 83       	st	Z, r24
    3694:	1f c0       	rjmp	.+62     	; 0x36d4 <main+0x2a1e>
    3696:	fe 01       	movw	r30, r28
    3698:	e0 5b       	subi	r30, 0xB0	; 176
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	88 ec       	ldi	r24, 0xC8	; 200
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	91 83       	std	Z+1, r25	; 0x01
    36a2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36a4:	fe 01       	movw	r30, r28
    36a6:	e0 5b       	subi	r30, 0xB0	; 176
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	80 81       	ld	r24, Z
    36ac:	91 81       	ldd	r25, Z+1	; 0x01
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	f1 f7       	brne	.-4      	; 0x36ae <main+0x29f8>
    36b2:	fe 01       	movw	r30, r28
    36b4:	e0 5b       	subi	r30, 0xB0	; 176
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36bc:	de 01       	movw	r26, r28
    36be:	ae 5a       	subi	r26, 0xAE	; 174
    36c0:	bf 4f       	sbci	r27, 0xFF	; 255
    36c2:	fe 01       	movw	r30, r28
    36c4:	ee 5a       	subi	r30, 0xAE	; 174
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	11 96       	adiw	r26, 0x01	; 1
    36d0:	9c 93       	st	X, r25
    36d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d4:	fe 01       	movw	r30, r28
    36d6:	ee 5a       	subi	r30, 0xAE	; 174
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	91 81       	ldd	r25, Z+1	; 0x01
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	d1 f6       	brne	.-76     	; 0x3696 <main+0x29e0>
    36e2:	4b c0       	rjmp	.+150    	; 0x377a <main+0x2ac4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e4:	8e 01       	movw	r16, r28
    36e6:	0e 5a       	subi	r16, 0xAE	; 174
    36e8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ea:	fe 01       	movw	r30, r28
    36ec:	ec 5a       	subi	r30, 0xAC	; 172
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	f8 01       	movw	r30, r16
    3702:	91 83       	std	Z+1, r25	; 0x01
    3704:	80 83       	st	Z, r24
    3706:	de 01       	movw	r26, r28
    3708:	a2 5b       	subi	r26, 0xB2	; 178
    370a:	bf 4f       	sbci	r27, 0xFF	; 255
    370c:	fe 01       	movw	r30, r28
    370e:	ee 5a       	subi	r30, 0xAE	; 174
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	11 96       	adiw	r26, 0x01	; 1
    3718:	9c 93       	st	X, r25
    371a:	8e 93       	st	-X, r24
    371c:	fe 01       	movw	r30, r28
    371e:	e2 5b       	subi	r30, 0xB2	; 178
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	80 81       	ld	r24, Z
    3724:	91 81       	ldd	r25, Z+1	; 0x01
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <main+0x2a70>
    372a:	fe 01       	movw	r30, r28
    372c:	e2 5b       	subi	r30, 0xB2	; 178
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	91 83       	std	Z+1, r25	; 0x01
    3732:	80 83       	st	Z, r24
    3734:	22 c0       	rjmp	.+68     	; 0x377a <main+0x2ac4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3736:	8e 01       	movw	r16, r28
    3738:	04 5a       	subi	r16, 0xA4	; 164
    373a:	1f 4f       	sbci	r17, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	e3 5a       	subi	r30, 0xA3	; 163
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	60 81       	ld	r22, Z
    3744:	71 81       	ldd	r23, Z+1	; 0x01
    3746:	82 81       	ldd	r24, Z+2	; 0x02
    3748:	93 81       	ldd	r25, Z+3	; 0x03
    374a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	f8 01       	movw	r30, r16
    3754:	80 83       	st	Z, r24
    3756:	de 01       	movw	r26, r28
    3758:	a3 5b       	subi	r26, 0xB3	; 179
    375a:	bf 4f       	sbci	r27, 0xFF	; 255
    375c:	fe 01       	movw	r30, r28
    375e:	e4 5a       	subi	r30, 0xA4	; 164
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3766:	fe 01       	movw	r30, r28
    3768:	e3 5b       	subi	r30, 0xB3	; 179
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 81       	ld	r24, Z
    376e:	8a 95       	dec	r24
    3770:	f1 f7       	brne	.-4      	; 0x376e <main+0x2ab8>
    3772:	fe 01       	movw	r30, r28
    3774:	e3 5b       	subi	r30, 0xB3	; 179
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 83       	st	Z, r24
				UART_sendByte(CHECK); /* */

				_delay_us(20);

				/* Send Password To 2nd MCU */
				for(i = 0 ; i < 5 ; i++)
    377a:	de 01       	movw	r26, r28
    377c:	ac 54       	subi	r26, 0x4C	; 76
    377e:	be 4f       	sbci	r27, 0xFE	; 254
    3780:	fe 01       	movw	r30, r28
    3782:	ec 54       	subi	r30, 0x4C	; 76
    3784:	fe 4f       	sbci	r31, 0xFE	; 254
    3786:	80 81       	ld	r24, Z
    3788:	8f 5f       	subi	r24, 0xFF	; 255
    378a:	8c 93       	st	X, r24
    378c:	fe 01       	movw	r30, r28
    378e:	ec 54       	subi	r30, 0x4C	; 76
    3790:	fe 4f       	sbci	r31, 0xFE	; 254
    3792:	80 81       	ld	r24, Z
    3794:	85 30       	cpi	r24, 0x05	; 5
    3796:	08 f4       	brcc	.+2      	; 0x379a <main+0x2ae4>
    3798:	b8 ce       	rjmp	.-656    	; 0x350a <main+0x2854>
					UART_sendByte(pass1[i]);

					_delay_us(20);
				}

				status = UART_recieveByte();/* Waiting Checking Result From 2nd MCU */
    379a:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    379e:	fe 01       	movw	r30, r28
    37a0:	ed 54       	subi	r30, 0x4D	; 77
    37a2:	fe 4f       	sbci	r31, 0xFE	; 254
    37a4:	80 83       	st	Z, r24

				while(1)
				{
					if(status == OK) /* Right Password */
    37a6:	fe 01       	movw	r30, r28
    37a8:	ed 54       	subi	r30, 0x4D	; 77
    37aa:	fe 4f       	sbci	r31, 0xFE	; 254
    37ac:	80 81       	ld	r24, Z
    37ae:	80 31       	cpi	r24, 0x10	; 16
    37b0:	49 f4       	brne	.+18     	; 0x37c4 <main+0x2b0e>
					{
						flag = 0 ;
    37b2:	fe 01       	movw	r30, r28
    37b4:	ee 54       	subi	r30, 0x4E	; 78
    37b6:	fe 4f       	sbci	r31, 0xFE	; 254
    37b8:	10 82       	st	Z, r1
						UART_sendByte(CR_PASS);
    37ba:	85 e1       	ldi	r24, 0x15	; 21
    37bc:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    37c0:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>
						break;
					}
					else /* Wrong Password */
					{
						count = 0 ;
    37c4:	fe 01       	movw	r30, r28
    37c6:	ef 54       	subi	r30, 0x4F	; 79
    37c8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ca:	10 82       	st	Z, r1

						do
						{
							count++;
    37cc:	de 01       	movw	r26, r28
    37ce:	af 54       	subi	r26, 0x4F	; 79
    37d0:	be 4f       	sbci	r27, 0xFE	; 254
    37d2:	fe 01       	movw	r30, r28
    37d4:	ef 54       	subi	r30, 0x4F	; 79
    37d6:	fe 4f       	sbci	r31, 0xFE	; 254
    37d8:	80 81       	ld	r24, Z
    37da:	8f 5f       	subi	r24, 0xFF	; 255
    37dc:	8c 93       	st	X, r24

							LCD_clearScreen();
    37de:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
							LCD_displayString("PLZ Enter Pass:");
    37e2:	80 e6       	ldi	r24, 0x60	; 96
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
							LCD_moveCursor(1, 0);
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_moveCursor>

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    37f2:	fe 01       	movw	r30, r28
    37f4:	ec 54       	subi	r30, 0x4C	; 76
    37f6:	fe 4f       	sbci	r31, 0xFE	; 254
    37f8:	10 82       	st	Z, r1
    37fa:	d3 c0       	rjmp	.+422    	; 0x39a2 <main+0x2cec>
							{
								key = KEYPAD_getPressedKey() ;
    37fc:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    3800:	fe 01       	movw	r30, r28
    3802:	eb 54       	subi	r30, 0x4B	; 75
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	80 83       	st	Z, r24
								pass1[i] = key ;
    3808:	fe 01       	movw	r30, r28
    380a:	ec 54       	subi	r30, 0x4C	; 76
    380c:	fe 4f       	sbci	r31, 0xFE	; 254
    380e:	80 81       	ld	r24, Z
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	ce 01       	movw	r24, r28
    3816:	8a 54       	subi	r24, 0x4A	; 74
    3818:	9e 4f       	sbci	r25, 0xFE	; 254
    381a:	dc 01       	movw	r26, r24
    381c:	a2 0f       	add	r26, r18
    381e:	b3 1f       	adc	r27, r19
    3820:	fe 01       	movw	r30, r28
    3822:	eb 54       	subi	r30, 0x4B	; 75
    3824:	fe 4f       	sbci	r31, 0xFE	; 254
    3826:	80 81       	ld	r24, Z
    3828:	8c 93       	st	X, r24
								LCD_displayCharacter('*');
    382a:	8a e2       	ldi	r24, 0x2A	; 42
    382c:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
    3830:	fe 01       	movw	r30, r28
    3832:	e7 5b       	subi	r30, 0xB7	; 183
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	aa ef       	ldi	r26, 0xFA	; 250
    383c:	b3 e4       	ldi	r27, 0x43	; 67
    383e:	80 83       	st	Z, r24
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	a2 83       	std	Z+2, r26	; 0x02
    3844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3846:	8e 01       	movw	r16, r28
    3848:	0b 5b       	subi	r16, 0xBB	; 187
    384a:	1f 4f       	sbci	r17, 0xFF	; 255
    384c:	fe 01       	movw	r30, r28
    384e:	e7 5b       	subi	r30, 0xB7	; 183
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	60 81       	ld	r22, Z
    3854:	71 81       	ldd	r23, Z+1	; 0x01
    3856:	82 81       	ldd	r24, Z+2	; 0x02
    3858:	93 81       	ldd	r25, Z+3	; 0x03
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	4a ef       	ldi	r20, 0xFA	; 250
    3860:	54 e4       	ldi	r21, 0x44	; 68
    3862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	f8 01       	movw	r30, r16
    386c:	80 83       	st	Z, r24
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	a2 83       	std	Z+2, r26	; 0x02
    3872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3874:	fe 01       	movw	r30, r28
    3876:	eb 5b       	subi	r30, 0xBB	; 187
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e8       	ldi	r20, 0x80	; 128
    3888:	5f e3       	ldi	r21, 0x3F	; 63
    388a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388e:	88 23       	and	r24, r24
    3890:	44 f4       	brge	.+16     	; 0x38a2 <main+0x2bec>
		__ticks = 1;
    3892:	fe 01       	movw	r30, r28
    3894:	ed 5b       	subi	r30, 0xBD	; 189
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	80 83       	st	Z, r24
    38a0:	64 c0       	rjmp	.+200    	; 0x396a <main+0x2cb4>
	else if (__tmp > 65535)
    38a2:	fe 01       	movw	r30, r28
    38a4:	eb 5b       	subi	r30, 0xBB	; 187
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	3f ef       	ldi	r19, 0xFF	; 255
    38b4:	4f e7       	ldi	r20, 0x7F	; 127
    38b6:	57 e4       	ldi	r21, 0x47	; 71
    38b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38bc:	18 16       	cp	r1, r24
    38be:	0c f0       	brlt	.+2      	; 0x38c2 <main+0x2c0c>
    38c0:	43 c0       	rjmp	.+134    	; 0x3948 <main+0x2c92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c2:	fe 01       	movw	r30, r28
    38c4:	e7 5b       	subi	r30, 0xB7	; 183
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	93 81       	ldd	r25, Z+3	; 0x03
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e2       	ldi	r20, 0x20	; 32
    38d6:	51 e4       	ldi	r21, 0x41	; 65
    38d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	8e 01       	movw	r16, r28
    38e2:	0d 5b       	subi	r16, 0xBD	; 189
    38e4:	1f 4f       	sbci	r17, 0xFF	; 255
    38e6:	bc 01       	movw	r22, r24
    38e8:	cd 01       	movw	r24, r26
    38ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	f8 01       	movw	r30, r16
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
    38f8:	1f c0       	rjmp	.+62     	; 0x3938 <main+0x2c82>
    38fa:	fe 01       	movw	r30, r28
    38fc:	ef 5b       	subi	r30, 0xBF	; 191
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	88 ec       	ldi	r24, 0xC8	; 200
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	91 83       	std	Z+1, r25	; 0x01
    3906:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3908:	fe 01       	movw	r30, r28
    390a:	ef 5b       	subi	r30, 0xBF	; 191
    390c:	ff 4f       	sbci	r31, 0xFF	; 255
    390e:	80 81       	ld	r24, Z
    3910:	91 81       	ldd	r25, Z+1	; 0x01
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <main+0x2c5c>
    3916:	fe 01       	movw	r30, r28
    3918:	ef 5b       	subi	r30, 0xBF	; 191
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	91 83       	std	Z+1, r25	; 0x01
    391e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3920:	de 01       	movw	r26, r28
    3922:	ad 5b       	subi	r26, 0xBD	; 189
    3924:	bf 4f       	sbci	r27, 0xFF	; 255
    3926:	fe 01       	movw	r30, r28
    3928:	ed 5b       	subi	r30, 0xBD	; 189
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	91 81       	ldd	r25, Z+1	; 0x01
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	11 96       	adiw	r26, 0x01	; 1
    3934:	9c 93       	st	X, r25
    3936:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3938:	fe 01       	movw	r30, r28
    393a:	ed 5b       	subi	r30, 0xBD	; 189
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	80 81       	ld	r24, Z
    3940:	91 81       	ldd	r25, Z+1	; 0x01
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	d1 f6       	brne	.-76     	; 0x38fa <main+0x2c44>
    3946:	24 c0       	rjmp	.+72     	; 0x3990 <main+0x2cda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3948:	8e 01       	movw	r16, r28
    394a:	0d 5b       	subi	r16, 0xBD	; 189
    394c:	1f 4f       	sbci	r17, 0xFF	; 255
    394e:	fe 01       	movw	r30, r28
    3950:	eb 5b       	subi	r30, 0xBB	; 187
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	60 81       	ld	r22, Z
    3956:	71 81       	ldd	r23, Z+1	; 0x01
    3958:	82 81       	ldd	r24, Z+2	; 0x02
    395a:	93 81       	ldd	r25, Z+3	; 0x03
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	f8 01       	movw	r30, r16
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
    396a:	fe 01       	movw	r30, r28
    396c:	ed 5b       	subi	r30, 0xBD	; 189
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	fe 01       	movw	r30, r28
    3976:	ff 96       	adiw	r30, 0x3f	; 63
    3978:	91 83       	std	Z+1, r25	; 0x01
    397a:	80 83       	st	Z, r24
    397c:	fe 01       	movw	r30, r28
    397e:	ff 96       	adiw	r30, 0x3f	; 63
    3980:	80 81       	ld	r24, Z
    3982:	91 81       	ldd	r25, Z+1	; 0x01
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <main+0x2cce>
    3988:	fe 01       	movw	r30, r28
    398a:	ff 96       	adiw	r30, 0x3f	; 63
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	80 83       	st	Z, r24
							LCD_clearScreen();
							LCD_displayString("PLZ Enter Pass:");
							LCD_moveCursor(1, 0);

							/* Enter The Password */
							for(i = 0 ; i < 5 ; i++)
    3990:	de 01       	movw	r26, r28
    3992:	ac 54       	subi	r26, 0x4C	; 76
    3994:	be 4f       	sbci	r27, 0xFE	; 254
    3996:	fe 01       	movw	r30, r28
    3998:	ec 54       	subi	r30, 0x4C	; 76
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	80 81       	ld	r24, Z
    399e:	8f 5f       	subi	r24, 0xFF	; 255
    39a0:	8c 93       	st	X, r24
    39a2:	fe 01       	movw	r30, r28
    39a4:	ec 54       	subi	r30, 0x4C	; 76
    39a6:	fe 4f       	sbci	r31, 0xFE	; 254
    39a8:	80 81       	ld	r24, Z
    39aa:	85 30       	cpi	r24, 0x05	; 5
    39ac:	08 f4       	brcc	.+2      	; 0x39b0 <main+0x2cfa>
    39ae:	26 cf       	rjmp	.-436    	; 0x37fc <main+0x2b46>
							}

							/* Waiting User to press The Enter Button */
							do
							{
								key = KEYPAD_getPressedKey() ;
    39b0:	0e 94 71 22 	call	0x44e2	; 0x44e2 <KEYPAD_getPressedKey>
    39b4:	fe 01       	movw	r30, r28
    39b6:	eb 54       	subi	r30, 0x4B	; 75
    39b8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ba:	80 83       	st	Z, r24
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	aa ef       	ldi	r26, 0xFA	; 250
    39c2:	b3 e4       	ldi	r27, 0x43	; 67
    39c4:	8b af       	std	Y+59, r24	; 0x3b
    39c6:	9c af       	std	Y+60, r25	; 0x3c
    39c8:	ad af       	std	Y+61, r26	; 0x3d
    39ca:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	6b ad       	ldd	r22, Y+59	; 0x3b
    39ce:	7c ad       	ldd	r23, Y+60	; 0x3c
    39d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    39d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a ef       	ldi	r20, 0xFA	; 250
    39da:	54 e4       	ldi	r21, 0x44	; 68
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	8f ab       	std	Y+55, r24	; 0x37
    39e6:	98 af       	std	Y+56, r25	; 0x38
    39e8:	a9 af       	std	Y+57, r26	; 0x39
    39ea:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    39ec:	6f a9       	ldd	r22, Y+55	; 0x37
    39ee:	78 ad       	ldd	r23, Y+56	; 0x38
    39f0:	89 ad       	ldd	r24, Y+57	; 0x39
    39f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f e3       	ldi	r21, 0x3F	; 63
    39fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <main+0x2d58>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9e ab       	std	Y+54, r25	; 0x36
    3a0a:	8d ab       	std	Y+53, r24	; 0x35
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <main+0x2dd6>
	else if (__tmp > 65535)
    3a0e:	6f a9       	ldd	r22, Y+55	; 0x37
    3a10:	78 ad       	ldd	r23, Y+56	; 0x38
    3a12:	89 ad       	ldd	r24, Y+57	; 0x39
    3a14:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <main+0x2dc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	6b ad       	ldd	r22, Y+59	; 0x3b
    3a28:	7c ad       	ldd	r23, Y+60	; 0x3c
    3a2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e2       	ldi	r20, 0x20	; 32
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9e ab       	std	Y+54, r25	; 0x36
    3a4c:	8d ab       	std	Y+53, r24	; 0x35
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <main+0x2db8>
    3a50:	88 ec       	ldi	r24, 0xC8	; 200
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9c ab       	std	Y+52, r25	; 0x34
    3a56:	8b ab       	std	Y+51, r24	; 0x33
    3a58:	8b a9       	ldd	r24, Y+51	; 0x33
    3a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <main+0x2da6>
    3a60:	9c ab       	std	Y+52, r25	; 0x34
    3a62:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	8d a9       	ldd	r24, Y+53	; 0x35
    3a66:	9e a9       	ldd	r25, Y+54	; 0x36
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9e ab       	std	Y+54, r25	; 0x36
    3a6c:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	8d a9       	ldd	r24, Y+53	; 0x35
    3a70:	9e a9       	ldd	r25, Y+54	; 0x36
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <main+0x2d9a>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <main+0x2dea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	6f a9       	ldd	r22, Y+55	; 0x37
    3a7a:	78 ad       	ldd	r23, Y+56	; 0x38
    3a7c:	89 ad       	ldd	r24, Y+57	; 0x39
    3a7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9e ab       	std	Y+54, r25	; 0x36
    3a8a:	8d ab       	std	Y+53, r24	; 0x35
    3a8c:	8d a9       	ldd	r24, Y+53	; 0x35
    3a8e:	9e a9       	ldd	r25, Y+54	; 0x36
    3a90:	9a ab       	std	Y+50, r25	; 0x32
    3a92:	89 ab       	std	Y+49, r24	; 0x31
    3a94:	89 a9       	ldd	r24, Y+49	; 0x31
    3a96:	9a a9       	ldd	r25, Y+50	; 0x32
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <main+0x2de2>
    3a9c:	9a ab       	std	Y+50, r25	; 0x32
    3a9e:	89 ab       	std	Y+49, r24	; 0x31
								_delay_ms(500);
							} while(key != 13);
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	eb 54       	subi	r30, 0x4B	; 75
    3aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa6:	80 81       	ld	r24, Z
    3aa8:	8d 30       	cpi	r24, 0x0D	; 13
    3aaa:	09 f0       	breq	.+2      	; 0x3aae <main+0x2df8>
    3aac:	81 cf       	rjmp	.-254    	; 0x39b0 <main+0x2cfa>

							UART_sendByte(CHECK); /* */
    3aae:	81 e1       	ldi	r24, 0x11	; 17
    3ab0:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 ea       	ldi	r26, 0xA0	; 160
    3aba:	b1 e4       	ldi	r27, 0x41	; 65
    3abc:	8d a7       	std	Y+45, r24	; 0x2d
    3abe:	9e a7       	std	Y+46, r25	; 0x2e
    3ac0:	af a7       	std	Y+47, r26	; 0x2f
    3ac2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ac4:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ac6:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aca:	98 a9       	ldd	r25, Y+48	; 0x30
    3acc:	2b ea       	ldi	r18, 0xAB	; 171
    3ace:	3a ea       	ldi	r19, 0xAA	; 170
    3ad0:	4a e2       	ldi	r20, 0x2A	; 42
    3ad2:	50 e4       	ldi	r21, 0x40	; 64
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	89 a7       	std	Y+41, r24	; 0x29
    3ade:	9a a7       	std	Y+42, r25	; 0x2a
    3ae0:	ab a7       	std	Y+43, r26	; 0x2b
    3ae2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3ae4:	69 a5       	ldd	r22, Y+41	; 0x29
    3ae6:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ae8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aea:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	1c f4       	brge	.+6      	; 0x3b02 <main+0x2e4c>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	88 a7       	std	Y+40, r24	; 0x28
    3b00:	91 c0       	rjmp	.+290    	; 0x3c24 <main+0x2f6e>
	else if (__tmp > 255)
    3b02:	69 a5       	ldd	r22, Y+41	; 0x29
    3b04:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b06:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b08:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	4f e7       	ldi	r20, 0x7F	; 127
    3b10:	53 e4       	ldi	r21, 0x43	; 67
    3b12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b16:	18 16       	cp	r1, r24
    3b18:	0c f0       	brlt	.+2      	; 0x3b1c <main+0x2e66>
    3b1a:	7b c0       	rjmp	.+246    	; 0x3c12 <main+0x2f5c>
	{
		_delay_ms(__us / 1000.0);
    3b1c:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b1e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b22:	98 a9       	ldd	r25, Y+48	; 0x30
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	4a e7       	ldi	r20, 0x7A	; 122
    3b2a:	54 e4       	ldi	r21, 0x44	; 68
    3b2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8c a3       	std	Y+36, r24	; 0x24
    3b36:	9d a3       	std	Y+37, r25	; 0x25
    3b38:	ae a3       	std	Y+38, r26	; 0x26
    3b3a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3c:	6c a1       	ldd	r22, Y+36	; 0x24
    3b3e:	7d a1       	ldd	r23, Y+37	; 0x25
    3b40:	8e a1       	ldd	r24, Y+38	; 0x26
    3b42:	9f a1       	ldd	r25, Y+39	; 0x27
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4a ef       	ldi	r20, 0xFA	; 250
    3b4a:	54 e4       	ldi	r21, 0x44	; 68
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	88 a3       	std	Y+32, r24	; 0x20
    3b56:	99 a3       	std	Y+33, r25	; 0x21
    3b58:	aa a3       	std	Y+34, r26	; 0x22
    3b5a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3b5c:	68 a1       	ldd	r22, Y+32	; 0x20
    3b5e:	79 a1       	ldd	r23, Y+33	; 0x21
    3b60:	8a a1       	ldd	r24, Y+34	; 0x22
    3b62:	9b a1       	ldd	r25, Y+35	; 0x23
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	2c f4       	brge	.+10     	; 0x3b7e <main+0x2ec8>
		__ticks = 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	9f 8f       	std	Y+31, r25	; 0x1f
    3b7a:	8e 8f       	std	Y+30, r24	; 0x1e
    3b7c:	3f c0       	rjmp	.+126    	; 0x3bfc <main+0x2f46>
	else if (__tmp > 65535)
    3b7e:	68 a1       	ldd	r22, Y+32	; 0x20
    3b80:	79 a1       	ldd	r23, Y+33	; 0x21
    3b82:	8a a1       	ldd	r24, Y+34	; 0x22
    3b84:	9b a1       	ldd	r25, Y+35	; 0x23
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	4f e7       	ldi	r20, 0x7F	; 127
    3b8c:	57 e4       	ldi	r21, 0x47	; 71
    3b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b92:	18 16       	cp	r1, r24
    3b94:	4c f5       	brge	.+82     	; 0x3be8 <main+0x2f32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b96:	6c a1       	ldd	r22, Y+36	; 0x24
    3b98:	7d a1       	ldd	r23, Y+37	; 0x25
    3b9a:	8e a1       	ldd	r24, Y+38	; 0x26
    3b9c:	9f a1       	ldd	r25, Y+39	; 0x27
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9f 8f       	std	Y+31, r25	; 0x1f
    3bbc:	8e 8f       	std	Y+30, r24	; 0x1e
    3bbe:	0f c0       	rjmp	.+30     	; 0x3bde <main+0x2f28>
    3bc0:	88 ec       	ldi	r24, 0xC8	; 200
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9d 8f       	std	Y+29, r25	; 0x1d
    3bc6:	8c 8f       	std	Y+28, r24	; 0x1c
    3bc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <main+0x2f16>
    3bd0:	9d 8f       	std	Y+29, r25	; 0x1d
    3bd2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	9f 8f       	std	Y+31, r25	; 0x1f
    3bdc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3be0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	69 f7       	brne	.-38     	; 0x3bc0 <main+0x2f0a>
    3be6:	24 c0       	rjmp	.+72     	; 0x3c30 <main+0x2f7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be8:	68 a1       	ldd	r22, Y+32	; 0x20
    3bea:	79 a1       	ldd	r23, Y+33	; 0x21
    3bec:	8a a1       	ldd	r24, Y+34	; 0x22
    3bee:	9b a1       	ldd	r25, Y+35	; 0x23
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9f 8f       	std	Y+31, r25	; 0x1f
    3bfa:	8e 8f       	std	Y+30, r24	; 0x1e
    3bfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bfe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c00:	9b 8f       	std	Y+27, r25	; 0x1b
    3c02:	8a 8f       	std	Y+26, r24	; 0x1a
    3c04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <main+0x2f52>
    3c0c:	9b 8f       	std	Y+27, r25	; 0x1b
    3c0e:	8a 8f       	std	Y+26, r24	; 0x1a
    3c10:	0f c0       	rjmp	.+30     	; 0x3c30 <main+0x2f7a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c12:	69 a5       	ldd	r22, Y+41	; 0x29
    3c14:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c18:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	88 a7       	std	Y+40, r24	; 0x28
    3c24:	88 a5       	ldd	r24, Y+40	; 0x28
    3c26:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c28:	89 8d       	ldd	r24, Y+25	; 0x19
    3c2a:	8a 95       	dec	r24
    3c2c:	f1 f7       	brne	.-4      	; 0x3c2a <main+0x2f74>
    3c2e:	89 8f       	std	Y+25, r24	; 0x19

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    3c30:	fe 01       	movw	r30, r28
    3c32:	ec 54       	subi	r30, 0x4C	; 76
    3c34:	fe 4f       	sbci	r31, 0xFE	; 254
    3c36:	10 82       	st	Z, r1
    3c38:	d6 c0       	rjmp	.+428    	; 0x3de6 <main+0x3130>
							{
								UART_sendByte(pass1[i]);
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	ec 54       	subi	r30, 0x4C	; 76
    3c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c40:	80 81       	ld	r24, Z
    3c42:	28 2f       	mov	r18, r24
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	ce 01       	movw	r24, r28
    3c48:	8a 54       	subi	r24, 0x4A	; 74
    3c4a:	9e 4f       	sbci	r25, 0xFE	; 254
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	e2 0f       	add	r30, r18
    3c50:	f3 1f       	adc	r31, r19
    3c52:	80 81       	ld	r24, Z
    3c54:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	a0 ea       	ldi	r26, 0xA0	; 160
    3c5e:	b1 e4       	ldi	r27, 0x41	; 65
    3c60:	8d 8b       	std	Y+21, r24	; 0x15
    3c62:	9e 8b       	std	Y+22, r25	; 0x16
    3c64:	af 8b       	std	Y+23, r26	; 0x17
    3c66:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c68:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c70:	2b ea       	ldi	r18, 0xAB	; 171
    3c72:	3a ea       	ldi	r19, 0xAA	; 170
    3c74:	4a e2       	ldi	r20, 0x2A	; 42
    3c76:	50 e4       	ldi	r21, 0x40	; 64
    3c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	89 8b       	std	Y+17, r24	; 0x11
    3c82:	9a 8b       	std	Y+18, r25	; 0x12
    3c84:	ab 8b       	std	Y+19, r26	; 0x13
    3c86:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3c88:	69 89       	ldd	r22, Y+17	; 0x11
    3c8a:	7a 89       	ldd	r23, Y+18	; 0x12
    3c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	40 e8       	ldi	r20, 0x80	; 128
    3c96:	5f e3       	ldi	r21, 0x3F	; 63
    3c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9c:	88 23       	and	r24, r24
    3c9e:	1c f4       	brge	.+6      	; 0x3ca6 <main+0x2ff0>
		__ticks = 1;
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	88 8b       	std	Y+16, r24	; 0x10
    3ca4:	91 c0       	rjmp	.+290    	; 0x3dc8 <main+0x3112>
	else if (__tmp > 255)
    3ca6:	69 89       	ldd	r22, Y+17	; 0x11
    3ca8:	7a 89       	ldd	r23, Y+18	; 0x12
    3caa:	8b 89       	ldd	r24, Y+19	; 0x13
    3cac:	9c 89       	ldd	r25, Y+20	; 0x14
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	4f e7       	ldi	r20, 0x7F	; 127
    3cb4:	53 e4       	ldi	r21, 0x43	; 67
    3cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cba:	18 16       	cp	r1, r24
    3cbc:	0c f0       	brlt	.+2      	; 0x3cc0 <main+0x300a>
    3cbe:	7b c0       	rjmp	.+246    	; 0x3db6 <main+0x3100>
	{
		_delay_ms(__us / 1000.0);
    3cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a e7       	ldi	r20, 0x7A	; 122
    3cce:	54 e4       	ldi	r21, 0x44	; 68
    3cd0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	8c 87       	std	Y+12, r24	; 0x0c
    3cda:	9d 87       	std	Y+13, r25	; 0x0d
    3cdc:	ae 87       	std	Y+14, r26	; 0x0e
    3cde:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ce2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ce4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ce6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a ef       	ldi	r20, 0xFA	; 250
    3cee:	54 e4       	ldi	r21, 0x44	; 68
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	88 87       	std	Y+8, r24	; 0x08
    3cfa:	99 87       	std	Y+9, r25	; 0x09
    3cfc:	aa 87       	std	Y+10, r26	; 0x0a
    3cfe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d00:	68 85       	ldd	r22, Y+8	; 0x08
    3d02:	79 85       	ldd	r23, Y+9	; 0x09
    3d04:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d06:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e8       	ldi	r20, 0x80	; 128
    3d0e:	5f e3       	ldi	r21, 0x3F	; 63
    3d10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	2c f4       	brge	.+10     	; 0x3d22 <main+0x306c>
		__ticks = 1;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9f 83       	std	Y+7, r25	; 0x07
    3d1e:	8e 83       	std	Y+6, r24	; 0x06
    3d20:	3f c0       	rjmp	.+126    	; 0x3da0 <main+0x30ea>
	else if (__tmp > 65535)
    3d22:	68 85       	ldd	r22, Y+8	; 0x08
    3d24:	79 85       	ldd	r23, Y+9	; 0x09
    3d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f ef       	ldi	r19, 0xFF	; 255
    3d2e:	4f e7       	ldi	r20, 0x7F	; 127
    3d30:	57 e4       	ldi	r21, 0x47	; 71
    3d32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	4c f5       	brge	.+82     	; 0x3d8c <main+0x30d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d40:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	9f 83       	std	Y+7, r25	; 0x07
    3d60:	8e 83       	std	Y+6, r24	; 0x06
    3d62:	0f c0       	rjmp	.+30     	; 0x3d82 <main+0x30cc>
    3d64:	88 ec       	ldi	r24, 0xC8	; 200
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9d 83       	std	Y+5, r25	; 0x05
    3d6a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <main+0x30ba>
    3d74:	9d 83       	std	Y+5, r25	; 0x05
    3d76:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	8e 81       	ldd	r24, Y+6	; 0x06
    3d7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	9f 83       	std	Y+7, r25	; 0x07
    3d80:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d82:	8e 81       	ldd	r24, Y+6	; 0x06
    3d84:	9f 81       	ldd	r25, Y+7	; 0x07
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	69 f7       	brne	.-38     	; 0x3d64 <main+0x30ae>
    3d8a:	24 c0       	rjmp	.+72     	; 0x3dd4 <main+0x311e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8c:	68 85       	ldd	r22, Y+8	; 0x08
    3d8e:	79 85       	ldd	r23, Y+9	; 0x09
    3d90:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d92:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	9f 83       	std	Y+7, r25	; 0x07
    3d9e:	8e 83       	std	Y+6, r24	; 0x06
    3da0:	8e 81       	ldd	r24, Y+6	; 0x06
    3da2:	9f 81       	ldd	r25, Y+7	; 0x07
    3da4:	9b 83       	std	Y+3, r25	; 0x03
    3da6:	8a 83       	std	Y+2, r24	; 0x02
    3da8:	8a 81       	ldd	r24, Y+2	; 0x02
    3daa:	9b 81       	ldd	r25, Y+3	; 0x03
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <main+0x30f6>
    3db0:	9b 83       	std	Y+3, r25	; 0x03
    3db2:	8a 83       	std	Y+2, r24	; 0x02
    3db4:	0f c0       	rjmp	.+30     	; 0x3dd4 <main+0x311e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3db6:	69 89       	ldd	r22, Y+17	; 0x11
    3db8:	7a 89       	ldd	r23, Y+18	; 0x12
    3dba:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	88 8b       	std	Y+16, r24	; 0x10
    3dc8:	88 89       	ldd	r24, Y+16	; 0x10
    3dca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	8a 95       	dec	r24
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <main+0x3118>
    3dd2:	89 83       	std	Y+1, r24	; 0x01
							UART_sendByte(CHECK); /* */

							_delay_us(20);

							/* Send Password To 2nd MCU */
							for(i = 0 ; i < 5 ; i++)
    3dd4:	de 01       	movw	r26, r28
    3dd6:	ac 54       	subi	r26, 0x4C	; 76
    3dd8:	be 4f       	sbci	r27, 0xFE	; 254
    3dda:	fe 01       	movw	r30, r28
    3ddc:	ec 54       	subi	r30, 0x4C	; 76
    3dde:	fe 4f       	sbci	r31, 0xFE	; 254
    3de0:	80 81       	ld	r24, Z
    3de2:	8f 5f       	subi	r24, 0xFF	; 255
    3de4:	8c 93       	st	X, r24
    3de6:	fe 01       	movw	r30, r28
    3de8:	ec 54       	subi	r30, 0x4C	; 76
    3dea:	fe 4f       	sbci	r31, 0xFE	; 254
    3dec:	80 81       	ld	r24, Z
    3dee:	85 30       	cpi	r24, 0x05	; 5
    3df0:	08 f4       	brcc	.+2      	; 0x3df4 <main+0x313e>
    3df2:	23 cf       	rjmp	.-442    	; 0x3c3a <main+0x2f84>
								UART_sendByte(pass1[i]);

								_delay_us(20);
							}

							status = UART_recieveByte();
    3df4:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    3df8:	fe 01       	movw	r30, r28
    3dfa:	ed 54       	subi	r30, 0x4D	; 77
    3dfc:	fe 4f       	sbci	r31, 0xFE	; 254
    3dfe:	80 83       	st	Z, r24

						}while((count != 2) && (status == ERROR));
    3e00:	fe 01       	movw	r30, r28
    3e02:	ef 54       	subi	r30, 0x4F	; 79
    3e04:	fe 4f       	sbci	r31, 0xFE	; 254
    3e06:	80 81       	ld	r24, Z
    3e08:	82 30       	cpi	r24, 0x02	; 2
    3e0a:	39 f0       	breq	.+14     	; 0x3e1a <main+0x3164>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ed 54       	subi	r30, 0x4D	; 77
    3e10:	fe 4f       	sbci	r31, 0xFE	; 254
    3e12:	80 81       	ld	r24, Z
    3e14:	88 23       	and	r24, r24
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <main+0x3164>
    3e18:	d9 cc       	rjmp	.-1614   	; 0x37cc <main+0x2b16>

						if((count == 2) && (status == ERROR))
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ef 54       	subi	r30, 0x4F	; 79
    3e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e20:	80 81       	ld	r24, Z
    3e22:	82 30       	cpi	r24, 0x02	; 2
    3e24:	09 f0       	breq	.+2      	; 0x3e28 <main+0x3172>
    3e26:	bf cc       	rjmp	.-1666   	; 0x37a6 <main+0x2af0>
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ed 54       	subi	r30, 0x4D	; 77
    3e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e2e:	80 81       	ld	r24, Z
    3e30:	88 23       	and	r24, r24
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <main+0x3180>
    3e34:	b8 cc       	rjmp	.-1680   	; 0x37a6 <main+0x2af0>
						{
							UART_sendByte(BUZZER);
    3e36:	84 e1       	ldi	r24, 0x14	; 20
    3e38:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
							LCD_clearScreen();
    3e3c:	0e 94 1d 29 	call	0x523a	; 0x523a <LCD_clearScreen>
							LCD_displayString("System Locked");
    3e40:	84 ee       	ldi	r24, 0xE4	; 228
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
							Timer1_init(&t_configure); /* Start Timer */
    3e48:	ce 01       	movw	r24, r28
    3e4a:	89 53       	subi	r24, 0x39	; 57
    3e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    3e4e:	0e 94 27 29 	call	0x524e	; 0x524e <Timer1_init>
							while(g_count != 60); /* Waiting For 60 Seconds */
    3e52:	80 91 08 01 	lds	r24, 0x0108
    3e56:	8c 33       	cpi	r24, 0x3C	; 60
    3e58:	e1 f7       	brne	.-8      	; 0x3e52 <main+0x319c>
							Timer1_deInit();
    3e5a:	0e 94 87 29 	call	0x530e	; 0x530e <Timer1_deInit>
							g_count = 0 ;
    3e5e:	10 92 08 01 	sts	0x0108, r1
    3e62:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <main+0x1d6>

00003e66 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <GPIO_setupPinDirection+0x6>
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <GPIO_setupPinDirection+0x8>
    3e6e:	0f 92       	push	r0
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	6a 83       	std	Y+2, r22	; 0x02
    3e78:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7c:	88 30       	cpi	r24, 0x08	; 8
    3e7e:	08 f0       	brcs	.+2      	; 0x3e82 <GPIO_setupPinDirection+0x1c>
    3e80:	d5 c0       	rjmp	.+426    	; 0x402c <GPIO_setupPinDirection+0x1c6>
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	84 30       	cpi	r24, 0x04	; 4
    3e86:	08 f0       	brcs	.+2      	; 0x3e8a <GPIO_setupPinDirection+0x24>
    3e88:	d1 c0       	rjmp	.+418    	; 0x402c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	3d 83       	std	Y+5, r19	; 0x05
    3e92:	2c 83       	std	Y+4, r18	; 0x04
    3e94:	8c 81       	ldd	r24, Y+4	; 0x04
    3e96:	9d 81       	ldd	r25, Y+5	; 0x05
    3e98:	81 30       	cpi	r24, 0x01	; 1
    3e9a:	91 05       	cpc	r25, r1
    3e9c:	09 f4       	brne	.+2      	; 0x3ea0 <GPIO_setupPinDirection+0x3a>
    3e9e:	43 c0       	rjmp	.+134    	; 0x3f26 <GPIO_setupPinDirection+0xc0>
    3ea0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ea2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ea4:	22 30       	cpi	r18, 0x02	; 2
    3ea6:	31 05       	cpc	r19, r1
    3ea8:	2c f4       	brge	.+10     	; 0x3eb4 <GPIO_setupPinDirection+0x4e>
    3eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    3eac:	9d 81       	ldd	r25, Y+5	; 0x05
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	71 f0       	breq	.+28     	; 0x3ece <GPIO_setupPinDirection+0x68>
    3eb2:	bc c0       	rjmp	.+376    	; 0x402c <GPIO_setupPinDirection+0x1c6>
    3eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    3eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    3eb8:	22 30       	cpi	r18, 0x02	; 2
    3eba:	31 05       	cpc	r19, r1
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <GPIO_setupPinDirection+0x5a>
    3ebe:	5f c0       	rjmp	.+190    	; 0x3f7e <GPIO_setupPinDirection+0x118>
    3ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ec4:	83 30       	cpi	r24, 0x03	; 3
    3ec6:	91 05       	cpc	r25, r1
    3ec8:	09 f4       	brne	.+2      	; 0x3ecc <GPIO_setupPinDirection+0x66>
    3eca:	85 c0       	rjmp	.+266    	; 0x3fd6 <GPIO_setupPinDirection+0x170>
    3ecc:	af c0       	rjmp	.+350    	; 0x402c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3ece:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed0:	81 30       	cpi	r24, 0x01	; 1
    3ed2:	a1 f4       	brne	.+40     	; 0x3efc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    3ed4:	aa e3       	ldi	r26, 0x3A	; 58
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	ea e3       	ldi	r30, 0x3A	; 58
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	48 2f       	mov	r20, r24
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	28 2f       	mov	r18, r24
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	02 2e       	mov	r0, r18
    3eec:	02 c0       	rjmp	.+4      	; 0x3ef2 <GPIO_setupPinDirection+0x8c>
    3eee:	88 0f       	add	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	0a 94       	dec	r0
    3ef4:	e2 f7       	brpl	.-8      	; 0x3eee <GPIO_setupPinDirection+0x88>
    3ef6:	84 2b       	or	r24, r20
    3ef8:	8c 93       	st	X, r24
    3efa:	98 c0       	rjmp	.+304    	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3efc:	aa e3       	ldi	r26, 0x3A	; 58
    3efe:	b0 e0       	ldi	r27, 0x00	; 0
    3f00:	ea e3       	ldi	r30, 0x3A	; 58
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	80 81       	ld	r24, Z
    3f06:	48 2f       	mov	r20, r24
    3f08:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0a:	28 2f       	mov	r18, r24
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	02 2e       	mov	r0, r18
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <GPIO_setupPinDirection+0xb4>
    3f16:	88 0f       	add	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	0a 94       	dec	r0
    3f1c:	e2 f7       	brpl	.-8      	; 0x3f16 <GPIO_setupPinDirection+0xb0>
    3f1e:	80 95       	com	r24
    3f20:	84 23       	and	r24, r20
    3f22:	8c 93       	st	X, r24
    3f24:	83 c0       	rjmp	.+262    	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    3f26:	8b 81       	ldd	r24, Y+3	; 0x03
    3f28:	81 30       	cpi	r24, 0x01	; 1
    3f2a:	a1 f4       	brne	.+40     	; 0x3f54 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3f2c:	a7 e3       	ldi	r26, 0x37	; 55
    3f2e:	b0 e0       	ldi	r27, 0x00	; 0
    3f30:	e7 e3       	ldi	r30, 0x37	; 55
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	80 81       	ld	r24, Z
    3f36:	48 2f       	mov	r20, r24
    3f38:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3a:	28 2f       	mov	r18, r24
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	02 2e       	mov	r0, r18
    3f44:	02 c0       	rjmp	.+4      	; 0x3f4a <GPIO_setupPinDirection+0xe4>
    3f46:	88 0f       	add	r24, r24
    3f48:	99 1f       	adc	r25, r25
    3f4a:	0a 94       	dec	r0
    3f4c:	e2 f7       	brpl	.-8      	; 0x3f46 <GPIO_setupPinDirection+0xe0>
    3f4e:	84 2b       	or	r24, r20
    3f50:	8c 93       	st	X, r24
    3f52:	6c c0       	rjmp	.+216    	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    3f54:	a7 e3       	ldi	r26, 0x37	; 55
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	e7 e3       	ldi	r30, 0x37	; 55
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	80 81       	ld	r24, Z
    3f5e:	48 2f       	mov	r20, r24
    3f60:	8a 81       	ldd	r24, Y+2	; 0x02
    3f62:	28 2f       	mov	r18, r24
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	02 2e       	mov	r0, r18
    3f6c:	02 c0       	rjmp	.+4      	; 0x3f72 <GPIO_setupPinDirection+0x10c>
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	0a 94       	dec	r0
    3f74:	e2 f7       	brpl	.-8      	; 0x3f6e <GPIO_setupPinDirection+0x108>
    3f76:	80 95       	com	r24
    3f78:	84 23       	and	r24, r20
    3f7a:	8c 93       	st	X, r24
    3f7c:	57 c0       	rjmp	.+174    	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f80:	81 30       	cpi	r24, 0x01	; 1
    3f82:	a1 f4       	brne	.+40     	; 0x3fac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    3f84:	a4 e3       	ldi	r26, 0x34	; 52
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	e4 e3       	ldi	r30, 0x34	; 52
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	48 2f       	mov	r20, r24
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	28 2f       	mov	r18, r24
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	02 2e       	mov	r0, r18
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <GPIO_setupPinDirection+0x13c>
    3f9e:	88 0f       	add	r24, r24
    3fa0:	99 1f       	adc	r25, r25
    3fa2:	0a 94       	dec	r0
    3fa4:	e2 f7       	brpl	.-8      	; 0x3f9e <GPIO_setupPinDirection+0x138>
    3fa6:	84 2b       	or	r24, r20
    3fa8:	8c 93       	st	X, r24
    3faa:	40 c0       	rjmp	.+128    	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    3fac:	a4 e3       	ldi	r26, 0x34	; 52
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	e4 e3       	ldi	r30, 0x34	; 52
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	48 2f       	mov	r20, r24
    3fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fba:	28 2f       	mov	r18, r24
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	02 2e       	mov	r0, r18
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <GPIO_setupPinDirection+0x164>
    3fc6:	88 0f       	add	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	0a 94       	dec	r0
    3fcc:	e2 f7       	brpl	.-8      	; 0x3fc6 <GPIO_setupPinDirection+0x160>
    3fce:	80 95       	com	r24
    3fd0:	84 23       	and	r24, r20
    3fd2:	8c 93       	st	X, r24
    3fd4:	2b c0       	rjmp	.+86     	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    3fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd8:	81 30       	cpi	r24, 0x01	; 1
    3fda:	a1 f4       	brne	.+40     	; 0x4004 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3fdc:	a1 e3       	ldi	r26, 0x31	; 49
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	e1 e3       	ldi	r30, 0x31	; 49
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	48 2f       	mov	r20, r24
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	28 2f       	mov	r18, r24
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	02 2e       	mov	r0, r18
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <GPIO_setupPinDirection+0x194>
    3ff6:	88 0f       	add	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	0a 94       	dec	r0
    3ffc:	e2 f7       	brpl	.-8      	; 0x3ff6 <GPIO_setupPinDirection+0x190>
    3ffe:	84 2b       	or	r24, r20
    4000:	8c 93       	st	X, r24
    4002:	14 c0       	rjmp	.+40     	; 0x402c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    4004:	a1 e3       	ldi	r26, 0x31	; 49
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	e1 e3       	ldi	r30, 0x31	; 49
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	80 81       	ld	r24, Z
    400e:	48 2f       	mov	r20, r24
    4010:	8a 81       	ldd	r24, Y+2	; 0x02
    4012:	28 2f       	mov	r18, r24
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	02 2e       	mov	r0, r18
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <GPIO_setupPinDirection+0x1bc>
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	0a 94       	dec	r0
    4024:	e2 f7       	brpl	.-8      	; 0x401e <GPIO_setupPinDirection+0x1b8>
    4026:	80 95       	com	r24
    4028:	84 23       	and	r24, r20
    402a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	00 d0       	rcall	.+0      	; 0x4042 <GPIO_writePin+0x6>
    4042:	00 d0       	rcall	.+0      	; 0x4044 <GPIO_writePin+0x8>
    4044:	0f 92       	push	r0
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
    404a:	89 83       	std	Y+1, r24	; 0x01
    404c:	6a 83       	std	Y+2, r22	; 0x02
    404e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    4050:	8a 81       	ldd	r24, Y+2	; 0x02
    4052:	88 30       	cpi	r24, 0x08	; 8
    4054:	08 f0       	brcs	.+2      	; 0x4058 <GPIO_writePin+0x1c>
    4056:	d5 c0       	rjmp	.+426    	; 0x4202 <GPIO_writePin+0x1c6>
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	84 30       	cpi	r24, 0x04	; 4
    405c:	08 f0       	brcs	.+2      	; 0x4060 <GPIO_writePin+0x24>
    405e:	d1 c0       	rjmp	.+418    	; 0x4202 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	28 2f       	mov	r18, r24
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	3d 83       	std	Y+5, r19	; 0x05
    4068:	2c 83       	std	Y+4, r18	; 0x04
    406a:	8c 81       	ldd	r24, Y+4	; 0x04
    406c:	9d 81       	ldd	r25, Y+5	; 0x05
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	91 05       	cpc	r25, r1
    4072:	09 f4       	brne	.+2      	; 0x4076 <GPIO_writePin+0x3a>
    4074:	43 c0       	rjmp	.+134    	; 0x40fc <GPIO_writePin+0xc0>
    4076:	2c 81       	ldd	r18, Y+4	; 0x04
    4078:	3d 81       	ldd	r19, Y+5	; 0x05
    407a:	22 30       	cpi	r18, 0x02	; 2
    407c:	31 05       	cpc	r19, r1
    407e:	2c f4       	brge	.+10     	; 0x408a <GPIO_writePin+0x4e>
    4080:	8c 81       	ldd	r24, Y+4	; 0x04
    4082:	9d 81       	ldd	r25, Y+5	; 0x05
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	71 f0       	breq	.+28     	; 0x40a4 <GPIO_writePin+0x68>
    4088:	bc c0       	rjmp	.+376    	; 0x4202 <GPIO_writePin+0x1c6>
    408a:	2c 81       	ldd	r18, Y+4	; 0x04
    408c:	3d 81       	ldd	r19, Y+5	; 0x05
    408e:	22 30       	cpi	r18, 0x02	; 2
    4090:	31 05       	cpc	r19, r1
    4092:	09 f4       	brne	.+2      	; 0x4096 <GPIO_writePin+0x5a>
    4094:	5f c0       	rjmp	.+190    	; 0x4154 <GPIO_writePin+0x118>
    4096:	8c 81       	ldd	r24, Y+4	; 0x04
    4098:	9d 81       	ldd	r25, Y+5	; 0x05
    409a:	83 30       	cpi	r24, 0x03	; 3
    409c:	91 05       	cpc	r25, r1
    409e:	09 f4       	brne	.+2      	; 0x40a2 <GPIO_writePin+0x66>
    40a0:	85 c0       	rjmp	.+266    	; 0x41ac <GPIO_writePin+0x170>
    40a2:	af c0       	rjmp	.+350    	; 0x4202 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    40a4:	8b 81       	ldd	r24, Y+3	; 0x03
    40a6:	81 30       	cpi	r24, 0x01	; 1
    40a8:	a1 f4       	brne	.+40     	; 0x40d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    40aa:	ab e3       	ldi	r26, 0x3B	; 59
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	eb e3       	ldi	r30, 0x3B	; 59
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	48 2f       	mov	r20, r24
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	02 2e       	mov	r0, r18
    40c2:	02 c0       	rjmp	.+4      	; 0x40c8 <GPIO_writePin+0x8c>
    40c4:	88 0f       	add	r24, r24
    40c6:	99 1f       	adc	r25, r25
    40c8:	0a 94       	dec	r0
    40ca:	e2 f7       	brpl	.-8      	; 0x40c4 <GPIO_writePin+0x88>
    40cc:	84 2b       	or	r24, r20
    40ce:	8c 93       	st	X, r24
    40d0:	98 c0       	rjmp	.+304    	; 0x4202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    40d2:	ab e3       	ldi	r26, 0x3B	; 59
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	eb e3       	ldi	r30, 0x3B	; 59
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 81       	ld	r24, Z
    40dc:	48 2f       	mov	r20, r24
    40de:	8a 81       	ldd	r24, Y+2	; 0x02
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	02 2e       	mov	r0, r18
    40ea:	02 c0       	rjmp	.+4      	; 0x40f0 <GPIO_writePin+0xb4>
    40ec:	88 0f       	add	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	0a 94       	dec	r0
    40f2:	e2 f7       	brpl	.-8      	; 0x40ec <GPIO_writePin+0xb0>
    40f4:	80 95       	com	r24
    40f6:	84 23       	and	r24, r20
    40f8:	8c 93       	st	X, r24
    40fa:	83 c0       	rjmp	.+262    	; 0x4202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    40fc:	8b 81       	ldd	r24, Y+3	; 0x03
    40fe:	81 30       	cpi	r24, 0x01	; 1
    4100:	a1 f4       	brne	.+40     	; 0x412a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    4102:	a8 e3       	ldi	r26, 0x38	; 56
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	e8 e3       	ldi	r30, 0x38	; 56
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	48 2f       	mov	r20, r24
    410e:	8a 81       	ldd	r24, Y+2	; 0x02
    4110:	28 2f       	mov	r18, r24
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	02 2e       	mov	r0, r18
    411a:	02 c0       	rjmp	.+4      	; 0x4120 <GPIO_writePin+0xe4>
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	0a 94       	dec	r0
    4122:	e2 f7       	brpl	.-8      	; 0x411c <GPIO_writePin+0xe0>
    4124:	84 2b       	or	r24, r20
    4126:	8c 93       	st	X, r24
    4128:	6c c0       	rjmp	.+216    	; 0x4202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    412a:	a8 e3       	ldi	r26, 0x38	; 56
    412c:	b0 e0       	ldi	r27, 0x00	; 0
    412e:	e8 e3       	ldi	r30, 0x38	; 56
    4130:	f0 e0       	ldi	r31, 0x00	; 0
    4132:	80 81       	ld	r24, Z
    4134:	48 2f       	mov	r20, r24
    4136:	8a 81       	ldd	r24, Y+2	; 0x02
    4138:	28 2f       	mov	r18, r24
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	02 2e       	mov	r0, r18
    4142:	02 c0       	rjmp	.+4      	; 0x4148 <GPIO_writePin+0x10c>
    4144:	88 0f       	add	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	0a 94       	dec	r0
    414a:	e2 f7       	brpl	.-8      	; 0x4144 <GPIO_writePin+0x108>
    414c:	80 95       	com	r24
    414e:	84 23       	and	r24, r20
    4150:	8c 93       	st	X, r24
    4152:	57 c0       	rjmp	.+174    	; 0x4202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    4154:	8b 81       	ldd	r24, Y+3	; 0x03
    4156:	81 30       	cpi	r24, 0x01	; 1
    4158:	a1 f4       	brne	.+40     	; 0x4182 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    415a:	a5 e3       	ldi	r26, 0x35	; 53
    415c:	b0 e0       	ldi	r27, 0x00	; 0
    415e:	e5 e3       	ldi	r30, 0x35	; 53
    4160:	f0 e0       	ldi	r31, 0x00	; 0
    4162:	80 81       	ld	r24, Z
    4164:	48 2f       	mov	r20, r24
    4166:	8a 81       	ldd	r24, Y+2	; 0x02
    4168:	28 2f       	mov	r18, r24
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	02 2e       	mov	r0, r18
    4172:	02 c0       	rjmp	.+4      	; 0x4178 <GPIO_writePin+0x13c>
    4174:	88 0f       	add	r24, r24
    4176:	99 1f       	adc	r25, r25
    4178:	0a 94       	dec	r0
    417a:	e2 f7       	brpl	.-8      	; 0x4174 <GPIO_writePin+0x138>
    417c:	84 2b       	or	r24, r20
    417e:	8c 93       	st	X, r24
    4180:	40 c0       	rjmp	.+128    	; 0x4202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    4182:	a5 e3       	ldi	r26, 0x35	; 53
    4184:	b0 e0       	ldi	r27, 0x00	; 0
    4186:	e5 e3       	ldi	r30, 0x35	; 53
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	80 81       	ld	r24, Z
    418c:	48 2f       	mov	r20, r24
    418e:	8a 81       	ldd	r24, Y+2	; 0x02
    4190:	28 2f       	mov	r18, r24
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	02 2e       	mov	r0, r18
    419a:	02 c0       	rjmp	.+4      	; 0x41a0 <GPIO_writePin+0x164>
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	0a 94       	dec	r0
    41a2:	e2 f7       	brpl	.-8      	; 0x419c <GPIO_writePin+0x160>
    41a4:	80 95       	com	r24
    41a6:	84 23       	and	r24, r20
    41a8:	8c 93       	st	X, r24
    41aa:	2b c0       	rjmp	.+86     	; 0x4202 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	81 30       	cpi	r24, 0x01	; 1
    41b0:	a1 f4       	brne	.+40     	; 0x41da <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    41b2:	a2 e3       	ldi	r26, 0x32	; 50
    41b4:	b0 e0       	ldi	r27, 0x00	; 0
    41b6:	e2 e3       	ldi	r30, 0x32	; 50
    41b8:	f0 e0       	ldi	r31, 0x00	; 0
    41ba:	80 81       	ld	r24, Z
    41bc:	48 2f       	mov	r20, r24
    41be:	8a 81       	ldd	r24, Y+2	; 0x02
    41c0:	28 2f       	mov	r18, r24
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	02 2e       	mov	r0, r18
    41ca:	02 c0       	rjmp	.+4      	; 0x41d0 <GPIO_writePin+0x194>
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	0a 94       	dec	r0
    41d2:	e2 f7       	brpl	.-8      	; 0x41cc <GPIO_writePin+0x190>
    41d4:	84 2b       	or	r24, r20
    41d6:	8c 93       	st	X, r24
    41d8:	14 c0       	rjmp	.+40     	; 0x4202 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    41da:	a2 e3       	ldi	r26, 0x32	; 50
    41dc:	b0 e0       	ldi	r27, 0x00	; 0
    41de:	e2 e3       	ldi	r30, 0x32	; 50
    41e0:	f0 e0       	ldi	r31, 0x00	; 0
    41e2:	80 81       	ld	r24, Z
    41e4:	48 2f       	mov	r20, r24
    41e6:	8a 81       	ldd	r24, Y+2	; 0x02
    41e8:	28 2f       	mov	r18, r24
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	02 2e       	mov	r0, r18
    41f2:	02 c0       	rjmp	.+4      	; 0x41f8 <GPIO_writePin+0x1bc>
    41f4:	88 0f       	add	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	0a 94       	dec	r0
    41fa:	e2 f7       	brpl	.-8      	; 0x41f4 <GPIO_writePin+0x1b8>
    41fc:	80 95       	com	r24
    41fe:	84 23       	and	r24, r20
    4200:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    4202:	0f 90       	pop	r0
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	08 95       	ret

00004212 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    4212:	df 93       	push	r29
    4214:	cf 93       	push	r28
    4216:	00 d0       	rcall	.+0      	; 0x4218 <GPIO_readPin+0x6>
    4218:	00 d0       	rcall	.+0      	; 0x421a <GPIO_readPin+0x8>
    421a:	0f 92       	push	r0
    421c:	cd b7       	in	r28, 0x3d	; 61
    421e:	de b7       	in	r29, 0x3e	; 62
    4220:	8a 83       	std	Y+2, r24	; 0x02
    4222:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    4224:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    4226:	8b 81       	ldd	r24, Y+3	; 0x03
    4228:	88 30       	cpi	r24, 0x08	; 8
    422a:	08 f0       	brcs	.+2      	; 0x422e <GPIO_readPin+0x1c>
    422c:	84 c0       	rjmp	.+264    	; 0x4336 <GPIO_readPin+0x124>
    422e:	8a 81       	ldd	r24, Y+2	; 0x02
    4230:	84 30       	cpi	r24, 0x04	; 4
    4232:	08 f0       	brcs	.+2      	; 0x4236 <GPIO_readPin+0x24>
    4234:	80 c0       	rjmp	.+256    	; 0x4336 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    4236:	8a 81       	ldd	r24, Y+2	; 0x02
    4238:	28 2f       	mov	r18, r24
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	3d 83       	std	Y+5, r19	; 0x05
    423e:	2c 83       	std	Y+4, r18	; 0x04
    4240:	4c 81       	ldd	r20, Y+4	; 0x04
    4242:	5d 81       	ldd	r21, Y+5	; 0x05
    4244:	41 30       	cpi	r20, 0x01	; 1
    4246:	51 05       	cpc	r21, r1
    4248:	79 f1       	breq	.+94     	; 0x42a8 <GPIO_readPin+0x96>
    424a:	8c 81       	ldd	r24, Y+4	; 0x04
    424c:	9d 81       	ldd	r25, Y+5	; 0x05
    424e:	82 30       	cpi	r24, 0x02	; 2
    4250:	91 05       	cpc	r25, r1
    4252:	34 f4       	brge	.+12     	; 0x4260 <GPIO_readPin+0x4e>
    4254:	2c 81       	ldd	r18, Y+4	; 0x04
    4256:	3d 81       	ldd	r19, Y+5	; 0x05
    4258:	21 15       	cp	r18, r1
    425a:	31 05       	cpc	r19, r1
    425c:	69 f0       	breq	.+26     	; 0x4278 <GPIO_readPin+0x66>
    425e:	6b c0       	rjmp	.+214    	; 0x4336 <GPIO_readPin+0x124>
    4260:	4c 81       	ldd	r20, Y+4	; 0x04
    4262:	5d 81       	ldd	r21, Y+5	; 0x05
    4264:	42 30       	cpi	r20, 0x02	; 2
    4266:	51 05       	cpc	r21, r1
    4268:	b9 f1       	breq	.+110    	; 0x42d8 <GPIO_readPin+0xc6>
    426a:	8c 81       	ldd	r24, Y+4	; 0x04
    426c:	9d 81       	ldd	r25, Y+5	; 0x05
    426e:	83 30       	cpi	r24, 0x03	; 3
    4270:	91 05       	cpc	r25, r1
    4272:	09 f4       	brne	.+2      	; 0x4276 <GPIO_readPin+0x64>
    4274:	49 c0       	rjmp	.+146    	; 0x4308 <GPIO_readPin+0xf6>
    4276:	5f c0       	rjmp	.+190    	; 0x4336 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    4278:	e9 e3       	ldi	r30, 0x39	; 57
    427a:	f0 e0       	ldi	r31, 0x00	; 0
    427c:	80 81       	ld	r24, Z
    427e:	28 2f       	mov	r18, r24
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	8b 81       	ldd	r24, Y+3	; 0x03
    4284:	88 2f       	mov	r24, r24
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	a9 01       	movw	r20, r18
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <GPIO_readPin+0x7e>
    428c:	55 95       	asr	r21
    428e:	47 95       	ror	r20
    4290:	8a 95       	dec	r24
    4292:	e2 f7       	brpl	.-8      	; 0x428c <GPIO_readPin+0x7a>
    4294:	ca 01       	movw	r24, r20
    4296:	81 70       	andi	r24, 0x01	; 1
    4298:	90 70       	andi	r25, 0x00	; 0
    429a:	88 23       	and	r24, r24
    429c:	19 f0       	breq	.+6      	; 0x42a4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	89 83       	std	Y+1, r24	; 0x01
    42a2:	49 c0       	rjmp	.+146    	; 0x4336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    42a4:	19 82       	std	Y+1, r1	; 0x01
    42a6:	47 c0       	rjmp	.+142    	; 0x4336 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    42a8:	e6 e3       	ldi	r30, 0x36	; 54
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	80 81       	ld	r24, Z
    42ae:	28 2f       	mov	r18, r24
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	8b 81       	ldd	r24, Y+3	; 0x03
    42b4:	88 2f       	mov	r24, r24
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	a9 01       	movw	r20, r18
    42ba:	02 c0       	rjmp	.+4      	; 0x42c0 <GPIO_readPin+0xae>
    42bc:	55 95       	asr	r21
    42be:	47 95       	ror	r20
    42c0:	8a 95       	dec	r24
    42c2:	e2 f7       	brpl	.-8      	; 0x42bc <GPIO_readPin+0xaa>
    42c4:	ca 01       	movw	r24, r20
    42c6:	81 70       	andi	r24, 0x01	; 1
    42c8:	90 70       	andi	r25, 0x00	; 0
    42ca:	88 23       	and	r24, r24
    42cc:	19 f0       	breq	.+6      	; 0x42d4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	89 83       	std	Y+1, r24	; 0x01
    42d2:	31 c0       	rjmp	.+98     	; 0x4336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    42d4:	19 82       	std	Y+1, r1	; 0x01
    42d6:	2f c0       	rjmp	.+94     	; 0x4336 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    42d8:	e3 e3       	ldi	r30, 0x33	; 51
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	80 81       	ld	r24, Z
    42de:	28 2f       	mov	r18, r24
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	8b 81       	ldd	r24, Y+3	; 0x03
    42e4:	88 2f       	mov	r24, r24
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	a9 01       	movw	r20, r18
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <GPIO_readPin+0xde>
    42ec:	55 95       	asr	r21
    42ee:	47 95       	ror	r20
    42f0:	8a 95       	dec	r24
    42f2:	e2 f7       	brpl	.-8      	; 0x42ec <GPIO_readPin+0xda>
    42f4:	ca 01       	movw	r24, r20
    42f6:	81 70       	andi	r24, 0x01	; 1
    42f8:	90 70       	andi	r25, 0x00	; 0
    42fa:	88 23       	and	r24, r24
    42fc:	19 f0       	breq	.+6      	; 0x4304 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	89 83       	std	Y+1, r24	; 0x01
    4302:	19 c0       	rjmp	.+50     	; 0x4336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4304:	19 82       	std	Y+1, r1	; 0x01
    4306:	17 c0       	rjmp	.+46     	; 0x4336 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    4308:	e0 e3       	ldi	r30, 0x30	; 48
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	80 81       	ld	r24, Z
    430e:	28 2f       	mov	r18, r24
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	8b 81       	ldd	r24, Y+3	; 0x03
    4314:	88 2f       	mov	r24, r24
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	a9 01       	movw	r20, r18
    431a:	02 c0       	rjmp	.+4      	; 0x4320 <GPIO_readPin+0x10e>
    431c:	55 95       	asr	r21
    431e:	47 95       	ror	r20
    4320:	8a 95       	dec	r24
    4322:	e2 f7       	brpl	.-8      	; 0x431c <GPIO_readPin+0x10a>
    4324:	ca 01       	movw	r24, r20
    4326:	81 70       	andi	r24, 0x01	; 1
    4328:	90 70       	andi	r25, 0x00	; 0
    432a:	88 23       	and	r24, r24
    432c:	19 f0       	breq	.+6      	; 0x4334 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	89 83       	std	Y+1, r24	; 0x01
    4332:	01 c0       	rjmp	.+2      	; 0x4336 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    4334:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    4336:	89 81       	ldd	r24, Y+1	; 0x01
}
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	08 95       	ret

00004348 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    4348:	df 93       	push	r29
    434a:	cf 93       	push	r28
    434c:	00 d0       	rcall	.+0      	; 0x434e <GPIO_setupPortDirection+0x6>
    434e:	00 d0       	rcall	.+0      	; 0x4350 <GPIO_setupPortDirection+0x8>
    4350:	cd b7       	in	r28, 0x3d	; 61
    4352:	de b7       	in	r29, 0x3e	; 62
    4354:	89 83       	std	Y+1, r24	; 0x01
    4356:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    4358:	89 81       	ldd	r24, Y+1	; 0x01
    435a:	84 30       	cpi	r24, 0x04	; 4
    435c:	90 f5       	brcc	.+100    	; 0x43c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    435e:	89 81       	ldd	r24, Y+1	; 0x01
    4360:	28 2f       	mov	r18, r24
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	3c 83       	std	Y+4, r19	; 0x04
    4366:	2b 83       	std	Y+3, r18	; 0x03
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	9c 81       	ldd	r25, Y+4	; 0x04
    436c:	81 30       	cpi	r24, 0x01	; 1
    436e:	91 05       	cpc	r25, r1
    4370:	d1 f0       	breq	.+52     	; 0x43a6 <GPIO_setupPortDirection+0x5e>
    4372:	2b 81       	ldd	r18, Y+3	; 0x03
    4374:	3c 81       	ldd	r19, Y+4	; 0x04
    4376:	22 30       	cpi	r18, 0x02	; 2
    4378:	31 05       	cpc	r19, r1
    437a:	2c f4       	brge	.+10     	; 0x4386 <GPIO_setupPortDirection+0x3e>
    437c:	8b 81       	ldd	r24, Y+3	; 0x03
    437e:	9c 81       	ldd	r25, Y+4	; 0x04
    4380:	00 97       	sbiw	r24, 0x00	; 0
    4382:	61 f0       	breq	.+24     	; 0x439c <GPIO_setupPortDirection+0x54>
    4384:	1e c0       	rjmp	.+60     	; 0x43c2 <GPIO_setupPortDirection+0x7a>
    4386:	2b 81       	ldd	r18, Y+3	; 0x03
    4388:	3c 81       	ldd	r19, Y+4	; 0x04
    438a:	22 30       	cpi	r18, 0x02	; 2
    438c:	31 05       	cpc	r19, r1
    438e:	81 f0       	breq	.+32     	; 0x43b0 <GPIO_setupPortDirection+0x68>
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	83 30       	cpi	r24, 0x03	; 3
    4396:	91 05       	cpc	r25, r1
    4398:	81 f0       	breq	.+32     	; 0x43ba <GPIO_setupPortDirection+0x72>
    439a:	13 c0       	rjmp	.+38     	; 0x43c2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    439c:	ea e3       	ldi	r30, 0x3A	; 58
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	8a 81       	ldd	r24, Y+2	; 0x02
    43a2:	80 83       	st	Z, r24
    43a4:	0e c0       	rjmp	.+28     	; 0x43c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    43a6:	e7 e3       	ldi	r30, 0x37	; 55
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	8a 81       	ldd	r24, Y+2	; 0x02
    43ac:	80 83       	st	Z, r24
    43ae:	09 c0       	rjmp	.+18     	; 0x43c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    43b0:	e4 e3       	ldi	r30, 0x34	; 52
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	8a 81       	ldd	r24, Y+2	; 0x02
    43b6:	80 83       	st	Z, r24
    43b8:	04 c0       	rjmp	.+8      	; 0x43c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    43ba:	e1 e3       	ldi	r30, 0x31	; 49
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	8a 81       	ldd	r24, Y+2	; 0x02
    43c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
    43ca:	cf 91       	pop	r28
    43cc:	df 91       	pop	r29
    43ce:	08 95       	ret

000043d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    43d0:	df 93       	push	r29
    43d2:	cf 93       	push	r28
    43d4:	00 d0       	rcall	.+0      	; 0x43d6 <GPIO_writePort+0x6>
    43d6:	00 d0       	rcall	.+0      	; 0x43d8 <GPIO_writePort+0x8>
    43d8:	cd b7       	in	r28, 0x3d	; 61
    43da:	de b7       	in	r29, 0x3e	; 62
    43dc:	89 83       	std	Y+1, r24	; 0x01
    43de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	84 30       	cpi	r24, 0x04	; 4
    43e4:	90 f5       	brcc	.+100    	; 0x444a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    43e6:	89 81       	ldd	r24, Y+1	; 0x01
    43e8:	28 2f       	mov	r18, r24
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	3c 83       	std	Y+4, r19	; 0x04
    43ee:	2b 83       	std	Y+3, r18	; 0x03
    43f0:	8b 81       	ldd	r24, Y+3	; 0x03
    43f2:	9c 81       	ldd	r25, Y+4	; 0x04
    43f4:	81 30       	cpi	r24, 0x01	; 1
    43f6:	91 05       	cpc	r25, r1
    43f8:	d1 f0       	breq	.+52     	; 0x442e <GPIO_writePort+0x5e>
    43fa:	2b 81       	ldd	r18, Y+3	; 0x03
    43fc:	3c 81       	ldd	r19, Y+4	; 0x04
    43fe:	22 30       	cpi	r18, 0x02	; 2
    4400:	31 05       	cpc	r19, r1
    4402:	2c f4       	brge	.+10     	; 0x440e <GPIO_writePort+0x3e>
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	9c 81       	ldd	r25, Y+4	; 0x04
    4408:	00 97       	sbiw	r24, 0x00	; 0
    440a:	61 f0       	breq	.+24     	; 0x4424 <GPIO_writePort+0x54>
    440c:	1e c0       	rjmp	.+60     	; 0x444a <GPIO_writePort+0x7a>
    440e:	2b 81       	ldd	r18, Y+3	; 0x03
    4410:	3c 81       	ldd	r19, Y+4	; 0x04
    4412:	22 30       	cpi	r18, 0x02	; 2
    4414:	31 05       	cpc	r19, r1
    4416:	81 f0       	breq	.+32     	; 0x4438 <GPIO_writePort+0x68>
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	9c 81       	ldd	r25, Y+4	; 0x04
    441c:	83 30       	cpi	r24, 0x03	; 3
    441e:	91 05       	cpc	r25, r1
    4420:	81 f0       	breq	.+32     	; 0x4442 <GPIO_writePort+0x72>
    4422:	13 c0       	rjmp	.+38     	; 0x444a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    4424:	eb e3       	ldi	r30, 0x3B	; 59
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	8a 81       	ldd	r24, Y+2	; 0x02
    442a:	80 83       	st	Z, r24
    442c:	0e c0       	rjmp	.+28     	; 0x444a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    442e:	e8 e3       	ldi	r30, 0x38	; 56
    4430:	f0 e0       	ldi	r31, 0x00	; 0
    4432:	8a 81       	ldd	r24, Y+2	; 0x02
    4434:	80 83       	st	Z, r24
    4436:	09 c0       	rjmp	.+18     	; 0x444a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    4438:	e5 e3       	ldi	r30, 0x35	; 53
    443a:	f0 e0       	ldi	r31, 0x00	; 0
    443c:	8a 81       	ldd	r24, Y+2	; 0x02
    443e:	80 83       	st	Z, r24
    4440:	04 c0       	rjmp	.+8      	; 0x444a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    4442:	e2 e3       	ldi	r30, 0x32	; 50
    4444:	f0 e0       	ldi	r31, 0x00	; 0
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	80 83       	st	Z, r24
			break;
		}
	}
}
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	0f 90       	pop	r0
    4452:	cf 91       	pop	r28
    4454:	df 91       	pop	r29
    4456:	08 95       	ret

00004458 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    4458:	df 93       	push	r29
    445a:	cf 93       	push	r28
    445c:	00 d0       	rcall	.+0      	; 0x445e <GPIO_readPort+0x6>
    445e:	00 d0       	rcall	.+0      	; 0x4460 <GPIO_readPort+0x8>
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    4466:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    4468:	8a 81       	ldd	r24, Y+2	; 0x02
    446a:	84 30       	cpi	r24, 0x04	; 4
    446c:	90 f5       	brcc	.+100    	; 0x44d2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	28 2f       	mov	r18, r24
    4472:	30 e0       	ldi	r19, 0x00	; 0
    4474:	3c 83       	std	Y+4, r19	; 0x04
    4476:	2b 83       	std	Y+3, r18	; 0x03
    4478:	8b 81       	ldd	r24, Y+3	; 0x03
    447a:	9c 81       	ldd	r25, Y+4	; 0x04
    447c:	81 30       	cpi	r24, 0x01	; 1
    447e:	91 05       	cpc	r25, r1
    4480:	d1 f0       	breq	.+52     	; 0x44b6 <GPIO_readPort+0x5e>
    4482:	2b 81       	ldd	r18, Y+3	; 0x03
    4484:	3c 81       	ldd	r19, Y+4	; 0x04
    4486:	22 30       	cpi	r18, 0x02	; 2
    4488:	31 05       	cpc	r19, r1
    448a:	2c f4       	brge	.+10     	; 0x4496 <GPIO_readPort+0x3e>
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	9c 81       	ldd	r25, Y+4	; 0x04
    4490:	00 97       	sbiw	r24, 0x00	; 0
    4492:	61 f0       	breq	.+24     	; 0x44ac <GPIO_readPort+0x54>
    4494:	1e c0       	rjmp	.+60     	; 0x44d2 <GPIO_readPort+0x7a>
    4496:	2b 81       	ldd	r18, Y+3	; 0x03
    4498:	3c 81       	ldd	r19, Y+4	; 0x04
    449a:	22 30       	cpi	r18, 0x02	; 2
    449c:	31 05       	cpc	r19, r1
    449e:	81 f0       	breq	.+32     	; 0x44c0 <GPIO_readPort+0x68>
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	9c 81       	ldd	r25, Y+4	; 0x04
    44a4:	83 30       	cpi	r24, 0x03	; 3
    44a6:	91 05       	cpc	r25, r1
    44a8:	81 f0       	breq	.+32     	; 0x44ca <GPIO_readPort+0x72>
    44aa:	13 c0       	rjmp	.+38     	; 0x44d2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    44ac:	e9 e3       	ldi	r30, 0x39	; 57
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	89 83       	std	Y+1, r24	; 0x01
    44b4:	0e c0       	rjmp	.+28     	; 0x44d2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    44b6:	e6 e3       	ldi	r30, 0x36	; 54
    44b8:	f0 e0       	ldi	r31, 0x00	; 0
    44ba:	80 81       	ld	r24, Z
    44bc:	89 83       	std	Y+1, r24	; 0x01
    44be:	09 c0       	rjmp	.+18     	; 0x44d2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    44c0:	e3 e3       	ldi	r30, 0x33	; 51
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
    44c4:	80 81       	ld	r24, Z
    44c6:	89 83       	std	Y+1, r24	; 0x01
    44c8:	04 c0       	rjmp	.+8      	; 0x44d2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    44ca:	e0 e3       	ldi	r30, 0x30	; 48
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    44d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    44d4:	0f 90       	pop	r0
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	cf 91       	pop	r28
    44de:	df 91       	pop	r29
    44e0:	08 95       	ret

000044e2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    44e2:	df 93       	push	r29
    44e4:	cf 93       	push	r28
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	60 97       	sbiw	r28, 0x10	; 16
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	f8 94       	cli
    44f0:	de bf       	out	0x3e, r29	; 62
    44f2:	0f be       	out	0x3f, r0	; 63
    44f4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	40 e0       	ldi	r20, 0x00	; 0
    44fc:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	61 e0       	ldi	r22, 0x01	; 1
    4504:	40 e0       	ldi	r20, 0x00	; 0
    4506:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	62 e0       	ldi	r22, 0x02	; 2
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	63 e0       	ldi	r22, 0x03	; 3
    4518:	40 e0       	ldi	r20, 0x00	; 0
    451a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	64 e0       	ldi	r22, 0x04	; 4
    4522:	40 e0       	ldi	r20, 0x00	; 0
    4524:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	65 e0       	ldi	r22, 0x05	; 5
    452c:	40 e0       	ldi	r20, 0x00	; 0
    452e:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    4532:	81 e0       	ldi	r24, 0x01	; 1
    4534:	66 e0       	ldi	r22, 0x06	; 6
    4536:	40 e0       	ldi	r20, 0x00	; 0
    4538:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	67 e0       	ldi	r22, 0x07	; 7
    4540:	40 e0       	ldi	r20, 0x00	; 0
    4542:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    4546:	1f 86       	std	Y+15, r1	; 0x0f
    4548:	ab c0       	rjmp	.+342    	; 0x46a0 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	6f 85       	ldd	r22, Y+15	; 0x0f
    454e:	41 e0       	ldi	r20, 0x01	; 1
    4550:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	6f 85       	ldd	r22, Y+15	; 0x0f
    4558:	40 e0       	ldi	r20, 0x00	; 0
    455a:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    455e:	18 8a       	std	Y+16, r1	; 0x10
    4560:	22 c0       	rjmp	.+68     	; 0x45a6 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    4562:	88 89       	ldd	r24, Y+16	; 0x10
    4564:	98 2f       	mov	r25, r24
    4566:	9c 5f       	subi	r25, 0xFC	; 252
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	69 2f       	mov	r22, r25
    456c:	0e 94 09 21 	call	0x4212	; 0x4212 <GPIO_readPin>
    4570:	88 23       	and	r24, r24
    4572:	b1 f4       	brne	.+44     	; 0x45a0 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    4574:	8f 85       	ldd	r24, Y+15	; 0x0f
    4576:	88 2f       	mov	r24, r24
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	88 0f       	add	r24, r24
    4580:	99 1f       	adc	r25, r25
    4582:	98 2f       	mov	r25, r24
    4584:	88 89       	ldd	r24, Y+16	; 0x10
    4586:	89 0f       	add	r24, r25
    4588:	8f 5f       	subi	r24, 0xFF	; 255
    458a:	0e 94 55 23 	call	0x46aa	; 0x46aa <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    458e:	60 96       	adiw	r28, 0x10	; 16
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	f8 94       	cli
    4594:	de bf       	out	0x3e, r29	; 62
    4596:	0f be       	out	0x3f, r0	; 63
    4598:	cd bf       	out	0x3d, r28	; 61
    459a:	cf 91       	pop	r28
    459c:	df 91       	pop	r29
    459e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    45a0:	88 89       	ldd	r24, Y+16	; 0x10
    45a2:	8f 5f       	subi	r24, 0xFF	; 255
    45a4:	88 8b       	std	Y+16, r24	; 0x10
    45a6:	88 89       	ldd	r24, Y+16	; 0x10
    45a8:	84 30       	cpi	r24, 0x04	; 4
    45aa:	d8 f2       	brcs	.-74     	; 0x4562 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    45ac:	81 e0       	ldi	r24, 0x01	; 1
    45ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    45b0:	40 e0       	ldi	r20, 0x00	; 0
    45b2:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	a0 ea       	ldi	r26, 0xA0	; 160
    45bc:	b0 e4       	ldi	r27, 0x40	; 64
    45be:	8b 87       	std	Y+11, r24	; 0x0b
    45c0:	9c 87       	std	Y+12, r25	; 0x0c
    45c2:	ad 87       	std	Y+13, r26	; 0x0d
    45c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    45cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	4a ef       	ldi	r20, 0xFA	; 250
    45d4:	54 e4       	ldi	r21, 0x44	; 68
    45d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	8f 83       	std	Y+7, r24	; 0x07
    45e0:	98 87       	std	Y+8, r25	; 0x08
    45e2:	a9 87       	std	Y+9, r26	; 0x09
    45e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45e6:	6f 81       	ldd	r22, Y+7	; 0x07
    45e8:	78 85       	ldd	r23, Y+8	; 0x08
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	40 e8       	ldi	r20, 0x80	; 128
    45f4:	5f e3       	ldi	r21, 0x3F	; 63
    45f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fa:	88 23       	and	r24, r24
    45fc:	2c f4       	brge	.+10     	; 0x4608 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	9e 83       	std	Y+6, r25	; 0x06
    4604:	8d 83       	std	Y+5, r24	; 0x05
    4606:	3f c0       	rjmp	.+126    	; 0x4686 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    4608:	6f 81       	ldd	r22, Y+7	; 0x07
    460a:	78 85       	ldd	r23, Y+8	; 0x08
    460c:	89 85       	ldd	r24, Y+9	; 0x09
    460e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	3f ef       	ldi	r19, 0xFF	; 255
    4614:	4f e7       	ldi	r20, 0x7F	; 127
    4616:	57 e4       	ldi	r21, 0x47	; 71
    4618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    461c:	18 16       	cp	r1, r24
    461e:	4c f5       	brge	.+82     	; 0x4672 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4620:	6b 85       	ldd	r22, Y+11	; 0x0b
    4622:	7c 85       	ldd	r23, Y+12	; 0x0c
    4624:	8d 85       	ldd	r24, Y+13	; 0x0d
    4626:	9e 85       	ldd	r25, Y+14	; 0x0e
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e2       	ldi	r20, 0x20	; 32
    462e:	51 e4       	ldi	r21, 0x41	; 65
    4630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	bc 01       	movw	r22, r24
    463a:	cd 01       	movw	r24, r26
    463c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	9e 83       	std	Y+6, r25	; 0x06
    4646:	8d 83       	std	Y+5, r24	; 0x05
    4648:	0f c0       	rjmp	.+30     	; 0x4668 <KEYPAD_getPressedKey+0x186>
    464a:	88 ec       	ldi	r24, 0xC8	; 200
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	9c 83       	std	Y+4, r25	; 0x04
    4650:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	f1 f7       	brne	.-4      	; 0x4656 <KEYPAD_getPressedKey+0x174>
    465a:	9c 83       	std	Y+4, r25	; 0x04
    465c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465e:	8d 81       	ldd	r24, Y+5	; 0x05
    4660:	9e 81       	ldd	r25, Y+6	; 0x06
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4668:	8d 81       	ldd	r24, Y+5	; 0x05
    466a:	9e 81       	ldd	r25, Y+6	; 0x06
    466c:	00 97       	sbiw	r24, 0x00	; 0
    466e:	69 f7       	brne	.-38     	; 0x464a <KEYPAD_getPressedKey+0x168>
    4670:	14 c0       	rjmp	.+40     	; 0x469a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4672:	6f 81       	ldd	r22, Y+7	; 0x07
    4674:	78 85       	ldd	r23, Y+8	; 0x08
    4676:	89 85       	ldd	r24, Y+9	; 0x09
    4678:	9a 85       	ldd	r25, Y+10	; 0x0a
    467a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	9e 83       	std	Y+6, r25	; 0x06
    4684:	8d 83       	std	Y+5, r24	; 0x05
    4686:	8d 81       	ldd	r24, Y+5	; 0x05
    4688:	9e 81       	ldd	r25, Y+6	; 0x06
    468a:	9a 83       	std	Y+2, r25	; 0x02
    468c:	89 83       	std	Y+1, r24	; 0x01
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	9a 81       	ldd	r25, Y+2	; 0x02
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <KEYPAD_getPressedKey+0x1b0>
    4696:	9a 83       	std	Y+2, r25	; 0x02
    4698:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    469a:	8f 85       	ldd	r24, Y+15	; 0x0f
    469c:	8f 5f       	subi	r24, 0xFF	; 255
    469e:	8f 87       	std	Y+15, r24	; 0x0f
    46a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a2:	84 30       	cpi	r24, 0x04	; 4
    46a4:	08 f4       	brcc	.+2      	; 0x46a8 <KEYPAD_getPressedKey+0x1c6>
    46a6:	51 cf       	rjmp	.-350    	; 0x454a <KEYPAD_getPressedKey+0x68>
    46a8:	4e cf       	rjmp	.-356    	; 0x4546 <KEYPAD_getPressedKey+0x64>

000046aa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    46aa:	df 93       	push	r29
    46ac:	cf 93       	push	r28
    46ae:	00 d0       	rcall	.+0      	; 0x46b0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    46b0:	00 d0       	rcall	.+0      	; 0x46b2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    46b8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    46ba:	8a 81       	ldd	r24, Y+2	; 0x02
    46bc:	28 2f       	mov	r18, r24
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	3c 83       	std	Y+4, r19	; 0x04
    46c2:	2b 83       	std	Y+3, r18	; 0x03
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	9c 81       	ldd	r25, Y+4	; 0x04
    46c8:	88 30       	cpi	r24, 0x08	; 8
    46ca:	91 05       	cpc	r25, r1
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    46ce:	70 c0       	rjmp	.+224    	; 0x47b0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    46d0:	2b 81       	ldd	r18, Y+3	; 0x03
    46d2:	3c 81       	ldd	r19, Y+4	; 0x04
    46d4:	29 30       	cpi	r18, 0x09	; 9
    46d6:	31 05       	cpc	r19, r1
    46d8:	5c f5       	brge	.+86     	; 0x4730 <KEYPAD_4x4_adjustKeyNumber+0x86>
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	9c 81       	ldd	r25, Y+4	; 0x04
    46de:	84 30       	cpi	r24, 0x04	; 4
    46e0:	91 05       	cpc	r25, r1
    46e2:	09 f4       	brne	.+2      	; 0x46e6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    46e4:	59 c0       	rjmp	.+178    	; 0x4798 <KEYPAD_4x4_adjustKeyNumber+0xee>
    46e6:	2b 81       	ldd	r18, Y+3	; 0x03
    46e8:	3c 81       	ldd	r19, Y+4	; 0x04
    46ea:	25 30       	cpi	r18, 0x05	; 5
    46ec:	31 05       	cpc	r19, r1
    46ee:	9c f4       	brge	.+38     	; 0x4716 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    46f0:	8b 81       	ldd	r24, Y+3	; 0x03
    46f2:	9c 81       	ldd	r25, Y+4	; 0x04
    46f4:	82 30       	cpi	r24, 0x02	; 2
    46f6:	91 05       	cpc	r25, r1
    46f8:	09 f4       	brne	.+2      	; 0x46fc <KEYPAD_4x4_adjustKeyNumber+0x52>
    46fa:	48 c0       	rjmp	.+144    	; 0x478c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    46fc:	2b 81       	ldd	r18, Y+3	; 0x03
    46fe:	3c 81       	ldd	r19, Y+4	; 0x04
    4700:	23 30       	cpi	r18, 0x03	; 3
    4702:	31 05       	cpc	r19, r1
    4704:	0c f0       	brlt	.+2      	; 0x4708 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    4706:	45 c0       	rjmp	.+138    	; 0x4792 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    4708:	8b 81       	ldd	r24, Y+3	; 0x03
    470a:	9c 81       	ldd	r25, Y+4	; 0x04
    470c:	81 30       	cpi	r24, 0x01	; 1
    470e:	91 05       	cpc	r25, r1
    4710:	09 f4       	brne	.+2      	; 0x4714 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    4712:	39 c0       	rjmp	.+114    	; 0x4786 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    4714:	67 c0       	rjmp	.+206    	; 0x47e4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    4716:	2b 81       	ldd	r18, Y+3	; 0x03
    4718:	3c 81       	ldd	r19, Y+4	; 0x04
    471a:	26 30       	cpi	r18, 0x06	; 6
    471c:	31 05       	cpc	r19, r1
    471e:	09 f4       	brne	.+2      	; 0x4722 <KEYPAD_4x4_adjustKeyNumber+0x78>
    4720:	41 c0       	rjmp	.+130    	; 0x47a4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    4722:	8b 81       	ldd	r24, Y+3	; 0x03
    4724:	9c 81       	ldd	r25, Y+4	; 0x04
    4726:	87 30       	cpi	r24, 0x07	; 7
    4728:	91 05       	cpc	r25, r1
    472a:	0c f0       	brlt	.+2      	; 0x472e <KEYPAD_4x4_adjustKeyNumber+0x84>
    472c:	3e c0       	rjmp	.+124    	; 0x47aa <KEYPAD_4x4_adjustKeyNumber+0x100>
    472e:	37 c0       	rjmp	.+110    	; 0x479e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    4730:	2b 81       	ldd	r18, Y+3	; 0x03
    4732:	3c 81       	ldd	r19, Y+4	; 0x04
    4734:	2c 30       	cpi	r18, 0x0C	; 12
    4736:	31 05       	cpc	r19, r1
    4738:	09 f4       	brne	.+2      	; 0x473c <KEYPAD_4x4_adjustKeyNumber+0x92>
    473a:	46 c0       	rjmp	.+140    	; 0x47c8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    473c:	8b 81       	ldd	r24, Y+3	; 0x03
    473e:	9c 81       	ldd	r25, Y+4	; 0x04
    4740:	8d 30       	cpi	r24, 0x0D	; 13
    4742:	91 05       	cpc	r25, r1
    4744:	5c f4       	brge	.+22     	; 0x475c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    4746:	2b 81       	ldd	r18, Y+3	; 0x03
    4748:	3c 81       	ldd	r19, Y+4	; 0x04
    474a:	2a 30       	cpi	r18, 0x0A	; 10
    474c:	31 05       	cpc	r19, r1
    474e:	b1 f1       	breq	.+108    	; 0x47bc <KEYPAD_4x4_adjustKeyNumber+0x112>
    4750:	8b 81       	ldd	r24, Y+3	; 0x03
    4752:	9c 81       	ldd	r25, Y+4	; 0x04
    4754:	8b 30       	cpi	r24, 0x0B	; 11
    4756:	91 05       	cpc	r25, r1
    4758:	a4 f5       	brge	.+104    	; 0x47c2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    475a:	2d c0       	rjmp	.+90     	; 0x47b6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    475c:	2b 81       	ldd	r18, Y+3	; 0x03
    475e:	3c 81       	ldd	r19, Y+4	; 0x04
    4760:	2e 30       	cpi	r18, 0x0E	; 14
    4762:	31 05       	cpc	r19, r1
    4764:	b9 f1       	breq	.+110    	; 0x47d4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    4766:	8b 81       	ldd	r24, Y+3	; 0x03
    4768:	9c 81       	ldd	r25, Y+4	; 0x04
    476a:	8e 30       	cpi	r24, 0x0E	; 14
    476c:	91 05       	cpc	r25, r1
    476e:	7c f1       	brlt	.+94     	; 0x47ce <KEYPAD_4x4_adjustKeyNumber+0x124>
    4770:	2b 81       	ldd	r18, Y+3	; 0x03
    4772:	3c 81       	ldd	r19, Y+4	; 0x04
    4774:	2f 30       	cpi	r18, 0x0F	; 15
    4776:	31 05       	cpc	r19, r1
    4778:	79 f1       	breq	.+94     	; 0x47d8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    477a:	8b 81       	ldd	r24, Y+3	; 0x03
    477c:	9c 81       	ldd	r25, Y+4	; 0x04
    477e:	80 31       	cpi	r24, 0x10	; 16
    4780:	91 05       	cpc	r25, r1
    4782:	69 f1       	breq	.+90     	; 0x47de <KEYPAD_4x4_adjustKeyNumber+0x134>
    4784:	2f c0       	rjmp	.+94     	; 0x47e4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    4786:	87 e0       	ldi	r24, 0x07	; 7
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	2e c0       	rjmp	.+92     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    478c:	88 e0       	ldi	r24, 0x08	; 8
    478e:	89 83       	std	Y+1, r24	; 0x01
    4790:	2b c0       	rjmp	.+86     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    4792:	89 e0       	ldi	r24, 0x09	; 9
    4794:	89 83       	std	Y+1, r24	; 0x01
    4796:	28 c0       	rjmp	.+80     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    4798:	8f e2       	ldi	r24, 0x2F	; 47
    479a:	89 83       	std	Y+1, r24	; 0x01
    479c:	25 c0       	rjmp	.+74     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    479e:	84 e0       	ldi	r24, 0x04	; 4
    47a0:	89 83       	std	Y+1, r24	; 0x01
    47a2:	22 c0       	rjmp	.+68     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    47a4:	85 e0       	ldi	r24, 0x05	; 5
    47a6:	89 83       	std	Y+1, r24	; 0x01
    47a8:	1f c0       	rjmp	.+62     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    47aa:	86 e0       	ldi	r24, 0x06	; 6
    47ac:	89 83       	std	Y+1, r24	; 0x01
    47ae:	1c c0       	rjmp	.+56     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    47b0:	8a e2       	ldi	r24, 0x2A	; 42
    47b2:	89 83       	std	Y+1, r24	; 0x01
    47b4:	19 c0       	rjmp	.+50     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	89 83       	std	Y+1, r24	; 0x01
    47ba:	16 c0       	rjmp	.+44     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    47bc:	82 e0       	ldi	r24, 0x02	; 2
    47be:	89 83       	std	Y+1, r24	; 0x01
    47c0:	13 c0       	rjmp	.+38     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    47c2:	83 e0       	ldi	r24, 0x03	; 3
    47c4:	89 83       	std	Y+1, r24	; 0x01
    47c6:	10 c0       	rjmp	.+32     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    47c8:	8d e2       	ldi	r24, 0x2D	; 45
    47ca:	89 83       	std	Y+1, r24	; 0x01
    47cc:	0d c0       	rjmp	.+26     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    47ce:	8d e0       	ldi	r24, 0x0D	; 13
    47d0:	89 83       	std	Y+1, r24	; 0x01
    47d2:	0a c0       	rjmp	.+20     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    47d4:	19 82       	std	Y+1, r1	; 0x01
    47d6:	08 c0       	rjmp	.+16     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    47d8:	8d e3       	ldi	r24, 0x3D	; 61
    47da:	89 83       	std	Y+1, r24	; 0x01
    47dc:	05 c0       	rjmp	.+10     	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    47de:	8b e2       	ldi	r24, 0x2B	; 43
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	cf 91       	pop	r28
    47f4:	df 91       	pop	r29
    47f6:	08 95       	ret

000047f8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    47f8:	df 93       	push	r29
    47fa:	cf 93       	push	r28
    47fc:	cd b7       	in	r28, 0x3d	; 61
    47fe:	de b7       	in	r29, 0x3e	; 62
    4800:	2e 97       	sbiw	r28, 0x0e	; 14
    4802:	0f b6       	in	r0, 0x3f	; 63
    4804:	f8 94       	cli
    4806:	de bf       	out	0x3e, r29	; 62
    4808:	0f be       	out	0x3f, r0	; 63
    480a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    480c:	83 e0       	ldi	r24, 0x03	; 3
    480e:	62 e0       	ldi	r22, 0x02	; 2
    4810:	41 e0       	ldi	r20, 0x01	; 1
    4812:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    4816:	83 e0       	ldi	r24, 0x03	; 3
    4818:	63 e0       	ldi	r22, 0x03	; 3
    481a:	41 e0       	ldi	r20, 0x01	; 1
    481c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <GPIO_setupPinDirection>
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	a0 ea       	ldi	r26, 0xA0	; 160
    4826:	b1 e4       	ldi	r27, 0x41	; 65
    4828:	8b 87       	std	Y+11, r24	; 0x0b
    482a:	9c 87       	std	Y+12, r25	; 0x0c
    482c:	ad 87       	std	Y+13, r26	; 0x0d
    482e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4830:	6b 85       	ldd	r22, Y+11	; 0x0b
    4832:	7c 85       	ldd	r23, Y+12	; 0x0c
    4834:	8d 85       	ldd	r24, Y+13	; 0x0d
    4836:	9e 85       	ldd	r25, Y+14	; 0x0e
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	4a ef       	ldi	r20, 0xFA	; 250
    483e:	54 e4       	ldi	r21, 0x44	; 68
    4840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	8f 83       	std	Y+7, r24	; 0x07
    484a:	98 87       	std	Y+8, r25	; 0x08
    484c:	a9 87       	std	Y+9, r26	; 0x09
    484e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4850:	6f 81       	ldd	r22, Y+7	; 0x07
    4852:	78 85       	ldd	r23, Y+8	; 0x08
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e8       	ldi	r20, 0x80	; 128
    485e:	5f e3       	ldi	r21, 0x3F	; 63
    4860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4864:	88 23       	and	r24, r24
    4866:	2c f4       	brge	.+10     	; 0x4872 <LCD_init+0x7a>
		__ticks = 1;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	9e 83       	std	Y+6, r25	; 0x06
    486e:	8d 83       	std	Y+5, r24	; 0x05
    4870:	3f c0       	rjmp	.+126    	; 0x48f0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    4872:	6f 81       	ldd	r22, Y+7	; 0x07
    4874:	78 85       	ldd	r23, Y+8	; 0x08
    4876:	89 85       	ldd	r24, Y+9	; 0x09
    4878:	9a 85       	ldd	r25, Y+10	; 0x0a
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	3f ef       	ldi	r19, 0xFF	; 255
    487e:	4f e7       	ldi	r20, 0x7F	; 127
    4880:	57 e4       	ldi	r21, 0x47	; 71
    4882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4886:	18 16       	cp	r1, r24
    4888:	4c f5       	brge	.+82     	; 0x48dc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    488a:	6b 85       	ldd	r22, Y+11	; 0x0b
    488c:	7c 85       	ldd	r23, Y+12	; 0x0c
    488e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4890:	9e 85       	ldd	r25, Y+14	; 0x0e
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	40 e2       	ldi	r20, 0x20	; 32
    4898:	51 e4       	ldi	r21, 0x41	; 65
    489a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	bc 01       	movw	r22, r24
    48a4:	cd 01       	movw	r24, r26
    48a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	9e 83       	std	Y+6, r25	; 0x06
    48b0:	8d 83       	std	Y+5, r24	; 0x05
    48b2:	0f c0       	rjmp	.+30     	; 0x48d2 <LCD_init+0xda>
    48b4:	88 ec       	ldi	r24, 0xC8	; 200
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	9c 83       	std	Y+4, r25	; 0x04
    48ba:	8b 83       	std	Y+3, r24	; 0x03
    48bc:	8b 81       	ldd	r24, Y+3	; 0x03
    48be:	9c 81       	ldd	r25, Y+4	; 0x04
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	f1 f7       	brne	.-4      	; 0x48c0 <LCD_init+0xc8>
    48c4:	9c 83       	std	Y+4, r25	; 0x04
    48c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ca:	9e 81       	ldd	r25, Y+6	; 0x06
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	9e 83       	std	Y+6, r25	; 0x06
    48d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d2:	8d 81       	ldd	r24, Y+5	; 0x05
    48d4:	9e 81       	ldd	r25, Y+6	; 0x06
    48d6:	00 97       	sbiw	r24, 0x00	; 0
    48d8:	69 f7       	brne	.-38     	; 0x48b4 <LCD_init+0xbc>
    48da:	14 c0       	rjmp	.+40     	; 0x4904 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48dc:	6f 81       	ldd	r22, Y+7	; 0x07
    48de:	78 85       	ldd	r23, Y+8	; 0x08
    48e0:	89 85       	ldd	r24, Y+9	; 0x09
    48e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	9e 83       	std	Y+6, r25	; 0x06
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	8d 81       	ldd	r24, Y+5	; 0x05
    48f2:	9e 81       	ldd	r25, Y+6	; 0x06
    48f4:	9a 83       	std	Y+2, r25	; 0x02
    48f6:	89 83       	std	Y+1, r24	; 0x01
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	01 97       	sbiw	r24, 0x01	; 1
    48fe:	f1 f7       	brne	.-4      	; 0x48fc <LCD_init+0x104>
    4900:	9a 83       	std	Y+2, r25	; 0x02
    4902:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    4904:	82 e0       	ldi	r24, 0x02	; 2
    4906:	6f ef       	ldi	r22, 0xFF	; 255
    4908:	0e 94 a4 21 	call	0x4348	; 0x4348 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    490c:	88 e3       	ldi	r24, 0x38	; 56
    490e:	0e 94 98 24 	call	0x4930	; 0x4930 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    4912:	8c e0       	ldi	r24, 0x0C	; 12
    4914:	0e 94 98 24 	call	0x4930	; 0x4930 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    4918:	81 e0       	ldi	r24, 0x01	; 1
    491a:	0e 94 98 24 	call	0x4930	; 0x4930 <LCD_sendCommand>
}
    491e:	2e 96       	adiw	r28, 0x0e	; 14
    4920:	0f b6       	in	r0, 0x3f	; 63
    4922:	f8 94       	cli
    4924:	de bf       	out	0x3e, r29	; 62
    4926:	0f be       	out	0x3f, r0	; 63
    4928:	cd bf       	out	0x3d, r28	; 61
    492a:	cf 91       	pop	r28
    492c:	df 91       	pop	r29
    492e:	08 95       	ret

00004930 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    4930:	df 93       	push	r29
    4932:	cf 93       	push	r28
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	e9 97       	sbiw	r28, 0x39	; 57
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	f8 94       	cli
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	cd bf       	out	0x3d, r28	; 61
    4944:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    4946:	83 e0       	ldi	r24, 0x03	; 3
    4948:	62 e0       	ldi	r22, 0x02	; 2
    494a:	40 e0       	ldi	r20, 0x00	; 0
    494c:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	a0 e8       	ldi	r26, 0x80	; 128
    4956:	bf e3       	ldi	r27, 0x3F	; 63
    4958:	8d ab       	std	Y+53, r24	; 0x35
    495a:	9e ab       	std	Y+54, r25	; 0x36
    495c:	af ab       	std	Y+55, r26	; 0x37
    495e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4960:	6d a9       	ldd	r22, Y+53	; 0x35
    4962:	7e a9       	ldd	r23, Y+54	; 0x36
    4964:	8f a9       	ldd	r24, Y+55	; 0x37
    4966:	98 ad       	ldd	r25, Y+56	; 0x38
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	4a ef       	ldi	r20, 0xFA	; 250
    496e:	54 e4       	ldi	r21, 0x44	; 68
    4970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4974:	dc 01       	movw	r26, r24
    4976:	cb 01       	movw	r24, r22
    4978:	89 ab       	std	Y+49, r24	; 0x31
    497a:	9a ab       	std	Y+50, r25	; 0x32
    497c:	ab ab       	std	Y+51, r26	; 0x33
    497e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4980:	69 a9       	ldd	r22, Y+49	; 0x31
    4982:	7a a9       	ldd	r23, Y+50	; 0x32
    4984:	8b a9       	ldd	r24, Y+51	; 0x33
    4986:	9c a9       	ldd	r25, Y+52	; 0x34
    4988:	20 e0       	ldi	r18, 0x00	; 0
    498a:	30 e0       	ldi	r19, 0x00	; 0
    498c:	40 e8       	ldi	r20, 0x80	; 128
    498e:	5f e3       	ldi	r21, 0x3F	; 63
    4990:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4994:	88 23       	and	r24, r24
    4996:	2c f4       	brge	.+10     	; 0x49a2 <LCD_sendCommand+0x72>
		__ticks = 1;
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	98 ab       	std	Y+48, r25	; 0x30
    499e:	8f a7       	std	Y+47, r24	; 0x2f
    49a0:	3f c0       	rjmp	.+126    	; 0x4a20 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    49a2:	69 a9       	ldd	r22, Y+49	; 0x31
    49a4:	7a a9       	ldd	r23, Y+50	; 0x32
    49a6:	8b a9       	ldd	r24, Y+51	; 0x33
    49a8:	9c a9       	ldd	r25, Y+52	; 0x34
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	3f ef       	ldi	r19, 0xFF	; 255
    49ae:	4f e7       	ldi	r20, 0x7F	; 127
    49b0:	57 e4       	ldi	r21, 0x47	; 71
    49b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49b6:	18 16       	cp	r1, r24
    49b8:	4c f5       	brge	.+82     	; 0x4a0c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ba:	6d a9       	ldd	r22, Y+53	; 0x35
    49bc:	7e a9       	ldd	r23, Y+54	; 0x36
    49be:	8f a9       	ldd	r24, Y+55	; 0x37
    49c0:	98 ad       	ldd	r25, Y+56	; 0x38
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	40 e2       	ldi	r20, 0x20	; 32
    49c8:	51 e4       	ldi	r21, 0x41	; 65
    49ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	bc 01       	movw	r22, r24
    49d4:	cd 01       	movw	r24, r26
    49d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	98 ab       	std	Y+48, r25	; 0x30
    49e0:	8f a7       	std	Y+47, r24	; 0x2f
    49e2:	0f c0       	rjmp	.+30     	; 0x4a02 <LCD_sendCommand+0xd2>
    49e4:	88 ec       	ldi	r24, 0xC8	; 200
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	9e a7       	std	Y+46, r25	; 0x2e
    49ea:	8d a7       	std	Y+45, r24	; 0x2d
    49ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    49ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    49f0:	01 97       	sbiw	r24, 0x01	; 1
    49f2:	f1 f7       	brne	.-4      	; 0x49f0 <LCD_sendCommand+0xc0>
    49f4:	9e a7       	std	Y+46, r25	; 0x2e
    49f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    49fa:	98 a9       	ldd	r25, Y+48	; 0x30
    49fc:	01 97       	sbiw	r24, 0x01	; 1
    49fe:	98 ab       	std	Y+48, r25	; 0x30
    4a00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a02:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a04:	98 a9       	ldd	r25, Y+48	; 0x30
    4a06:	00 97       	sbiw	r24, 0x00	; 0
    4a08:	69 f7       	brne	.-38     	; 0x49e4 <LCD_sendCommand+0xb4>
    4a0a:	14 c0       	rjmp	.+40     	; 0x4a34 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a0c:	69 a9       	ldd	r22, Y+49	; 0x31
    4a0e:	7a a9       	ldd	r23, Y+50	; 0x32
    4a10:	8b a9       	ldd	r24, Y+51	; 0x33
    4a12:	9c a9       	ldd	r25, Y+52	; 0x34
    4a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a18:	dc 01       	movw	r26, r24
    4a1a:	cb 01       	movw	r24, r22
    4a1c:	98 ab       	std	Y+48, r25	; 0x30
    4a1e:	8f a7       	std	Y+47, r24	; 0x2f
    4a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a22:	98 a9       	ldd	r25, Y+48	; 0x30
    4a24:	9c a7       	std	Y+44, r25	; 0x2c
    4a26:	8b a7       	std	Y+43, r24	; 0x2b
    4a28:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a2c:	01 97       	sbiw	r24, 0x01	; 1
    4a2e:	f1 f7       	brne	.-4      	; 0x4a2c <LCD_sendCommand+0xfc>
    4a30:	9c a7       	std	Y+44, r25	; 0x2c
    4a32:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    4a34:	83 e0       	ldi	r24, 0x03	; 3
    4a36:	63 e0       	ldi	r22, 0x03	; 3
    4a38:	41 e0       	ldi	r20, 0x01	; 1
    4a3a:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	a0 e8       	ldi	r26, 0x80	; 128
    4a44:	bf e3       	ldi	r27, 0x3F	; 63
    4a46:	8f a3       	std	Y+39, r24	; 0x27
    4a48:	98 a7       	std	Y+40, r25	; 0x28
    4a4a:	a9 a7       	std	Y+41, r26	; 0x29
    4a4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a4e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a50:	78 a5       	ldd	r23, Y+40	; 0x28
    4a52:	89 a5       	ldd	r24, Y+41	; 0x29
    4a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	4a ef       	ldi	r20, 0xFA	; 250
    4a5c:	54 e4       	ldi	r21, 0x44	; 68
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	8b a3       	std	Y+35, r24	; 0x23
    4a68:	9c a3       	std	Y+36, r25	; 0x24
    4a6a:	ad a3       	std	Y+37, r26	; 0x25
    4a6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    4a70:	7c a1       	ldd	r23, Y+36	; 0x24
    4a72:	8d a1       	ldd	r24, Y+37	; 0x25
    4a74:	9e a1       	ldd	r25, Y+38	; 0x26
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e8       	ldi	r20, 0x80	; 128
    4a7c:	5f e3       	ldi	r21, 0x3F	; 63
    4a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	2c f4       	brge	.+10     	; 0x4a90 <LCD_sendCommand+0x160>
		__ticks = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	9a a3       	std	Y+34, r25	; 0x22
    4a8c:	89 a3       	std	Y+33, r24	; 0x21
    4a8e:	3f c0       	rjmp	.+126    	; 0x4b0e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    4a90:	6b a1       	ldd	r22, Y+35	; 0x23
    4a92:	7c a1       	ldd	r23, Y+36	; 0x24
    4a94:	8d a1       	ldd	r24, Y+37	; 0x25
    4a96:	9e a1       	ldd	r25, Y+38	; 0x26
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	3f ef       	ldi	r19, 0xFF	; 255
    4a9c:	4f e7       	ldi	r20, 0x7F	; 127
    4a9e:	57 e4       	ldi	r21, 0x47	; 71
    4aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa4:	18 16       	cp	r1, r24
    4aa6:	4c f5       	brge	.+82     	; 0x4afa <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    4aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    4aac:	89 a5       	ldd	r24, Y+41	; 0x29
    4aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	40 e2       	ldi	r20, 0x20	; 32
    4ab6:	51 e4       	ldi	r21, 0x41	; 65
    4ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	cd 01       	movw	r24, r26
    4ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	9a a3       	std	Y+34, r25	; 0x22
    4ace:	89 a3       	std	Y+33, r24	; 0x21
    4ad0:	0f c0       	rjmp	.+30     	; 0x4af0 <LCD_sendCommand+0x1c0>
    4ad2:	88 ec       	ldi	r24, 0xC8	; 200
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	98 a3       	std	Y+32, r25	; 0x20
    4ad8:	8f 8f       	std	Y+31, r24	; 0x1f
    4ada:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4adc:	98 a1       	ldd	r25, Y+32	; 0x20
    4ade:	01 97       	sbiw	r24, 0x01	; 1
    4ae0:	f1 f7       	brne	.-4      	; 0x4ade <LCD_sendCommand+0x1ae>
    4ae2:	98 a3       	std	Y+32, r25	; 0x20
    4ae4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    4aea:	01 97       	sbiw	r24, 0x01	; 1
    4aec:	9a a3       	std	Y+34, r25	; 0x22
    4aee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af0:	89 a1       	ldd	r24, Y+33	; 0x21
    4af2:	9a a1       	ldd	r25, Y+34	; 0x22
    4af4:	00 97       	sbiw	r24, 0x00	; 0
    4af6:	69 f7       	brne	.-38     	; 0x4ad2 <LCD_sendCommand+0x1a2>
    4af8:	14 c0       	rjmp	.+40     	; 0x4b22 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afa:	6b a1       	ldd	r22, Y+35	; 0x23
    4afc:	7c a1       	ldd	r23, Y+36	; 0x24
    4afe:	8d a1       	ldd	r24, Y+37	; 0x25
    4b00:	9e a1       	ldd	r25, Y+38	; 0x26
    4b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	9a a3       	std	Y+34, r25	; 0x22
    4b0c:	89 a3       	std	Y+33, r24	; 0x21
    4b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b10:	9a a1       	ldd	r25, Y+34	; 0x22
    4b12:	9e 8f       	std	Y+30, r25	; 0x1e
    4b14:	8d 8f       	std	Y+29, r24	; 0x1d
    4b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <LCD_sendCommand+0x1ea>
    4b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    4b20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    4b22:	82 e0       	ldi	r24, 0x02	; 2
    4b24:	69 ad       	ldd	r22, Y+57	; 0x39
    4b26:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <GPIO_writePort>
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	a0 e8       	ldi	r26, 0x80	; 128
    4b30:	bf e3       	ldi	r27, 0x3F	; 63
    4b32:	89 8f       	std	Y+25, r24	; 0x19
    4b34:	9a 8f       	std	Y+26, r25	; 0x1a
    4b36:	ab 8f       	std	Y+27, r26	; 0x1b
    4b38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    4b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	4a ef       	ldi	r20, 0xFA	; 250
    4b48:	54 e4       	ldi	r21, 0x44	; 68
    4b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	8d 8b       	std	Y+21, r24	; 0x15
    4b54:	9e 8b       	std	Y+22, r25	; 0x16
    4b56:	af 8b       	std	Y+23, r26	; 0x17
    4b58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b60:	98 8d       	ldd	r25, Y+24	; 0x18
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e8       	ldi	r20, 0x80	; 128
    4b68:	5f e3       	ldi	r21, 0x3F	; 63
    4b6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b6e:	88 23       	and	r24, r24
    4b70:	2c f4       	brge	.+10     	; 0x4b7c <LCD_sendCommand+0x24c>
		__ticks = 1;
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	9c 8b       	std	Y+20, r25	; 0x14
    4b78:	8b 8b       	std	Y+19, r24	; 0x13
    4b7a:	3f c0       	rjmp	.+126    	; 0x4bfa <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    4b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    4b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    4b80:	8f 89       	ldd	r24, Y+23	; 0x17
    4b82:	98 8d       	ldd	r25, Y+24	; 0x18
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	3f ef       	ldi	r19, 0xFF	; 255
    4b88:	4f e7       	ldi	r20, 0x7F	; 127
    4b8a:	57 e4       	ldi	r21, 0x47	; 71
    4b8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b90:	18 16       	cp	r1, r24
    4b92:	4c f5       	brge	.+82     	; 0x4be6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b94:	69 8d       	ldd	r22, Y+25	; 0x19
    4b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	40 e2       	ldi	r20, 0x20	; 32
    4ba2:	51 e4       	ldi	r21, 0x41	; 65
    4ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	9c 8b       	std	Y+20, r25	; 0x14
    4bba:	8b 8b       	std	Y+19, r24	; 0x13
    4bbc:	0f c0       	rjmp	.+30     	; 0x4bdc <LCD_sendCommand+0x2ac>
    4bbe:	88 ec       	ldi	r24, 0xC8	; 200
    4bc0:	90 e0       	ldi	r25, 0x00	; 0
    4bc2:	9a 8b       	std	Y+18, r25	; 0x12
    4bc4:	89 8b       	std	Y+17, r24	; 0x11
    4bc6:	89 89       	ldd	r24, Y+17	; 0x11
    4bc8:	9a 89       	ldd	r25, Y+18	; 0x12
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <LCD_sendCommand+0x29a>
    4bce:	9a 8b       	std	Y+18, r25	; 0x12
    4bd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bd6:	01 97       	sbiw	r24, 0x01	; 1
    4bd8:	9c 8b       	std	Y+20, r25	; 0x14
    4bda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bde:	9c 89       	ldd	r25, Y+20	; 0x14
    4be0:	00 97       	sbiw	r24, 0x00	; 0
    4be2:	69 f7       	brne	.-38     	; 0x4bbe <LCD_sendCommand+0x28e>
    4be4:	14 c0       	rjmp	.+40     	; 0x4c0e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4be6:	6d 89       	ldd	r22, Y+21	; 0x15
    4be8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bea:	8f 89       	ldd	r24, Y+23	; 0x17
    4bec:	98 8d       	ldd	r25, Y+24	; 0x18
    4bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	9c 8b       	std	Y+20, r25	; 0x14
    4bf8:	8b 8b       	std	Y+19, r24	; 0x13
    4bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfe:	98 8b       	std	Y+16, r25	; 0x10
    4c00:	8f 87       	std	Y+15, r24	; 0x0f
    4c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c04:	98 89       	ldd	r25, Y+16	; 0x10
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <LCD_sendCommand+0x2d6>
    4c0a:	98 8b       	std	Y+16, r25	; 0x10
    4c0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4c0e:	83 e0       	ldi	r24, 0x03	; 3
    4c10:	63 e0       	ldi	r22, 0x03	; 3
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	a0 e8       	ldi	r26, 0x80	; 128
    4c1e:	bf e3       	ldi	r27, 0x3F	; 63
    4c20:	8b 87       	std	Y+11, r24	; 0x0b
    4c22:	9c 87       	std	Y+12, r25	; 0x0c
    4c24:	ad 87       	std	Y+13, r26	; 0x0d
    4c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	4a ef       	ldi	r20, 0xFA	; 250
    4c36:	54 e4       	ldi	r21, 0x44	; 68
    4c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	cb 01       	movw	r24, r22
    4c40:	8f 83       	std	Y+7, r24	; 0x07
    4c42:	98 87       	std	Y+8, r25	; 0x08
    4c44:	a9 87       	std	Y+9, r26	; 0x09
    4c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c48:	6f 81       	ldd	r22, Y+7	; 0x07
    4c4a:	78 85       	ldd	r23, Y+8	; 0x08
    4c4c:	89 85       	ldd	r24, Y+9	; 0x09
    4c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c50:	20 e0       	ldi	r18, 0x00	; 0
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	40 e8       	ldi	r20, 0x80	; 128
    4c56:	5f e3       	ldi	r21, 0x3F	; 63
    4c58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c5c:	88 23       	and	r24, r24
    4c5e:	2c f4       	brge	.+10     	; 0x4c6a <LCD_sendCommand+0x33a>
		__ticks = 1;
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	9e 83       	std	Y+6, r25	; 0x06
    4c66:	8d 83       	std	Y+5, r24	; 0x05
    4c68:	3f c0       	rjmp	.+126    	; 0x4ce8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    4c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c6c:	78 85       	ldd	r23, Y+8	; 0x08
    4c6e:	89 85       	ldd	r24, Y+9	; 0x09
    4c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	3f ef       	ldi	r19, 0xFF	; 255
    4c76:	4f e7       	ldi	r20, 0x7F	; 127
    4c78:	57 e4       	ldi	r21, 0x47	; 71
    4c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c7e:	18 16       	cp	r1, r24
    4c80:	4c f5       	brge	.+82     	; 0x4cd4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c8a:	20 e0       	ldi	r18, 0x00	; 0
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	40 e2       	ldi	r20, 0x20	; 32
    4c90:	51 e4       	ldi	r21, 0x41	; 65
    4c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	bc 01       	movw	r22, r24
    4c9c:	cd 01       	movw	r24, r26
    4c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	9e 83       	std	Y+6, r25	; 0x06
    4ca8:	8d 83       	std	Y+5, r24	; 0x05
    4caa:	0f c0       	rjmp	.+30     	; 0x4cca <LCD_sendCommand+0x39a>
    4cac:	88 ec       	ldi	r24, 0xC8	; 200
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	9c 83       	std	Y+4, r25	; 0x04
    4cb2:	8b 83       	std	Y+3, r24	; 0x03
    4cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	f1 f7       	brne	.-4      	; 0x4cb8 <LCD_sendCommand+0x388>
    4cbc:	9c 83       	std	Y+4, r25	; 0x04
    4cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc4:	01 97       	sbiw	r24, 0x01	; 1
    4cc6:	9e 83       	std	Y+6, r25	; 0x06
    4cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cca:	8d 81       	ldd	r24, Y+5	; 0x05
    4ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cce:	00 97       	sbiw	r24, 0x00	; 0
    4cd0:	69 f7       	brne	.-38     	; 0x4cac <LCD_sendCommand+0x37c>
    4cd2:	14 c0       	rjmp	.+40     	; 0x4cfc <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    4cd6:	78 85       	ldd	r23, Y+8	; 0x08
    4cd8:	89 85       	ldd	r24, Y+9	; 0x09
    4cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	9e 83       	std	Y+6, r25	; 0x06
    4ce6:	8d 83       	std	Y+5, r24	; 0x05
    4ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cea:	9e 81       	ldd	r25, Y+6	; 0x06
    4cec:	9a 83       	std	Y+2, r25	; 0x02
    4cee:	89 83       	std	Y+1, r24	; 0x01
    4cf0:	89 81       	ldd	r24, Y+1	; 0x01
    4cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf4:	01 97       	sbiw	r24, 0x01	; 1
    4cf6:	f1 f7       	brne	.-4      	; 0x4cf4 <LCD_sendCommand+0x3c4>
    4cf8:	9a 83       	std	Y+2, r25	; 0x02
    4cfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4cfc:	e9 96       	adiw	r28, 0x39	; 57
    4cfe:	0f b6       	in	r0, 0x3f	; 63
    4d00:	f8 94       	cli
    4d02:	de bf       	out	0x3e, r29	; 62
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	cd bf       	out	0x3d, r28	; 61
    4d08:	cf 91       	pop	r28
    4d0a:	df 91       	pop	r29
    4d0c:	08 95       	ret

00004d0e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    4d0e:	df 93       	push	r29
    4d10:	cf 93       	push	r28
    4d12:	cd b7       	in	r28, 0x3d	; 61
    4d14:	de b7       	in	r29, 0x3e	; 62
    4d16:	e9 97       	sbiw	r28, 0x39	; 57
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	de bf       	out	0x3e, r29	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    4d24:	83 e0       	ldi	r24, 0x03	; 3
    4d26:	62 e0       	ldi	r22, 0x02	; 2
    4d28:	41 e0       	ldi	r20, 0x01	; 1
    4d2a:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	a0 e8       	ldi	r26, 0x80	; 128
    4d34:	bf e3       	ldi	r27, 0x3F	; 63
    4d36:	8d ab       	std	Y+53, r24	; 0x35
    4d38:	9e ab       	std	Y+54, r25	; 0x36
    4d3a:	af ab       	std	Y+55, r26	; 0x37
    4d3c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d3e:	6d a9       	ldd	r22, Y+53	; 0x35
    4d40:	7e a9       	ldd	r23, Y+54	; 0x36
    4d42:	8f a9       	ldd	r24, Y+55	; 0x37
    4d44:	98 ad       	ldd	r25, Y+56	; 0x38
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	4a ef       	ldi	r20, 0xFA	; 250
    4d4c:	54 e4       	ldi	r21, 0x44	; 68
    4d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	89 ab       	std	Y+49, r24	; 0x31
    4d58:	9a ab       	std	Y+50, r25	; 0x32
    4d5a:	ab ab       	std	Y+51, r26	; 0x33
    4d5c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    4d60:	7a a9       	ldd	r23, Y+50	; 0x32
    4d62:	8b a9       	ldd	r24, Y+51	; 0x33
    4d64:	9c a9       	ldd	r25, Y+52	; 0x34
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e8       	ldi	r20, 0x80	; 128
    4d6c:	5f e3       	ldi	r21, 0x3F	; 63
    4d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d72:	88 23       	and	r24, r24
    4d74:	2c f4       	brge	.+10     	; 0x4d80 <LCD_displayCharacter+0x72>
		__ticks = 1;
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	98 ab       	std	Y+48, r25	; 0x30
    4d7c:	8f a7       	std	Y+47, r24	; 0x2f
    4d7e:	3f c0       	rjmp	.+126    	; 0x4dfe <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    4d80:	69 a9       	ldd	r22, Y+49	; 0x31
    4d82:	7a a9       	ldd	r23, Y+50	; 0x32
    4d84:	8b a9       	ldd	r24, Y+51	; 0x33
    4d86:	9c a9       	ldd	r25, Y+52	; 0x34
    4d88:	20 e0       	ldi	r18, 0x00	; 0
    4d8a:	3f ef       	ldi	r19, 0xFF	; 255
    4d8c:	4f e7       	ldi	r20, 0x7F	; 127
    4d8e:	57 e4       	ldi	r21, 0x47	; 71
    4d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d94:	18 16       	cp	r1, r24
    4d96:	4c f5       	brge	.+82     	; 0x4dea <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d98:	6d a9       	ldd	r22, Y+53	; 0x35
    4d9a:	7e a9       	ldd	r23, Y+54	; 0x36
    4d9c:	8f a9       	ldd	r24, Y+55	; 0x37
    4d9e:	98 ad       	ldd	r25, Y+56	; 0x38
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	40 e2       	ldi	r20, 0x20	; 32
    4da6:	51 e4       	ldi	r21, 0x41	; 65
    4da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	bc 01       	movw	r22, r24
    4db2:	cd 01       	movw	r24, r26
    4db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	98 ab       	std	Y+48, r25	; 0x30
    4dbe:	8f a7       	std	Y+47, r24	; 0x2f
    4dc0:	0f c0       	rjmp	.+30     	; 0x4de0 <LCD_displayCharacter+0xd2>
    4dc2:	88 ec       	ldi	r24, 0xC8	; 200
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	9e a7       	std	Y+46, r25	; 0x2e
    4dc8:	8d a7       	std	Y+45, r24	; 0x2d
    4dca:	8d a5       	ldd	r24, Y+45	; 0x2d
    4dcc:	9e a5       	ldd	r25, Y+46	; 0x2e
    4dce:	01 97       	sbiw	r24, 0x01	; 1
    4dd0:	f1 f7       	brne	.-4      	; 0x4dce <LCD_displayCharacter+0xc0>
    4dd2:	9e a7       	std	Y+46, r25	; 0x2e
    4dd4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    4dda:	01 97       	sbiw	r24, 0x01	; 1
    4ddc:	98 ab       	std	Y+48, r25	; 0x30
    4dde:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4de2:	98 a9       	ldd	r25, Y+48	; 0x30
    4de4:	00 97       	sbiw	r24, 0x00	; 0
    4de6:	69 f7       	brne	.-38     	; 0x4dc2 <LCD_displayCharacter+0xb4>
    4de8:	14 c0       	rjmp	.+40     	; 0x4e12 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dea:	69 a9       	ldd	r22, Y+49	; 0x31
    4dec:	7a a9       	ldd	r23, Y+50	; 0x32
    4dee:	8b a9       	ldd	r24, Y+51	; 0x33
    4df0:	9c a9       	ldd	r25, Y+52	; 0x34
    4df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	98 ab       	std	Y+48, r25	; 0x30
    4dfc:	8f a7       	std	Y+47, r24	; 0x2f
    4dfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e00:	98 a9       	ldd	r25, Y+48	; 0x30
    4e02:	9c a7       	std	Y+44, r25	; 0x2c
    4e04:	8b a7       	std	Y+43, r24	; 0x2b
    4e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e08:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e0a:	01 97       	sbiw	r24, 0x01	; 1
    4e0c:	f1 f7       	brne	.-4      	; 0x4e0a <LCD_displayCharacter+0xfc>
    4e0e:	9c a7       	std	Y+44, r25	; 0x2c
    4e10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    4e12:	83 e0       	ldi	r24, 0x03	; 3
    4e14:	63 e0       	ldi	r22, 0x03	; 3
    4e16:	41 e0       	ldi	r20, 0x01	; 1
    4e18:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	a0 e8       	ldi	r26, 0x80	; 128
    4e22:	bf e3       	ldi	r27, 0x3F	; 63
    4e24:	8f a3       	std	Y+39, r24	; 0x27
    4e26:	98 a7       	std	Y+40, r25	; 0x28
    4e28:	a9 a7       	std	Y+41, r26	; 0x29
    4e2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    4e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    4e30:	89 a5       	ldd	r24, Y+41	; 0x29
    4e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	4a ef       	ldi	r20, 0xFA	; 250
    4e3a:	54 e4       	ldi	r21, 0x44	; 68
    4e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e40:	dc 01       	movw	r26, r24
    4e42:	cb 01       	movw	r24, r22
    4e44:	8b a3       	std	Y+35, r24	; 0x23
    4e46:	9c a3       	std	Y+36, r25	; 0x24
    4e48:	ad a3       	std	Y+37, r26	; 0x25
    4e4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    4e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    4e50:	8d a1       	ldd	r24, Y+37	; 0x25
    4e52:	9e a1       	ldd	r25, Y+38	; 0x26
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	40 e8       	ldi	r20, 0x80	; 128
    4e5a:	5f e3       	ldi	r21, 0x3F	; 63
    4e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e60:	88 23       	and	r24, r24
    4e62:	2c f4       	brge	.+10     	; 0x4e6e <LCD_displayCharacter+0x160>
		__ticks = 1;
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	9a a3       	std	Y+34, r25	; 0x22
    4e6a:	89 a3       	std	Y+33, r24	; 0x21
    4e6c:	3f c0       	rjmp	.+126    	; 0x4eec <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    4e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    4e70:	7c a1       	ldd	r23, Y+36	; 0x24
    4e72:	8d a1       	ldd	r24, Y+37	; 0x25
    4e74:	9e a1       	ldd	r25, Y+38	; 0x26
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	3f ef       	ldi	r19, 0xFF	; 255
    4e7a:	4f e7       	ldi	r20, 0x7F	; 127
    4e7c:	57 e4       	ldi	r21, 0x47	; 71
    4e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e82:	18 16       	cp	r1, r24
    4e84:	4c f5       	brge	.+82     	; 0x4ed8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e86:	6f a1       	ldd	r22, Y+39	; 0x27
    4e88:	78 a5       	ldd	r23, Y+40	; 0x28
    4e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    4e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	40 e2       	ldi	r20, 0x20	; 32
    4e94:	51 e4       	ldi	r21, 0x41	; 65
    4e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	bc 01       	movw	r22, r24
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	9a a3       	std	Y+34, r25	; 0x22
    4eac:	89 a3       	std	Y+33, r24	; 0x21
    4eae:	0f c0       	rjmp	.+30     	; 0x4ece <LCD_displayCharacter+0x1c0>
    4eb0:	88 ec       	ldi	r24, 0xC8	; 200
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	98 a3       	std	Y+32, r25	; 0x20
    4eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    4eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4eba:	98 a1       	ldd	r25, Y+32	; 0x20
    4ebc:	01 97       	sbiw	r24, 0x01	; 1
    4ebe:	f1 f7       	brne	.-4      	; 0x4ebc <LCD_displayCharacter+0x1ae>
    4ec0:	98 a3       	std	Y+32, r25	; 0x20
    4ec2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec4:	89 a1       	ldd	r24, Y+33	; 0x21
    4ec6:	9a a1       	ldd	r25, Y+34	; 0x22
    4ec8:	01 97       	sbiw	r24, 0x01	; 1
    4eca:	9a a3       	std	Y+34, r25	; 0x22
    4ecc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ece:	89 a1       	ldd	r24, Y+33	; 0x21
    4ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ed2:	00 97       	sbiw	r24, 0x00	; 0
    4ed4:	69 f7       	brne	.-38     	; 0x4eb0 <LCD_displayCharacter+0x1a2>
    4ed6:	14 c0       	rjmp	.+40     	; 0x4f00 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    4eda:	7c a1       	ldd	r23, Y+36	; 0x24
    4edc:	8d a1       	ldd	r24, Y+37	; 0x25
    4ede:	9e a1       	ldd	r25, Y+38	; 0x26
    4ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee4:	dc 01       	movw	r26, r24
    4ee6:	cb 01       	movw	r24, r22
    4ee8:	9a a3       	std	Y+34, r25	; 0x22
    4eea:	89 a3       	std	Y+33, r24	; 0x21
    4eec:	89 a1       	ldd	r24, Y+33	; 0x21
    4eee:	9a a1       	ldd	r25, Y+34	; 0x22
    4ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    4ef2:	8d 8f       	std	Y+29, r24	; 0x1d
    4ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	f1 f7       	brne	.-4      	; 0x4ef8 <LCD_displayCharacter+0x1ea>
    4efc:	9e 8f       	std	Y+30, r25	; 0x1e
    4efe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    4f00:	82 e0       	ldi	r24, 0x02	; 2
    4f02:	69 ad       	ldd	r22, Y+57	; 0x39
    4f04:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <GPIO_writePort>
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	a0 e8       	ldi	r26, 0x80	; 128
    4f0e:	bf e3       	ldi	r27, 0x3F	; 63
    4f10:	89 8f       	std	Y+25, r24	; 0x19
    4f12:	9a 8f       	std	Y+26, r25	; 0x1a
    4f14:	ab 8f       	std	Y+27, r26	; 0x1b
    4f16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f18:	69 8d       	ldd	r22, Y+25	; 0x19
    4f1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	4a ef       	ldi	r20, 0xFA	; 250
    4f26:	54 e4       	ldi	r21, 0x44	; 68
    4f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	cb 01       	movw	r24, r22
    4f30:	8d 8b       	std	Y+21, r24	; 0x15
    4f32:	9e 8b       	std	Y+22, r25	; 0x16
    4f34:	af 8b       	std	Y+23, r26	; 0x17
    4f36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f38:	6d 89       	ldd	r22, Y+21	; 0x15
    4f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e8       	ldi	r20, 0x80	; 128
    4f46:	5f e3       	ldi	r21, 0x3F	; 63
    4f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f4c:	88 23       	and	r24, r24
    4f4e:	2c f4       	brge	.+10     	; 0x4f5a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	9c 8b       	std	Y+20, r25	; 0x14
    4f56:	8b 8b       	std	Y+19, r24	; 0x13
    4f58:	3f c0       	rjmp	.+126    	; 0x4fd8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    4f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f60:	98 8d       	ldd	r25, Y+24	; 0x18
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	3f ef       	ldi	r19, 0xFF	; 255
    4f66:	4f e7       	ldi	r20, 0x7F	; 127
    4f68:	57 e4       	ldi	r21, 0x47	; 71
    4f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f6e:	18 16       	cp	r1, r24
    4f70:	4c f5       	brge	.+82     	; 0x4fc4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f72:	69 8d       	ldd	r22, Y+25	; 0x19
    4f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e2       	ldi	r20, 0x20	; 32
    4f80:	51 e4       	ldi	r21, 0x41	; 65
    4f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	bc 01       	movw	r22, r24
    4f8c:	cd 01       	movw	r24, r26
    4f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	9c 8b       	std	Y+20, r25	; 0x14
    4f98:	8b 8b       	std	Y+19, r24	; 0x13
    4f9a:	0f c0       	rjmp	.+30     	; 0x4fba <LCD_displayCharacter+0x2ac>
    4f9c:	88 ec       	ldi	r24, 0xC8	; 200
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	9a 8b       	std	Y+18, r25	; 0x12
    4fa2:	89 8b       	std	Y+17, r24	; 0x11
    4fa4:	89 89       	ldd	r24, Y+17	; 0x11
    4fa6:	9a 89       	ldd	r25, Y+18	; 0x12
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	f1 f7       	brne	.-4      	; 0x4fa8 <LCD_displayCharacter+0x29a>
    4fac:	9a 8b       	std	Y+18, r25	; 0x12
    4fae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    4fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    4fb4:	01 97       	sbiw	r24, 0x01	; 1
    4fb6:	9c 8b       	std	Y+20, r25	; 0x14
    4fb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fba:	8b 89       	ldd	r24, Y+19	; 0x13
    4fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    4fbe:	00 97       	sbiw	r24, 0x00	; 0
    4fc0:	69 f7       	brne	.-38     	; 0x4f9c <LCD_displayCharacter+0x28e>
    4fc2:	14 c0       	rjmp	.+40     	; 0x4fec <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    4fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    4fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    4fca:	98 8d       	ldd	r25, Y+24	; 0x18
    4fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	9c 8b       	std	Y+20, r25	; 0x14
    4fd6:	8b 8b       	std	Y+19, r24	; 0x13
    4fd8:	8b 89       	ldd	r24, Y+19	; 0x13
    4fda:	9c 89       	ldd	r25, Y+20	; 0x14
    4fdc:	98 8b       	std	Y+16, r25	; 0x10
    4fde:	8f 87       	std	Y+15, r24	; 0x0f
    4fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fe2:	98 89       	ldd	r25, Y+16	; 0x10
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	f1 f7       	brne	.-4      	; 0x4fe4 <LCD_displayCharacter+0x2d6>
    4fe8:	98 8b       	std	Y+16, r25	; 0x10
    4fea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4fec:	83 e0       	ldi	r24, 0x03	; 3
    4fee:	63 e0       	ldi	r22, 0x03	; 3
    4ff0:	40 e0       	ldi	r20, 0x00	; 0
    4ff2:	0e 94 1e 20 	call	0x403c	; 0x403c <GPIO_writePin>
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	a0 e8       	ldi	r26, 0x80	; 128
    4ffc:	bf e3       	ldi	r27, 0x3F	; 63
    4ffe:	8b 87       	std	Y+11, r24	; 0x0b
    5000:	9c 87       	std	Y+12, r25	; 0x0c
    5002:	ad 87       	std	Y+13, r26	; 0x0d
    5004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5006:	6b 85       	ldd	r22, Y+11	; 0x0b
    5008:	7c 85       	ldd	r23, Y+12	; 0x0c
    500a:	8d 85       	ldd	r24, Y+13	; 0x0d
    500c:	9e 85       	ldd	r25, Y+14	; 0x0e
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	4a ef       	ldi	r20, 0xFA	; 250
    5014:	54 e4       	ldi	r21, 0x44	; 68
    5016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	8f 83       	std	Y+7, r24	; 0x07
    5020:	98 87       	std	Y+8, r25	; 0x08
    5022:	a9 87       	std	Y+9, r26	; 0x09
    5024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5026:	6f 81       	ldd	r22, Y+7	; 0x07
    5028:	78 85       	ldd	r23, Y+8	; 0x08
    502a:	89 85       	ldd	r24, Y+9	; 0x09
    502c:	9a 85       	ldd	r25, Y+10	; 0x0a
    502e:	20 e0       	ldi	r18, 0x00	; 0
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	40 e8       	ldi	r20, 0x80	; 128
    5034:	5f e3       	ldi	r21, 0x3F	; 63
    5036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503a:	88 23       	and	r24, r24
    503c:	2c f4       	brge	.+10     	; 0x5048 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	9e 83       	std	Y+6, r25	; 0x06
    5044:	8d 83       	std	Y+5, r24	; 0x05
    5046:	3f c0       	rjmp	.+126    	; 0x50c6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    5048:	6f 81       	ldd	r22, Y+7	; 0x07
    504a:	78 85       	ldd	r23, Y+8	; 0x08
    504c:	89 85       	ldd	r24, Y+9	; 0x09
    504e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	3f ef       	ldi	r19, 0xFF	; 255
    5054:	4f e7       	ldi	r20, 0x7F	; 127
    5056:	57 e4       	ldi	r21, 0x47	; 71
    5058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    505c:	18 16       	cp	r1, r24
    505e:	4c f5       	brge	.+82     	; 0x50b2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5060:	6b 85       	ldd	r22, Y+11	; 0x0b
    5062:	7c 85       	ldd	r23, Y+12	; 0x0c
    5064:	8d 85       	ldd	r24, Y+13	; 0x0d
    5066:	9e 85       	ldd	r25, Y+14	; 0x0e
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	40 e2       	ldi	r20, 0x20	; 32
    506e:	51 e4       	ldi	r21, 0x41	; 65
    5070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5074:	dc 01       	movw	r26, r24
    5076:	cb 01       	movw	r24, r22
    5078:	bc 01       	movw	r22, r24
    507a:	cd 01       	movw	r24, r26
    507c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	9e 83       	std	Y+6, r25	; 0x06
    5086:	8d 83       	std	Y+5, r24	; 0x05
    5088:	0f c0       	rjmp	.+30     	; 0x50a8 <LCD_displayCharacter+0x39a>
    508a:	88 ec       	ldi	r24, 0xC8	; 200
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	9c 83       	std	Y+4, r25	; 0x04
    5090:	8b 83       	std	Y+3, r24	; 0x03
    5092:	8b 81       	ldd	r24, Y+3	; 0x03
    5094:	9c 81       	ldd	r25, Y+4	; 0x04
    5096:	01 97       	sbiw	r24, 0x01	; 1
    5098:	f1 f7       	brne	.-4      	; 0x5096 <LCD_displayCharacter+0x388>
    509a:	9c 83       	std	Y+4, r25	; 0x04
    509c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    509e:	8d 81       	ldd	r24, Y+5	; 0x05
    50a0:	9e 81       	ldd	r25, Y+6	; 0x06
    50a2:	01 97       	sbiw	r24, 0x01	; 1
    50a4:	9e 83       	std	Y+6, r25	; 0x06
    50a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50a8:	8d 81       	ldd	r24, Y+5	; 0x05
    50aa:	9e 81       	ldd	r25, Y+6	; 0x06
    50ac:	00 97       	sbiw	r24, 0x00	; 0
    50ae:	69 f7       	brne	.-38     	; 0x508a <LCD_displayCharacter+0x37c>
    50b0:	14 c0       	rjmp	.+40     	; 0x50da <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b2:	6f 81       	ldd	r22, Y+7	; 0x07
    50b4:	78 85       	ldd	r23, Y+8	; 0x08
    50b6:	89 85       	ldd	r24, Y+9	; 0x09
    50b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	9e 83       	std	Y+6, r25	; 0x06
    50c4:	8d 83       	std	Y+5, r24	; 0x05
    50c6:	8d 81       	ldd	r24, Y+5	; 0x05
    50c8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ca:	9a 83       	std	Y+2, r25	; 0x02
    50cc:	89 83       	std	Y+1, r24	; 0x01
    50ce:	89 81       	ldd	r24, Y+1	; 0x01
    50d0:	9a 81       	ldd	r25, Y+2	; 0x02
    50d2:	01 97       	sbiw	r24, 0x01	; 1
    50d4:	f1 f7       	brne	.-4      	; 0x50d2 <LCD_displayCharacter+0x3c4>
    50d6:	9a 83       	std	Y+2, r25	; 0x02
    50d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    50da:	e9 96       	adiw	r28, 0x39	; 57
    50dc:	0f b6       	in	r0, 0x3f	; 63
    50de:	f8 94       	cli
    50e0:	de bf       	out	0x3e, r29	; 62
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	cd bf       	out	0x3d, r28	; 61
    50e6:	cf 91       	pop	r28
    50e8:	df 91       	pop	r29
    50ea:	08 95       	ret

000050ec <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    50ec:	df 93       	push	r29
    50ee:	cf 93       	push	r28
    50f0:	00 d0       	rcall	.+0      	; 0x50f2 <LCD_displayString+0x6>
    50f2:	0f 92       	push	r0
    50f4:	cd b7       	in	r28, 0x3d	; 61
    50f6:	de b7       	in	r29, 0x3e	; 62
    50f8:	9b 83       	std	Y+3, r25	; 0x03
    50fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    50fc:	19 82       	std	Y+1, r1	; 0x01
    50fe:	0e c0       	rjmp	.+28     	; 0x511c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    5100:	89 81       	ldd	r24, Y+1	; 0x01
    5102:	28 2f       	mov	r18, r24
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	8a 81       	ldd	r24, Y+2	; 0x02
    5108:	9b 81       	ldd	r25, Y+3	; 0x03
    510a:	fc 01       	movw	r30, r24
    510c:	e2 0f       	add	r30, r18
    510e:	f3 1f       	adc	r31, r19
    5110:	80 81       	ld	r24, Z
    5112:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <LCD_displayCharacter>
		i++;
    5116:	89 81       	ldd	r24, Y+1	; 0x01
    5118:	8f 5f       	subi	r24, 0xFF	; 255
    511a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    511c:	89 81       	ldd	r24, Y+1	; 0x01
    511e:	28 2f       	mov	r18, r24
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	8a 81       	ldd	r24, Y+2	; 0x02
    5124:	9b 81       	ldd	r25, Y+3	; 0x03
    5126:	fc 01       	movw	r30, r24
    5128:	e2 0f       	add	r30, r18
    512a:	f3 1f       	adc	r31, r19
    512c:	80 81       	ld	r24, Z
    512e:	88 23       	and	r24, r24
    5130:	39 f7       	brne	.-50     	; 0x5100 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	0f 90       	pop	r0
    5138:	cf 91       	pop	r28
    513a:	df 91       	pop	r29
    513c:	08 95       	ret

0000513e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    513e:	df 93       	push	r29
    5140:	cf 93       	push	r28
    5142:	00 d0       	rcall	.+0      	; 0x5144 <LCD_moveCursor+0x6>
    5144:	00 d0       	rcall	.+0      	; 0x5146 <LCD_moveCursor+0x8>
    5146:	0f 92       	push	r0
    5148:	cd b7       	in	r28, 0x3d	; 61
    514a:	de b7       	in	r29, 0x3e	; 62
    514c:	8a 83       	std	Y+2, r24	; 0x02
    514e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    5150:	8a 81       	ldd	r24, Y+2	; 0x02
    5152:	28 2f       	mov	r18, r24
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	3d 83       	std	Y+5, r19	; 0x05
    5158:	2c 83       	std	Y+4, r18	; 0x04
    515a:	8c 81       	ldd	r24, Y+4	; 0x04
    515c:	9d 81       	ldd	r25, Y+5	; 0x05
    515e:	81 30       	cpi	r24, 0x01	; 1
    5160:	91 05       	cpc	r25, r1
    5162:	c1 f0       	breq	.+48     	; 0x5194 <LCD_moveCursor+0x56>
    5164:	2c 81       	ldd	r18, Y+4	; 0x04
    5166:	3d 81       	ldd	r19, Y+5	; 0x05
    5168:	22 30       	cpi	r18, 0x02	; 2
    516a:	31 05       	cpc	r19, r1
    516c:	2c f4       	brge	.+10     	; 0x5178 <LCD_moveCursor+0x3a>
    516e:	8c 81       	ldd	r24, Y+4	; 0x04
    5170:	9d 81       	ldd	r25, Y+5	; 0x05
    5172:	00 97       	sbiw	r24, 0x00	; 0
    5174:	61 f0       	breq	.+24     	; 0x518e <LCD_moveCursor+0x50>
    5176:	19 c0       	rjmp	.+50     	; 0x51aa <LCD_moveCursor+0x6c>
    5178:	2c 81       	ldd	r18, Y+4	; 0x04
    517a:	3d 81       	ldd	r19, Y+5	; 0x05
    517c:	22 30       	cpi	r18, 0x02	; 2
    517e:	31 05       	cpc	r19, r1
    5180:	69 f0       	breq	.+26     	; 0x519c <LCD_moveCursor+0x5e>
    5182:	8c 81       	ldd	r24, Y+4	; 0x04
    5184:	9d 81       	ldd	r25, Y+5	; 0x05
    5186:	83 30       	cpi	r24, 0x03	; 3
    5188:	91 05       	cpc	r25, r1
    518a:	61 f0       	breq	.+24     	; 0x51a4 <LCD_moveCursor+0x66>
    518c:	0e c0       	rjmp	.+28     	; 0x51aa <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    518e:	8b 81       	ldd	r24, Y+3	; 0x03
    5190:	89 83       	std	Y+1, r24	; 0x01
    5192:	0b c0       	rjmp	.+22     	; 0x51aa <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    5194:	8b 81       	ldd	r24, Y+3	; 0x03
    5196:	80 5c       	subi	r24, 0xC0	; 192
    5198:	89 83       	std	Y+1, r24	; 0x01
    519a:	07 c0       	rjmp	.+14     	; 0x51aa <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    519c:	8b 81       	ldd	r24, Y+3	; 0x03
    519e:	80 5f       	subi	r24, 0xF0	; 240
    51a0:	89 83       	std	Y+1, r24	; 0x01
    51a2:	03 c0       	rjmp	.+6      	; 0x51aa <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    51a4:	8b 81       	ldd	r24, Y+3	; 0x03
    51a6:	80 5b       	subi	r24, 0xB0	; 176
    51a8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    51aa:	89 81       	ldd	r24, Y+1	; 0x01
    51ac:	80 68       	ori	r24, 0x80	; 128
    51ae:	0e 94 98 24 	call	0x4930	; 0x4930 <LCD_sendCommand>
}
    51b2:	0f 90       	pop	r0
    51b4:	0f 90       	pop	r0
    51b6:	0f 90       	pop	r0
    51b8:	0f 90       	pop	r0
    51ba:	0f 90       	pop	r0
    51bc:	cf 91       	pop	r28
    51be:	df 91       	pop	r29
    51c0:	08 95       	ret

000051c2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    51c2:	df 93       	push	r29
    51c4:	cf 93       	push	r28
    51c6:	00 d0       	rcall	.+0      	; 0x51c8 <LCD_displayStringRowColumn+0x6>
    51c8:	00 d0       	rcall	.+0      	; 0x51ca <LCD_displayStringRowColumn+0x8>
    51ca:	cd b7       	in	r28, 0x3d	; 61
    51cc:	de b7       	in	r29, 0x3e	; 62
    51ce:	89 83       	std	Y+1, r24	; 0x01
    51d0:	6a 83       	std	Y+2, r22	; 0x02
    51d2:	5c 83       	std	Y+4, r21	; 0x04
    51d4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	6a 81       	ldd	r22, Y+2	; 0x02
    51da:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    51de:	8b 81       	ldd	r24, Y+3	; 0x03
    51e0:	9c 81       	ldd	r25, Y+4	; 0x04
    51e2:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
}
    51e6:	0f 90       	pop	r0
    51e8:	0f 90       	pop	r0
    51ea:	0f 90       	pop	r0
    51ec:	0f 90       	pop	r0
    51ee:	cf 91       	pop	r28
    51f0:	df 91       	pop	r29
    51f2:	08 95       	ret

000051f4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    51f4:	df 93       	push	r29
    51f6:	cf 93       	push	r28
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
    51fc:	62 97       	sbiw	r28, 0x12	; 18
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	cd bf       	out	0x3d, r28	; 61
    5208:	9a 8b       	std	Y+18, r25	; 0x12
    520a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    520c:	89 89       	ldd	r24, Y+17	; 0x11
    520e:	9a 89       	ldd	r25, Y+18	; 0x12
    5210:	9e 01       	movw	r18, r28
    5212:	2f 5f       	subi	r18, 0xFF	; 255
    5214:	3f 4f       	sbci	r19, 0xFF	; 255
    5216:	b9 01       	movw	r22, r18
    5218:	4a e0       	ldi	r20, 0x0A	; 10
    521a:	50 e0       	ldi	r21, 0x00	; 0
    521c:	0e 94 bd 2b 	call	0x577a	; 0x577a <itoa>
   LCD_displayString(buff); /* Display the string */
    5220:	ce 01       	movw	r24, r28
    5222:	01 96       	adiw	r24, 0x01	; 1
    5224:	0e 94 76 28 	call	0x50ec	; 0x50ec <LCD_displayString>
}
    5228:	62 96       	adiw	r28, 0x12	; 18
    522a:	0f b6       	in	r0, 0x3f	; 63
    522c:	f8 94       	cli
    522e:	de bf       	out	0x3e, r29	; 62
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	cd bf       	out	0x3d, r28	; 61
    5234:	cf 91       	pop	r28
    5236:	df 91       	pop	r29
    5238:	08 95       	ret

0000523a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    523a:	df 93       	push	r29
    523c:	cf 93       	push	r28
    523e:	cd b7       	in	r28, 0x3d	; 61
    5240:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	0e 94 98 24 	call	0x4930	; 0x4930 <LCD_sendCommand>
}
    5248:	cf 91       	pop	r28
    524a:	df 91       	pop	r29
    524c:	08 95       	ret

0000524e <Timer1_init>:
 * Description: Function to initialize the Timer driver
 * Input: pointer to the configuration structure with type Timer1_ConfigType
 * Return: Void
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    524e:	df 93       	push	r29
    5250:	cf 93       	push	r28
    5252:	00 d0       	rcall	.+0      	; 0x5254 <Timer1_init+0x6>
    5254:	cd b7       	in	r28, 0x3d	; 61
    5256:	de b7       	in	r29, 0x3e	; 62
    5258:	9a 83       	std	Y+2, r25	; 0x02
    525a:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    525c:	ef e4       	ldi	r30, 0x4F	; 79
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	8c e0       	ldi	r24, 0x0C	; 12
    5262:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    5264:	af e4       	ldi	r26, 0x4F	; 79
    5266:	b0 e0       	ldi	r27, 0x00	; 0
    5268:	ef e4       	ldi	r30, 0x4F	; 79
    526a:	f0 e0       	ldi	r31, 0x00	; 0
    526c:	80 81       	ld	r24, Z
    526e:	98 2f       	mov	r25, r24
    5270:	9c 7f       	andi	r25, 0xFC	; 252
    5272:	e9 81       	ldd	r30, Y+1	; 0x01
    5274:	fa 81       	ldd	r31, Y+2	; 0x02
    5276:	85 81       	ldd	r24, Z+5	; 0x05
    5278:	83 70       	andi	r24, 0x03	; 3
    527a:	89 2b       	or	r24, r25
    527c:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    527e:	ae e4       	ldi	r26, 0x4E	; 78
    5280:	b0 e0       	ldi	r27, 0x00	; 0
    5282:	ee e4       	ldi	r30, 0x4E	; 78
    5284:	f0 e0       	ldi	r31, 0x00	; 0
    5286:	80 81       	ld	r24, Z
    5288:	28 2f       	mov	r18, r24
    528a:	27 7e       	andi	r18, 0xE7	; 231
    528c:	e9 81       	ldd	r30, Y+1	; 0x01
    528e:	fa 81       	ldd	r31, Y+2	; 0x02
    5290:	85 81       	ldd	r24, Z+5	; 0x05
    5292:	88 2f       	mov	r24, r24
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	8c 70       	andi	r24, 0x0C	; 12
    5298:	90 70       	andi	r25, 0x00	; 0
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	82 2b       	or	r24, r18
    52a0:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    52a2:	ac e4       	ldi	r26, 0x4C	; 76
    52a4:	b0 e0       	ldi	r27, 0x00	; 0
    52a6:	e9 81       	ldd	r30, Y+1	; 0x01
    52a8:	fa 81       	ldd	r31, Y+2	; 0x02
    52aa:	80 81       	ld	r24, Z
    52ac:	91 81       	ldd	r25, Z+1	; 0x01
    52ae:	11 96       	adiw	r26, 0x01	; 1
    52b0:	9c 93       	st	X, r25
    52b2:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    52b4:	e9 81       	ldd	r30, Y+1	; 0x01
    52b6:	fa 81       	ldd	r31, Y+2	; 0x02
    52b8:	85 81       	ldd	r24, Z+5	; 0x05
    52ba:	88 23       	and	r24, r24
    52bc:	29 f4       	brne	.+10     	; 0x52c8 <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    52be:	e9 e5       	ldi	r30, 0x59	; 89
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	84 e0       	ldi	r24, 0x04	; 4
    52c4:	80 83       	st	Z, r24
    52c6:	12 c0       	rjmp	.+36     	; 0x52ec <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    52c8:	e9 81       	ldd	r30, Y+1	; 0x01
    52ca:	fa 81       	ldd	r31, Y+2	; 0x02
    52cc:	85 81       	ldd	r24, Z+5	; 0x05
    52ce:	84 30       	cpi	r24, 0x04	; 4
    52d0:	69 f4       	brne	.+26     	; 0x52ec <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    52d2:	aa e4       	ldi	r26, 0x4A	; 74
    52d4:	b0 e0       	ldi	r27, 0x00	; 0
    52d6:	e9 81       	ldd	r30, Y+1	; 0x01
    52d8:	fa 81       	ldd	r31, Y+2	; 0x02
    52da:	82 81       	ldd	r24, Z+2	; 0x02
    52dc:	93 81       	ldd	r25, Z+3	; 0x03
    52de:	11 96       	adiw	r26, 0x01	; 1
    52e0:	9c 93       	st	X, r25
    52e2:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    52e4:	e9 e5       	ldi	r30, 0x59	; 89
    52e6:	f0 e0       	ldi	r31, 0x00	; 0
    52e8:	80 e1       	ldi	r24, 0x10	; 16
    52ea:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    52ec:	ae e4       	ldi	r26, 0x4E	; 78
    52ee:	b0 e0       	ldi	r27, 0x00	; 0
    52f0:	ee e4       	ldi	r30, 0x4E	; 78
    52f2:	f0 e0       	ldi	r31, 0x00	; 0
    52f4:	80 81       	ld	r24, Z
    52f6:	98 2f       	mov	r25, r24
    52f8:	98 7f       	andi	r25, 0xF8	; 248
    52fa:	e9 81       	ldd	r30, Y+1	; 0x01
    52fc:	fa 81       	ldd	r31, Y+2	; 0x02
    52fe:	84 81       	ldd	r24, Z+4	; 0x04
    5300:	89 2b       	or	r24, r25
    5302:	8c 93       	st	X, r24
}
    5304:	0f 90       	pop	r0
    5306:	0f 90       	pop	r0
    5308:	cf 91       	pop	r28
    530a:	df 91       	pop	r29
    530c:	08 95       	ret

0000530e <Timer1_deInit>:
 * Description: Function to disable the Timer1
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_deInit(void)
{
    530e:	df 93       	push	r29
    5310:	cf 93       	push	r28
    5312:	cd b7       	in	r28, 0x3d	; 61
    5314:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0 ;
    5316:	ef e4       	ldi	r30, 0x4F	; 79
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	10 82       	st	Z, r1

	TCCR1B = 0 ;
    531c:	ee e4       	ldi	r30, 0x4E	; 78
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    5320:	10 82       	st	Z, r1

	TIMSK = 0 ;
    5322:	e9 e5       	ldi	r30, 0x59	; 89
    5324:	f0 e0       	ldi	r31, 0x00	; 0
    5326:	10 82       	st	Z, r1

}
    5328:	cf 91       	pop	r28
    532a:	df 91       	pop	r29
    532c:	08 95       	ret

0000532e <Timer1_setCallBack>:
 * Description: set the Call Back function address
 * Input: Void
 * Return: Void
 *******************************************************************************/
void Timer1_setCallBack(void (*a_ptr)(void))
{
    532e:	df 93       	push	r29
    5330:	cf 93       	push	r28
    5332:	00 d0       	rcall	.+0      	; 0x5334 <Timer1_setCallBack+0x6>
    5334:	cd b7       	in	r28, 0x3d	; 61
    5336:	de b7       	in	r29, 0x3e	; 62
    5338:	9a 83       	std	Y+2, r25	; 0x02
    533a:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    533c:	89 81       	ldd	r24, Y+1	; 0x01
    533e:	9a 81       	ldd	r25, Y+2	; 0x02
    5340:	90 93 0a 01 	sts	0x010A, r25
    5344:	80 93 09 01 	sts	0x0109, r24
}
    5348:	0f 90       	pop	r0
    534a:	0f 90       	pop	r0
    534c:	cf 91       	pop	r28
    534e:	df 91       	pop	r29
    5350:	08 95       	ret

00005352 <__vector_9>:

/*******************************************************************************
 *                    ISR (Interrupt Service Routines)                         *
 *******************************************************************************/
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    5352:	1f 92       	push	r1
    5354:	0f 92       	push	r0
    5356:	0f b6       	in	r0, 0x3f	; 63
    5358:	0f 92       	push	r0
    535a:	11 24       	eor	r1, r1
    535c:	2f 93       	push	r18
    535e:	3f 93       	push	r19
    5360:	4f 93       	push	r20
    5362:	5f 93       	push	r21
    5364:	6f 93       	push	r22
    5366:	7f 93       	push	r23
    5368:	8f 93       	push	r24
    536a:	9f 93       	push	r25
    536c:	af 93       	push	r26
    536e:	bf 93       	push	r27
    5370:	ef 93       	push	r30
    5372:	ff 93       	push	r31
    5374:	df 93       	push	r29
    5376:	cf 93       	push	r28
    5378:	cd b7       	in	r28, 0x3d	; 61
    537a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    537c:	80 91 09 01 	lds	r24, 0x0109
    5380:	90 91 0a 01 	lds	r25, 0x010A
    5384:	00 97       	sbiw	r24, 0x00	; 0
    5386:	29 f0       	breq	.+10     	; 0x5392 <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    5388:	e0 91 09 01 	lds	r30, 0x0109
    538c:	f0 91 0a 01 	lds	r31, 0x010A
    5390:	09 95       	icall
	}
}
    5392:	cf 91       	pop	r28
    5394:	df 91       	pop	r29
    5396:	ff 91       	pop	r31
    5398:	ef 91       	pop	r30
    539a:	bf 91       	pop	r27
    539c:	af 91       	pop	r26
    539e:	9f 91       	pop	r25
    53a0:	8f 91       	pop	r24
    53a2:	7f 91       	pop	r23
    53a4:	6f 91       	pop	r22
    53a6:	5f 91       	pop	r21
    53a8:	4f 91       	pop	r20
    53aa:	3f 91       	pop	r19
    53ac:	2f 91       	pop	r18
    53ae:	0f 90       	pop	r0
    53b0:	0f be       	out	0x3f, r0	; 63
    53b2:	0f 90       	pop	r0
    53b4:	1f 90       	pop	r1
    53b6:	18 95       	reti

000053b8 <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    53b8:	1f 92       	push	r1
    53ba:	0f 92       	push	r0
    53bc:	0f b6       	in	r0, 0x3f	; 63
    53be:	0f 92       	push	r0
    53c0:	11 24       	eor	r1, r1
    53c2:	2f 93       	push	r18
    53c4:	3f 93       	push	r19
    53c6:	4f 93       	push	r20
    53c8:	5f 93       	push	r21
    53ca:	6f 93       	push	r22
    53cc:	7f 93       	push	r23
    53ce:	8f 93       	push	r24
    53d0:	9f 93       	push	r25
    53d2:	af 93       	push	r26
    53d4:	bf 93       	push	r27
    53d6:	ef 93       	push	r30
    53d8:	ff 93       	push	r31
    53da:	df 93       	push	r29
    53dc:	cf 93       	push	r28
    53de:	cd b7       	in	r28, 0x3d	; 61
    53e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    53e2:	80 91 09 01 	lds	r24, 0x0109
    53e6:	90 91 0a 01 	lds	r25, 0x010A
    53ea:	00 97       	sbiw	r24, 0x00	; 0
    53ec:	29 f0       	breq	.+10     	; 0x53f8 <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    53ee:	e0 91 09 01 	lds	r30, 0x0109
    53f2:	f0 91 0a 01 	lds	r31, 0x010A
    53f6:	09 95       	icall
	}
}
    53f8:	cf 91       	pop	r28
    53fa:	df 91       	pop	r29
    53fc:	ff 91       	pop	r31
    53fe:	ef 91       	pop	r30
    5400:	bf 91       	pop	r27
    5402:	af 91       	pop	r26
    5404:	9f 91       	pop	r25
    5406:	8f 91       	pop	r24
    5408:	7f 91       	pop	r23
    540a:	6f 91       	pop	r22
    540c:	5f 91       	pop	r21
    540e:	4f 91       	pop	r20
    5410:	3f 91       	pop	r19
    5412:	2f 91       	pop	r18
    5414:	0f 90       	pop	r0
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	0f 90       	pop	r0
    541a:	1f 90       	pop	r1
    541c:	18 95       	reti

0000541e <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    541e:	1f 92       	push	r1
    5420:	0f 92       	push	r0
    5422:	0f b6       	in	r0, 0x3f	; 63
    5424:	0f 92       	push	r0
    5426:	11 24       	eor	r1, r1
    5428:	2f 93       	push	r18
    542a:	3f 93       	push	r19
    542c:	4f 93       	push	r20
    542e:	5f 93       	push	r21
    5430:	6f 93       	push	r22
    5432:	7f 93       	push	r23
    5434:	8f 93       	push	r24
    5436:	9f 93       	push	r25
    5438:	af 93       	push	r26
    543a:	bf 93       	push	r27
    543c:	ef 93       	push	r30
    543e:	ff 93       	push	r31
    5440:	df 93       	push	r29
    5442:	cf 93       	push	r28
    5444:	cd b7       	in	r28, 0x3d	; 61
    5446:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    5448:	80 91 09 01 	lds	r24, 0x0109
    544c:	90 91 0a 01 	lds	r25, 0x010A
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	29 f0       	breq	.+10     	; 0x545e <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    5454:	e0 91 09 01 	lds	r30, 0x0109
    5458:	f0 91 0a 01 	lds	r31, 0x010A
    545c:	09 95       	icall
	}
}
    545e:	cf 91       	pop	r28
    5460:	df 91       	pop	r29
    5462:	ff 91       	pop	r31
    5464:	ef 91       	pop	r30
    5466:	bf 91       	pop	r27
    5468:	af 91       	pop	r26
    546a:	9f 91       	pop	r25
    546c:	8f 91       	pop	r24
    546e:	7f 91       	pop	r23
    5470:	6f 91       	pop	r22
    5472:	5f 91       	pop	r21
    5474:	4f 91       	pop	r20
    5476:	3f 91       	pop	r19
    5478:	2f 91       	pop	r18
    547a:	0f 90       	pop	r0
    547c:	0f be       	out	0x3f, r0	; 63
    547e:	0f 90       	pop	r0
    5480:	1f 90       	pop	r1
    5482:	18 95       	reti

00005484 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    5484:	df 93       	push	r29
    5486:	cf 93       	push	r28
    5488:	00 d0       	rcall	.+0      	; 0x548a <UART_init+0x6>
    548a:	00 d0       	rcall	.+0      	; 0x548c <UART_init+0x8>
    548c:	cd b7       	in	r28, 0x3d	; 61
    548e:	de b7       	in	r29, 0x3e	; 62
    5490:	9c 83       	std	Y+4, r25	; 0x04
    5492:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr = 0 ; /* Variable For Baud Rate Register */
    5494:	1a 82       	std	Y+2, r1	; 0x02
    5496:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X) ; /* Double Speed of UART */
    5498:	eb e2       	ldi	r30, 0x2B	; 43
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	82 e0       	ldi	r24, 0x02	; 2
    549e:	80 83       	st	Z, r24
	
	UCSRB = (1<<TXEN) | (1<<RXEN) ; /* Enable Receive & Transmit */
    54a0:	ea e2       	ldi	r30, 0x2A	; 42
    54a2:	f0 e0       	ldi	r31, 0x00	; 0
    54a4:	88 e1       	ldi	r24, 0x18	; 24
    54a6:	80 83       	st	Z, r24

	/* Configure UCSZ2 By Desired Data Bits */
	UCSRB = (UCSRB & 0xFB) | (GET_BIT(Config_Ptr->bit_data , 2)<<2) ;
    54a8:	aa e2       	ldi	r26, 0x2A	; 42
    54aa:	b0 e0       	ldi	r27, 0x00	; 0
    54ac:	ea e2       	ldi	r30, 0x2A	; 42
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	80 81       	ld	r24, Z
    54b2:	98 2f       	mov	r25, r24
    54b4:	9b 7f       	andi	r25, 0xFB	; 251
    54b6:	eb 81       	ldd	r30, Y+3	; 0x03
    54b8:	fc 81       	ldd	r31, Y+4	; 0x04
    54ba:	80 81       	ld	r24, Z
    54bc:	84 70       	andi	r24, 0x04	; 4
    54be:	89 2b       	or	r24, r25
    54c0:	8c 93       	st	X, r24

	UCSRC = (1<<URSEL) ; /* Set This Bit to Write in UCSRC Reg. */
    54c2:	e0 e4       	ldi	r30, 0x40	; 64
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 e8       	ldi	r24, 0x80	; 128
    54c8:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity<<4) ; /* Configure Parity Bit */
    54ca:	a0 e4       	ldi	r26, 0x40	; 64
    54cc:	b0 e0       	ldi	r27, 0x00	; 0
    54ce:	e0 e4       	ldi	r30, 0x40	; 64
    54d0:	f0 e0       	ldi	r31, 0x00	; 0
    54d2:	80 81       	ld	r24, Z
    54d4:	28 2f       	mov	r18, r24
    54d6:	2f 7c       	andi	r18, 0xCF	; 207
    54d8:	eb 81       	ldd	r30, Y+3	; 0x03
    54da:	fc 81       	ldd	r31, Y+4	; 0x04
    54dc:	81 81       	ldd	r24, Z+1	; 0x01
    54de:	88 2f       	mov	r24, r24
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	82 95       	swap	r24
    54e4:	92 95       	swap	r25
    54e6:	90 7f       	andi	r25, 0xF0	; 240
    54e8:	98 27       	eor	r25, r24
    54ea:	80 7f       	andi	r24, 0xF0	; 240
    54ec:	98 27       	eor	r25, r24
    54ee:	82 2b       	or	r24, r18
    54f0:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit<<3); /* Configure Stop Bit */
    54f2:	a0 e4       	ldi	r26, 0x40	; 64
    54f4:	b0 e0       	ldi	r27, 0x00	; 0
    54f6:	e0 e4       	ldi	r30, 0x40	; 64
    54f8:	f0 e0       	ldi	r31, 0x00	; 0
    54fa:	80 81       	ld	r24, Z
    54fc:	28 2f       	mov	r18, r24
    54fe:	27 7f       	andi	r18, 0xF7	; 247
    5500:	eb 81       	ldd	r30, Y+3	; 0x03
    5502:	fc 81       	ldd	r31, Y+4	; 0x04
    5504:	82 81       	ldd	r24, Z+2	; 0x02
    5506:	88 2f       	mov	r24, r24
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	88 0f       	add	r24, r24
    550c:	99 1f       	adc	r25, r25
    550e:	88 0f       	add	r24, r24
    5510:	99 1f       	adc	r25, r25
    5512:	88 0f       	add	r24, r24
    5514:	99 1f       	adc	r25, r25
    5516:	82 2b       	or	r24, r18
    5518:	8c 93       	st	X, r24

	/* Configure UCSZ0:1 By Desired Data Bits */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr->bit_data & 0x03)<< 1 ) ;
    551a:	a0 e4       	ldi	r26, 0x40	; 64
    551c:	b0 e0       	ldi	r27, 0x00	; 0
    551e:	e0 e4       	ldi	r30, 0x40	; 64
    5520:	f0 e0       	ldi	r31, 0x00	; 0
    5522:	80 81       	ld	r24, Z
    5524:	28 2f       	mov	r18, r24
    5526:	29 7f       	andi	r18, 0xF9	; 249
    5528:	eb 81       	ldd	r30, Y+3	; 0x03
    552a:	fc 81       	ldd	r31, Y+4	; 0x04
    552c:	80 81       	ld	r24, Z
    552e:	88 2f       	mov	r24, r24
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	83 70       	andi	r24, 0x03	; 3
    5534:	90 70       	andi	r25, 0x00	; 0
    5536:	88 0f       	add	r24, r24
    5538:	99 1f       	adc	r25, r25
    553a:	82 2b       	or	r24, r18
    553c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr = (uint16)((F_CPU / (8UL * Config_Ptr->baud_rate)) - 1) ;
    553e:	eb 81       	ldd	r30, Y+3	; 0x03
    5540:	fc 81       	ldd	r31, Y+4	; 0x04
    5542:	83 81       	ldd	r24, Z+3	; 0x03
    5544:	94 81       	ldd	r25, Z+4	; 0x04
    5546:	a5 81       	ldd	r26, Z+5	; 0x05
    5548:	b6 81       	ldd	r27, Z+6	; 0x06
    554a:	88 0f       	add	r24, r24
    554c:	99 1f       	adc	r25, r25
    554e:	aa 1f       	adc	r26, r26
    5550:	bb 1f       	adc	r27, r27
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	aa 1f       	adc	r26, r26
    5558:	bb 1f       	adc	r27, r27
    555a:	88 0f       	add	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	aa 1f       	adc	r26, r26
    5560:	bb 1f       	adc	r27, r27
    5562:	9c 01       	movw	r18, r24
    5564:	ad 01       	movw	r20, r26
    5566:	80 e0       	ldi	r24, 0x00	; 0
    5568:	92 e1       	ldi	r25, 0x12	; 18
    556a:	aa e7       	ldi	r26, 0x7A	; 122
    556c:	b0 e0       	ldi	r27, 0x00	; 0
    556e:	bc 01       	movw	r22, r24
    5570:	cd 01       	movw	r24, r26
    5572:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__udivmodsi4>
    5576:	da 01       	movw	r26, r20
    5578:	c9 01       	movw	r24, r18
    557a:	01 97       	sbiw	r24, 0x01	; 1
    557c:	9a 83       	std	Y+2, r25	; 0x02
    557e:	89 83       	std	Y+1, r24	; 0x01

	/* Configure UBRR Reg with Desired Baud Rate */
	UBRRH = ubrr>>8 ;
    5580:	e0 e4       	ldi	r30, 0x40	; 64
    5582:	f0 e0       	ldi	r31, 0x00	; 0
    5584:	89 81       	ldd	r24, Y+1	; 0x01
    5586:	9a 81       	ldd	r25, Y+2	; 0x02
    5588:	89 2f       	mov	r24, r25
    558a:	99 27       	eor	r25, r25
    558c:	80 83       	st	Z, r24
	UBRRL = ubrr ;
    558e:	e9 e2       	ldi	r30, 0x29	; 41
    5590:	f0 e0       	ldi	r31, 0x00	; 0
    5592:	89 81       	ldd	r24, Y+1	; 0x01
    5594:	80 83       	st	Z, r24

}
    5596:	0f 90       	pop	r0
    5598:	0f 90       	pop	r0
    559a:	0f 90       	pop	r0
    559c:	0f 90       	pop	r0
    559e:	cf 91       	pop	r28
    55a0:	df 91       	pop	r29
    55a2:	08 95       	ret

000055a4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    55a4:	df 93       	push	r29
    55a6:	cf 93       	push	r28
    55a8:	0f 92       	push	r0
    55aa:	cd b7       	in	r28, 0x3d	; 61
    55ac:	de b7       	in	r29, 0x3e	; 62
    55ae:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    55b0:	eb e2       	ldi	r30, 0x2B	; 43
    55b2:	f0 e0       	ldi	r31, 0x00	; 0
    55b4:	80 81       	ld	r24, Z
    55b6:	88 2f       	mov	r24, r24
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	80 72       	andi	r24, 0x20	; 32
    55bc:	90 70       	andi	r25, 0x00	; 0
    55be:	00 97       	sbiw	r24, 0x00	; 0
    55c0:	b9 f3       	breq	.-18     	; 0x55b0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    55c2:	ec e2       	ldi	r30, 0x2C	; 44
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    55ca:	0f 90       	pop	r0
    55cc:	cf 91       	pop	r28
    55ce:	df 91       	pop	r29
    55d0:	08 95       	ret

000055d2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    55d2:	df 93       	push	r29
    55d4:	cf 93       	push	r28
    55d6:	cd b7       	in	r28, 0x3d	; 61
    55d8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    55da:	eb e2       	ldi	r30, 0x2B	; 43
    55dc:	f0 e0       	ldi	r31, 0x00	; 0
    55de:	80 81       	ld	r24, Z
    55e0:	88 23       	and	r24, r24
    55e2:	dc f7       	brge	.-10     	; 0x55da <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    55e4:	ec e2       	ldi	r30, 0x2C	; 44
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	80 81       	ld	r24, Z
}
    55ea:	cf 91       	pop	r28
    55ec:	df 91       	pop	r29
    55ee:	08 95       	ret

000055f0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    55f0:	df 93       	push	r29
    55f2:	cf 93       	push	r28
    55f4:	00 d0       	rcall	.+0      	; 0x55f6 <UART_sendString+0x6>
    55f6:	0f 92       	push	r0
    55f8:	cd b7       	in	r28, 0x3d	; 61
    55fa:	de b7       	in	r29, 0x3e	; 62
    55fc:	9b 83       	std	Y+3, r25	; 0x03
    55fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5600:	19 82       	std	Y+1, r1	; 0x01
    5602:	0e c0       	rjmp	.+28     	; 0x5620 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    5604:	89 81       	ldd	r24, Y+1	; 0x01
    5606:	28 2f       	mov	r18, r24
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	8a 81       	ldd	r24, Y+2	; 0x02
    560c:	9b 81       	ldd	r25, Y+3	; 0x03
    560e:	fc 01       	movw	r30, r24
    5610:	e2 0f       	add	r30, r18
    5612:	f3 1f       	adc	r31, r19
    5614:	80 81       	ld	r24, Z
    5616:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <UART_sendByte>
		i++;
    561a:	89 81       	ldd	r24, Y+1	; 0x01
    561c:	8f 5f       	subi	r24, 0xFF	; 255
    561e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    5620:	89 81       	ldd	r24, Y+1	; 0x01
    5622:	28 2f       	mov	r18, r24
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	8a 81       	ldd	r24, Y+2	; 0x02
    5628:	9b 81       	ldd	r25, Y+3	; 0x03
    562a:	fc 01       	movw	r30, r24
    562c:	e2 0f       	add	r30, r18
    562e:	f3 1f       	adc	r31, r19
    5630:	80 81       	ld	r24, Z
    5632:	88 23       	and	r24, r24
    5634:	39 f7       	brne	.-50     	; 0x5604 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    5636:	0f 90       	pop	r0
    5638:	0f 90       	pop	r0
    563a:	0f 90       	pop	r0
    563c:	cf 91       	pop	r28
    563e:	df 91       	pop	r29
    5640:	08 95       	ret

00005642 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    5642:	0f 93       	push	r16
    5644:	1f 93       	push	r17
    5646:	df 93       	push	r29
    5648:	cf 93       	push	r28
    564a:	00 d0       	rcall	.+0      	; 0x564c <UART_receiveString+0xa>
    564c:	0f 92       	push	r0
    564e:	cd b7       	in	r28, 0x3d	; 61
    5650:	de b7       	in	r29, 0x3e	; 62
    5652:	9b 83       	std	Y+3, r25	; 0x03
    5654:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    5656:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    5658:	89 81       	ldd	r24, Y+1	; 0x01
    565a:	28 2f       	mov	r18, r24
    565c:	30 e0       	ldi	r19, 0x00	; 0
    565e:	8a 81       	ldd	r24, Y+2	; 0x02
    5660:	9b 81       	ldd	r25, Y+3	; 0x03
    5662:	8c 01       	movw	r16, r24
    5664:	02 0f       	add	r16, r18
    5666:	13 1f       	adc	r17, r19
    5668:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    566c:	f8 01       	movw	r30, r16
    566e:	80 83       	st	Z, r24
    5670:	0f c0       	rjmp	.+30     	; 0x5690 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    5672:	89 81       	ldd	r24, Y+1	; 0x01
    5674:	8f 5f       	subi	r24, 0xFF	; 255
    5676:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    5678:	89 81       	ldd	r24, Y+1	; 0x01
    567a:	28 2f       	mov	r18, r24
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	8a 81       	ldd	r24, Y+2	; 0x02
    5680:	9b 81       	ldd	r25, Y+3	; 0x03
    5682:	8c 01       	movw	r16, r24
    5684:	02 0f       	add	r16, r18
    5686:	13 1f       	adc	r17, r19
    5688:	0e 94 e9 2a 	call	0x55d2	; 0x55d2 <UART_recieveByte>
    568c:	f8 01       	movw	r30, r16
    568e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	28 2f       	mov	r18, r24
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	8a 81       	ldd	r24, Y+2	; 0x02
    5698:	9b 81       	ldd	r25, Y+3	; 0x03
    569a:	fc 01       	movw	r30, r24
    569c:	e2 0f       	add	r30, r18
    569e:	f3 1f       	adc	r31, r19
    56a0:	80 81       	ld	r24, Z
    56a2:	83 32       	cpi	r24, 0x23	; 35
    56a4:	31 f7       	brne	.-52     	; 0x5672 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    56a6:	89 81       	ldd	r24, Y+1	; 0x01
    56a8:	28 2f       	mov	r18, r24
    56aa:	30 e0       	ldi	r19, 0x00	; 0
    56ac:	8a 81       	ldd	r24, Y+2	; 0x02
    56ae:	9b 81       	ldd	r25, Y+3	; 0x03
    56b0:	fc 01       	movw	r30, r24
    56b2:	e2 0f       	add	r30, r18
    56b4:	f3 1f       	adc	r31, r19
    56b6:	10 82       	st	Z, r1
}
    56b8:	0f 90       	pop	r0
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	cf 91       	pop	r28
    56c0:	df 91       	pop	r29
    56c2:	1f 91       	pop	r17
    56c4:	0f 91       	pop	r16
    56c6:	08 95       	ret

000056c8 <__udivmodsi4>:
    56c8:	a1 e2       	ldi	r26, 0x21	; 33
    56ca:	1a 2e       	mov	r1, r26
    56cc:	aa 1b       	sub	r26, r26
    56ce:	bb 1b       	sub	r27, r27
    56d0:	fd 01       	movw	r30, r26
    56d2:	0d c0       	rjmp	.+26     	; 0x56ee <__udivmodsi4_ep>

000056d4 <__udivmodsi4_loop>:
    56d4:	aa 1f       	adc	r26, r26
    56d6:	bb 1f       	adc	r27, r27
    56d8:	ee 1f       	adc	r30, r30
    56da:	ff 1f       	adc	r31, r31
    56dc:	a2 17       	cp	r26, r18
    56de:	b3 07       	cpc	r27, r19
    56e0:	e4 07       	cpc	r30, r20
    56e2:	f5 07       	cpc	r31, r21
    56e4:	20 f0       	brcs	.+8      	; 0x56ee <__udivmodsi4_ep>
    56e6:	a2 1b       	sub	r26, r18
    56e8:	b3 0b       	sbc	r27, r19
    56ea:	e4 0b       	sbc	r30, r20
    56ec:	f5 0b       	sbc	r31, r21

000056ee <__udivmodsi4_ep>:
    56ee:	66 1f       	adc	r22, r22
    56f0:	77 1f       	adc	r23, r23
    56f2:	88 1f       	adc	r24, r24
    56f4:	99 1f       	adc	r25, r25
    56f6:	1a 94       	dec	r1
    56f8:	69 f7       	brne	.-38     	; 0x56d4 <__udivmodsi4_loop>
    56fa:	60 95       	com	r22
    56fc:	70 95       	com	r23
    56fe:	80 95       	com	r24
    5700:	90 95       	com	r25
    5702:	9b 01       	movw	r18, r22
    5704:	ac 01       	movw	r20, r24
    5706:	bd 01       	movw	r22, r26
    5708:	cf 01       	movw	r24, r30
    570a:	08 95       	ret

0000570c <__prologue_saves__>:
    570c:	2f 92       	push	r2
    570e:	3f 92       	push	r3
    5710:	4f 92       	push	r4
    5712:	5f 92       	push	r5
    5714:	6f 92       	push	r6
    5716:	7f 92       	push	r7
    5718:	8f 92       	push	r8
    571a:	9f 92       	push	r9
    571c:	af 92       	push	r10
    571e:	bf 92       	push	r11
    5720:	cf 92       	push	r12
    5722:	df 92       	push	r13
    5724:	ef 92       	push	r14
    5726:	ff 92       	push	r15
    5728:	0f 93       	push	r16
    572a:	1f 93       	push	r17
    572c:	cf 93       	push	r28
    572e:	df 93       	push	r29
    5730:	cd b7       	in	r28, 0x3d	; 61
    5732:	de b7       	in	r29, 0x3e	; 62
    5734:	ca 1b       	sub	r28, r26
    5736:	db 0b       	sbc	r29, r27
    5738:	0f b6       	in	r0, 0x3f	; 63
    573a:	f8 94       	cli
    573c:	de bf       	out	0x3e, r29	; 62
    573e:	0f be       	out	0x3f, r0	; 63
    5740:	cd bf       	out	0x3d, r28	; 61
    5742:	09 94       	ijmp

00005744 <__epilogue_restores__>:
    5744:	2a 88       	ldd	r2, Y+18	; 0x12
    5746:	39 88       	ldd	r3, Y+17	; 0x11
    5748:	48 88       	ldd	r4, Y+16	; 0x10
    574a:	5f 84       	ldd	r5, Y+15	; 0x0f
    574c:	6e 84       	ldd	r6, Y+14	; 0x0e
    574e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5750:	8c 84       	ldd	r8, Y+12	; 0x0c
    5752:	9b 84       	ldd	r9, Y+11	; 0x0b
    5754:	aa 84       	ldd	r10, Y+10	; 0x0a
    5756:	b9 84       	ldd	r11, Y+9	; 0x09
    5758:	c8 84       	ldd	r12, Y+8	; 0x08
    575a:	df 80       	ldd	r13, Y+7	; 0x07
    575c:	ee 80       	ldd	r14, Y+6	; 0x06
    575e:	fd 80       	ldd	r15, Y+5	; 0x05
    5760:	0c 81       	ldd	r16, Y+4	; 0x04
    5762:	1b 81       	ldd	r17, Y+3	; 0x03
    5764:	aa 81       	ldd	r26, Y+2	; 0x02
    5766:	b9 81       	ldd	r27, Y+1	; 0x01
    5768:	ce 0f       	add	r28, r30
    576a:	d1 1d       	adc	r29, r1
    576c:	0f b6       	in	r0, 0x3f	; 63
    576e:	f8 94       	cli
    5770:	de bf       	out	0x3e, r29	; 62
    5772:	0f be       	out	0x3f, r0	; 63
    5774:	cd bf       	out	0x3d, r28	; 61
    5776:	ed 01       	movw	r28, r26
    5778:	08 95       	ret

0000577a <itoa>:
    577a:	fb 01       	movw	r30, r22
    577c:	9f 01       	movw	r18, r30
    577e:	e8 94       	clt
    5780:	42 30       	cpi	r20, 0x02	; 2
    5782:	c4 f0       	brlt	.+48     	; 0x57b4 <itoa+0x3a>
    5784:	45 32       	cpi	r20, 0x25	; 37
    5786:	b4 f4       	brge	.+44     	; 0x57b4 <itoa+0x3a>
    5788:	4a 30       	cpi	r20, 0x0A	; 10
    578a:	29 f4       	brne	.+10     	; 0x5796 <itoa+0x1c>
    578c:	97 fb       	bst	r25, 7
    578e:	1e f4       	brtc	.+6      	; 0x5796 <itoa+0x1c>
    5790:	90 95       	com	r25
    5792:	81 95       	neg	r24
    5794:	9f 4f       	sbci	r25, 0xFF	; 255
    5796:	64 2f       	mov	r22, r20
    5798:	77 27       	eor	r23, r23
    579a:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <__udivmodhi4>
    579e:	80 5d       	subi	r24, 0xD0	; 208
    57a0:	8a 33       	cpi	r24, 0x3A	; 58
    57a2:	0c f0       	brlt	.+2      	; 0x57a6 <itoa+0x2c>
    57a4:	89 5d       	subi	r24, 0xD9	; 217
    57a6:	81 93       	st	Z+, r24
    57a8:	cb 01       	movw	r24, r22
    57aa:	00 97       	sbiw	r24, 0x00	; 0
    57ac:	a1 f7       	brne	.-24     	; 0x5796 <itoa+0x1c>
    57ae:	16 f4       	brtc	.+4      	; 0x57b4 <itoa+0x3a>
    57b0:	5d e2       	ldi	r21, 0x2D	; 45
    57b2:	51 93       	st	Z+, r21
    57b4:	10 82       	st	Z, r1
    57b6:	c9 01       	movw	r24, r18
    57b8:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <strrev>

000057bc <strrev>:
    57bc:	dc 01       	movw	r26, r24
    57be:	fc 01       	movw	r30, r24
    57c0:	67 2f       	mov	r22, r23
    57c2:	71 91       	ld	r23, Z+
    57c4:	77 23       	and	r23, r23
    57c6:	e1 f7       	brne	.-8      	; 0x57c0 <strrev+0x4>
    57c8:	32 97       	sbiw	r30, 0x02	; 2
    57ca:	04 c0       	rjmp	.+8      	; 0x57d4 <strrev+0x18>
    57cc:	7c 91       	ld	r23, X
    57ce:	6d 93       	st	X+, r22
    57d0:	70 83       	st	Z, r23
    57d2:	62 91       	ld	r22, -Z
    57d4:	ae 17       	cp	r26, r30
    57d6:	bf 07       	cpc	r27, r31
    57d8:	c8 f3       	brcs	.-14     	; 0x57cc <strrev+0x10>
    57da:	08 95       	ret

000057dc <__udivmodhi4>:
    57dc:	aa 1b       	sub	r26, r26
    57de:	bb 1b       	sub	r27, r27
    57e0:	51 e1       	ldi	r21, 0x11	; 17
    57e2:	07 c0       	rjmp	.+14     	; 0x57f2 <__udivmodhi4_ep>

000057e4 <__udivmodhi4_loop>:
    57e4:	aa 1f       	adc	r26, r26
    57e6:	bb 1f       	adc	r27, r27
    57e8:	a6 17       	cp	r26, r22
    57ea:	b7 07       	cpc	r27, r23
    57ec:	10 f0       	brcs	.+4      	; 0x57f2 <__udivmodhi4_ep>
    57ee:	a6 1b       	sub	r26, r22
    57f0:	b7 0b       	sbc	r27, r23

000057f2 <__udivmodhi4_ep>:
    57f2:	88 1f       	adc	r24, r24
    57f4:	99 1f       	adc	r25, r25
    57f6:	5a 95       	dec	r21
    57f8:	a9 f7       	brne	.-22     	; 0x57e4 <__udivmodhi4_loop>
    57fa:	80 95       	com	r24
    57fc:	90 95       	com	r25
    57fe:	bc 01       	movw	r22, r24
    5800:	cd 01       	movw	r24, r26
    5802:	08 95       	ret

00005804 <_exit>:
    5804:	f8 94       	cli

00005806 <__stop_program>:
    5806:	ff cf       	rjmp	.-2      	; 0x5806 <__stop_program>
